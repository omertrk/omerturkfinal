
omerturkfinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027938  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002934  08027ad0  08027ad0  00037ad0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a404  0802a404  00040454  2**0
                  CONTENTS
  4 .ARM          00000008  0802a404  0802a404  0003a404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a40c  0802a40c  00040454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a40c  0802a40c  0003a40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a414  0802a414  0003a414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000454  20000000  0802a418  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040454  2**0
                  CONTENTS
 10 .bss          000048a4  20000454  20000454  00040454  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004cf8  20004cf8  00040454  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040454  2**0
                  CONTENTS, READONLY
 13 .debug_info   00113dbb  00000000  00000000  00040484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00011a49  00000000  00000000  0015423f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005490  00000000  00000000  00165c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005210  00000000  00000000  0016b118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034cea  00000000  00000000  00170328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005caa2  00000000  00000000  001a5012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00196764  00000000  00000000  00201ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00398218  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00019ac8  00000000  00000000  00398268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000454 	.word	0x20000454
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08027ab0 	.word	0x08027ab0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000458 	.word	0x20000458
 80001cc:	08027ab0 	.word	0x08027ab0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Z15LIS3DSH_WriteIOhPhh>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010c6:	f008 fc39 	bl	800993c <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010d4:	f00a fbf5 	bl	800b8c2 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	230a      	movs	r3, #10
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010e2:	f00a fbee 	bl	800b8c2 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010ec:	f008 fc26 	bl	800993c <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	20000470 	.word	0x20000470

08001100 <_Z14LIS3DSH_ReadIOhPhh>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001116:	b2db      	uxtb	r3, r3
 8001118:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 800111a:	2200      	movs	r2, #0
 800111c:	2108      	movs	r1, #8
 800111e:	4818      	ldr	r0, [pc, #96]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001120:	f008 fc0c 	bl	800993c <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8001124:	f107 0108 	add.w	r1, r7, #8
 8001128:	230a      	movs	r3, #10
 800112a:	2201      	movs	r2, #1
 800112c:	4815      	ldr	r0, [pc, #84]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800112e:	f00a fbc8 	bl	800b8c2 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	b29a      	uxth	r2, r3
 8001136:	f107 0108 	add.w	r1, r7, #8
 800113a:	230a      	movs	r3, #10
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800113e:	f00a fcfc 	bl	800bb3a <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8001142:	2201      	movs	r2, #1
 8001144:	2108      	movs	r1, #8
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001148:	f008 fbf8 	bl	800993c <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	429a      	cmp	r2, r3
 800115a:	da0c      	bge.n	8001176 <_Z14LIS3DSH_ReadIOhPhh+0x76>
	{
		dataR[i] = spiBuf[i];
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	440b      	add	r3, r1
 8001164:	3210      	adds	r2, #16
 8001166:	443a      	add	r2, r7
 8001168:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800116c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e7ec      	b.n	8001150 <_Z14LIS3DSH_ReadIOhPhh+0x50>
	}
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	20000470 	.word	0x20000470

08001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8001196:	2258      	movs	r2, #88	; 0x58
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4855      	ldr	r0, [pc, #340]	; (80012f0 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x168>)
 800119c:	f022 faf0 	bl	8023780 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f023 030f 	bic.w	r3, r3, #15
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	2201      	movs	r2, #1
 80011ca:	4619      	mov	r1, r3
 80011cc:	2020      	movs	r0, #32
 80011ce:	f7ff ff6d 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	789b      	ldrb	r3, [r3, #2]
 80011da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 80011fa:	f107 030f 	add.w	r3, r7, #15
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	2024      	movs	r0, #36	; 0x24
 8001204:	f7ff ff52 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x9a>
	{
		spiData = 0x88;
 8001210:	2388      	movs	r3, #136	; 0x88
 8001212:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8001214:	f107 030f 	add.w	r3, r7, #15
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	2023      	movs	r0, #35	; 0x23
 800121e:	f7ff ff45 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	2b20      	cmp	r3, #32
 8001228:	d858      	bhi.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0xa8>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	080012b5 	.word	0x080012b5
 8001234:	080012dd 	.word	0x080012dd
 8001238:	080012dd 	.word	0x080012dd
 800123c:	080012dd 	.word	0x080012dd
 8001240:	080012dd 	.word	0x080012dd
 8001244:	080012dd 	.word	0x080012dd
 8001248:	080012dd 	.word	0x080012dd
 800124c:	080012dd 	.word	0x080012dd
 8001250:	080012bd 	.word	0x080012bd
 8001254:	080012dd 	.word	0x080012dd
 8001258:	080012dd 	.word	0x080012dd
 800125c:	080012dd 	.word	0x080012dd
 8001260:	080012dd 	.word	0x080012dd
 8001264:	080012dd 	.word	0x080012dd
 8001268:	080012dd 	.word	0x080012dd
 800126c:	080012dd 	.word	0x080012dd
 8001270:	080012c5 	.word	0x080012c5
 8001274:	080012dd 	.word	0x080012dd
 8001278:	080012dd 	.word	0x080012dd
 800127c:	080012dd 	.word	0x080012dd
 8001280:	080012dd 	.word	0x080012dd
 8001284:	080012dd 	.word	0x080012dd
 8001288:	080012dd 	.word	0x080012dd
 800128c:	080012dd 	.word	0x080012dd
 8001290:	080012cd 	.word	0x080012cd
 8001294:	080012dd 	.word	0x080012dd
 8001298:	080012dd 	.word	0x080012dd
 800129c:	080012dd 	.word	0x080012dd
 80012a0:	080012dd 	.word	0x080012dd
 80012a4:	080012dd 	.word	0x080012dd
 80012a8:	080012dd 	.word	0x080012dd
 80012ac:	080012dd 	.word	0x080012dd
 80012b0:	080012d5 	.word	0x080012d5
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x170>)
 80012b8:	601a      	str	r2, [r3, #0]
			break;
 80012ba:	e00f      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012be:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x174>)
 80012c0:	601a      	str	r2, [r3, #0]
			break;
 80012c2:	e00b      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x178>)
 80012c8:	601a      	str	r2, [r3, #0]
			break;
 80012ca:	e007      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012ce:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x17c>)
 80012d0:	601a      	str	r2, [r3, #0]
			break;
 80012d2:	e003      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x180>)
 80012d8:	601a      	str	r2, [r3, #0]
			break;
 80012da:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80012dc:	2201      	movs	r2, #1
 80012de:	2108      	movs	r1, #8
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x184>)
 80012e2:	f008 fb2b 	bl	800993c <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000470 	.word	0x20000470
 80012f4:	20000000 	.word	0x20000000
 80012f8:	3d75c28f 	.word	0x3d75c28f
 80012fc:	3df5c28f 	.word	0x3df5c28f
 8001300:	3e3851ec 	.word	0x3e3851ec
 8001304:	3e75c28f 	.word	0x3e75c28f
 8001308:	3f3ae148 	.word	0x3f3ae148
 800130c:	40021000 	.word	0x40021000

08001310 <_Z18LIS3DSH_GetDataRawv>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2202      	movs	r2, #2
 800131e:	4619      	mov	r1, r3
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	f7ff feed 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29a      	uxth	r2, r3
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	b29b      	uxth	r3, r3
 8001332:	4413      	add	r3, r2
 8001334:	b29b      	uxth	r3, r3
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	801a      	strh	r2, [r3, #0]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2202      	movs	r2, #2
 8001342:	4619      	mov	r1, r3
 8001344:	202a      	movs	r0, #42	; 0x2a
 8001346:	f7ff fedb 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 800134a:	7b7b      	ldrb	r3, [r7, #13]
 800134c:	b29b      	uxth	r3, r3
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b29a      	uxth	r2, r3
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	805a      	strh	r2, [r3, #2]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2202      	movs	r2, #2
 8001366:	4619      	mov	r1, r3
 8001368:	202c      	movs	r0, #44	; 0x2c
 800136a:	f7ff fec9 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	b29b      	uxth	r3, r3
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b29a      	uxth	r2, r3
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	b21a      	sxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	809a      	strh	r2, [r3, #4]

	return tempDataRaw;
 8001384:	bf00      	nop

}
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <_Z21LIS3DSH_GetDataScaledv>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffb8 	bl	8001310 <_Z18LIS3DSH_GetDataRawv>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80013a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <_Z21LIS3DSH_GetDataScaledv+0xe8>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <_Z21LIS3DSH_GetDataScaledv+0xf0>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80013d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <_Z21LIS3DSH_GetDataScaledv+0xf4>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <_Z21LIS3DSH_GetDataScaledv+0xf8>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 800140c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <_Z21LIS3DSH_GetDataScaledv+0xfc>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 8001430:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <_Z21LIS3DSH_GetDataScaledv+0x100>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	f107 0210 	add.w	r2, r7, #16
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	ee06 1a90 	vmov	s13, r1
 800145a:	ee07 2a10 	vmov	s14, r2
 800145e:	ee07 3a90 	vmov	s15, r3
}
 8001462:	eeb0 0a66 	vmov.f32	s0, s13
 8001466:	eef0 0a47 	vmov.f32	s1, s14
 800146a:	eeb0 1a67 	vmov.f32	s2, s15
 800146e:	3730      	adds	r7, #48	; 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004
 800147c:	00000000 	.word	0x00000000
 8001480:	200004c8 	.word	0x200004c8
 8001484:	20000008 	.word	0x20000008
 8001488:	200004cc 	.word	0x200004cc
 800148c:	2000000c 	.word	0x2000000c
 8001490:	200004d0 	.word	0x200004d0

08001494 <_Z19LIS3DSH_X_calibrateff>:
}

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	ed87 0a01 	vstr	s0, [r7, #4]
 800149e:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 80014a2:	ed97 7a00 	vldr	s14, [r7]
 80014a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <_Z19LIS3DSH_X_calibrateff+0x50>)
 80014b8:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 80014bc:	ed97 7a00 	vldr	s14, [r7]
 80014c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80014e8 <_Z19LIS3DSH_X_calibrateff+0x54>
 80014cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <_Z19LIS3DSH_X_calibrateff+0x58>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200004c8 	.word	0x200004c8
 80014e8:	44fa0000 	.word	0x44fa0000
 80014ec:	20000004 	.word	0x20000004

080014f0 <_Z19LIS3DSH_Y_calibrateff>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014fa:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 80014fe:	ed97 7a00 	vldr	s14, [r7]
 8001502:	edd7 7a01 	vldr	s15, [r7, #4]
 8001506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800150e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <_Z19LIS3DSH_Y_calibrateff+0x50>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 8001518:	ed97 7a00 	vldr	s14, [r7]
 800151c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001544 <_Z19LIS3DSH_Y_calibrateff+0x54>
 8001528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <_Z19LIS3DSH_Y_calibrateff+0x58>)
 800152e:	edc3 7a00 	vstr	s15, [r3]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200004cc 	.word	0x200004cc
 8001544:	44fa0000 	.word	0x44fa0000
 8001548:	20000008 	.word	0x20000008

0800154c <_Z19LIS3DSH_Z_calibrateff>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0a01 	vstr	s0, [r7, #4]
 8001556:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 800155a:	ed97 7a00 	vldr	s14, [r7]
 800155e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001566:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800156a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <_Z19LIS3DSH_Z_calibrateff+0x50>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 8001574:	ed97 7a00 	vldr	s14, [r7]
 8001578:	edd7 7a01 	vldr	s15, [r7, #4]
 800157c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001580:	eddf 6a07 	vldr	s13, [pc, #28]	; 80015a0 <_Z19LIS3DSH_Z_calibrateff+0x54>
 8001584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <_Z19LIS3DSH_Z_calibrateff+0x58>)
 800158a:	edc3 7a00 	vstr	s15, [r3]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	200004d0 	.word	0x200004d0
 80015a0:	44fa0000 	.word	0x44fa0000
 80015a4:	2000000c 	.word	0x2000000c

080015a8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80015b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015b6:	eef0 7ae7 	vabs.f32	s15, s15
 80015ba:	eeb0 0a67 	vmov.f32	s0, s15
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	f1c3 031f 	rsb	r3, r3, #31
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 800161c:	4a17      	ldr	r2, [pc, #92]	; (800167c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 800161e:	2137      	movs	r1, #55	; 0x37
 8001620:	4817      	ldr	r0, [pc, #92]	; (8001680 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 8001622:	f022 f833 	bl	802368c <__assert_func>

	if(align && size)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01f      	beq.n	800166c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d01c      	beq.n	800166c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3301      	adds	r3, #1
 8001636:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4413      	add	r3, r2
 800163e:	2101      	movs	r1, #1
 8001640:	4618      	mov	r0, r3
 8001642:	f019 fc0d 	bl	801ae60 <_Z9ei_callocjj>
 8001646:	60f8      	str	r0, [r7, #12]

		if(p)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00e      	beq.n	800166c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4413      	add	r3, r2
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	425b      	negs	r3, r3
 800165a:	4013      	ands	r3, r2
 800165c:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1ad2      	subs	r2, r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3b02      	subs	r3, #2
 8001668:	b292      	uxth	r2, r2
 800166a:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 800166c:	697b      	ldr	r3, [r7, #20]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	08027af4 	.word	0x08027af4
 800167c:	08027b10 	.word	0x08027b10
 8001680:	08027b48 	.word	0x08027b48

08001684 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	assert(ptr);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d105      	bne.n	800169e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001696:	215a      	movs	r1, #90	; 0x5a
 8001698:	480b      	ldr	r0, [pc, #44]	; (80016c8 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800169a:	f021 fff7 	bl	802368c <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80016a4:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	425b      	negs	r3, r3
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f019 fbe3 	bl	801ae7c <_Z7ei_freePv>
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	08027bc0 	.word	0x08027bc0
 80016c4:	08027bc4 	.word	0x08027bc4
 80016c8:	08027b48 	.word	0x08027b48

080016cc <_ZNSt14_Bit_referenceC1EPmm>:
  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <_ZNKSt14_Bit_referencecvbEv>:

#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    operator bool() const _GLIBCXX_NOEXCEPT
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf14      	ite	ne
 800170a:	2301      	movne	r3, #1
 800170c:	2300      	moveq	r3, #0
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZNSt14_Bit_referenceaSEb>:

    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e009      	b.n	8001756 <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6819      	ldr	r1, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	43da      	mvns	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	400a      	ands	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
      return *this;
 8001756:	687b      	ldr	r3, [r7, #4]
    }
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_ZNSt18_Bit_iterator_baseC1EPmj>:
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	  --_M_p;
	}
    }

    void
    _M_incr(ptrdiff_t __i)
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da00      	bge.n	80017aa <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 80017a8:	331f      	adds	r3, #31
 80017aa:	115b      	asrs	r3, r3, #5
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	441a      	add	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	425a      	negs	r2, r3
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	f002 021f 	and.w	r2, r2, #31
 80017c0:	bf58      	it	pl
 80017c2:	4253      	negpl	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	da07      	bge.n	80017dc <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3320      	adds	r3, #32
 80017d0:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	1f1a      	subs	r2, r3, #4
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	605a      	str	r2, [r3, #4]
    }
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_ZNSt13_Bit_iteratorC1Ev>:
#else
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ffb1 	bl	8001764 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_ZNSt13_Bit_iteratorC1EPmj>:

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ffa0 	bl	8001764 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_ZNKSt13_Bit_iteratordeEv>:
    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6819      	ldr	r1, [r3, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	461a      	mov	r2, r3
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff3f 	bl	80016cc <_ZNSt14_Bit_referenceC1EPmm>
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_ZNSt13_Bit_iteratorpLEi>:
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6839      	ldr	r1, [r7, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff90 	bl	800178a <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 800186a:	687b      	ldr	r3, [r7, #4]
    }
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZStplRKSt13_Bit_iteratori>:
    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }

    friend iterator
    operator+(const iterator& __x, difference_type __n)
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001888:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff ffe1 	bl	8001856 <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 8001894:	bf00      	nop
    }
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	2203      	movs	r2, #3
 8001900:	4798      	blx	r3
    }
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	731a      	strb	r2, [r3, #12]
 800194e:	e00e      	b.n	800196e <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	2101      	movs	r1, #1
 800195c:	4618      	mov	r0, r3
 800195e:	f019 fa7f 	bl	801ae60 <_Z9ei_callocjj>
 8001962:	4602      	mov	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7b1b      	ldrb	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f019 fa6b 	bl	801ae7c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZN2ei9ei_matrix11get_row_ptrEj>:
     * @brief Get a pointer to the buffer advanced by n rows
     *
     * @param row Numer of rows to advance the returned buffer pointer
     * @return float* Pointer to the buffer at the start of row n
     */
    float *get_row_ptr(size_t row)
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
    {
        return buffer + row * cols;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	6839      	ldr	r1, [r7, #0]
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
    }
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	731a      	strb	r2, [r3, #12]
 80019f8:	e00d      	b.n	8001a16 <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	2101      	movs	r1, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f019 fa2b 	bl	801ae60 <_Z9ei_callocjj>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7b1b      	ldrb	r3, [r3, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f019 fa17 	bl	801ae7c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	e7fe      	b.n	8001a5c <_ZSt25__throw_bad_function_callv+0x4>

08001a5e <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a68:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a6c:	f01f fb92 	bl	8021194 <expf>
 8001a70:	eef0 7a40 	vmov.f32	s15, s0
 8001a74:	eeb0 0a67 	vmov.f32	s0, s15
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a88:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a8c:	f01f fac2 	bl	8021014 <roundf>
 8001a90:	eef0 7a40 	vmov.f32	s15, s0
 8001a94:	eeb0 0a67 	vmov.f32	s0, s15
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	ed87 0a01 	vstr	s0, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001ab2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	db09      	blt.n	8001ad4 <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001ac0:	ed97 0a05 	vldr	s0, [r7, #20]
 8001ac4:	f01f fbca 	bl	802125c <sqrtf>
 8001ac8:	eef0 7a40 	vmov.f32	s15, s0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001ad2:	e004      	b.n	8001ade <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001adc:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 8001ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>:
        }

        return EIDSP_OK;
    }

    static void transpose_in_place(matrix_t *matrix) {
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b096      	sub	sp, #88	; 0x58
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
        size_t size = matrix->cols * matrix->rows - 1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6852      	ldr	r2, [r2, #4]
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	64bb      	str	r3, [r7, #72]	; 0x48
        float temp; // temp for swap
        size_t next; // next item to swap
        size_t cycleBegin; // index of start of cycle
        size_t i; // location in matrix
        size_t all_done_mark = 1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
        ei_vector<bool> done(size+1,false);
 8001b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b0c:	1c59      	adds	r1, r3, #1
 8001b0e:	2300      	movs	r3, #0
 8001b10:	77fb      	strb	r3, [r7, #31]
 8001b12:	f107 0320 	add.w	r3, r7, #32
 8001b16:	f107 021f 	add.w	r2, r7, #31
 8001b1a:	f107 0008 	add.w	r0, r7, #8
 8001b1e:	f004 fcfe 	bl	800651e <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>

        i = 1; // Note that matrix[0] and last element of matrix won't move
 8001b22:	2301      	movs	r3, #1
 8001b24:	653b      	str	r3, [r7, #80]	; 0x50
        while (1)
        {
            cycleBegin = i;
 8001b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b28:	647b      	str	r3, [r7, #68]	; 0x44
            temp = matrix->buffer[i];
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	657b      	str	r3, [r7, #84]	; 0x54
            do
            {
                size_t col = i % matrix->cols;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b42:	fb01 f202 	mul.w	r2, r1, r2
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	643b      	str	r3, [r7, #64]	; 0x40
                size_t row = i / matrix->cols;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	63fb      	str	r3, [r7, #60]	; 0x3c
                // swap row and col to make new idx, b/c we want to know where in the transposed matrix
                next = col*matrix->rows + row;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b62:	4413      	add	r3, r2
 8001b64:	63bb      	str	r3, [r7, #56]	; 0x38
                float temp2 = matrix->buffer[next];
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
                matrix->buffer[next] = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b80:	601a      	str	r2, [r3, #0]
                temp = temp2;
 8001b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b84:	657b      	str	r3, [r7, #84]	; 0x54
                done[next] = true;
 8001b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8a:	f107 0108 	add.w	r1, r7, #8
 8001b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b90:	4618      	mov	r0, r3
 8001b92:	f004 fcec 	bl	800656e <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 8001b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fdbd 	bl	800171c <_ZNSt14_Bit_referenceaSEb>
                i = next;
 8001ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba4:	653b      	str	r3, [r7, #80]	; 0x50
            }
            while (i != cycleBegin);
 8001ba6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d000      	beq.n	8001bb0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc2>
            do
 8001bae:	e7c3      	b.n	8001b38 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x4a>

            // start next cycle by find next not done
            for (i = all_done_mark; done[i]; i++) {
 8001bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8001bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb8:	f107 0108 	add.w	r1, r7, #8
 8001bbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 fcd5 	bl	800656e <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 8001bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fd92 	bl	80016f2 <_ZNKSt14_Bit_referencecvbEv>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0a8      	beq.n	8001b26 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x38>
                all_done_mark++; // move the high water mark so we don't look again
 8001bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
                if(i>=size) { goto LOOP_END; }
 8001bda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d203      	bcs.n	8001bea <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xfc>
            for (i = all_done_mark; done[i]; i++) {
 8001be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be4:	3301      	adds	r3, #1
 8001be6:	653b      	str	r3, [r7, #80]	; 0x50
 8001be8:	e7e4      	b.n	8001bb4 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc6>
                if(i>=size) { goto LOOP_END; }
 8001bea:	bf00      	nop
            }
        }
        LOOP_END:
        // finally, swap the row and column dimensions
        std::swap(matrix->rows, matrix->cols);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	1d1a      	adds	r2, r3, #4
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3308      	adds	r3, #8
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f004 fce4 	bl	80065c4 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
        ei_vector<bool> done(size+1,false);
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	4618      	mov	r0, r3
 8001c02:	f004 fca7 	bl	8006554 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>
    }
 8001c06:	bf00      	nop
 8001c08:	3758      	adds	r7, #88	; 0x58
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	461a      	mov	r2, r3
 8001c26:	f000 f817 	bl	8001c58 <_ZN2ei5numpy9transposeEPfii>
 8001c2a:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	e00c      	b.n	8001c50 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001c42:	893a      	ldrh	r2, [r7, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 8001c48:	897a      	ldrh	r2, [r7, #10]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 8001c4e:	2300      	movs	r3, #0
    }
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b08f      	sub	sp, #60	; 0x3c
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f7ff fe5e 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <_ZN2ei5numpy9transposeEPfii+0x24>
 8001c78:	4c23      	ldr	r4, [pc, #140]	; (8001d08 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001c7a:	e03b      	b.n	8001cf4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001c82:	4c21      	ldr	r4, [pc, #132]	; (8001d08 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001c84:	e036      	b.n	8001cf4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	da03      	bge.n	8001c96 <_ZN2ei5numpy9transposeEPfii+0x3e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	db01      	blt.n	8001c9a <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 8001c96:	4c1d      	ldr	r4, [pc, #116]	; (8001d0c <_ZN2ei5numpy9transposeEPfii+0xb4>)
 8001c98:	e02c      	b.n	8001cf4 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	83bb      	strh	r3, [r7, #28]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	83fb      	strh	r3, [r7, #30]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	82bb      	strh	r3, [r7, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001cb8:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 8001cba:	f107 0214 	add.w	r2, r7, #20
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f00e f8d3 	bl	800fe70 <arm_mat_trans_f32>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 8001cd0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 8001cd8:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 8001cdc:	e00a      	b.n	8001cf4 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 8001cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	fb02 f303 	mul.w	r3, r2, r3
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	461a      	mov	r2, r3
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f021 fd47 	bl	8023780 <memcpy>

        return EIDSP_OK;
 8001cf2:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fe43 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 8001cfe:	4623      	mov	r3, r4
 8001d00:	4618      	mov	r0, r3
 8001d02:	373c      	adds	r7, #60	; 0x3c
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	fffffc16 	.word	0xfffffc16
 8001d0c:	fffffc0c 	.word	0xfffffc0c

08001d10 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001d1c:	edd7 7a00 	vldr	s15, [r7]
 8001d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d24:	eef4 7a47 	vcmp.f32	s15, s14
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	d101      	bne.n	8001d32 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e033      	b.n	8001d9a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3a:	d204      	bcs.n	8001d46 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d301      	bcc.n	8001d4a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001d48:	e027      	b.n	8001d9a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	82bb      	strh	r3, [r7, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	82fb      	strh	r3, [r7, #22]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	81bb      	strh	r3, [r7, #12]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	81fb      	strh	r3, [r7, #14]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001d76:	f107 020c 	add.w	r2, r7, #12
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4611      	mov	r1, r2
 8001d80:	ed97 0a00 	vldr	s0, [r7]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f00e f83d 	bl	800fe04 <arm_mat_scale_f32>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	e000      	b.n	8001d9a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001d98:	2300      	movs	r3, #0
    }
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3720      	adds	r7, #32
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	fffffc0c 	.word	0xfffffc0c

08001da8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6892      	ldr	r2, [r2, #8]
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d215      	bcs.n	8001df6 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	edd7 7a00 	vldr	s15, [r7]
 8001de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dea:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3301      	adds	r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	e7e0      	b.n	8001db8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 8001df6:	2300      	movs	r3, #0
    }
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 8001e04:	b5b0      	push	{r4, r5, r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001e1a:	4c26      	ldr	r4, [pc, #152]	; (8001eb4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001e1c:	e045      	b.n	8001eaa <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        if (subtract_matrix->cols != 1) {
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d001      	beq.n	8001e2a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001e26:	4c23      	ldr	r4, [pc, #140]	; (8001eb4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001e28:	e03f      	b.n	8001eaa <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d237      	bcs.n	8001ea8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa4>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689d      	ldr	r5, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	69f9      	ldr	r1, [r7, #28]
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f107 0008 	add.w	r0, r7, #8
 8001e52:	462a      	mov	r2, r5
 8001e54:	2101      	movs	r1, #1
 8001e56:	f7ff fd6a 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
 8001e60:	4c15      	ldr	r4, [pc, #84]	; (8001eb8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 8001e62:	2500      	movs	r5, #0
 8001e64:	e015      	b.n	8001e92 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff93 	bl	8001da8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8001e82:	61b8      	str	r0, [r7, #24]
            if (ret != EIDSP_OK) {
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8c>
                EIDSP_ERR(ret);
 8001e8a:	69bc      	ldr	r4, [r7, #24]
 8001e8c:	2500      	movs	r5, #0
 8001e8e:	e000      	b.n	8001e92 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
 8001e90:	2501      	movs	r5, #1
 8001e92:	f107 0308 	add.w	r3, r7, #8
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fd74 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8001e9c:	2d01      	cmp	r5, #1
 8001e9e:	d104      	bne.n	8001eaa <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	e7c2      	b.n	8001e2e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2a>
            }
        }

        return EIDSP_OK;
 8001ea8:	2400      	movs	r4, #0
    }
 8001eaa:	4623      	mov	r3, r4
 8001eac:	4618      	mov	r0, r3
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb4:	fffffc14 	.word	0xfffffc14
 8001eb8:	fffffc16 	.word	0xfffffc16

08001ebc <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d001      	beq.n	8001ed6 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001ed4:	e028      	b.n	8001f28 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d001      	beq.n	8001ee2 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001ee0:	e022      	b.n	8001f28 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d21a      	bcs.n	8001f26 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	68f9      	ldr	r1, [r7, #12]
 8001efa:	fb01 f303 	mul.w	r3, r1, r3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	18d0      	adds	r0, r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f107 0208 	add.w	r2, r7, #8
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f00e f820 	bl	800ff50 <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3301      	adds	r3, #1
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	e7df      	b.n	8001ee6 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8001f26:	2300      	movs	r3, #0
    }
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	fffffc14 	.word	0xfffffc14

08001f34 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001f4c:	e028      	b.n	8001fa0 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d001      	beq.n	8001f5a <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001f58:	e022      	b.n	8001fa0 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d21a      	bcs.n	8001f9e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	68f9      	ldr	r1, [r7, #12]
 8001f72:	fb01 f303 	mul.w	r3, r1, r3
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	18d0      	adds	r0, r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f107 0208 	add.w	r2, r7, #8
 8001f82:	4619      	mov	r1, r3
 8001f84:	f00d ffb5 	bl	800fef2 <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e7df      	b.n	8001f5e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001f9e:	2300      	movs	r3, #0
    }
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	fffffc14 	.word	0xfffffc14

08001fac <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001fac:	b5b0      	push	{r4, r5, r7, lr}
 8001fae:	b098      	sub	sp, #96	; 0x60
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fbc:	085b      	lsrs	r3, r3, #1
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d001      	beq.n	8001fce <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001fca:	4c65      	ldr	r4, [pc, #404]	; (8002160 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8001fcc:	e0c2      	b.n	8002154 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d901      	bls.n	8001fda <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 8001fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd8:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001fda:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001fde:	2300      	movs	r3, #0
 8001fe0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	f7ff fca3 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8001fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8001fee:	4c5d      	ldr	r4, [pc, #372]	; (8002164 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001ff0:	e0ab      	b.n	800214a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 8001ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001ff8:	4c5a      	ldr	r4, [pc, #360]	; (8002164 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001ffa:	e0a6      	b.n	800214a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001ffc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	461a      	mov	r2, r3
 8002004:	68f9      	ldr	r1, [r7, #12]
 8002006:	f021 fbbb 	bl	8023780 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 800200a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	18d0      	adds	r0, r2, r3
 8002012:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	461a      	mov	r2, r3
 800201c:	2100      	movs	r1, #0
 800201e:	f021 fbd7 	bl	80237d0 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8002022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002024:	2b20      	cmp	r3, #32
 8002026:	d025      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8002028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800202a:	2b40      	cmp	r3, #64	; 0x40
 800202c:	d022      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 800202e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d01f      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8002034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203a:	d01b      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 800203c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800203e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002042:	d017      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8002044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204a:	d013      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 800204c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800204e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002052:	d00f      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8002054:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205a:	d00b      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 800205c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800205e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002060:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	f000 fa4e 	bl	8002504 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8002068:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 800206a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800206c:	2b00      	cmp	r3, #0
 800206e:	d068      	beq.n	8002142 <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 8002070:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002072:	e06a      	b.n	800214a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8002074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002078:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fada 	bl	8002634 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8002080:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 8002082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 8002088:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800208a:	e05d      	b.n	8002148 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 800208c:	f107 0014 	add.w	r0, r7, #20
 8002090:	2300      	movs	r3, #0
 8002092:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002094:	2101      	movs	r1, #1
 8002096:	f7ff fc4a 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 80020a0:	4c30      	ldr	r4, [pc, #192]	; (8002164 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 80020a2:	2500      	movs	r5, #0
 80020a4:	e045      	b.n	8002132 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80020ac:	4c2d      	ldr	r4, [pc, #180]	; (8002164 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 80020ae:	2500      	movs	r5, #0
 80020b0:	e03f      	b.n	8002132 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 80020b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80020ba:	2300      	movs	r3, #0
 80020bc:	f010 fa76 	bl	80125ac <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020d0:	3b01      	subs	r3, #1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	440b      	add	r3, r1
 80020d8:	6852      	ldr	r2, [r2, #4]
 80020da:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 80020dc:	2302      	movs	r3, #2
 80020de:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80020e0:	2301      	movs	r3, #1
 80020e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80020e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e6:	3b01      	subs	r3, #1
 80020e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d220      	bcs.n	8002130 <_ZN2ei5numpy4rfftEPKfjPfjj+0x184>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	f107 0210 	add.w	r2, r7, #16
 80020fa:	2102      	movs	r1, #2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f00d ff27 	bl	800ff50 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8002102:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002106:	f7ff fcca 	bl	8001a9e <_ZN2ei5numpy4sqrtEf>
 800210a:	eeb0 7a40 	vmov.f32	s14, s0
 800210e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211e:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 8002122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002124:	3302      	adds	r3, #2
 8002126:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8002128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800212a:	3301      	adds	r3, #1
 800212c:	65bb      	str	r3, [r7, #88]	; 0x58
 800212e:	e7d9      	b.n	80020e4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x138>
 8002130:	2501      	movs	r5, #1
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fc24 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 800213c:	2d01      	cmp	r5, #1
 800213e:	d103      	bne.n	8002148 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 8002140:	e000      	b.n	8002144 <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
            }
 8002142:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002144:	2400      	movs	r4, #0
 8002146:	e000      	b.n	800214a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 8002148:	bf00      	nop
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 800214a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fc18 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 8002154:	4623      	mov	r3, r4
 8002156:	4618      	mov	r0, r3
 8002158:	3760      	adds	r7, #96	; 0x60
 800215a:	46bd      	mov	sp, r7
 800215c:	bdb0      	pop	{r4, r5, r7, pc}
 800215e:	bf00      	nop
 8002160:	fffffc11 	.word	0xfffffc11
 8002164:	fffffc16 	.word	0xfffffc16

08002168 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b098      	sub	sp, #96	; 0x60
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8002176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	3301      	adds	r3, #1
 800217c:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002182:	429a      	cmp	r2, r3
 8002184:	d001      	beq.n	800218a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8002186:	4c6f      	ldr	r4, [pc, #444]	; (8002344 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 8002188:	e0d6      	b.n	8002338 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800218e:	429a      	cmp	r2, r3
 8002190:	d901      	bls.n	8002196 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 8002192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002194:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8002196:	2300      	movs	r3, #0
 8002198:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800219e:	429a      	cmp	r2, r3
 80021a0:	d101      	bne.n	80021a6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 80021a6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80021aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80021ae:	2101      	movs	r1, #1
 80021b0:	f7ff fbbd 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 80021b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 80021ba:	4c63      	ldr	r4, [pc, #396]	; (8002348 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 80021bc:	e0b7      	b.n	800232e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80021c4:	4c60      	ldr	r4, [pc, #384]	; (8002348 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 80021c6:	e0b2      	b.n	800232e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 80021c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d112      	bne.n	80021f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 80021ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	461a      	mov	r2, r3
 80021d6:	68f9      	ldr	r1, [r7, #12]
 80021d8:	f021 fad2 	bl	8023780 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 80021dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	18d0      	adds	r0, r2, r3
 80021e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	461a      	mov	r2, r3
 80021ee:	2100      	movs	r1, #0
 80021f0:	f021 faee 	bl	80237d0 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 80021f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d025      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80021fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021fc:	2b40      	cmp	r3, #64	; 0x40
 80021fe:	d022      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002202:	2b80      	cmp	r3, #128	; 0x80
 8002204:	d01f      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220c:	d01b      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 800220e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002214:	d017      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8002216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221c:	d013      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 800221e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002224:	d00f      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222c:	d00b      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 800222e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002232:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	f000 f9d7 	bl	80025e8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 800223a:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 800223c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d071      	beq.n	8002326 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 8002242:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002244:	e073      	b.n	800232e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8002246:	f107 0320 	add.w	r3, r7, #32
 800224a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f9f1 	bl	8002634 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8002252:	64b8      	str	r0, [r7, #72]	; 0x48
            if (status != ARM_MATH_SUCCESS) {
 8002254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 800225a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800225c:	e066      	b.n	800232c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 800225e:	f107 0010 	add.w	r0, r7, #16
 8002262:	2300      	movs	r3, #0
 8002264:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002266:	2101      	movs	r1, #1
 8002268:	f7ff fb61 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 8002272:	4c35      	ldr	r4, [pc, #212]	; (8002348 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002274:	2500      	movs	r5, #0
 8002276:	e04e      	b.n	8002316 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800227e:	4c32      	ldr	r4, [pc, #200]	; (8002348 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002280:	2500      	movs	r5, #0
 8002282:	e048      	b.n	8002316 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8002284:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	f107 0020 	add.w	r0, r7, #32
 800228c:	2300      	movs	r3, #0
 800228e:	f010 f98d 	bl	80125ac <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80022aa:	3b01      	subs	r3, #1
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	440b      	add	r3, r1
 80022b2:	6852      	ldr	r2, [r2, #4]
 80022b4:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 80022b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80022bc:	3b01      	subs	r3, #1
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 80022ca:	2302      	movs	r3, #2
 80022cc:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80022ce:	2301      	movs	r3, #1
 80022d0:	657b      	str	r3, [r7, #84]	; 0x54
 80022d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d4:	3b01      	subs	r3, #1
 80022d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022d8:	429a      	cmp	r2, r3
 80022da:	d21b      	bcs.n	8002314 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ac>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	441a      	add	r2, r3
 80022e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	440b      	add	r3, r1
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f4:	3301      	adds	r3, #1
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	441a      	add	r2, r3
 80022fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	440b      	add	r3, r1
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 8002306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002308:	3302      	adds	r3, #2
 800230a:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 800230c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230e:	3301      	adds	r3, #1
 8002310:	657b      	str	r3, [r7, #84]	; 0x54
 8002312:	e7de      	b.n	80022d2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16a>
 8002314:	2501      	movs	r5, #1
 8002316:	f107 0310 	add.w	r3, r7, #16
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fb32 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8002320:	2d01      	cmp	r5, #1
 8002322:	d103      	bne.n	800232c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 8002324:	e000      	b.n	8002328 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
            }
 8002326:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002328:	2400      	movs	r4, #0
 800232a:	e000      	b.n	800232e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 800232c:	bf00      	nop
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 800232e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fb26 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 8002338:	4623      	mov	r3, r4
 800233a:	4618      	mov	r0, r3
 800233c:	3760      	adds	r7, #96	; 0x60
 800233e:	46bd      	mov	sp, r7
 8002340:	bdb0      	pop	{r4, r5, r7, pc}
 8002342:	bf00      	nop
 8002344:	fffffc11 	.word	0xfffffc11
 8002348:	fffffc16 	.word	0xfffffc16

0800234c <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	ed87 0a03 	vstr	s0, [r7, #12]
 8002356:	edc7 0a02 	vstr	s1, [r7, #8]
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 800236c:	e03f      	b.n	80023ee <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d104      	bne.n	800237e <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e037      	b.n	80023ee <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 800237e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002382:	edd7 7a03 	vldr	s15, [r7, #12]
 8002386:	ee77 6a67 	vsub.f32	s13, s14, s15
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3b01      	subs	r3, #1
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239a:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d216      	bcs.n	80023da <_ZN2ei5numpy8linspaceEffmPf+0x8e>
            out[ix] = start + ix * step;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80023ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ce:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	e7e3      	b.n	80023a2 <_ZN2ei5numpy8linspaceEffmPf+0x56>
        }

        // last entry always stop
        out[number - 1] = stop;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023e0:	3b01      	subs	r3, #1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 80023ec:	2300      	movs	r3, #0
    }
 80023ee:	4618      	mov	r0, r3
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	fffffc10 	.word	0xfffffc10

08002400 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>:
    /**
     * Calculate the log10 of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log10(matrix_t *matrix)
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6892      	ldr	r2, [r2, #8]
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	429a      	cmp	r2, r3
 800241c:	d263      	bcs.n	80024e6 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xe6>
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6811      	ldr	r1, [r2, #0]
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	188c      	adds	r4, r1, r2
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	617b      	str	r3, [r7, #20]
        float f = frexpf(fabsf(a), &e);
 800243a:	edd7 7a05 	vldr	s15, [r7, #20]
 800243e:	eef0 7ae7 	vabs.f32	s15, s15
 8002442:	f107 0308 	add.w	r3, r7, #8
 8002446:	4618      	mov	r0, r3
 8002448:	eeb0 0a67 	vmov.f32	s0, s15
 800244c:	f01e fdbc 	bl	8020fc8 <frexpf>
 8002450:	ed87 0a04 	vstr	s0, [r7, #16]
        float y = 1.23149591368684f;
 8002454:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf0>)
 8002456:	60fb      	str	r3, [r7, #12]
        y *= f;
 8002458:	ed97 7a03 	vldr	s14, [r7, #12]
 800245c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002464:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -4.11852516267426f;
 8002468:	edd7 7a03 	vldr	s15, [r7, #12]
 800246c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80024f4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf4>
 8002470:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002474:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002478:	ed97 7a03 	vldr	s14, [r7, #12]
 800247c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002484:	edc7 7a03 	vstr	s15, [r7, #12]
        y += 6.02197014179219f;
 8002488:	edd7 7a03 	vldr	s15, [r7, #12]
 800248c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80024f8 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf8>
 8002490:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002494:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002498:	ed97 7a03 	vldr	s14, [r7, #12]
 800249c:	edd7 7a04 	vldr	s15, [r7, #16]
 80024a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a4:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -3.13396450166353f;
 80024a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ac:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80024fc <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xfc>
 80024b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024b4:	edc7 7a03 	vstr	s15, [r7, #12]
        y += e;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80024c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ca:	edc7 7a03 	vstr	s15, [r7, #12]
        return y;
 80024ce:	edd7 7a03 	vldr	s15, [r7, #12]
        return numpy::log2(a) * 0.3010299956639812f;
 80024d2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002500 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0x100>
 80024d6:	ee67 7a87 	vmul.f32	s15, s15, s14
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 80024da:	edc4 7a00 	vstr	s15, [r4]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3301      	adds	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	e792      	b.n	800240c <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xc>
        }

        return EIDSP_OK;
 80024e6:	2300      	movs	r3, #0
    }
 80024e8:	4618      	mov	r0, r3
 80024ea:	3724      	adds	r7, #36	; 0x24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd90      	pop	{r4, r7, pc}
 80024f0:	3f9da1a8 	.word	0x3f9da1a8
 80024f4:	4083caf5 	.word	0x4083caf5
 80024f8:	40c0b3fb 	.word	0x40c0b3fb
 80024fc:	404892e0 	.word	0x404892e0
 8002500:	3e9a209b 	.word	0x3e9a209b

08002504 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 8002504:	b5b0      	push	{r4, r5, r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4618      	mov	r0, r3
 8002518:	f018 fc96 	bl	801ae48 <_Z9ei_mallocj>
 800251c:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002524:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8002526:	e058      	b.n	80025da <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f107 0310 	add.w	r3, r7, #16
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2300      	movs	r3, #0
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	f018 f8df 	bl	801a6f8 <kiss_fftr_alloc>
 800253a:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d104      	bne.n	800254c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002542:	69b8      	ldr	r0, [r7, #24]
 8002544:	f018 fc9a 	bl	801ae7c <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002548:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 800254a:	e046      	b.n	80025da <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	68f9      	ldr	r1, [r7, #12]
 8002550:	6978      	ldr	r0, [r7, #20]
 8002552:	f018 f9f1 	bl	801a938 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d234      	bcs.n	80025cc <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc8>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4413      	add	r3, r2
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	2002      	movs	r0, #2
 8002570:	eeb0 0a67 	vmov.f32	s0, s15
 8002574:	f004 f845 	bl	8006602 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002578:	ec55 4b10 	vmov	r4, r5, d0
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4413      	add	r3, r2
 8002584:	edd3 7a01 	vldr	s15, [r3, #4]
 8002588:	2002      	movs	r0, #2
 800258a:	eeb0 0a67 	vmov.f32	s0, s15
 800258e:	f004 f838 	bl	8006602 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002592:	ec53 2b10 	vmov	r2, r3, d0
 8002596:	4620      	mov	r0, r4
 8002598:	4629      	mov	r1, r5
 800259a:	f7fd fe81 	bl	80002a0 <__adddf3>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	f7fe fb29 	bl	8000bfc <__aeabi_d2f>
 80025aa:	4601      	mov	r1, r0
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	18d4      	adds	r4, r2, r3
 80025b4:	ee00 1a10 	vmov	s0, r1
 80025b8:	f7ff fa71 	bl	8001a9e <_ZN2ei5numpy4sqrtEf>
 80025bc:	eef0 7a40 	vmov.f32	s15, s0
 80025c0:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	3301      	adds	r3, #1
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	e7c6      	b.n	800255a <_ZN2ei5numpy13software_rfftEPfS1_jj+0x56>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80025cc:	6978      	ldr	r0, [r7, #20]
 80025ce:	f018 fc55 	bl	801ae7c <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 80025d2:	69b8      	ldr	r0, [r7, #24]
 80025d4:	f018 fc52 	bl	801ae7c <_Z7ei_freePv>

        return EIDSP_OK;
 80025d8:	2300      	movs	r3, #0
    }
 80025da:	4618      	mov	r0, r3
 80025dc:	3720      	adds	r7, #32
 80025de:	46bd      	mov	sp, r7
 80025e0:	bdb0      	pop	{r4, r5, r7, pc}
 80025e2:	bf00      	nop
 80025e4:	fffffc16 	.word	0xfffffc16

080025e8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2300      	movs	r3, #0
 8002600:	2200      	movs	r2, #0
 8002602:	2100      	movs	r1, #0
 8002604:	f018 f878 	bl	801a6f8 <kiss_fftr_alloc>
 8002608:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 8002612:	e008      	b.n	8002626 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	68f9      	ldr	r1, [r7, #12]
 8002618:	6978      	ldr	r0, [r7, #20]
 800261a:	f018 f98d 	bl	801a938 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f018 fc2c 	bl	801ae7c <_Z7ei_freePv>

        return EIDSP_OK;
 8002624:	2300      	movs	r3, #0
    }
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	fffffc16 	.word	0xfffffc16

08002634 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
 800263e:	4b03      	ldr	r3, [pc, #12]	; (800264c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x18>)

        return status;
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	fffffc08 	.word	0xfffffc08

08002650 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 8002650:	b5b0      	push	{r4, r5, r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 800265e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	b29b      	uxth	r3, r3
 8002664:	3301      	adds	r3, #1
 8002666:	461a      	mov	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4293      	cmp	r3, r2
 800266c:	d001      	beq.n	8002672 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800266e:	4b2b      	ldr	r3, [pc, #172]	; (800271c <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 8002670:	e050      	b.n	8002714 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 8002672:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f7ff fc95 	bl	8001fac <_ZN2ei5numpy4rfftEPKfjPfjj>
 8002682:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	e042      	b.n	8002714 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d23b      	bcs.n	8002712 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc2>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 800269a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800269c:	ee07 3a90 	vmov	s15, r3
 80026a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a4:	ee17 0a90 	vmov	r0, s15
 80026a8:	f7fd ff58 	bl	800055c <__aeabi_f2d>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	f04f 0000 	mov.w	r0, #0
 80026b4:	491a      	ldr	r1, [pc, #104]	; (8002720 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 80026b6:	f7fe f8d3 	bl	8000860 <__aeabi_ddiv>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4614      	mov	r4, r2
 80026c0:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	ed93 7a00 	vldr	s14, [r3]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	edd3 7a00 	vldr	s15, [r3]
 80026da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026de:	ee17 0a90 	vmov	r0, s15
 80026e2:	f7fd ff3b 	bl	800055c <__aeabi_f2d>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80026ea:	4620      	mov	r0, r4
 80026ec:	4629      	mov	r1, r5
 80026ee:	f7fd ff8d 	bl	800060c <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	18d4      	adds	r4, r2, r3
 8002702:	f7fe fa7b 	bl	8000bfc <__aeabi_d2f>
 8002706:	4603      	mov	r3, r0
 8002708:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3301      	adds	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e7bf      	b.n	8002692 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x42>
        }

        return EIDSP_OK;
 8002712:	2300      	movs	r3, #0
    }
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bdb0      	pop	{r4, r5, r7, pc}
 800271c:	fffffc14 	.word	0xfffffc14
 8002720:	3ff00000 	.word	0x3ff00000

08002724 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>:

    static int welch_max_hold(
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b093      	sub	sp, #76	; 0x4c
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
        size_t stop_bin,
        size_t fft_points,
        bool do_overlap)
    {
        // save off one point to put back, b/c we're going to calculate in place
        float saved_point = 0;
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	63fb      	str	r3, [r7, #60]	; 0x3c
        bool do_saved_point = false;
 8002738:	2300      	movs	r3, #0
 800273a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        size_t fft_out_size = fft_points / 2 + 1;
 800273e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	3301      	adds	r3, #1
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
        float *fft_out;
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002746:	4b4f      	ldr	r3, [pc, #316]	; (8002884 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x160>)
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	f107 0218 	add.w	r2, r7, #24
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f003 ff86 	bl	8006666 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>
        if (input_size < fft_points) {
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275e:	429a      	cmp	r2, r3
 8002760:	d20b      	bcs.n	800277a <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x56>
            fft_out = (float *)ei_calloc(fft_out_size, sizeof(float));
 8002762:	2104      	movs	r1, #4
 8002764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002766:	f018 fb7b 	bl	801ae60 <_Z9ei_callocjj>
 800276a:	6378      	str	r0, [r7, #52]	; 0x34
            p_fft_out.reset(fft_out);
 800276c:	f107 0310 	add.w	r3, r7, #16
 8002770:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002772:	4618      	mov	r0, r3
 8002774:	f003 ffad 	bl	80066d2 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>
 8002778:	e00b      	b.n	8002792 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x6e>
        }
        else {
            // set input as output for in place operation
            fft_out = input;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
            // save off one point to put back, b/c we're going to calculate in place
            saved_point = input[fft_points / 2];
 800277e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	63fb      	str	r3, [r7, #60]	; 0x3c
            do_saved_point = true;
 800278c:	2301      	movs	r3, #1
 800278e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        // init the output to zeros
        memset(output, 0, sizeof(float) * (stop_bin - start_bin));
 8002792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	461a      	mov	r2, r3
 800279c:	2100      	movs	r1, #0
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f021 f816 	bl	80237d0 <memset>
        int input_ix = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ac:	429a      	cmp	r2, r3
 80027ae:	da5e      	bge.n	800286e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14a>
            // Figure out if we need any zero padding
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 80027b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b4:	4413      	add	r3, r2
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d203      	bcs.n	80027c4 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xa0>
                                                                        : input_size - input_ix;
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	e000      	b.n	80027c6 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xa2>
 80027c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c6:	623b      	str	r3, [r7, #32]
            EI_TRY(power_spectrum(
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	18d0      	adds	r0, r2, r3
 80027d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d8:	b29b      	uxth	r3, r3
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027e0:	6a39      	ldr	r1, [r7, #32]
 80027e2:	f7ff ff35 	bl	8002650 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 80027e6:	61f8      	str	r0, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xce>
 80027ee:	69fc      	ldr	r4, [r7, #28]
 80027f0:	e03e      	b.n	8002870 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14c>
                input + input_ix,
                n_input_points,
                fft_out,
                fft_points / 2 + 1,
                fft_points));
            int j = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
            // keep the max of the last frame and everything before
            for (size_t i = start_bin; i < stop_bin; i++) {
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fe:	429a      	cmp	r2, r3
 8002800:	d218      	bcs.n	8002834 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x110>
                output[j] = std::max(output[j], fft_out[i]);
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	18d0      	adds	r0, r2, r3
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002810:	4413      	add	r3, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f003 ff71 	bl	80066fa <_ZSt3maxIfERKT_S2_S2_>
 8002818:	4601      	mov	r1, r0
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	680a      	ldr	r2, [r1, #0]
 8002824:	601a      	str	r2, [r3, #0]
                j++;
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	3301      	adds	r3, #1
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (size_t i = start_bin; i < stop_bin; i++) {
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	3301      	adds	r3, #1
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
 8002832:	e7e2      	b.n	80027fa <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xd6>
            }
            if (do_overlap) {
 8002834:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x140>
                if (do_saved_point) {
 800283c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002840:	2b00      	cmp	r3, #0
 8002842:	d009      	beq.n	8002858 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x134>
                    // This step only matters first time through
                    input[fft_points / 2] = saved_point;
 8002844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4413      	add	r3, r2
 800284e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002850:	601a      	str	r2, [r3, #0]
                    do_saved_point = false;
 8002852:	2300      	movs	r3, #0
 8002854:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                }
                input_ix += fft_points / 2;
 8002858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285a:	085a      	lsrs	r2, r3, #1
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	4413      	add	r3, r2
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
 8002862:	e7a1      	b.n	80027a8 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x84>
            }
            else {
                input_ix += fft_points;
 8002864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002868:	4413      	add	r3, r2
 800286a:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 800286c:	e79c      	b.n	80027a8 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x84>
            }
        }

        return EIDSP_OK;
 800286e:	2400      	movs	r4, #0
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002870:	f107 0310 	add.w	r3, r7, #16
 8002874:	4618      	mov	r0, r3
 8002876:	f003 ff0b 	bl	8006690 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }
 800287a:	4623      	mov	r3, r4
 800287c:	4618      	mov	r0, r3
 800287e:	3744      	adds	r7, #68	; 0x44
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}
 8002884:	0801ae7d 	.word	0x0801ae7d

08002888 <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d214      	bcs.n	80028c8 <_ZN2ei5numpy13zero_handlingEPfj+0x40>
            if (input[ix] == 0) {
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	d105      	bne.n	80028c0 <_ZN2ei5numpy13zero_handlingEPfj+0x38>
                input[ix] = 1e-10;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	4413      	add	r3, r2
 80028bc:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <_ZN2ei5numpy13zero_handlingEPfj+0x4c>)
 80028be:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3301      	adds	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e7e6      	b.n	8002896 <_ZN2ei5numpy13zero_handlingEPfj+0xe>
            }
        }
    }
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	2edbe6ff 	.word	0x2edbe6ff

080028d8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 80028d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028dc:	b095      	sub	sp, #84	; 0x54
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6178      	str	r0, [r7, #20]
 80028e2:	ed87 0a04 	vstr	s0, [r7, #16]
 80028e6:	edc7 0a03 	vstr	s1, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	0fda      	lsrs	r2, r3, #31
 80028f4:	4413      	add	r3, r2
 80028f6:	105b      	asrs	r3, r3, #1
 80028f8:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7fd fe2e 	bl	800055c <__aeabi_f2d>
 8002900:	a3f5      	add	r3, pc, #980	; (adr r3, 8002cd8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd fe81 	bl	800060c <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4690      	mov	r8, r2
 8002910:	4699      	mov	r9, r3
 8002912:	6938      	ldr	r0, [r7, #16]
 8002914:	f7fd fe22 	bl	800055c <__aeabi_f2d>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4640      	mov	r0, r8
 800291e:	4649      	mov	r1, r9
 8002920:	f7fd ff9e 	bl	8000860 <__aeabi_ddiv>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	ec43 2b17 	vmov	d7, r2, r3
 800292c:	eeb0 0a47 	vmov.f32	s0, s14
 8002930:	eef0 0a67 	vmov.f32	s1, s15
 8002934:	f01e fb14 	bl	8020f60 <tan>
 8002938:	ec53 2b10 	vmov	r2, r3, d0
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f7fe f95c 	bl	8000bfc <__aeabi_d2f>
 8002944:	4603      	mov	r3, r0
 8002946:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002948:	2002      	movs	r0, #2
 800294a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800294e:	f003 fe58 	bl	8006602 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002952:	ec53 2b10 	vmov	r2, r3, d0
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7fe f94f 	bl	8000bfc <__aeabi_d2f>
 800295e:	4603      	mov	r3, r0
 8002960:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002964:	2104      	movs	r1, #4
 8002966:	4618      	mov	r0, r3
 8002968:	f018 fa7a 	bl	801ae60 <_Z9ei_callocjj>
 800296c:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 800296e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002970:	2104      	movs	r1, #4
 8002972:	4618      	mov	r0, r3
 8002974:	f018 fa74 	bl	801ae60 <_Z9ei_callocjj>
 8002978:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 800297a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297c:	2104      	movs	r1, #4
 800297e:	4618      	mov	r0, r3
 8002980:	f018 fa6e 	bl	801ae60 <_Z9ei_callocjj>
 8002984:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002988:	2104      	movs	r1, #4
 800298a:	4618      	mov	r0, r3
 800298c:	f018 fa68 	bl	801ae60 <_Z9ei_callocjj>
 8002990:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002994:	2104      	movs	r1, #4
 8002996:	4618      	mov	r0, r3
 8002998:	f018 fa62 	bl	801ae60 <_Z9ei_callocjj>
 800299c:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 800299e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a0:	2104      	movs	r1, #4
 80029a2:	4618      	mov	r0, r3
 80029a4:	f018 fa5c 	bl	801ae60 <_Z9ei_callocjj>
 80029a8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 80029aa:	2300      	movs	r3, #0
 80029ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b2:	429a      	cmp	r2, r3
 80029b4:	f280 80e5 	bge.w	8002b82 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 80029b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80029ba:	f7fd fdbd 	bl	8000538 <__aeabi_i2d>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	f7fd fc6d 	bl	80002a0 <__adddf3>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	4bc3      	ldr	r3, [pc, #780]	; (8002ce0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 80029d4:	f7fd fc64 	bl	80002a0 <__adddf3>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	a3bd      	add	r3, pc, #756	; (adr r3, 8002cd8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f7fd fe11 	bl	800060c <__aeabi_dmul>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4690      	mov	r8, r2
 80029f0:	4699      	mov	r9, r3
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7fd fda0 	bl	8000538 <__aeabi_i2d>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	f7fd fc50 	bl	80002a0 <__adddf3>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4640      	mov	r0, r8
 8002a06:	4649      	mov	r1, r9
 8002a08:	f7fd ff2a 	bl	8000860 <__aeabi_ddiv>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	ec43 2b17 	vmov	d7, r2, r3
 8002a14:	eeb0 0a47 	vmov.f32	s0, s14
 8002a18:	eef0 0a67 	vmov.f32	s1, s15
 8002a1c:	f01e fa48 	bl	8020eb0 <sin>
 8002a20:	ec53 2b10 	vmov	r2, r3, d0
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f7fe f8e8 	bl	8000bfc <__aeabi_d2f>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002a30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a32:	f7fd fd93 	bl	800055c <__aeabi_f2d>
 8002a36:	4680      	mov	r8, r0
 8002a38:	4689      	mov	r9, r1
 8002a3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a3c:	f7fd fd8e 	bl	800055c <__aeabi_f2d>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	f7fd fc2c 	bl	80002a0 <__adddf3>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4692      	mov	sl, r2
 8002a4e:	469b      	mov	fp, r3
 8002a50:	69f8      	ldr	r0, [r7, #28]
 8002a52:	f7fd fd83 	bl	800055c <__aeabi_f2d>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4650      	mov	r0, sl
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	f7fd fdd5 	bl	800060c <__aeabi_dmul>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4640      	mov	r0, r8
 8002a68:	4649      	mov	r1, r9
 8002a6a:	f7fd fc19 	bl	80002a0 <__adddf3>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	4b99      	ldr	r3, [pc, #612]	; (8002ce0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8002a7c:	f7fd fc10 	bl	80002a0 <__adddf3>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fe f8b8 	bl	8000bfc <__aeabi_d2f>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 8002a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a96:	4413      	add	r3, r2
 8002a98:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002a9c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa4:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8002aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002aac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab4:	ee17 0a90 	vmov	r0, s15
 8002ab8:	f7fd fd50 	bl	800055c <__aeabi_f2d>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	f7fd fbee 	bl	80002a0 <__adddf3>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4690      	mov	r8, r2
 8002aca:	4699      	mov	r9, r3
 8002acc:	6938      	ldr	r0, [r7, #16]
 8002ace:	f7fd fd45 	bl	800055c <__aeabi_f2d>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4640      	mov	r0, r8
 8002ad8:	4649      	mov	r1, r9
 8002ada:	f7fd fec1 	bl	8000860 <__aeabi_ddiv>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aec:	18d6      	adds	r6, r2, r3
 8002aee:	f7fe f885 	bl	8000bfc <__aeabi_d2f>
 8002af2:	4603      	mov	r3, r0
 8002af4:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8002af6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002af8:	f7fd fd30 	bl	800055c <__aeabi_f2d>
 8002afc:	4680      	mov	r8, r0
 8002afe:	4689      	mov	r9, r1
 8002b00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b02:	f7fd fd2b 	bl	800055c <__aeabi_f2d>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	f7fd fbc9 	bl	80002a0 <__adddf3>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4692      	mov	sl, r2
 8002b14:	469b      	mov	fp, r3
 8002b16:	69f8      	ldr	r0, [r7, #28]
 8002b18:	f7fd fd20 	bl	800055c <__aeabi_f2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4650      	mov	r0, sl
 8002b22:	4659      	mov	r1, fp
 8002b24:	f7fd fd72 	bl	800060c <__aeabi_dmul>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4640      	mov	r0, r8
 8002b2e:	4649      	mov	r1, r9
 8002b30:	f7fd fbb4 	bl	800029c <__aeabi_dsub>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	4b67      	ldr	r3, [pc, #412]	; (8002ce0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8002b42:	f7fd fbad 	bl	80002a0 <__adddf3>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4614      	mov	r4, r2
 8002b4c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002b50:	6938      	ldr	r0, [r7, #16]
 8002b52:	f7fd fd03 	bl	800055c <__aeabi_f2d>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	f7fd fe7f 	bl	8000860 <__aeabi_ddiv>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b70:	18d6      	adds	r6, r2, r3
 8002b72:	f7fe f843 	bl	8000bfc <__aeabi_d2f>
 8002b76:	4603      	mov	r3, r0
 8002b78:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 8002b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b80:	e715      	b.n	80029ae <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8002b82:	2300      	movs	r3, #0
 8002b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	f080 80aa 	bcs.w	8002ce4 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8002b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	441a      	add	r2, r3
 8002b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	440b      	add	r3, r1
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f280 808e 	bge.w	8002cce <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8002bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb8:	4413      	add	r3, r2
 8002bba:	ed93 7a00 	vldr	s14, [r3]
 8002bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc4:	4413      	add	r3, r2
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd4:	4413      	add	r3, r2
 8002bd6:	edd3 6a00 	vldr	s13, [r3]
 8002bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	6a3a      	ldr	r2, [r7, #32]
 8002be0:	4413      	add	r3, r2
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c00:	4413      	add	r3, r2
 8002c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c06:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 8002c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c10:	4413      	add	r3, r2
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fca1 	bl	800055c <__aeabi_f2d>
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	460d      	mov	r5, r1
 8002c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c24:	4413      	add	r3, r2
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fc97 	bl	800055c <__aeabi_f2d>
 8002c2e:	4680      	mov	r8, r0
 8002c30:	4689      	mov	r9, r1
 8002c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c38:	4413      	add	r3, r2
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fd fc8d 	bl	800055c <__aeabi_f2d>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	f7fd fb2b 	bl	80002a0 <__adddf3>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4640      	mov	r0, r8
 8002c50:	4649      	mov	r1, r9
 8002c52:	f7fd fb25 	bl	80002a0 <__adddf3>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4690      	mov	r8, r2
 8002c5c:	4699      	mov	r9, r3
 8002c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	6a3a      	ldr	r2, [r7, #32]
 8002c64:	4413      	add	r3, r2
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc77 	bl	800055c <__aeabi_f2d>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4640      	mov	r0, r8
 8002c74:	4649      	mov	r1, r9
 8002c76:	f7fd fb13 	bl	80002a0 <__adddf3>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4620      	mov	r0, r4
 8002c80:	4629      	mov	r1, r5
 8002c82:	f7fd fcc3 	bl	800060c <__aeabi_dmul>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	18d4      	adds	r4, r2, r3
 8002c96:	f7fd ffb1 	bl	8000bfc <__aeabi_d2f>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8002c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca4:	441a      	add	r2, r3
 8002ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	6a39      	ldr	r1, [r7, #32]
 8002cac:	440b      	add	r3, r1
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8002cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb8:	441a      	add	r2, r3
 8002cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc0:	440b      	add	r3, r1
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8002cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc8:	3301      	adds	r3, #1
 8002cca:	647b      	str	r3, [r7, #68]	; 0x44
 8002ccc:	e76c      	b.n	8002ba8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 8002cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cd4:	e757      	b.n	8002b86 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2ae>
 8002cd6:	bf00      	nop
 8002cd8:	54442d18 	.word	0x54442d18
 8002cdc:	400921fb 	.word	0x400921fb
 8002ce0:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8002ce4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ce6:	f018 f8c9 	bl	801ae7c <_Z7ei_freePv>
        ei_free(d1);
 8002cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cec:	f018 f8c6 	bl	801ae7c <_Z7ei_freePv>
        ei_free(d2);
 8002cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cf2:	f018 f8c3 	bl	801ae7c <_Z7ei_freePv>
        ei_free(w0);
 8002cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf8:	f018 f8c0 	bl	801ae7c <_Z7ei_freePv>
        ei_free(w1);
 8002cfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cfe:	f018 f8bd 	bl	801ae7c <_Z7ei_freePv>
        ei_free(w2);
 8002d02:	6a38      	ldr	r0, [r7, #32]
 8002d04:	f018 f8ba 	bl	801ae7c <_Z7ei_freePv>
    }
 8002d08:	bf00      	nop
 8002d0a:	3754      	adds	r7, #84	; 0x54
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d12:	bf00      	nop
 8002d14:	0000      	movs	r0, r0
	...

08002d18 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8002d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d1c:	b095      	sub	sp, #84	; 0x54
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6178      	str	r0, [r7, #20]
 8002d22:	ed87 0a04 	vstr	s0, [r7, #16]
 8002d26:	edc7 0a03 	vstr	s1, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	0fda      	lsrs	r2, r3, #31
 8002d34:	4413      	add	r3, r2
 8002d36:	105b      	asrs	r3, r3, #1
 8002d38:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7fd fc0e 	bl	800055c <__aeabi_f2d>
 8002d40:	a3f5      	add	r3, pc, #980	; (adr r3, 8003118 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f7fd fc61 	bl	800060c <__aeabi_dmul>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4690      	mov	r8, r2
 8002d50:	4699      	mov	r9, r3
 8002d52:	6938      	ldr	r0, [r7, #16]
 8002d54:	f7fd fc02 	bl	800055c <__aeabi_f2d>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4640      	mov	r0, r8
 8002d5e:	4649      	mov	r1, r9
 8002d60:	f7fd fd7e 	bl	8000860 <__aeabi_ddiv>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	ec43 2b17 	vmov	d7, r2, r3
 8002d6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002d70:	eef0 0a67 	vmov.f32	s1, s15
 8002d74:	f01e f8f4 	bl	8020f60 <tan>
 8002d78:	ec53 2b10 	vmov	r2, r3, d0
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f7fd ff3c 	bl	8000bfc <__aeabi_d2f>
 8002d84:	4603      	mov	r3, r0
 8002d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002d88:	2002      	movs	r0, #2
 8002d8a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002d8e:	f003 fc38 	bl	8006602 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002d92:	ec53 2b10 	vmov	r2, r3, d0
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd ff2f 	bl	8000bfc <__aeabi_d2f>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da4:	2104      	movs	r1, #4
 8002da6:	4618      	mov	r0, r3
 8002da8:	f018 f85a 	bl	801ae60 <_Z9ei_callocjj>
 8002dac:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db0:	2104      	movs	r1, #4
 8002db2:	4618      	mov	r0, r3
 8002db4:	f018 f854 	bl	801ae60 <_Z9ei_callocjj>
 8002db8:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbc:	2104      	movs	r1, #4
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f018 f84e 	bl	801ae60 <_Z9ei_callocjj>
 8002dc4:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc8:	2104      	movs	r1, #4
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f018 f848 	bl	801ae60 <_Z9ei_callocjj>
 8002dd0:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd4:	2104      	movs	r1, #4
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f018 f842 	bl	801ae60 <_Z9ei_callocjj>
 8002ddc:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de0:	2104      	movs	r1, #4
 8002de2:	4618      	mov	r0, r3
 8002de4:	f018 f83c 	bl	801ae60 <_Z9ei_callocjj>
 8002de8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 8002dea:	2300      	movs	r3, #0
 8002dec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df2:	429a      	cmp	r2, r3
 8002df4:	f280 80e5 	bge.w	8002fc2 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002df8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002dfa:	f7fd fb9d 	bl	8000538 <__aeabi_i2d>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	f7fd fa4d 	bl	80002a0 <__adddf3>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	4bc3      	ldr	r3, [pc, #780]	; (8003120 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002e14:	f7fd fa44 	bl	80002a0 <__adddf3>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	a3bd      	add	r3, pc, #756	; (adr r3, 8003118 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e26:	f7fd fbf1 	bl	800060c <__aeabi_dmul>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4690      	mov	r8, r2
 8002e30:	4699      	mov	r9, r3
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7fd fb80 	bl	8000538 <__aeabi_i2d>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	f7fd fa30 	bl	80002a0 <__adddf3>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4640      	mov	r0, r8
 8002e46:	4649      	mov	r1, r9
 8002e48:	f7fd fd0a 	bl	8000860 <__aeabi_ddiv>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	ec43 2b17 	vmov	d7, r2, r3
 8002e54:	eeb0 0a47 	vmov.f32	s0, s14
 8002e58:	eef0 0a67 	vmov.f32	s1, s15
 8002e5c:	f01e f828 	bl	8020eb0 <sin>
 8002e60:	ec53 2b10 	vmov	r2, r3, d0
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	f7fd fec8 	bl	8000bfc <__aeabi_d2f>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002e70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e72:	f7fd fb73 	bl	800055c <__aeabi_f2d>
 8002e76:	4680      	mov	r8, r0
 8002e78:	4689      	mov	r9, r1
 8002e7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e7c:	f7fd fb6e 	bl	800055c <__aeabi_f2d>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	f7fd fa0c 	bl	80002a0 <__adddf3>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4692      	mov	sl, r2
 8002e8e:	469b      	mov	fp, r3
 8002e90:	69f8      	ldr	r0, [r7, #28]
 8002e92:	f7fd fb63 	bl	800055c <__aeabi_f2d>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4650      	mov	r0, sl
 8002e9c:	4659      	mov	r1, fp
 8002e9e:	f7fd fbb5 	bl	800060c <__aeabi_dmul>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4640      	mov	r0, r8
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	f7fd f9f9 	bl	80002a0 <__adddf3>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	4b99      	ldr	r3, [pc, #612]	; (8003120 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002ebc:	f7fd f9f0 	bl	80002a0 <__adddf3>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fe98 	bl	8000bfc <__aeabi_d2f>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 8002ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ed6:	4413      	add	r3, r2
 8002ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002edc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ee4:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8002ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef4:	ee17 0a90 	vmov	r0, s15
 8002ef8:	f7fd fb30 	bl	800055c <__aeabi_f2d>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	f7fd f9ce 	bl	80002a0 <__adddf3>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4690      	mov	r8, r2
 8002f0a:	4699      	mov	r9, r3
 8002f0c:	6938      	ldr	r0, [r7, #16]
 8002f0e:	f7fd fb25 	bl	800055c <__aeabi_f2d>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4640      	mov	r0, r8
 8002f18:	4649      	mov	r1, r9
 8002f1a:	f7fd fca1 	bl	8000860 <__aeabi_ddiv>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f2c:	18d6      	adds	r6, r2, r3
 8002f2e:	f7fd fe65 	bl	8000bfc <__aeabi_d2f>
 8002f32:	4603      	mov	r3, r0
 8002f34:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8002f36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f38:	f7fd fb10 	bl	800055c <__aeabi_f2d>
 8002f3c:	4680      	mov	r8, r0
 8002f3e:	4689      	mov	r9, r1
 8002f40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f42:	f7fd fb0b 	bl	800055c <__aeabi_f2d>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	f7fd f9a9 	bl	80002a0 <__adddf3>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4692      	mov	sl, r2
 8002f54:	469b      	mov	fp, r3
 8002f56:	69f8      	ldr	r0, [r7, #28]
 8002f58:	f7fd fb00 	bl	800055c <__aeabi_f2d>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4650      	mov	r0, sl
 8002f62:	4659      	mov	r1, fp
 8002f64:	f7fd fb52 	bl	800060c <__aeabi_dmul>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4640      	mov	r0, r8
 8002f6e:	4649      	mov	r1, r9
 8002f70:	f7fd f994 	bl	800029c <__aeabi_dsub>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	4b67      	ldr	r3, [pc, #412]	; (8003120 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002f82:	f7fd f98d 	bl	80002a0 <__adddf3>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4614      	mov	r4, r2
 8002f8c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002f90:	6938      	ldr	r0, [r7, #16]
 8002f92:	f7fd fae3 	bl	800055c <__aeabi_f2d>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	f7fd fc5f 	bl	8000860 <__aeabi_ddiv>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb0:	18d6      	adds	r6, r2, r3
 8002fb2:	f7fd fe23 	bl	8000bfc <__aeabi_d2f>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 8002fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc0:	e715      	b.n	8002dee <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	f080 80aa 	bcs.w	8003124 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8002fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	441a      	add	r2, r3
 8002fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	440b      	add	r3, r1
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f280 808e 	bge.w	800310e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8002ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff8:	4413      	add	r3, r2
 8002ffa:	ed93 7a00 	vldr	s14, [r3]
 8002ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003004:	4413      	add	r3, r2
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800300e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003014:	4413      	add	r3, r2
 8003016:	edd3 6a00 	vldr	s13, [r3]
 800301a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	6a3a      	ldr	r2, [r7, #32]
 8003020:	4413      	add	r3, r2
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800302a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800302e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003040:	4413      	add	r3, r2
 8003042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003046:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 800304a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003050:	4413      	add	r3, r2
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fa81 	bl	800055c <__aeabi_f2d>
 800305a:	4604      	mov	r4, r0
 800305c:	460d      	mov	r5, r1
 800305e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003064:	4413      	add	r3, r2
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fa77 	bl	800055c <__aeabi_f2d>
 800306e:	4680      	mov	r8, r0
 8003070:	4689      	mov	r9, r1
 8003072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003078:	4413      	add	r3, r2
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fa6d 	bl	800055c <__aeabi_f2d>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	f7fd f90b 	bl	80002a0 <__adddf3>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4640      	mov	r0, r8
 8003090:	4649      	mov	r1, r9
 8003092:	f7fd f903 	bl	800029c <__aeabi_dsub>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4690      	mov	r8, r2
 800309c:	4699      	mov	r9, r3
 800309e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	6a3a      	ldr	r2, [r7, #32]
 80030a4:	4413      	add	r3, r2
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fa57 	bl	800055c <__aeabi_f2d>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4640      	mov	r0, r8
 80030b4:	4649      	mov	r1, r9
 80030b6:	f7fd f8f3 	bl	80002a0 <__adddf3>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4620      	mov	r0, r4
 80030c0:	4629      	mov	r1, r5
 80030c2:	f7fd faa3 	bl	800060c <__aeabi_dmul>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	18d4      	adds	r4, r2, r3
 80030d6:	f7fd fd91 	bl	8000bfc <__aeabi_d2f>
 80030da:	4603      	mov	r3, r0
 80030dc:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 80030de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e4:	441a      	add	r2, r3
 80030e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	6a39      	ldr	r1, [r7, #32]
 80030ec:	440b      	add	r3, r1
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 80030f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030f8:	441a      	add	r2, r3
 80030fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003100:	440b      	add	r3, r1
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8003106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003108:	3301      	adds	r3, #1
 800310a:	647b      	str	r3, [r7, #68]	; 0x44
 800310c:	e76c      	b.n	8002fe8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 800310e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003110:	3301      	adds	r3, #1
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48
 8003114:	e757      	b.n	8002fc6 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2ae>
 8003116:	bf00      	nop
 8003118:	54442d18 	.word	0x54442d18
 800311c:	400921fb 	.word	0x400921fb
 8003120:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8003124:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003126:	f017 fea9 	bl	801ae7c <_Z7ei_freePv>
        ei_free(d1);
 800312a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800312c:	f017 fea6 	bl	801ae7c <_Z7ei_freePv>
        ei_free(d2);
 8003130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003132:	f017 fea3 	bl	801ae7c <_Z7ei_freePv>
        ei_free(w0);
 8003136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003138:	f017 fea0 	bl	801ae7c <_Z7ei_freePv>
        ei_free(w1);
 800313c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800313e:	f017 fe9d 	bl	801ae7c <_Z7ei_freePv>
        ei_free(w2);
 8003142:	6a38      	ldr	r0, [r7, #32]
 8003144:	f017 fe9a 	bl	801ae7c <_Z7ei_freePv>
    }
 8003148:	bf00      	nop
 800314a:	3754      	adds	r7, #84	; 0x54
 800314c:	46bd      	mov	sp, r7
 800314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003152:	bf00      	nop

08003154 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8003154:	b590      	push	{r4, r7, lr}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003160:	edc7 0a01 	vstr	s1, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	429a      	cmp	r2, r3
 8003174:	d21f      	bcs.n	80031b6 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_lowpass(
 8003176:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	6979      	ldr	r1, [r7, #20]
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	6979      	ldr	r1, [r7, #20]
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 800319a:	441a      	add	r2, r3
                matrix->cols);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 80031a0:	4621      	mov	r1, r4
 80031a2:	edd7 0a01 	vldr	s1, [r7, #4]
 80031a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80031aa:	f7ff fb95 	bl	80028d8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	3301      	adds	r3, #1
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	e7da      	b.n	800316c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 80031b6:	2300      	movs	r3, #0
    }
 80031b8:	4618      	mov	r0, r3
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd90      	pop	{r4, r7, pc}

080031c0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80031cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d21f      	bcs.n	8003222 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_highpass(
 80031e2:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	6979      	ldr	r1, [r7, #20]
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	6979      	ldr	r1, [r7, #20]
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 8003206:	441a      	add	r2, r3
                matrix->cols);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 800320c:	4621      	mov	r1, r4
 800320e:	edd7 0a01 	vldr	s1, [r7, #4]
 8003212:	ed97 0a02 	vldr	s0, [r7, #8]
 8003216:	f7ff fd7f 	bl	8002d18 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	3301      	adds	r3, #1
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	e7da      	b.n	80031d8 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 8003222:	2300      	movs	r3, #0
    }
 8003224:	4618      	mov	r0, r3
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd90      	pop	{r4, r7, pc}

0800322c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 800322c:	b480      	push	{r7}
 800322e:	b091      	sub	sp, #68	; 0x44
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	ed87 0a01 	vstr	s0, [r7, #4]
 800323a:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d001      	beq.n	8003248 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003244:	4b60      	ldr	r3, [pc, #384]	; (80033c8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8003246:	e0b9      	b.n	80033bc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        if (output_matrix->cols != 1) {
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d001      	beq.n	8003254 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003250:	4b5d      	ldr	r3, [pc, #372]	; (80033c8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8003252:	e0b3      	b.n	80033bc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        uint16_t out_ix = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 8003270:	4b56      	ldr	r3, [pc, #344]	; (80033cc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 800327a:	2300      	movs	r3, #0
 800327c:	633b      	str	r3, [r7, #48]	; 0x30
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	3b01      	subs	r3, #1
 8003282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003284:	429a      	cmp	r2, r3
 8003286:	d229      	bcs.n	80032dc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xb0>
            if (in[ix] < min) {
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	4413      	add	r3, r2
 8003290:	edd3 7a00 	vldr	s15, [r3]
 8003294:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a0:	dd05      	ble.n	80032ae <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x82>
                min = in[ix];
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	6a3a      	ldr	r2, [r7, #32]
 80032a8:	4413      	add	r3, r2
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 80032ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	6a3a      	ldr	r2, [r7, #32]
 80032b4:	4413      	add	r3, r2
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80032be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c6:	d505      	bpl.n	80032d4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa8>
                max = in[ix];
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	6a3a      	ldr	r2, [r7, #32]
 80032ce:	4413      	add	r3, r2
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	3301      	adds	r3, #1
 80032d8:	633b      	str	r3, [r7, #48]	; 0x30
 80032da:	e7d0      	b.n	800327e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x52>
            }
        }


        float prev = in[0];
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80032e2:	2301      	movs	r3, #1
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	3b01      	subs	r3, #1
 80032ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d261      	bcs.n	80033b4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	6a3a      	ldr	r2, [r7, #32]
 80032f6:	4413      	add	r3, r2
 80032f8:	edd3 7a00 	vldr	s15, [r3]
 80032fc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003308:	d549      	bpl.n	800339e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	6a3a      	ldr	r2, [r7, #32]
 8003310:	4413      	add	r3, r2
 8003312:	ed93 7a00 	vldr	s14, [r3]
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	3301      	adds	r3, #1
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	6a3a      	ldr	r2, [r7, #32]
 800331e:	4413      	add	r3, r2
 8003320:	edd3 7a00 	vldr	s15, [r3]
 8003324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332c:	dd37      	ble.n	800339e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	6a3a      	ldr	r2, [r7, #32]
 8003334:	4413      	add	r3, r2
 8003336:	ed93 7a00 	vldr	s14, [r3]
 800333a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800333e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	6a3a      	ldr	r2, [r7, #32]
 8003348:	4413      	add	r3, r2
 800334a:	edd3 6a00 	vldr	s13, [r3]
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	3301      	adds	r3, #1
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	6a3a      	ldr	r2, [r7, #32]
 8003356:	4413      	add	r3, r2
 8003358:	edd3 7a00 	vldr	s15, [r3]
 800335c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003364:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8003368:	ed97 7a05 	vldr	s14, [r7, #20]
 800336c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	dd11      	ble.n	800339e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                    out[out_ix] = ix;
 800337a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4413      	add	r3, r2
 8003382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003384:	ee07 2a90 	vmov	s15, r2
 8003388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338c:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 8003390:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003392:	3301      	adds	r3, #1
 8003394:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 8003396:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	429a      	cmp	r2, r3
 800339c:	d009      	beq.n	80033b2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x186>
                }
            }

            prev = in[ix];
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	6a3a      	ldr	r2, [r7, #32]
 80033a4:	4413      	add	r3, r2
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	3301      	adds	r3, #1
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b0:	e799      	b.n	80032e6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xba>
                    if (out_ix == out_size) break;
 80033b2:	bf00      	nop
        }

        *peaks_found = out_ix;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80033b8:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 80033ba:	2300      	movs	r3, #0
    }
 80033bc:	4618      	mov	r0, r3
 80033be:	3744      	adds	r7, #68	; 0x44
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	fffffc14 	.word	0xfffffc14
 80033cc:	7f7fffff 	.word	0x7f7fffff

080033d0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4618      	mov	r0, r3
 80033dc:	f003 f9e6 	bl	80067ac <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ffeb 	bl	80033d0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	ed93 7a01 	vldr	s14, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	edd3 7a01 	vldr	s15, [r3, #4]
 800341c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003424:	bfcc      	ite	gt
 8003426:	2301      	movgt	r3, #1
 8003428:	2300      	movle	r3, #0
 800342a:	b2db      	uxtb	r3, r3
        });
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8003438:	b5b0      	push	{r4, r5, r7, lr}
 800343a:	ed2d 8b02 	vpush	{d8}
 800343e:	b09c      	sub	sp, #112	; 0x70
 8003440:	af00      	add	r7, sp, #0
 8003442:	6178      	str	r0, [r7, #20]
 8003444:	6139      	str	r1, [r7, #16]
 8003446:	ed87 0a03 	vstr	s0, [r7, #12]
 800344a:	edc7 0a02 	vstr	s1, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d001      	beq.n	800345e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800345a:	4c95      	ldr	r4, [pc, #596]	; (80036b0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 800345c:	e120      	b.n	80036a0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->cols != 2) {
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d001      	beq.n	800346a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003466:	4c92      	ldr	r4, [pc, #584]	; (80036b0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003468:	e11a      	b.n	80036a0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->rows == 0) {
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x3e>
            return EIDSP_OK;
 8003472:	2400      	movs	r4, #0
 8003474:	e114      	b.n	80036a0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        int N = static_cast<int>(fft_length);
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	663b      	str	r3, [r7, #96]	; 0x60
        float T = 1.0f / sampling_freq;
 800347a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800347e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003486:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003492:	2300      	movs	r3, #0
 8003494:	2101      	movs	r1, #1
 8003496:	f7fe fa4a 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 800349a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x6c>
 80034a0:	4c84      	ldr	r4, [pc, #528]	; (80036b4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 80034a2:	e0f8      	b.n	8003696 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 80034a4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80034a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034b0:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80034b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034b6:	0fda      	lsrs	r2, r3, #31
 80034b8:	4413      	add	r3, r2
 80034ba:	105b      	asrs	r3, r3, #1
 80034bc:	4618      	mov	r0, r3
 80034be:	f003 f963 	bl	8006788 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80034c2:	ec53 2b10 	vmov	r2, r3, d0
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	f7fd fb77 	bl	8000bbc <__aeabi_d2uiz>
 80034ce:	4602      	mov	r2, r0
 80034d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	eef0 0a48 	vmov.f32	s1, s16
 80034da:	ed9f 0a77 	vldr	s0, [pc, #476]	; 80036b8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 80034de:	f7fe ff35 	bl	800234c <_ZN2ei5numpy8linspaceEffmPf>
 80034e2:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 80034e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xb6>
            EIDSP_ERR(ret);
 80034ea:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80034ec:	e0d3      	b.n	8003696 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4619      	mov	r1, r3
 80034fc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003500:	2300      	movs	r3, #0
 8003502:	2201      	movs	r2, #1
 8003504:	f7fe fa13 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xda>
 800350e:	4c69      	ldr	r4, [pc, #420]	; (80036b4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003510:	e0bc      	b.n	800368c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 8003512:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8003516:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800351a:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80036b8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 800351e:	4619      	mov	r1, r3
 8003520:	6978      	ldr	r0, [r7, #20]
 8003522:	f7ff fe83 	bl	800322c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 8003526:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xfa>
            EIDSP_ERR(ret);
 800352e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003530:	e0ac      	b.n	800368c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ei_vector<freq_peak_t> peaks;
 8003532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ff57 	bl	80033ea <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 800353c:	2300      	movs	r3, #0
 800353e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003542:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003546:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003548:	4293      	cmp	r3, r2
 800354a:	da3d      	bge.n	80035c8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x190>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 800354c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800354e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003550:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003560:	ee17 3a90 	vmov	r3, s15
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	623b      	str	r3, [r7, #32]
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003572:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	edd3 7a00 	vldr	s15, [r3]
 800357e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003582:	ee17 3a90 	vmov	r3, s15
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
            if (d.amplitude < threshold) {
 800358e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003592:	ed97 7a02 	vldr	s14, [r7, #8]
 8003596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800359a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359e:	dd05      	ble.n	80035ac <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x174>
                d.freq = 0.0f;
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	623b      	str	r3, [r7, #32]
                d.amplitude = 0.0f;
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
            peaks.push_back(d);
 80035ac:	f107 0220 	add.w	r2, r7, #32
 80035b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f003 f935 	bl	8006826 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 80035bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80035c0:	3301      	adds	r3, #1
 80035c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80035c6:	e7bc      	b.n	8003542 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x10a>
        sort(peaks.begin(), peaks.end(),
 80035c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035cc:	4618      	mov	r0, r3
 80035ce:	f003 f950 	bl	8006872 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 80035d2:	4604      	mov	r4, r0
 80035d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035d8:	4618      	mov	r0, r3
 80035da:	f003 f95a 	bl	8006892 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 80035de:	4603      	mov	r3, r0
 80035e0:	462a      	mov	r2, r5
 80035e2:	4619      	mov	r1, r3
 80035e4:	4620      	mov	r0, r4
 80035e6:	f003 f965 	bl	80068b4 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 80035ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035ee:	4618      	mov	r0, r3
 80035f0:	f003 f972 	bl	80068d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 80035f4:	66b8      	str	r0, [r7, #104]	; 0x68
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d211      	bcs.n	8003624 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1ec>
            freq_peak_t d;
            d.freq = 0;
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
            d.amplitude = 0;
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
            peaks.push_back(d);
 800360c:	f107 0218 	add.w	r2, r7, #24
 8003610:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f003 f905 	bl	8006826 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 800361c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800361e:	3301      	adds	r3, #1
 8003620:	66bb      	str	r3, [r7, #104]	; 0x68
 8003622:	e7e8      	b.n	80035f6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1be>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003624:	2300      	movs	r3, #0
 8003626:	667b      	str	r3, [r7, #100]	; 0x64
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800362e:	429a      	cmp	r2, r3
 8003630:	d226      	bcs.n	8003680 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x248>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 8003632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003636:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003638:	4618      	mov	r0, r3
 800363a:	f003 f95d 	bl	80068f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	6802      	ldr	r2, [r0, #0]
 8003652:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8003654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003658:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800365a:	4618      	mov	r0, r3
 800365c:	f003 f94c 	bl	80068f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	3301      	adds	r3, #1
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	6842      	ldr	r2, [r0, #4]
 8003676:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800367a:	3301      	adds	r3, #1
 800367c:	667b      	str	r3, [r7, #100]	; 0x64
 800367e:	e7d3      	b.n	8003628 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1f0>
        }

        return EIDSP_OK;
 8003680:	2400      	movs	r4, #0
        ei_vector<freq_peak_t> peaks;
 8003682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003686:	4618      	mov	r0, r3
 8003688:	f003 f8b2 	bl	80067f0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 800368c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe f977 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 8003696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe f972 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 80036a0:	4623      	mov	r3, r4
 80036a2:	4618      	mov	r0, r3
 80036a4:	3770      	adds	r7, #112	; 0x70
 80036a6:	46bd      	mov	sp, r7
 80036a8:	ecbd 8b02 	vpop	{d8}
 80036ac:	bdb0      	pop	{r4, r5, r7, pc}
 80036ae:	bf00      	nop
 80036b0:	fffffc14 	.word	0xfffffc14
 80036b4:	fffffc16 	.word	0xfffffc16
 80036b8:	00000000 	.word	0x00000000

080036bc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 80036bc:	b590      	push	{r4, r7, lr}
 80036be:	b093      	sub	sp, #76	; 0x4c
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6178      	str	r0, [r7, #20]
 80036c4:	6139      	str	r1, [r7, #16]
 80036c6:	60fa      	str	r2, [r7, #12]
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d103      	bne.n	80036de <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d001      	beq.n	80036e2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80036de:	4c7b      	ldr	r4, [pc, #492]	; (80038cc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80036e0:	e0ef      	b.n	80038c2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d001      	beq.n	80036ee <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80036ea:	4c78      	ldr	r4, [pc, #480]	; (80038cc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80036ec:	e0e9      	b.n	80038c2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d105      	bne.n	8003708 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003708:	4c70      	ldr	r4, [pc, #448]	; (80038cc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 800370a:	e0da      	b.n	80038c2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003718:	4c6c      	ldr	r4, [pc, #432]	; (80038cc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 800371a:	e0d2      	b.n	80038c2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	1e5a      	subs	r2, r3, #1
 8003722:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003726:	2300      	movs	r3, #0
 8003728:	2101      	movs	r1, #1
 800372a:	f7fe f900 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 8003734:	4c66      	ldr	r4, [pc, #408]	; (80038d0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003736:	e0bf      	b.n	80038b8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	1e5a      	subs	r2, r3, #1
 800373e:	f107 0018 	add.w	r0, r7, #24
 8003742:	2300      	movs	r3, #0
 8003744:	2101      	movs	r1, #1
 8003746:	f7fe f8f2 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8003750:	4c5f      	ldr	r4, [pc, #380]	; (80038d0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003752:	e0ac      	b.n	80038ae <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003754:	2300      	movs	r3, #0
 8003756:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800375a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	429a      	cmp	r2, r3
 8003764:	d264      	bcs.n	8003830 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x174>
            float t = freq_matrix->buffer[ix];
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003786:	2300      	movs	r3, #0
 8003788:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800378c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	3b01      	subs	r3, #1
 8003796:	429a      	cmp	r2, r3
 8003798:	d244      	bcs.n	8003824 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	edd3 7a00 	vldr	s15, [r3]
 80037aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80037ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b6:	db2f      	blt.n	8003818 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037c0:	3301      	adds	r3, #1
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80037ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d6:	d51f      	bpl.n	8003818 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
                    buckets.buffer[ex] += v;
 80037d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	ed93 7a00 	vldr	s14, [r3]
 80037e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80037f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f8:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800380e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003812:	edc3 7a00 	vstr	s15, [r3]
                    break;
 8003816:	e005      	b.n	8003824 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003818:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800381c:	3301      	adds	r3, #1
 800381e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003822:	e7b3      	b.n	800378c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd0>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003824:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003828:	3301      	adds	r3, #1
 800382a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800382e:	e794      	b.n	800375a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x9e>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003830:	2300      	movs	r3, #0
 8003832:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003836:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	429a      	cmp	r2, r3
 8003842:	d233      	bcs.n	80038ac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f0>
            if (bucket_count.buffer[ex] == 0.0f) {
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	edd3 7a00 	vldr	s15, [r3]
 8003852:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	d109      	bne.n	8003870 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1b4>
                output_matrix->buffer[ex] = 0.0f;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e017      	b.n	80038a0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e4>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8003870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003872:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	edd3 6a00 	vldr	s13, [r3]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	ed93 7a00 	vldr	s14, [r3]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800389c:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 80038a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80038a4:	3301      	adds	r3, #1
 80038a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80038aa:	e7c4      	b.n	8003836 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17a>
            }
        }

        return EIDSP_OK;
 80038ac:	2400      	movs	r4, #0
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 80038ae:	f107 0318 	add.w	r3, r7, #24
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe f866 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 80038b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe f861 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 80038c2:	4623      	mov	r3, r4
 80038c4:	4618      	mov	r0, r3
 80038c6:	374c      	adds	r7, #76	; 0x4c
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd90      	pop	{r4, r7, pc}
 80038cc:	fffffc14 	.word	0xfffffc14
 80038d0:	fffffc16 	.word	0xfffffc16

080038d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	ed2d 8b02 	vpush	{d8}
 80038da:	b09b      	sub	sp, #108	; 0x6c
 80038dc:	af02      	add	r7, sp, #8
 80038de:	6178      	str	r0, [r7, #20]
 80038e0:	6139      	str	r1, [r7, #16]
 80038e2:	60fa      	str	r2, [r7, #12]
 80038e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80038e8:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d001      	beq.n	80038f6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80038f2:	4c80      	ldr	r4, [pc, #512]	; (8003af4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 80038f4:	e192      	b.n	8003c1c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	88fa      	ldrh	r2, [r7, #6]
 8003904:	0852      	lsrs	r2, r2, #1
 8003906:	b292      	uxth	r2, r2
 8003908:	3201      	adds	r2, #1
 800390a:	4293      	cmp	r3, r2
 800390c:	d001      	beq.n	8003912 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800390e:	4c79      	ldr	r4, [pc, #484]	; (8003af4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 8003910:	e184      	b.n	8003c1c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	0852      	lsrs	r2, r2, #1
 8003922:	b292      	uxth	r2, r2
 8003924:	3201      	adds	r2, #1
 8003926:	4293      	cmp	r3, r2
 8003928:	d001      	beq.n	800392e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800392a:	4c72      	ldr	r4, [pc, #456]	; (8003af4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 800392c:	e176      	b.n	8003c1c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (input_matrix->buffer == NULL) {
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003936:	4c70      	ldr	r4, [pc, #448]	; (8003af8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003938:	e170      	b.n	8003c1c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->buffer == NULL) {
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003942:	4c6d      	ldr	r4, [pc, #436]	; (8003af8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003944:	e16a      	b.n	8003c1c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->buffer == NULL) {
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800394e:	4c6a      	ldr	r4, [pc, #424]	; (8003af8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003950:	e164      	b.n	8003c1c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003962:	f7fd ffe4 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 800396c:	4c62      	ldr	r4, [pc, #392]	; (8003af8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 800396e:	e150      	b.n	8003c12 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>

        uint16_t nperseg = n_fft;
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	d904      	bls.n	800398a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003988:	e006      	b.n	8003998 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 800398a:	88fa      	ldrh	r2, [r7, #6]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	429a      	cmp	r2, r3
 8003992:	d201      	bcs.n	8003998 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	647b      	str	r3, [r7, #68]	; 0x44
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003998:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800399c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80039a0:	2300      	movs	r3, #0
 80039a2:	2101      	movs	r1, #1
 80039a4:	f7fd ffc3 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 80039ae:	4c52      	ldr	r4, [pc, #328]	; (8003af8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 80039b0:	e12a      	b.n	8003c08 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80039b8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80039bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d20d      	bcs.n	80039e0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x10c>
            triage_segments.buffer[ix] = 1.0f;
 80039c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80039d2:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 80039d4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80039d8:	3301      	adds	r3, #1
 80039da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80039de:	e7eb      	b.n	80039b8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe4>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 80039e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80039e4:	ee07 3a90 	vmov	s15, r3
 80039e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80039f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039fc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d826      	bhi.n	8003a62 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x18e>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 8003a14:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a2a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a32:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003a36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a3a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003a3e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a52:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003a56:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003a60:	e7d1      	b.n	8003a06 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 8003a62:	f107 001c 	add.w	r0, r7, #28
 8003a66:	2300      	movs	r3, #0
 8003a68:	2201      	movs	r2, #1
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	f7fd ff5f 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
 8003a76:	4c20      	ldr	r4, [pc, #128]	; (8003af8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003a78:	e0c1      	b.n	8003bfe <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 8003a7a:	f107 021c 	add.w	r2, r7, #28
 8003a7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fa55 	bl	8001f34 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8003a8a:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8003a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c2>
            EIDSP_ERR(ret);
 8003a92:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003a94:	e0b3      	b.n	8003bfe <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 8003a96:	f107 021c 	add.w	r2, r7, #28
 8003a9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe f9af 	bl	8001e04 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8003aa6:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8003aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1de>
            EIDSP_ERR(ret);
 8003aae:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003ab0:	e0a5      	b.n	8003bfe <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f017 f9ce 	bl	801ae60 <_Z9ei_callocjj>
 8003ac4:	64f8      	str	r0, [r7, #76]	; 0x4c
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 8003ac6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ac8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003adc:	f7fe fb44 	bl	8002168 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 8003ae0:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8003ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d009      	beq.n	8003afc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8003ae8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003aea:	f017 f9c7 	bl	801ae7c <_Z7ei_freePv>
            EIDSP_ERR(ret);
 8003aee:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003af0:	e085      	b.n	8003bfe <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
 8003af2:	bf00      	nop
 8003af4:	fffffc14 	.word	0xfffffc14
 8003af8:	fffffc16 	.word	0xfffffc16
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d872      	bhi.n	8003bf6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x322>
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8003b10:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b18:	4413      	add	r3, r2
 8003b1a:	ed93 7a00 	vldr	s14, [r3]
 8003b1e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b26:	4413      	add	r3, r2
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 8003b30:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b38:	4413      	add	r3, r2
 8003b3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b3e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b46:	4413      	add	r3, r2
 8003b48:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b50:	eeb0 0a67 	vmov.f32	s0, s15
 8003b54:	f7fd fd28 	bl	80015a8 <_ZSt3absf>
 8003b58:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8003b5c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b64:	4413      	add	r3, r2
 8003b66:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003b6a:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 8003b6e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b76:	4413      	add	r3, r2
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 8003b7e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b86:	4413      	add	r3, r2
 8003b88:	ed93 7a00 	vldr	s14, [r3]
 8003b8c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b94:	4413      	add	r3, r2
 8003b96:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9e:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d00f      	beq.n	8003bd0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x2fc>
                fft_output[ix].r *= 2;
 8003bb0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bb8:	4413      	add	r3, r2
 8003bba:	edd3 7a00 	vldr	s15, [r3]
 8003bbe:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bc6:	4413      	add	r3, r2
 8003bc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bcc:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 8003bd0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bd8:	441a      	add	r2, r3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003bea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003bf4:	e785      	b.n	8003b02 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22e>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8003bf6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003bf8:	f017 f940 	bl	801ae7c <_Z7ei_freePv>

        return EIDSP_OK;
 8003bfc:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 8003bfe:	f107 031c 	add.w	r3, r7, #28
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fd febe 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fd feb9 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003c12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fd feb4 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 8003c1c:	4623      	mov	r3, r4
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3764      	adds	r7, #100	; 0x64
 8003c22:	46bd      	mov	sp, r7
 8003c24:	ecbd 8b02 	vpop	{d8}
 8003c28:	bd90      	pop	{r4, r7, pc}
 8003c2a:	bf00      	nop

08003c2c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>:

    static int subtract_mean(matrix_t* input_matrix) {
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b089      	sub	sp, #36	; 0x24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	f107 000c 	add.w	r0, r7, #12
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f7fd fe75 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x22>
 8003c4a:	4c12      	ldr	r4, [pc, #72]	; (8003c94 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x68>)
 8003c4c:	e018      	b.n	8003c80 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        int ret = numpy::mean(input_matrix, &mean_matrix);
 8003c4e:	f107 030c 	add.w	r3, r7, #12
 8003c52:	4619      	mov	r1, r3
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7fe f96d 	bl	8001f34 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8003c5a:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c62:	4c0d      	ldr	r4, [pc, #52]	; (8003c98 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8003c64:	e00c      	b.n	8003c80 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 8003c66:	f107 030c 	add.w	r3, r7, #12
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7fe f8c9 	bl	8001e04 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8003c72:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x52>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c7a:	4c07      	ldr	r4, [pc, #28]	; (8003c98 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8003c7c:	e000      	b.n	8003c80 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        return EIDSP_OK;
 8003c7e:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fd fe7d 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 8003c8a:	4623      	mov	r3, r4
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3724      	adds	r7, #36	; 0x24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd90      	pop	{r4, r7, pc}
 8003c94:	fffffc16 	.word	0xfffffc16
 8003c98:	fffffc14 	.word	0xfffffc14

08003c9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 8003c9c:	b5b0      	push	{r4, r5, r7, lr}
 8003c9e:	b0b0      	sub	sp, #192	; 0xc0
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	6178      	str	r0, [r7, #20]
 8003ca4:	6139      	str	r1, [r7, #16]
 8003ca6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003caa:	4611      	mov	r1, r2
 8003cac:	edc7 0a01 	vstr	s1, [r7, #4]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	ed87 1a00 	vstr	s2, [r7]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	72fb      	strb	r3, [r7, #11]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d001      	beq.n	8003cce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003cca:	4caf      	ldr	r4, [pc, #700]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003ccc:	e227      	b.n	800411e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	689d      	ldr	r5, [r3, #8]
 8003cd2:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8003cd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2001      	movs	r0, #1
 8003ce0:	f000 fa22 	bl	8004128 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	429d      	cmp	r5, r3
 8003ce8:	bf14      	ite	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	2300      	moveq	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003cf4:	4ca4      	ldr	r4, [pc, #656]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003cf6:	e212      	b.n	800411e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (edges_matrix_in->cols != 1) {
 8003cf8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d001      	beq.n	8003d06 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d02:	4ca1      	ldr	r4, [pc, #644]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003d04:	e20b      	b.n	800411e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        int ret;

        size_t axes = input_matrix->rows;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        EI_TRY(processing::subtract_mean(input_matrix) );
 8003d0e:	6938      	ldr	r0, [r7, #16]
 8003d10:	f7ff ff8c 	bl	8003c2c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8003d14:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8003d18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8a>
 8003d20:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003d24:	e1fb      	b.n	800411e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>

        // apply filter
        if (filter_type == filter_lowpass) {
 8003d26:	7afb      	ldrb	r3, [r7, #11]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d110      	bne.n	8003d4e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xb2>
            ret = spectral::processing::butterworth_lowpass_filter(
 8003d2c:	7abb      	ldrb	r3, [r7, #10]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	edd7 0a01 	vldr	s1, [r7, #4]
 8003d34:	ed97 0a03 	vldr	s0, [r7, #12]
 8003d38:	6938      	ldr	r0, [r7, #16]
 8003d3a:	f7ff fa0b 	bl	8003154 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8003d3e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003d42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d015      	beq.n	8003d76 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d4a:	4c8f      	ldr	r4, [pc, #572]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003d4c:	e1e7      	b.n	800411e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }
        else if (filter_type == filter_highpass) {
 8003d4e:	7afb      	ldrb	r3, [r7, #11]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d110      	bne.n	8003d76 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
            ret = spectral::processing::butterworth_highpass_filter(
 8003d54:	7abb      	ldrb	r3, [r7, #10]
 8003d56:	4619      	mov	r1, r3
 8003d58:	edd7 0a01 	vldr	s1, [r7, #4]
 8003d5c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003d60:	6938      	ldr	r0, [r7, #16]
 8003d62:	f7ff fa2d 	bl	80031c0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8003d66:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003d6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d72:	4c85      	ldr	r4, [pc, #532]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003d74:	e1d3      	b.n	800411e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8003d76:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d82:	f7fd fdd4 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xf6>
 8003d8e:	4c7f      	ldr	r4, [pc, #508]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003d90:	e1c0      	b.n	8004114 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        ret = numpy::rms(input_matrix, &rms_matrix);
 8003d92:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003d96:	4619      	mov	r1, r3
 8003d98:	6938      	ldr	r0, [r7, #16]
 8003d9a:	f7fe f88f 	bl	8001ebc <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8003d9e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret != EIDSP_OK) {
 8003da2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x112>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003daa:	4c77      	ldr	r4, [pc, #476]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003dac:	e1b2      	b.n	8004114 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 8003dae:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	461a      	mov	r2, r3
 8003db6:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dc0:	f7fd fdb5 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x132>
 8003dca:	4c70      	ldr	r4, [pc, #448]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003dcc:	e19d      	b.n	800410a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	f080 8193 	bcs.w	8004108 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46c>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	689d      	ldr	r5, [r3, #8]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003dfe:	462a      	mov	r2, r5
 8003e00:	2101      	movs	r1, #1
 8003e02:	f7fd fd94 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x176>
 8003e0c:	4c5f      	ldr	r4, [pc, #380]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003e0e:	2500      	movs	r5, #0
 8003e10:	e16d      	b.n	80040ee <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 8003e12:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003e22:	2300      	movs	r3, #0
 8003e24:	2101      	movs	r1, #1
 8003e26:	f7fd fd82 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x19a>
 8003e30:	4c56      	ldr	r4, [pc, #344]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003e32:	2500      	movs	r5, #0
 8003e34:	e151      	b.n	80040da <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 8003e36:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003e38:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003e3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e3c:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8003e3e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	462b      	mov	r3, r5
 8003e46:	f7fe f8b1 	bl	8001fac <_ZN2ei5numpy4rfftEPKfjPfjj>
 8003e4a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (ret != EIDSP_OK) {
 8003e4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1c0>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003e56:	4c4c      	ldr	r4, [pc, #304]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003e58:	2500      	movs	r5, #0
 8003e5a:	e13e      	b.n	80040da <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8003e5c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003e60:	ee07 3a90 	vmov	s15, r3
 8003e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e74:	eeb0 0a47 	vmov.f32	s0, s14
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fd ff49 	bl	8001d10 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8003e7e:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8003e82:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003e86:	2300      	movs	r3, #0
 8003e88:	2202      	movs	r2, #2
 8003e8a:	f7fd fd50 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1fe>
 8003e94:	4c3d      	ldr	r4, [pc, #244]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003e96:	2500      	movs	r5, #0
 8003e98:	e115      	b.n	80040c6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 8003e9a:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8003e9e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003ea2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ea6:	edd7 0a00 	vldr	s1, [r7]
 8003eaa:	ed97 0a03 	vldr	s0, [r7, #12]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff fac2 	bl	8003438 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 8003eb4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 8003eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x22a>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003ec0:	4c31      	ldr	r4, [pc, #196]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003ec2:	2500      	movs	r5, #0
 8003ec4:	e0ff      	b.n	80040c6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 8003ec6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2101      	movs	r1, #1
 8003eda:	f7fd fd28 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d102      	bne.n	8003eea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x24e>
 8003ee4:	4c29      	ldr	r4, [pc, #164]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003ee6:	2500      	movs	r5, #0
 8003ee8:	e0e3      	b.n	80040b2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x416>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 8003eea:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003efa:	2300      	movs	r3, #0
 8003efc:	2101      	movs	r1, #1
 8003efe:	f7fd fd16 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d102      	bne.n	8003f0e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x272>
 8003f08:	4c20      	ldr	r4, [pc, #128]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003f0a:	2500      	movs	r5, #0
 8003f0c:	e0c7      	b.n	800409e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
            ret = spectral::processing::periodogram(&axis_matrix,
 8003f0e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003f12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f16:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003f1a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003f1e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003f22:	f7ff fcd7 	bl	80038d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 8003f26:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 8003f2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x29e>
                EIDSP_ERR(ret);
 8003f32:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003f36:	2500      	movs	r5, #0
 8003f38:	e0b1      	b.n	800409e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 8003f3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	1e59      	subs	r1, r3, #1
 8003f42:	f107 0018 	add.w	r0, r7, #24
 8003f46:	2300      	movs	r3, #0
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f7fd fcf0 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2be>
 8003f54:	4c0d      	ldr	r4, [pc, #52]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003f56:	2500      	movs	r5, #0
 8003f58:	e097      	b.n	800408a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ee>
            ret = spectral::processing::spectral_power_edges(
 8003f5a:	f107 0318 	add.w	r3, r7, #24
 8003f5e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003f62:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003f66:	ed97 0a03 	vldr	s0, [r7, #12]
 8003f6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f6e:	f7ff fba5 	bl	80036bc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 8003f72:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 8003f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f4>
                EIDSP_ERR(ret);
 8003f7e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003f82:	2500      	movs	r5, #0
 8003f84:	e081      	b.n	800408a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ee>
 8003f86:	bf00      	nop
 8003f88:	fffffc14 	.word	0xfffffc14
 8003f8c:	fffffc16 	.word	0xfffffc16
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            size_t fx = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            features_row[fx++] = rms_matrix.buffer[row];
 8003fae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003fbe:	1c59      	adds	r1, r3, #1
 8003fc0:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003fca:	440b      	add	r3, r1
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d22c      	bcs.n	800403a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x39e>
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 8003fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	441a      	add	r2, r3
 8003ff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ff4:	1c59      	adds	r1, r3, #1
 8003ff6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004000:	440b      	add	r3, r1
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 8004006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800400a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800400e:	fb01 f303 	mul.w	r3, r1, r3
 8004012:	3301      	adds	r3, #1
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	441a      	add	r2, r3
 8004018:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800401c:	1c59      	adds	r1, r3, #1
 800401e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004028:	440b      	add	r3, r1
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 800402e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004032:	3301      	adds	r3, #1
 8004034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004038:	e7cd      	b.n	8003fd6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33a>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 800403a:	2300      	movs	r3, #0
 800403c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004046:	429a      	cmp	r2, r3
 8004048:	d21e      	bcs.n	8004088 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ec>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	ed93 7a00 	vldr	s14, [r3]
 800405e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800406e:	4413      	add	r3, r2
 8004070:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004078:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 800407c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004080:	3301      	adds	r3, #1
 8004082:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004086:	e7db      	b.n	8004040 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3a4>
 8004088:	2501      	movs	r5, #1
 800408a:	f107 0318 	add.w	r3, r7, #24
 800408e:	4618      	mov	r0, r3
 8004090:	f7fd fc78 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8004094:	2d01      	cmp	r5, #1
 8004096:	d001      	beq.n	800409c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x400>
 8004098:	2500      	movs	r5, #0
 800409a:	e000      	b.n	800409e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
 800409c:	2501      	movs	r5, #1
 800409e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd fc6e 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 80040a8:	2d01      	cmp	r5, #1
 80040aa:	d001      	beq.n	80040b0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x414>
 80040ac:	2500      	movs	r5, #0
 80040ae:	e000      	b.n	80040b2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x416>
 80040b0:	2501      	movs	r5, #1
 80040b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd fc64 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 80040bc:	2d01      	cmp	r5, #1
 80040be:	d001      	beq.n	80040c4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x428>
 80040c0:	2500      	movs	r5, #0
 80040c2:	e000      	b.n	80040c6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
 80040c4:	2501      	movs	r5, #1
 80040c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fd fc5a 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 80040d0:	2d01      	cmp	r5, #1
 80040d2:	d001      	beq.n	80040d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43c>
 80040d4:	2500      	movs	r5, #0
 80040d6:	e000      	b.n	80040da <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
 80040d8:	2501      	movs	r5, #1
 80040da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fd fc50 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 80040e4:	2d01      	cmp	r5, #1
 80040e6:	d001      	beq.n	80040ec <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
 80040e8:	2500      	movs	r5, #0
 80040ea:	e000      	b.n	80040ee <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>
 80040ec:	2501      	movs	r5, #1
 80040ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fd fc46 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 80040f8:	2d01      	cmp	r5, #1
 80040fa:	d106      	bne.n	800410a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80040fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004100:	3301      	adds	r3, #1
 8004102:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004106:	e665      	b.n	8003dd4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x138>
            }
        }

        return EIDSP_OK;
 8004108:	2400      	movs	r4, #0
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 800410a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800410e:	4618      	mov	r0, r3
 8004110:	f7fd fc38 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8004114:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004118:	4618      	mov	r0, r3
 800411a:	f7fd fc33 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 800411e:	4623      	mov	r3, r4
 8004120:	4618      	mov	r0, r3
 8004122:	37b8      	adds	r7, #184	; 0xb8
 8004124:	46bd      	mov	sp, r7
 8004126:	bdb0      	pop	{r4, r5, r7, pc}

08004128 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	3301      	adds	r3, #1
 8004144:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4413      	add	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d004      	beq.n	8004160 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	4413      	add	r3, r2
 800415c:	3b01      	subs	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
        }
        return count;
 8004160:	697b      	ldr	r3, [r7, #20]
    }
 8004162:	4618      	mov	r0, r3
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v1(
 8004170:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8004174:	b0b3      	sub	sp, #204	; 0xcc
 8004176:	af04      	add	r7, sp, #16
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_ptr,
        const float sampling_freq)
    {
        // scale the signal
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	edd3 7a02 	vldr	s15, [r3, #8]
 8004188:	eeb0 0a67 	vmov.f32	s0, s15
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7fd fdbf 	bl	8001d10 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8004192:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8004196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x3e>
            ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 800419e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80041a2:	488c      	ldr	r0, [pc, #560]	; (80043d4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x264>)
 80041a4:	f001 feba 	bl	8005f1c <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 80041a8:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80041ac:	e10b      	b.n	80043c6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // transpose the matrix so we have one row per axis (nifty!)
        ret = numpy::transpose(input_matrix);
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7fd fd2d 	bl	8001c0e <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 80041b4:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 80041b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x60>
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 80041c0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80041c4:	4884      	ldr	r0, [pc, #528]	; (80043d8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x268>)
 80041c6:	f001 fea9 	bl	8005f1c <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 80041ca:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80041ce:	e0fa      	b.n	80043c6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // the spectral edges that we want to calculate
        matrix_t edges_matrix_in(64, 1);
 80041d0:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80041d4:	2300      	movs	r3, #0
 80041d6:	2201      	movs	r2, #1
 80041d8:	2140      	movs	r1, #64	; 0x40
 80041da:	f7fd fba8 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
        size_t edge_matrix_ix = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        char spectral_str[128] = { 0 };
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	f107 0318 	add.w	r3, r7, #24
 80041ec:	227c      	movs	r2, #124	; 0x7c
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f01f faed 	bl	80237d0 <memset>
        if (strlen(config_ptr->spectral_power_edges) > sizeof(spectral_str) - 1) {
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fc f842 	bl	8000284 <strlen>
 8004200:	4603      	mov	r3, r0
 8004202:	2b7f      	cmp	r3, #127	; 0x7f
 8004204:	d901      	bls.n	800420a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x9a>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8004206:	4c75      	ldr	r4, [pc, #468]	; (80043dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x26c>)
 8004208:	e0d8      	b.n	80043bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }
        memcpy(
            spectral_str,
            config_ptr->spectral_power_edges,
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
        memcpy(
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc f836 	bl	8000284 <strlen>
 8004218:	4602      	mov	r2, r0
 800421a:	f107 0314 	add.w	r3, r7, #20
 800421e:	4621      	mov	r1, r4
 8004220:	4618      	mov	r0, r3
 8004222:	f01f faad 	bl	8023780 <memcpy>
            strlen(config_ptr->spectral_power_edges));

        // convert spectral_power_edges (string) into float array
        char *spectral_ptr = spectral_str;
 8004226:	f107 0314 	add.w	r3, r7, #20
 800422a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 800422e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d03f      	beq.n	80042b6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x146>
            while ((*spectral_ptr) == ' ') {
 8004236:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b20      	cmp	r3, #32
 800423e:	d105      	bne.n	800424c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xdc>
                spectral_ptr++;
 8004240:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004244:	3301      	adds	r3, #1
 8004246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            while ((*spectral_ptr) == ' ') {
 800424a:	e7f4      	b.n	8004236 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc6>
            }

            edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 800424c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8004250:	f01f fa3a 	bl	80236c8 <atof>
 8004254:	ec59 8b10 	vmov	r8, r9, d0
 8004258:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800425c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004260:	1c59      	adds	r1, r3, #1
 8004262:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	18d4      	adds	r4, r2, r3
 800426a:	4640      	mov	r0, r8
 800426c:	4649      	mov	r1, r9
 800426e:	f7fc fcc5 	bl	8000bfc <__aeabi_d2f>
 8004272:	4603      	mov	r3, r0
 8004274:	6023      	str	r3, [r4, #0]

            // find next (spectral) delimiter (or '\0' character)
            while ((*spectral_ptr != ',')) {
 8004276:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b2c      	cmp	r3, #44	; 0x2c
 800427e:	d00b      	beq.n	8004298 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x128>
                spectral_ptr++;
 8004280:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004284:	3301      	adds	r3, #1
 8004286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (*spectral_ptr == '\0')
 800428a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d000      	beq.n	8004296 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x126>
            while ((*spectral_ptr != ',')) {
 8004294:	e7ef      	b.n	8004276 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x106>
                    break;
 8004296:	bf00      	nop
            }

            if (*spectral_ptr == '\0') {
 8004298:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13a>
                spectral_ptr = NULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042a8:	e7c1      	b.n	800422e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
            }
            else {
                spectral_ptr++;
 80042aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042ae:	3301      	adds	r3, #1
 80042b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 80042b4:	e7bb      	b.n	800422e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
            }
        }
        edges_matrix_in.rows = edge_matrix_ix;
 80042b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        // calculate how much room we need for the output matrix
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
            true,
            config_ptr->spectral_peaks_count,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80042c2:	4619      	mov	r1, r3
            edges_matrix_in.rows);
 80042c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80042c8:	461a      	mov	r2, r3
 80042ca:	2001      	movs	r0, #1
 80042cc:	f7ff ff2c 	bl	8004128 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80042d0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
        if (output_matrix->cols * output_matrix->rows !=
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	6852      	ldr	r2, [r2, #4]
 80042dc:	fb03 f202 	mul.w	r2, r3, r2
            static_cast<uint32_t>(output_matrix_cols * config_ptr->axes)) {
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	4619      	mov	r1, r3
 80042e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
        if (output_matrix->cols * output_matrix->rows !=
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d001      	beq.n	80042f6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x186>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80042f2:	4c3b      	ldr	r4, [pc, #236]	; (80043e0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x270>)
 80042f4:	e062      	b.n	80043bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        output_matrix->cols = output_matrix_cols;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80042fc:	609a      	str	r2, [r3, #8]
        output_matrix->rows = config_ptr->axes;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	461a      	mov	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	605a      	str	r2, [r3, #4]

        spectral::filter_t filter_type;
        if (strcmp(config_ptr->filter_type, "low") == 0) {
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4935      	ldr	r1, [pc, #212]	; (80043e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x274>)
 800430e:	4618      	mov	r0, r3
 8004310:	f7fb ffae 	bl	8000270 <strcmp>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d103      	bne.n	8004322 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b2>
            filter_type = spectral::filter_lowpass;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8004320:	e00f      	b.n	8004342 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else if (strcmp(config_ptr->filter_type, "high") == 0) {
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	4930      	ldr	r1, [pc, #192]	; (80043e8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x278>)
 8004328:	4618      	mov	r0, r3
 800432a:	f7fb ffa1 	bl	8000270 <strcmp>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d103      	bne.n	800433c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1cc>
            filter_type = spectral::filter_highpass;
 8004334:	2302      	movs	r3, #2
 8004336:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800433a:	e002      	b.n	8004342 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else {
            filter_type = spectral::filter_none;
 800433c:	2300      	movs	r3, #0
 800433e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        ret = spectral::feature::spectral_analysis(
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	edd3 7a04 	vldr	s15, [r3, #16]
            output_matrix,
            input_matrix,
            sampling_freq,
            filter_type,
            config_ptr->filter_cutoff,
            config_ptr->filter_order,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
        ret = spectral::feature::spectral_analysis(
 800434c:	b2dc      	uxtb	r4, r3
            config_ptr->fft_length,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
        ret = spectral::feature::spectral_analysis(
 8004352:	b29b      	uxth	r3, r3
            config_ptr->spectral_peaks_count,
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6a12      	ldr	r2, [r2, #32]
        ret = spectral::feature::spectral_analysis(
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8004360:	f897 00af 	ldrb.w	r0, [r7, #175]	; 0xaf
 8004364:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8004368:	9102      	str	r1, [sp, #8]
 800436a:	9201      	str	r2, [sp, #4]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	eeb0 1a47 	vmov.f32	s2, s14
 8004372:	4623      	mov	r3, r4
 8004374:	eef0 0a67 	vmov.f32	s1, s15
 8004378:	4602      	mov	r2, r0
 800437a:	ed97 0a00 	vldr	s0, [r7]
 800437e:	68f9      	ldr	r1, [r7, #12]
 8004380:	68b8      	ldr	r0, [r7, #8]
 8004382:	f7ff fc8b 	bl	8003c9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 8004386:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            config_ptr->spectral_peaks_threshold,
            &edges_matrix_in);
        if (ret != EIDSP_OK) {
 800438a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x232>
            ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 8004392:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004396:	4815      	ldr	r0, [pc, #84]	; (80043ec <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x27c>)
 8004398:	f001 fdc0 	bl	8005f1c <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 800439c:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80043a0:	e00c      	b.n	80043bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        // flatten again
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043ac:	fb03 f202 	mul.w	r2, r3, r2
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]
        output_matrix->rows = 1;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2201      	movs	r2, #1
 80043b8:	605a      	str	r2, [r3, #4]

        return EIDSP_OK;
 80043ba:	2400      	movs	r4, #0
        matrix_t edges_matrix_in(64, 1);
 80043bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fd fadf 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 80043c6:	4623      	mov	r3, r4
 80043c8:	4618      	mov	r0, r3
 80043ca:	37bc      	adds	r7, #188	; 0xbc
 80043cc:	46bd      	mov	sp, r7
 80043ce:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80043d2:	bf00      	nop
 80043d4:	08027bf0 	.word	0x08027bf0
 80043d8:	08027c14 	.word	0x08027c14
 80043dc:	fffffc10 	.word	0xfffffc10
 80043e0:	fffffc14 	.word	0xfffffc14
 80043e4:	08027c3c 	.word	0x08027c3c
 80043e8:	08027c40 	.word	0x08027c40
 80043ec:	08027c48 	.word	0x08027c48

080043f0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>:

    static void get_start_stop_bin(
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	ed87 0a05 	vstr	s0, [r7, #20]
 80043fa:	6138      	str	r0, [r7, #16]
 80043fc:	edc7 0a03 	vstr	s1, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	70fb      	strb	r3, [r7, #3]
        size_t *stop_bin,
        bool is_high_pass)
    {
        // we want to find n such that fcutoff < sample_f / fft * n ( or > for high pass )
        // also, + - half bin width (sample_f/(fft*2)) for high / low pass
        float bin = filter_cutoff * fft_length / sampling_freq;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004410:	edd7 7a03 	vldr	s15, [r7, #12]
 8004414:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004418:	ed97 7a05 	vldr	s14, [r7, #20]
 800441c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004420:	edc7 7a07 	vstr	s15, [r7, #28]
        if (is_high_pass) {
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d021      	beq.n	800446e <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x7e>
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
 800442a:	69f8      	ldr	r0, [r7, #28]
 800442c:	f7fc f896 	bl	800055c <__aeabi_f2d>
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xb0>)
 8004436:	f7fb ff31 	bl	800029c <__aeabi_dsub>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4610      	mov	r0, r2
 8004440:	4619      	mov	r1, r3
 8004442:	f7fc fbbb 	bl	8000bbc <__aeabi_d2uiz>
 8004446:	4603      	mov	r3, r0
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	601a      	str	r2, [r3, #0]
            // don't use the DC bin b/c it's zero
            *start_bin = *start_bin == 0 ? 1 : *start_bin;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x6c>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	e000      	b.n	800445e <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x6e>
 800445c:	2301      	movs	r3, #1
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	6013      	str	r3, [r2, #0]
            *stop_bin = fft_length / 2 + 1; // go one past
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	601a      	str	r2, [r3, #0]
        }
        else {
            *start_bin = 1;
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
        }
    }
 800446c:	e014      	b.n	8004498 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xa8>
            *start_bin = 1;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
 8004474:	69f8      	ldr	r0, [r7, #28]
 8004476:	f7fc f871 	bl	800055c <__aeabi_f2d>
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xb0>)
 8004480:	f7fb ff0e 	bl	80002a0 <__adddf3>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4610      	mov	r0, r2
 800448a:	4619      	mov	r1, r3
 800448c:	f7fc fb96 	bl	8000bbc <__aeabi_d2uiz>
 8004490:	4603      	mov	r3, r0
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	601a      	str	r2, [r3, #0]
    }
 8004498:	bf00      	nop
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	3fe00000 	.word	0x3fe00000

080044a4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v2(
 80044a4:	b5b0      	push	{r4, r5, r7, lr}
 80044a6:	b0a8      	sub	sp, #160	; 0xa0
 80044a8:	af04      	add	r7, sp, #16
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        // transpose the matrix so we have one row per axis
        numpy::transpose_in_place(input_matrix);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7fd fb1a 	bl	8001aee <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

        // func tests for scale of 1 and does a no op in that case
        EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80044c0:	eeb0 0a67 	vmov.f32	s0, s15
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7fd fc23 	bl	8001d10 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80044ca:	6738      	str	r0, [r7, #112]	; 0x70
 80044cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x32>
 80044d2:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80044d4:	e19e      	b.n	8004814 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>

        bool do_filter = false;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        bool is_high_pass;

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	49ab      	ldr	r1, [pc, #684]	; (8004790 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2ec>)
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fb fec4 	bl	8000270 <strcmp>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d11e      	bne.n	800452c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x88>
            if( config->filter_order ) {
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d013      	beq.n	800451e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	4619      	mov	r1, r3
 8004504:	eef0 0a67 	vmov.f32	s1, s15
 8004508:	ed97 0a00 	vldr	s0, [r7]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7fe fe21 	bl	8003154 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8004512:	66b8      	str	r0, [r7, #104]	; 0x68
 8004514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
 800451a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800451c:	e17a      	b.n	8004814 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            is_high_pass = false;
 8004524:	2300      	movs	r3, #0
 8004526:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800452a:	e026      	b.n	800457a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4998      	ldr	r1, [pc, #608]	; (8004794 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f0>)
 8004532:	4618      	mov	r0, r3
 8004534:	f7fb fe9c 	bl	8000270 <strcmp>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d11d      	bne.n	800457a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
            if( config->filter_order ) {
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d013      	beq.n	800456e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	edd3 7a04 	vldr	s15, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	4619      	mov	r1, r3
 8004554:	eef0 0a67 	vmov.f32	s1, s15
 8004558:	ed97 0a00 	vldr	s0, [r7]
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7fe fe2f 	bl	80031c0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8004562:	66f8      	str	r0, [r7, #108]	; 0x6c
 8004564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
 800456a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800456c:	e152      	b.n	8004814 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 800456e:	2301      	movs	r3, #1
 8004570:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            is_high_pass = true;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        }

        EI_TRY(processing::subtract_mean(input_matrix));
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff fb56 	bl	8003c2c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8004580:	6678      	str	r0, [r7, #100]	; 0x64
 8004582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xe8>
 8004588:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800458a:	e143      	b.n	8004814 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>

        // Figure bins we remove based on filter cutoff
        size_t start_bin, stop_bin;
        if (do_filter) {
 800458c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004590:	2b00      	cmp	r3, #0
 8004592:	d012      	beq.n	80045ba <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x116>
            get_start_stop_bin(
                sampling_freq,
                config->fft_length,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
            get_start_stop_bin(
 8004598:	4618      	mov	r0, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	edd3 7a04 	vldr	s15, [r3, #16]
 80045a0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80045a4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80045a8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80045ac:	eef0 0a67 	vmov.f32	s1, s15
 80045b0:	ed97 0a00 	vldr	s0, [r7]
 80045b4:	f7ff ff1c 	bl	80043f0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>
 80045b8:	e008      	b.n	80045cc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x128>
                &start_bin,
                &stop_bin,
                is_high_pass);
        }
        else {
            start_bin = 1;
 80045ba:	2301      	movs	r3, #1
 80045bc:	64bb      	str	r3, [r7, #72]	; 0x48
            stop_bin = config->fft_length / 2 + 1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	0fda      	lsrs	r2, r3, #31
 80045c4:	4413      	add	r3, r2
 80045c6:	105b      	asrs	r3, r3, #1
 80045c8:	3301      	adds	r3, #1
 80045ca:	647b      	str	r3, [r7, #68]	; 0x44
        }
        size_t num_bins = stop_bin - start_bin;
 80045cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	663b      	str	r3, [r7, #96]	; 0x60

        float *feature_out = output_matrix->buffer;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80045dc:	2300      	movs	r3, #0
 80045de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80045ea:	429a      	cmp	r2, r3
 80045ec:	f080 8111 	bcs.w	8004812 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36e>
            float *data_window = input_matrix->get_row_ptr(row);
 80045f0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7fd f9db 	bl	80019b0 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80045fa:	65f8      	str	r0, [r7, #92]	; 0x5c
            size_t data_size = input_matrix->cols;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	65bb      	str	r3, [r7, #88]	; 0x58

            matrix_t rms_in_matrix(1, data_size, data_window);
 8004602:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004608:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800460a:	2101      	movs	r1, #1
 800460c:	f7fd f98f 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
            matrix_t rms_out_matrix(1, 1, feature_out);
 8004610:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004614:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004618:	2201      	movs	r2, #1
 800461a:	2101      	movs	r1, #1
 800461c:	f7fd f987 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
 8004620:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004624:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f7fd fc46 	bl	8001ebc <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8004630:	6578      	str	r0, [r7, #84]	; 0x54
 8004632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x19a>
 8004638:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800463a:	2500      	movs	r5, #0
 800463c:	e0d2      	b.n	80047e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x340>

            feature_out++;
 800463e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004642:	3304      	adds	r3, #4
 8004644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            // Standard Deviation
            float stddev = *(feature_out-1); //= sqrt(numpy::variance(data_window, data_size));
 8004648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800464c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8004650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            if (stddev == 0.0f) {
 8004654:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004658:	eef5 7a40 	vcmp.f32	s15, #0.0
 800465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004660:	d102      	bne.n	8004668 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1c4>
                stddev = 1e-10f;
 8004662:	4b4d      	ldr	r3, [pc, #308]	; (8004798 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f4>)
 8004664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            // Substitute 0 for mean (b/c it is subtracted out above)
            // Skew becomes: mean(X^3) / stddev^3
            // Kurtosis becomes: mean(X^4) / stddev^4
            // Note, this is the Fisher definition of Kurtosis, so subtract 3
            // (see https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html)
            float s_sum = 0;
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	67fb      	str	r3, [r7, #124]	; 0x7c
            float k_sum = 0;
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	67bb      	str	r3, [r7, #120]	; 0x78
            float temp;
            for (size_t i = 0; i < data_size; i++) {
 8004674:	2300      	movs	r3, #0
 8004676:	677b      	str	r3, [r7, #116]	; 0x74
 8004678:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800467a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800467c:	429a      	cmp	r2, r3
 800467e:	d233      	bcs.n	80046e8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x244>
                temp = data_window[i] * data_window[i] * data_window[i];
 8004680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004686:	4413      	add	r3, r2
 8004688:	ed93 7a00 	vldr	s14, [r3]
 800468c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004692:	4413      	add	r3, r2
 8004694:	edd3 7a00 	vldr	s15, [r3]
 8004698:	ee27 7a27 	vmul.f32	s14, s14, s15
 800469c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046a2:	4413      	add	r3, r2
 80046a4:	edd3 7a00 	vldr	s15, [r3]
 80046a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ac:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                s_sum += temp;
 80046b0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80046b4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80046b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046bc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                k_sum += temp * data_window[i];
 80046c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046c6:	4413      	add	r3, r2
 80046c8:	ed93 7a00 	vldr	s14, [r3]
 80046cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80046d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80046d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046dc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (size_t i = 0; i < data_size; i++) {
 80046e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e2:	3301      	adds	r3, #1
 80046e4:	677b      	str	r3, [r7, #116]	; 0x74
 80046e6:	e7c7      	b.n	8004678 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d4>
            }
            // Skewness out
            temp = stddev * stddev * stddev;
 80046e8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80046ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80046f0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80046f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            *feature_out++ = (s_sum / data_size) / temp;
 80046fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004706:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800470a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800470e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004712:	1d1a      	adds	r2, r3, #4
 8004714:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004718:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800471c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004720:	edc3 7a00 	vstr	s15, [r3]
            // Kurtosis out
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 8004724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8004732:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004736:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800473a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800473e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800474a:	1d1a      	adds	r2, r3, #4
 800474c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004750:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004754:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004758:	edc3 7a00 	vstr	s15, [r3]

            EI_TRY(numpy::welch_max_hold(
 800475c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800475e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	69d2      	ldr	r2, [r2, #28]
 8004764:	4610      	mov	r0, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800476c:	9202      	str	r2, [sp, #8]
 800476e:	9001      	str	r0, [sp, #4]
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	460b      	mov	r3, r1
 8004774:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004778:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800477a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800477c:	f7fd ffd2 	bl	8002724 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8004780:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f8>
 8004788:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800478a:	2500      	movs	r5, #0
 800478c:	e02a      	b.n	80047e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x340>
 800478e:	bf00      	nop
 8004790:	08027c3c 	.word	0x08027c3c
 8004794:	08027c40 	.word	0x08027c40
 8004798:	2edbe6ff 	.word	0x2edbe6ff
                feature_out,
                start_bin,
                stop_bin,
                config->fft_length,
                config->do_fft_overlap));
            if (config->do_log) {
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d016      	beq.n	80047d4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x330>
                numpy::zero_handling(feature_out, num_bins);
 80047a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047a8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80047ac:	f7fe f86c 	bl	8002888 <_ZN2ei5numpy13zero_handlingEPfj>
                ei_matrix temp(num_bins, 1, feature_out);
 80047b0:	f107 0014 	add.w	r0, r7, #20
 80047b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047b8:	2201      	movs	r2, #1
 80047ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047bc:	f7fd f8b7 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
                numpy::log10(&temp);
 80047c0:	f107 0314 	add.w	r3, r7, #20
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fd fe1b 	bl	8002400 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>
                ei_matrix temp(num_bins, 1, feature_out);
 80047ca:	f107 0314 	add.w	r3, r7, #20
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fd f8d8 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
            }
            feature_out += num_bins;
 80047d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80047dc:	4413      	add	r3, r2
 80047de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047e2:	2501      	movs	r5, #1
 80047e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fd f8cb 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 80047ee:	2d01      	cmp	r5, #1
 80047f0:	d001      	beq.n	80047f6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x352>
 80047f2:	2500      	movs	r5, #0
 80047f4:	e000      	b.n	80047f8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x354>
 80047f6:	2501      	movs	r5, #1
 80047f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fd f8c1 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8004802:	2d01      	cmp	r5, #1
 8004804:	d106      	bne.n	8004814 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8004806:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800480a:	3301      	adds	r3, #1
 800480c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004810:	e6e7      	b.n	80045e2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
        }
        return EIDSP_OK;
 8004812:	2400      	movs	r4, #0
    }
 8004814:	4623      	mov	r3, r4
 8004816:	4618      	mov	r0, r3
 8004818:	3790      	adds	r7, #144	; 0x90
 800481a:	46bd      	mov	sp, r7
 800481c:	bdb0      	pop	{r4, r5, r7, pc}
 800481e:	bf00      	nop

08004820 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fd f85b 	bl	80018e6 <_ZNSt14_Function_baseD1Ev>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4618      	mov	r0, r3
 8004846:	f002 f867 	bl	8006918 <_ZNSt8functionIFijjPfEEC1Ev>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <_ZN2ei11ei_signal_tD1Ev>:
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff ffde 	bl	8004820 <_ZNSt8functionIFijjPfEED1Ev>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_spectral_analysis_features(
    signal_t *signal,
    matrix_t *output_matrix,
    void *config_ptr,
    const float frequency)
{
 8004870:	b590      	push	{r4, r7, lr}
 8004872:	b08b      	sub	sp, #44	; 0x2c
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t *config = (ei_dsp_config_spectral_analysis_t *)config_ptr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	627b      	str	r3, [r7, #36]	; 0x24

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488a:	6852      	ldr	r2, [r2, #4]
 800488c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	461a      	mov	r2, r3
 8004896:	f107 0014 	add.w	r0, r7, #20
 800489a:	2300      	movs	r3, #0
 800489c:	f7fd f847 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3a>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80048a6:	4c1b      	ldr	r4, [pc, #108]	; (8004914 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa4>)
 80048a8:	e02a      	b.n	8004900 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2100      	movs	r1, #0
 80048b4:	f001 ff3a 	bl	800672c <_ZNKSt8functionIFijjPfEEclEjjS0_>
        return spectral::wavelet::extract_wavelet_features(&input_matrix, output_matrix, config, frequency);
    }
#endif

#if EI_DSP_PARAMS_SPECTRAL_ANALYSIS_ANALYSIS_TYPE_FFT || EI_DSP_PARAMS_ALL
    if (strcmp(config->analysis_type, "FFT") == 0) {
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	4916      	ldr	r1, [pc, #88]	; (8004918 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa8>)
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fb fcd6 	bl	8000270 <strcmp>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d119      	bne.n	80048fe <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x8e>
        if (config->implementation_version == 1) {
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d10a      	bne.n	80048e8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x78>
            return spectral::feature::extract_spectral_analysis_features_v1(
 80048d2:	f107 0314 	add.w	r3, r7, #20
 80048d6:	ed97 0a00 	vldr	s0, [r7]
 80048da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff fc46 	bl	8004170 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80048e4:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80048e6:	e00b      	b.n	8004900 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
        } else {
            return spectral::feature::extract_spectral_analysis_features_v2(
 80048e8:	f107 0314 	add.w	r3, r7, #20
 80048ec:	ed97 0a00 	vldr	s0, [r7]
 80048f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fdd5 	bl	80044a4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80048fa:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80048fc:	e000      	b.n	8004900 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
            output_matrix,
            config,
            frequency);
    }
#endif
    return EIDSP_NOT_SUPPORTED;
 80048fe:	4c07      	ldr	r4, [pc, #28]	; (800491c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xac>)
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	4618      	mov	r0, r3
 8004906:	f7fd f83d 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
}
 800490a:	4623      	mov	r3, r4
 800490c:	4618      	mov	r0, r3
 800490e:	372c      	adds	r7, #44	; 0x2c
 8004910:	46bd      	mov	sp, r7
 8004912:	bd90      	pop	{r4, r7, pc}
 8004914:	fffffc16 	.word	0xfffffc16
 8004918:	08027c9c 	.word	0x08027c9c
 800491c:	fffffc0a 	.word	0xfffffc0a

08004920 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	b098      	sub	sp, #96	; 0x60
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004936:	ca07      	ldmia	r2, {r0, r1, r2}
 8004938:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	4967      	ldr	r1, [pc, #412]	; (8004adc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
 8004940:	4618      	mov	r0, r3
 8004942:	f7fb fc95 	bl	8000270 <strcmp>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 8004950:	2303      	movs	r3, #3
 8004952:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    size_t output_ix = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 800495a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800495e:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004966:	2300      	movs	r3, #0
 8004968:	65bb      	str	r3, [r7, #88]	; 0x58
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004970:	429a      	cmp	r2, r3
 8004972:	f080 80ac 	bcs.w	8004ace <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ae>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497c:	d803      	bhi.n	8004986 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
 800497e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	e001      	b.n	800498a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
 8004986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800498a:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	461a      	mov	r2, r3
 8004990:	f107 0014 	add.w	r0, r7, #20
 8004994:	2300      	movs	r3, #0
 8004996:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004998:	f7fc ffc9 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80049a2:	4d4f      	ldr	r5, [pc, #316]	; (8004ae0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
 80049a4:	2400      	movs	r4, #0
 80049a6:	e086      	b.n	8004ab6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049b0:	f001 febc 	bl	800672c <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80049b4:	2300      	movs	r3, #0
 80049b6:	657b      	str	r3, [r7, #84]	; 0x54
 80049b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049bc:	429a      	cmp	r2, r3
 80049be:	d275      	bcs.n	8004aac <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	edd3 7a00 	vldr	s15, [r3]
 80049cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d0:	ee17 3a90 	vmov	r3, s15
 80049d4:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80049d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d8:	0c1b      	lsrs	r3, r3, #16
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049e4:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8004ae4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80049e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049ec:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 80049f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049fe:	eddf 6a39 	vldr	s13, [pc, #228]	; 8004ae4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8004a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a06:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a16:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004ae4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8004a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a1e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8004a22:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d11b      	bne.n	8004a62 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
                output_matrix->buffer[output_ix++] = r;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a30:	1c59      	adds	r1, r3, #1
 8004a32:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a3a:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a42:	1c59      	adds	r1, r3, #1
 8004a44:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a4c:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a54:	1c59      	adds	r1, r3, #1
 8004a56:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e020      	b.n	8004aa4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8004a62:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004a66:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004ae8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
 8004a6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a6e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004a72:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004aec <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
 8004a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a7e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004a82:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8004af0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
 8004a86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a8e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a98:	1c59      	adds	r1, r3, #1
 8004a9a:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa2:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	657b      	str	r3, [r7, #84]	; 0x54
 8004aaa:	e785      	b.n	80049b8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
            }
        }

        bytes_left -= elements_to_read;
 8004aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab4:	2401      	movs	r4, #1
 8004ab6:	f107 0314 	add.w	r3, r7, #20
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fc ff62 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8004ac0:	2c01      	cmp	r4, #1
 8004ac2:	d105      	bne.n	8004ad0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004ac4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aca:	65bb      	str	r3, [r7, #88]	; 0x58
 8004acc:	e74d      	b.n	800496a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
 8004ace:	2500      	movs	r5, #0
}
 8004ad0:	462b      	mov	r3, r5
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3760      	adds	r7, #96	; 0x60
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8004ada:	bf00      	nop
 8004adc:	08027ecc 	.word	0x08027ecc
 8004ae0:	fffffc16 	.word	0xfffffc16
 8004ae4:	437f0000 	.word	0x437f0000
 8004ae8:	3e991687 	.word	0x3e991687
 8004aec:	3f1645a2 	.word	0x3f1645a2
 8004af0:	3de978d5 	.word	0x3de978d5

08004af4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>:

#endif //(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI)

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(const ei_impulse_t *impulse, signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8004af4:	b5b0      	push	{r4, r5, r7, lr}
 8004af6:	b0a6      	sub	sp, #152	; 0x98
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6178      	str	r0, [r7, #20]
 8004afc:	6139      	str	r1, [r7, #16]
 8004afe:	60fa      	str	r2, [r7, #12]
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8004b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b14:	49ab      	ldr	r1, [pc, #684]	; (8004dc4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d0>)
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fb fbaa 	bl	8000270 <strcmp>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x32>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x34>
 8004b26:	2303      	movs	r3, #3
 8004b28:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    size_t output_ix = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 8004b32:	f644 438b 	movw	r3, #19595	; 0x4c8b
 8004b36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 8004b3a:	f249 6345 	movw	r3, #38469	; 0x9645
 8004b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 8004b40:	f641 532f 	movw	r3, #7471	; 0x1d2f
 8004b44:	67bb      	str	r3, [r7, #120]	; 0x78

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8004b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b4a:	677b      	str	r3, [r7, #116]	; 0x74
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004b52:	2300      	movs	r3, #0
 8004b54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004b60:	429a      	cmp	r2, r3
 8004b62:	f080 821d 	bcs.w	8004fa0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ac>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6c:	d803      	bhi.n	8004b76 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x82>
 8004b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	e001      	b.n	8004b7a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x86>
 8004b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b7a:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f107 0018 	add.w	r0, r7, #24
 8004b84:	2300      	movs	r3, #0
 8004b86:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004b88:	f7fc fed1 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d102      	bne.n	8004b98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xa4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004b92:	4d8d      	ldr	r5, [pc, #564]	; (8004dc8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d4>)
 8004b94:	2400      	movs	r4, #0
 8004b96:	e1f5      	b.n	8004f84 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x490>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8004b98:	6938      	ldr	r0, [r7, #16]
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004b9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ba2:	f001 fdc3 	bl	800672c <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004bac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004bb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	f080 81e1 	bcs.w	8004f7a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x486>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	edd3 7a00 	vldr	s15, [r3]
 8004bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bca:	ee17 3a90 	vmov	r3, s15
 8004bce:	66fb      	str	r3, [r7, #108]	; 0x6c

            if (channel_count == 3) {
 8004bd0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	f040 8105 	bne.w	8004de4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2f0>
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004be0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8004dcc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8004be4:	eef4 7a47 	vcmp.f32	s15, s14
 8004be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bec:	d160      	bne.n	8004cb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004bf4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004dd0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8004bf8:	eef4 7a47 	vcmp.f32	s15, s14
 8004bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c00:	d156      	bne.n	8004cb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	64fb      	str	r3, [r7, #76]	; 0x4c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8004c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0c:	0a1b      	lsrs	r3, r3, #8
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	64bb      	str	r3, [r7, #72]	; 0x48
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8004c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	647b      	str	r3, [r7, #68]	; 0x44

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + impulse->tflite_input_zeropoint);
 8004c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c34:	1c59      	adds	r1, r3, #1
 8004c36:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004c3a:	4413      	add	r3, r2
 8004c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c40:	edc7 7a00 	vstr	s15, [r7]
 8004c44:	783a      	ldrb	r2, [r7, #0]
 8004c46:	b252      	sxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + impulse->tflite_input_zeropoint);
 8004c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c66:	1c59      	adds	r1, r3, #1
 8004c68:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004c6c:	4413      	add	r3, r2
 8004c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c72:	edc7 7a00 	vstr	s15, [r7]
 8004c76:	783a      	ldrb	r2, [r7, #0]
 8004c78:	b252      	sxtb	r2, r2
 8004c7a:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + impulse->tflite_input_zeropoint);
 8004c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c98:	1c59      	adds	r1, r3, #1
 8004c9a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004c9e:	4413      	add	r3, r2
 8004ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ca4:	edc7 7a00 	vstr	s15, [r7]
 8004ca8:	783a      	ldrb	r2, [r7, #0]
 8004caa:	b252      	sxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e15e      	b.n	8004f6e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cbe:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004dd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cc6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ccc:	0a1b      	lsrs	r3, r3, #8
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cd8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8004dd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004cdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ce0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	ee07 3a90 	vmov	s15, r3
 8004cec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cf0:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004dd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004cf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cf8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004d02:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004d06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d0a:	eeb0 0a66 	vmov.f32	s0, s13
 8004d0e:	f7fc feb6 	bl	8001a7e <_ZSt5roundf>
 8004d12:	eeb0 7a40 	vmov.f32	s14, s0
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d28:	1c59      	adds	r1, r3, #1
 8004d2a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004d2e:	4413      	add	r3, r2
 8004d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d34:	edc7 7a00 	vstr	s15, [r7]
 8004d38:	783a      	ldrb	r2, [r7, #0]
 8004d3a:	b252      	sxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004d44:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004d48:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d4c:	eeb0 0a66 	vmov.f32	s0, s13
 8004d50:	f7fc fe95 	bl	8001a7e <_ZSt5roundf>
 8004d54:	eeb0 7a40 	vmov.f32	s14, s0
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d6a:	1c59      	adds	r1, r3, #1
 8004d6c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004d70:	4413      	add	r3, r2
 8004d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d76:	edc7 7a00 	vstr	s15, [r7]
 8004d7a:	783a      	ldrb	r2, [r7, #0]
 8004d7c:	b252      	sxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004d86:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004d8a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d8e:	eeb0 0a66 	vmov.f32	s0, s13
 8004d92:	f7fc fe74 	bl	8001a7e <_ZSt5roundf>
 8004d96:	eeb0 7a40 	vmov.f32	s14, s0
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004dac:	1c59      	adds	r1, r3, #1
 8004dae:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004db2:	4413      	add	r3, r2
 8004db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db8:	edc7 7a00 	vstr	s15, [r7]
 8004dbc:	783a      	ldrb	r2, [r7, #0]
 8004dbe:	b252      	sxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e0d4      	b.n	8004f6e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
 8004dc4:	08027ecc 	.word	0x08027ecc
 8004dc8:	fffffc16 	.word	0xfffffc16
 8004dcc:	3b808081 	.word	0x3b808081
 8004dd0:	c3000000 	.word	0xc3000000
 8004dd4:	437f0000 	.word	0x437f0000
 8004dd8:	3e991687 	.word	0x3e991687
 8004ddc:	3f1645a2 	.word	0x3f1645a2
 8004de0:	3de978d5 	.word	0x3de978d5
                }
            }
            else {
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004dea:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8004dcc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8004dee:	eef4 7a47 	vcmp.f32	s15, s14
 8004df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df6:	d15b      	bne.n	8004eb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004dfe:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8004dd0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8004e02:	eef4 7a47 	vcmp.f32	s15, s14
 8004e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0a:	d151      	bne.n	8004eb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8004e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0e:	0c1b      	lsrs	r3, r3, #16
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8004e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e16:	0a1b      	lsrs	r3, r3, #8
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	667b      	str	r3, [r7, #100]	; 0x64
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8004e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	663b      	str	r3, [r7, #96]	; 0x60

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 8004e22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e24:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8004e28:	fb03 f202 	mul.w	r2, r3, r2
 8004e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e2e:	f249 6145 	movw	r1, #38469	; 0x9645
 8004e32:	fb01 f303 	mul.w	r3, r1, r3
 8004e36:	441a      	add	r2, r3
 8004e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e3a:	f641 512f 	movw	r1, #7471	; 0x1d2f
 8004e3e:	fb01 f303 	mul.w	r3, r1, r3
 8004e42:	4413      	add	r3, r2
 8004e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray >>= 16; // scale down to int8_t
 8004e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e4c:	141b      	asrs	r3, r3, #16
 8004e4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray += impulse->tflite_input_zeropoint;
 8004e52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e6c:	ee17 3a90 	vmov	r3, s15
 8004e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    if (gray < - 128) gray = -128;
 8004e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e78:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8004e7c:	da04      	bge.n	8004e88 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x394>
 8004e7e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004e82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e86:	e006      	b.n	8004e96 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
                    else if (gray > 127) gray = 127;
 8004e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e8e:	dd02      	ble.n	8004e96 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
 8004e90:	237f      	movs	r3, #127	; 0x7f
 8004e92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e9e:	1c59      	adds	r1, r3, #1
 8004ea0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004eaa:	b252      	sxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	e05e      	b.n	8004f6e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb2:	0c1b      	lsrs	r3, r3, #16
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ebe:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8004dd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004ec2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ec6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ecc:	0a1b      	lsrs	r3, r3, #8
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ed8:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 8004dd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ee0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ef0:	ed5f 6a48 	vldr	s13, [pc, #-288]	; 8004dd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ef8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8004efc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004f00:	ed1f 7a4b 	vldr	s14, [pc, #-300]	; 8004dd8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e4>
 8004f04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004f08:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004f0c:	ed5f 6a4d 	vldr	s13, [pc, #-308]	; 8004ddc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e8>
 8004f10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f18:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004f1c:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8004de0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2ec>
 8004f20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f28:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004f32:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004f36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f3a:	eeb0 0a66 	vmov.f32	s0, s13
 8004f3e:	f7fc fd9e 	bl	8001a7e <_ZSt5roundf>
 8004f42:	eeb0 7a40 	vmov.f32	s14, s0
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f58:	1c59      	adds	r1, r3, #1
 8004f5a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004f5e:	4413      	add	r3, r2
 8004f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f64:	edc7 7a00 	vstr	s15, [r7]
 8004f68:	783a      	ldrb	r2, [r7, #0]
 8004f6a:	b252      	sxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f72:	3301      	adds	r3, #1
 8004f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f78:	e618      	b.n	8004bac <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xb8>
                }
            }
        }

        bytes_left -= elements_to_read;
 8004f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f82:	2401      	movs	r4, #1
 8004f84:	f107 0318 	add.w	r3, r7, #24
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fc fcfb 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8004f8e:	2c01      	cmp	r4, #1
 8004f90:	d107      	bne.n	8004fa2 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ae>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f9e:	e5db      	b.n	8004b58 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x64>
    }

    return EIDSP_OK;
 8004fa0:	2500      	movs	r5, #0
}
 8004fa2:	462b      	mov	r3, r5
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3798      	adds	r7, #152	; 0x98
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bdb0      	pop	{r4, r5, r7, pc}

08004fac <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	609a      	str	r2, [r3, #8]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	60da      	str	r2, [r3, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3310      	adds	r3, #16
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fc2f 	bl	800483a <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	f000 f832 	bl	8005066 <_ZN14SignalWithAxes8get_dataEjjPf>
 8005002:	4603      	mov	r3, r0
        };
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	429a      	cmp	r2, r3
 8005020:	d102      	bne.n	8005028 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	e01a      	b.n	800505e <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6892      	ldr	r2, [r2, #8]
 800503c:	fb03 f202 	mul.w	r2, r3, r2
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	621a      	str	r2, [r3, #32]
        };
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f103 0210 	add.w	r2, r3, #16
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	f107 030c 	add.w	r3, r7, #12
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f001 fc8c 	bl	8006972 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3310      	adds	r3, #16
    }
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8005066:	b580      	push	{r7, lr}
 8005068:	b08a      	sub	sp, #40	; 0x28
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
 8005072:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	68d2      	ldr	r2, [r2, #12]
 8005082:	6992      	ldr	r2, [r2, #24]
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	68d2      	ldr	r2, [r2, #12]
 8005098:	6992      	ldr	r2, [r2, #24]
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	623b      	str	r3, [r7, #32]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	4413      	add	r3, r2
 80050ae:	6a3a      	ldr	r2, [r7, #32]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d22b      	bcs.n	800510c <_ZN14SignalWithAxes8get_dataEjjPf+0xa6>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 80050b4:	2300      	movs	r3, #0
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d21d      	bcs.n	80050fe <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	18d1      	adds	r1, r2, r3
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	627a      	str	r2, [r7, #36]	; 0x24
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	4413      	add	r3, r2
 80050e4:	2201      	movs	r2, #1
 80050e6:	f001 fb21 	bl	800672c <_ZNKSt8functionIFijjPfEEclEjjS0_>
 80050ea:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                    return r;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	e00b      	b.n	800510e <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3301      	adds	r3, #1
 80050fa:	61fb      	str	r3, [r7, #28]
 80050fc:	e7dc      	b.n	80050b8 <_ZN14SignalWithAxes8get_dataEjjPf+0x52>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	6a3a      	ldr	r2, [r7, #32]
 8005106:	4413      	add	r3, r2
 8005108:	623b      	str	r3, [r7, #32]
 800510a:	e7cd      	b.n	80050a8 <_ZN14SignalWithAxes8get_dataEjjPf+0x42>
                }
            }
        }

        return 0;
 800510c:	2300      	movs	r3, #0
    }
 800510e:	4618      	mov	r0, r3
 8005110:	3728      	adds	r7, #40	; 0x28
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8005116:	b480      	push	{r7}
 8005118:	b085      	sub	sp, #20
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8005124:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6178      	str	r0, [r7, #20]
 800513c:	6139      	str	r1, [r7, #16]
 800513e:	60fa      	str	r2, [r7, #12]
 8005140:	ed87 0a02 	vstr	s0, [r7, #8]
 8005144:	edc7 0a01 	vstr	s1, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800514a:	f06f 0314 	mvn.w	r3, #20
#endif
}
 800514e:	4618      	mov	r0, r3
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af00      	add	r7, sp, #0
 8005162:	6178      	str	r0, [r7, #20]
 8005164:	6139      	str	r1, [r7, #16]
 8005166:	60fa      	str	r2, [r7, #12]
 8005168:	ed87 0a02 	vstr	s0, [r7, #8]
 800516c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005170:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800517a:	461a      	mov	r2, r3
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4293      	cmp	r3, r2
 8005180:	d23f      	bcs.n	8005202 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xa6>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	4413      	add	r3, r2
 8005188:	f993 3000 	ldrsb.w	r3, [r3]
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005194:	edd7 7a02 	vldr	s15, [r7, #8]
 8005198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800519c:	ed97 7a01 	vldr	s14, [r7, #4]
 80051a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a4:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 80051a8:	78fb      	ldrb	r3, [r7, #3]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d011      	beq.n	80051d2 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x76>
            ei_printf("%s:\t", impulse->categories[ix]);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4619      	mov	r1, r3
 80051be:	4813      	ldr	r0, [pc, #76]	; (800520c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb0>)
 80051c0:	f000 feac 	bl	8005f1c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80051c4:	ed97 0a06 	vldr	s0, [r7, #24]
 80051c8:	f015 fd2e 	bl	801ac28 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80051cc:	4810      	ldr	r0, [pc, #64]	; (8005210 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 80051ce:	f000 fea5 	bl	8005f1c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	6819      	ldr	r1, [r3, #0]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	3201      	adds	r2, #1
 80051e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	3301      	adds	r3, #1
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	4413      	add	r3, r2
 80051f4:	3304      	adds	r3, #4
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	3301      	adds	r3, #1
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	e7b9      	b.n	8005176 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1a>
    }

    return EI_IMPULSE_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3720      	adds	r7, #32
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	08027ed8 	.word	0x08027ed8
 8005210:	08027ee0 	.word	0x08027ee0

08005214 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800522a:	461a      	mov	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	4293      	cmp	r3, r2
 8005230:	d232      	bcs.n	8005298 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x84>
        float value = data[ix];
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	613b      	str	r3, [r7, #16]

        if (debug) {
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d011      	beq.n	8005268 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x54>
            ei_printf("%s:\t", impulse->categories[ix]);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4619      	mov	r1, r3
 8005254:	4813      	ldr	r0, [pc, #76]	; (80052a4 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 8005256:	f000 fe61 	bl	8005f1c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 800525a:	ed97 0a04 	vldr	s0, [r7, #16]
 800525e:	f015 fce3 	bl	801ac28 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8005262:	4811      	ldr	r0, [pc, #68]	; (80052a8 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 8005264:	f000 fe5a 	bl	8005f1c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	6819      	ldr	r1, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	3201      	adds	r2, #1
 800527c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	3301      	adds	r3, #1
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	4413      	add	r3, r2
 800528a:	3304      	adds	r3, #4
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	3301      	adds	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e7c6      	b.n	8005226 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x12>
    }

    return EI_IMPULSE_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	08027ed8 	.word	0x08027ed8
 80052a8:	08027ee0 	.word	0x08027ee0

080052ac <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>:
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]

    *ctx_start_us = ei_read_timer_us();
 80052ba:	f015 fca1 	bl	801ac00 <_Z16ei_read_timer_usv>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 80052c8:	486e      	ldr	r0, [pc, #440]	; (8005484 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1d8>)
 80052ca:	f01a fc5f 	bl	801fb8c <_Z18trained_model_initPFPvjjE>
 80052ce:	4603      	mov	r3, r0
 80052d0:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x3c>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	4619      	mov	r1, r3
 80052dc:	486a      	ldr	r0, [pc, #424]	; (8005488 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1dc>)
 80052de:	f000 fe1d 	bl	8005f1c <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 80052e2:	f06f 0305 	mvn.w	r3, #5
 80052e6:	e0c8      	b.n	800547a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ce>
    }

    static bool tflite_first_run = true;

    *input = impulse->model_input(0);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ee:	2000      	movs	r0, #0
 80052f0:	4798      	blx	r3
 80052f2:	4602      	mov	r2, r0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]
    *output = impulse->model_output(0);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fe:	2000      	movs	r0, #0
 8005300:	4798      	blx	r3
 8005302:	4602      	mov	r2, r0
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	601a      	str	r2, [r3, #0]

    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800530e:	2b01      	cmp	r3, #1
 8005310:	d115      	bne.n	800533e <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x92>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 800531e:	4610      	mov	r0, r2
 8005320:	4798      	blx	r3
 8005322:	4602      	mov	r2, r0
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	601a      	str	r2, [r3, #0]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8005334:	4610      	mov	r0, r2
 8005336:	4798      	blx	r3
 8005338:	4602      	mov	r2, r0
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	601a      	str	r2, [r3, #0]
    }

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 800533e:	4b53      	ldr	r3, [pc, #332]	; (800548c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8098 	beq.w	8005478 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1cc>
        assert((*input)->type == impulse->tflite_input_datatype);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	781a      	ldrb	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005354:	429a      	cmp	r2, r3
 8005356:	d005      	beq.n	8005364 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xb8>
 8005358:	4b4d      	ldr	r3, [pc, #308]	; (8005490 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e4>)
 800535a:	4a4e      	ldr	r2, [pc, #312]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800535c:	2159      	movs	r1, #89	; 0x59
 800535e:	484e      	ldr	r0, [pc, #312]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005360:	f01e f994 	bl	802368c <__assert_func>
        assert((*output)->type == impulse->tflite_output_datatype);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	781a      	ldrb	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005370:	429a      	cmp	r2, r3
 8005372:	d005      	beq.n	8005380 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xd4>
 8005374:	4b49      	ldr	r3, [pc, #292]	; (800549c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f0>)
 8005376:	4a47      	ldr	r2, [pc, #284]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005378:	215a      	movs	r1, #90	; 0x5a
 800537a:	4847      	ldr	r0, [pc, #284]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800537c:	f01e f986 	bl	802368c <__assert_func>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8005386:	2b01      	cmp	r3, #1
 8005388:	d11b      	bne.n	80053c2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	781a      	ldrb	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005396:	429a      	cmp	r2, r3
 8005398:	d005      	beq.n	80053a6 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xfa>
 800539a:	4b41      	ldr	r3, [pc, #260]	; (80054a0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f4>)
 800539c:	4a3d      	ldr	r2, [pc, #244]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800539e:	215c      	movs	r1, #92	; 0x5c
 80053a0:	483d      	ldr	r0, [pc, #244]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80053a2:	f01e f973 	bl	802368c <__assert_func>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	781a      	ldrb	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d005      	beq.n	80053c2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
 80053b6:	4b3b      	ldr	r3, [pc, #236]	; (80054a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f8>)
 80053b8:	4a36      	ldr	r2, [pc, #216]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80053ba:	215d      	movs	r1, #93	; 0x5d
 80053bc:	4836      	ldr	r0, [pc, #216]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80053be:	f01e f965 	bl	802368c <__assert_func>
        }
        if (impulse->tflite_input_quantized) {
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d026      	beq.n	800541a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
            assert((*input)->params.scale == impulse->tflite_input_scale);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80053da:	eeb4 7a67 	vcmp.f32	s14, s15
 80053de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e2:	d005      	beq.n	80053f0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x144>
 80053e4:	4b30      	ldr	r3, [pc, #192]	; (80054a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1fc>)
 80053e6:	4a2b      	ldr	r2, [pc, #172]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80053e8:	2160      	movs	r1, #96	; 0x60
 80053ea:	482b      	ldr	r0, [pc, #172]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80053ec:	f01e f94e 	bl	802368c <__assert_func>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005404:	eeb4 7a67 	vcmp.f32	s14, s15
 8005408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800540c:	d005      	beq.n	800541a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
 800540e:	4b27      	ldr	r3, [pc, #156]	; (80054ac <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x200>)
 8005410:	4a20      	ldr	r2, [pc, #128]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005412:	2161      	movs	r1, #97	; 0x61
 8005414:	4820      	ldr	r0, [pc, #128]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005416:	f01e f939 	bl	802368c <__assert_func>
        }
        if (impulse->tflite_output_quantized) {
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005420:	2b00      	cmp	r3, #0
 8005422:	d026      	beq.n	8005472 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
            assert((*output)->params.scale == impulse->tflite_output_scale);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	ed93 7a03 	vldr	s14, [r3, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8005432:	eeb4 7a67 	vcmp.f32	s14, s15
 8005436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543a:	d005      	beq.n	8005448 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x19c>
 800543c:	4b1c      	ldr	r3, [pc, #112]	; (80054b0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x204>)
 800543e:	4a15      	ldr	r2, [pc, #84]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005440:	2164      	movs	r1, #100	; 0x64
 8005442:	4815      	ldr	r0, [pc, #84]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005444:	f01e f922 	bl	802368c <__assert_func>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800545c:	eeb4 7a67 	vcmp.f32	s14, s15
 8005460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005464:	d005      	beq.n	8005472 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
 8005466:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x208>)
 8005468:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800546a:	2165      	movs	r1, #101	; 0x65
 800546c:	480a      	ldr	r0, [pc, #40]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800546e:	f01e f90d 	bl	802368c <__assert_func>
        }
        tflite_first_run = false;
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	08001601 	.word	0x08001601
 8005488:	08027ee4 	.word	0x08027ee4
 800548c:	2000006c 	.word	0x2000006c
 8005490:	08027f18 	.word	0x08027f18
 8005494:	08027f4c 	.word	0x08027f4c
 8005498:	08027fe8 	.word	0x08027fe8
 800549c:	0802806c 	.word	0x0802806c
 80054a0:	080280a0 	.word	0x080280a0
 80054a4:	080280dc 	.word	0x080280dc
 80054a8:	08028118 	.word	0x08028118
 80054ac:	08028150 	.word	0x08028150
 80054b0:	08028190 	.word	0x08028190
 80054b4:	080281c8 	.word	0x080281c8

080054b8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 80054b8:	b5b0      	push	{r4, r5, r7, lr}
 80054ba:	b08c      	sub	sp, #48	; 0x30
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	e9c7 2300 	strd	r2, r3, [r7]

    if(trained_model_invoke() != kTfLiteOk) {
 80054c4:	f01a fdc6 	bl	8020054 <_Z20trained_model_invokev>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf14      	ite	ne
 80054ce:	2301      	movne	r3, #1
 80054d0:	2300      	moveq	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x26>
        return EI_IMPULSE_TFLITE_ERROR;
 80054d8:	f06f 0302 	mvn.w	r3, #2
 80054dc:	e0ea      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 80054de:	f015 fb8f 	bl	801ac00 <_Z16ei_read_timer_usv>
 80054e2:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 80054e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80054ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ee:	1a84      	subs	r4, r0, r2
 80054f0:	eb61 0503 	sbc.w	r5, r1, r3
 80054f4:	4622      	mov	r2, r4
 80054f6:	462b      	mov	r3, r5
 80054f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054fa:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 80054fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005500:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8005504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	f7fb fbc6 	bl	8000c9c <__aeabi_ldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005516:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 800551a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d006      	beq.n	8005530 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x78>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8005522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005528:	4619      	mov	r1, r3
 800552a:	4864      	ldr	r0, [pc, #400]	; (80056bc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x204>)
 800552c:	f000 fcf6 	bl	8005f1c <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (impulse->object_detection) {
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d072      	beq.n	8005626 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x16e>
        switch (impulse->object_detection_last_layer) {
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8005546:	3b01      	subs	r3, #1
 8005548:	2b04      	cmp	r3, #4
 800554a:	d862      	bhi.n	8005612 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x15a>
 800554c:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x9c>)
 800554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005552:	bf00      	nop
 8005554:	080055df 	.word	0x080055df
 8005558:	08005569 	.word	0x08005569
 800555c:	080055eb 	.word	0x080055eb
 8005560:	080055ff 	.word	0x080055ff
 8005564:	080055eb 	.word	0x080055eb
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b09      	cmp	r3, #9
 800556e:	bf0c      	ite	eq
 8005570:	2301      	moveq	r3, #1
 8005572:	2300      	movne	r3, #0
 8005574:	75bb      	strb	r3, [r7, #22]
                if (int8_output) {
 8005576:	7dbb      	ldrb	r3, [r7, #22]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01e      	beq.n	80055ba <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x102>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	ed93 7a03 	vldr	s14, [r3, #12]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	6899      	ldr	r1, [r3, #8]
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	68db      	ldr	r3, [r3, #12]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	460b      	mov	r3, r1
 80055a2:	eef0 0a47 	vmov.f32	s1, s14
 80055a6:	eeb0 0a67 	vmov.f32	s0, s15
 80055aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f7ff fdc1 	bl	8005134 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
                }
                break;
 80055b8:	e063      	b.n	8005682 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	6899      	ldr	r1, [r3, #8]
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	460b      	mov	r3, r1
 80055ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f7ff fda0 	bl	8005116 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80055dc:	e051      	b.n	8005682 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
            }
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                #if EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP
                    fill_res = fill_result_struct_f32_object_detection(impulse, result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
                #else
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
 80055de:	4838      	ldr	r0, [pc, #224]	; (80056c0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x208>)
 80055e0:	f000 fc9c 	bl	8005f1c <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80055e4:	f06f 0309 	mvn.w	r3, #9
 80055e8:	e064      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
 80055f0:	4619      	mov	r1, r3
 80055f2:	4834      	ldr	r0, [pc, #208]	; (80056c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x20c>)
 80055f4:	f000 fc92 	bl	8005f1c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80055f8:	f06f 0309 	mvn.w	r3, #9
 80055fc:	e05a      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
 8005604:	4619      	mov	r1, r3
 8005606:	4830      	ldr	r0, [pc, #192]	; (80056c8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x210>)
 8005608:	f000 fc88 	bl	8005f1c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800560c:	f06f 0309 	mvn.w	r3, #9
 8005610:	e050      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8005618:	4619      	mov	r1, r3
 800561a:	482c      	ldr	r0, [pc, #176]	; (80056cc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x214>)
 800561c:	f000 fc7e 	bl	8005f1c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005620:	f06f 0309 	mvn.w	r3, #9
 8005624:	e046      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
        }
    }
    else {
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b09      	cmp	r3, #9
 800562c:	bf0c      	ite	eq
 800562e:	2301      	moveq	r3, #1
 8005630:	2300      	movne	r3, #0
 8005632:	75fb      	strb	r3, [r7, #23]
        if (int8_output) {
 8005634:	7dfb      	ldrb	r3, [r7, #23]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d018      	beq.n	800566c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1b4>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005650:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005654:	eef0 0a47 	vmov.f32	s1, s14
 8005658:	eeb0 0a67 	vmov.f32	s0, s15
 800565c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f7ff fd7c 	bl	800515c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800566a:	e00a      	b.n	8005682 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
        }
        else {
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005674:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fdcc 	bl	8005214 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800567c:	4603      	mov	r3, r0
 800567e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    trained_model_reset(ei_aligned_free);
 8005682:	4813      	ldr	r0, [pc, #76]	; (80056d0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x218>)
 8005684:	f01a fd1c 	bl	80200c0 <_Z19trained_model_resetPFvPvE>

    if (fill_res != EI_IMPULSE_OK) {
 8005688:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1de>
        return fill_res;
 8005690:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005694:	e00e      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005696:	f015 faab 	bl	801abf0 <_Z29ei_run_impulse_check_canceledv>
 800569a:	4603      	mov	r3, r0
 800569c:	f113 0f02 	cmn.w	r3, #2
 80056a0:	bf0c      	ite	eq
 80056a2:	2301      	moveq	r3, #1
 80056a4:	2300      	movne	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fa>
        return EI_IMPULSE_CANCELED;
 80056ac:	f06f 0301 	mvn.w	r3, #1
 80056b0:	e000      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    return EI_IMPULSE_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3728      	adds	r7, #40	; 0x28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bdb0      	pop	{r4, r5, r7, pc}
 80056bc:	0802820c 	.word	0x0802820c
 80056c0:	0802822c 	.word	0x0802822c
 80056c4:	08028284 	.word	0x08028284
 80056c8:	080282d4 	.word	0x080282d4
 80056cc:	08028324 	.word	0x08028324
 80056d0:	08001685 	.word	0x08001685

080056d4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80056d4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80056d8:	b09e      	sub	sp, #120	; 0x78
 80056da:	af06      	add	r7, sp, #24
 80056dc:	6178      	str	r0, [r7, #20]
 80056de:	6139      	str	r1, [r7, #16]
 80056e0:	60fa      	str	r2, [r7, #12]
 80056e2:	72fb      	strb	r3, [r7, #11]
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 80056e4:	f015 fa8c 	bl	801ac00 <_Z16ei_read_timer_usv>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80056f0:	4b7b      	ldr	r3, [pc, #492]	; (80058e0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x20c>)
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80056f8:	f107 0318 	add.w	r3, r7, #24
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 ffb1 	bl	8006666 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 8005704:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005708:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800570c:	f107 0120 	add.w	r1, r7, #32
 8005710:	f107 0318 	add.w	r3, r7, #24
 8005714:	9302      	str	r3, [sp, #8]
 8005716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	4603      	mov	r3, r0
 8005724:	6978      	ldr	r0, [r7, #20]
 8005726:	f7ff fdc1 	bl	80052ac <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800572a:	4603      	mov	r3, r0
 800572c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8005730:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x6a>
        return init_res;
 8005738:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 800573c:	e0c5      	b.n	80058ca <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 800573e:	f107 0318 	add.w	r3, r7, #24
 8005742:	4618      	mov	r0, r3
 8005744:	f001 f934 	bl	80069b0 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8005748:	64f8      	str	r0, [r7, #76]	; 0x4c

    switch (input->type) {
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b09      	cmp	r3, #9
 8005750:	d022      	beq.n	8005798 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc4>
 8005752:	2b09      	cmp	r3, #9
 8005754:	f300 8083 	bgt.w	800585e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
 8005758:	2b01      	cmp	r3, #1
 800575a:	d002      	beq.n	8005762 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x8e>
 800575c:	2b03      	cmp	r3, #3
 800575e:	d051      	beq.n	8005804 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x130>
 8005760:	e07d      	b.n	800585e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
        case kTfLiteFloat32: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005762:	2300      	movs	r3, #0
 8005764:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	6892      	ldr	r2, [r2, #8]
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005774:	429a      	cmp	r2, r3
 8005776:	d27b      	bcs.n	8005870 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x19c>
                input->data.f[ix] = fmatrix->buffer[ix];
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	6859      	ldr	r1, [r3, #4]
 8005786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005792:	3301      	adds	r3, #1
 8005794:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005796:	e7e6      	b.n	8005766 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x92>
            }
            break;
        }
        case kTfLiteInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005798:	2300      	movs	r3, #0
 800579a:	65bb      	str	r3, [r7, #88]	; 0x58
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	6892      	ldr	r2, [r2, #8]
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
 80057a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d262      	bcs.n	8005874 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a0>
                float pixel = (float)fmatrix->buffer[ix];
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	64bb      	str	r3, [r7, #72]	; 0x48
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	edd3 7a03 	vldr	s15, [r3, #12]
 80057c2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80057c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057ca:	eeb0 0a66 	vmov.f32	s0, s13
 80057ce:	f7fc f956 	bl	8001a7e <_ZSt5roundf>
 80057d2:	eeb0 7a40 	vmov.f32	s14, s0
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ec:	4413      	add	r3, r2
 80057ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80057f6:	793a      	ldrb	r2, [r7, #4]
 80057f8:	b252      	sxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80057fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057fe:	3301      	adds	r3, #1
 8005800:	65bb      	str	r3, [r7, #88]	; 0x58
 8005802:	e7cb      	b.n	800579c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc8>
            }
            break;
        }
        case kTfLiteUInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005804:	2300      	movs	r3, #0
 8005806:	657b      	str	r3, [r7, #84]	; 0x54
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	6892      	ldr	r2, [r2, #8]
 8005810:	fb02 f303 	mul.w	r3, r2, r3
 8005814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005816:	429a      	cmp	r2, r3
 8005818:	d221      	bcs.n	800585e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
                float pixel = (float)fmatrix->buffer[ix];
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	647b      	str	r3, [r7, #68]	; 0x44
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800582e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800583c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005846:	4413      	add	r3, r2
 8005848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800584c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005850:	793a      	ldrb	r2, [r7, #4]
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005858:	3301      	adds	r3, #1
 800585a:	657b      	str	r3, [r7, #84]	; 0x54
 800585c:	e7d4      	b.n	8005808 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x134>
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	4619      	mov	r1, r3
 8005864:	481f      	ldr	r0, [pc, #124]	; (80058e4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x210>)
 8005866:	f000 fb59 	bl	8005f1c <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 800586a:	f06f 040c 	mvn.w	r4, #12
 800586e:	e02c      	b.n	80058ca <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
            break;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a2>
            break;
 8005874:	bf00      	nop
        }
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
 8005876:	e9d7 bc08 	ldrd	fp, ip, [r7, #32]
 800587a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800587c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800587e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8005880:	7afb      	ldrb	r3, [r7, #11]
 8005882:	9305      	str	r3, [sp, #20]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	9304      	str	r3, [sp, #16]
 8005888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588a:	9303      	str	r3, [sp, #12]
 800588c:	9602      	str	r6, [sp, #8]
 800588e:	9001      	str	r0, [sp, #4]
 8005890:	9100      	str	r1, [sp, #0]
 8005892:	465a      	mov	r2, fp
 8005894:	4663      	mov	r3, ip
 8005896:	6978      	ldr	r0, [r7, #20]
 8005898:	f7ff fe0e 	bl	80054b8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 800589c:	4603      	mov	r3, r0
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                                    output, output_labels, output_scores,
                                                    tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80058a2:	f015 f9ad 	bl	801ac00 <_Z16ei_read_timer_usv>
 80058a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058aa:	1a84      	subs	r4, r0, r2
 80058ac:	eb61 0503 	sbc.w	r5, r1, r3
 80058b0:	4622      	mov	r2, r4
 80058b2:	462b      	mov	r3, r5
 80058b4:	68f9      	ldr	r1, [r7, #12]
 80058b6:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 80058ba:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f4>
        return run_res;
 80058c2:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 80058c6:	e000      	b.n	80058ca <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    return EI_IMPULSE_OK;
 80058c8:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80058ca:	f107 0318 	add.w	r3, r7, #24
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fede 	bl	8006690 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80058d4:	4623      	mov	r3, r4
 80058d6:	4618      	mov	r0, r3
 80058d8:	3760      	adds	r7, #96	; 0x60
 80058da:	46bd      	mov	sp, r7
 80058dc:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80058e0:	08001685 	.word	0x08001685
 80058e4:	08028358 	.word	0x08028358

080058e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false) {
 80058e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058ec:	b0a1      	sub	sp, #132	; 0x84
 80058ee:	af06      	add	r7, sp, #24
 80058f0:	6178      	str	r0, [r7, #20]
 80058f2:	6139      	str	r1, [r7, #16]
 80058f4:	60fa      	str	r2, [r7, #12]
 80058f6:	72fb      	strb	r3, [r7, #11]

    memset(result, 0, sizeof(ei_impulse_result_t));
 80058f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058fc:	2100      	movs	r1, #0
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f01d ff66 	bl	80237d0 <memset>
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005904:	4b7b      	ldr	r3, [pc, #492]	; (8005af4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x20c>)
 8005906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005908:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800590c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005910:	2100      	movs	r1, #0
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fea7 	bl	8006666 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 8005918:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800591c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005920:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005928:	9302      	str	r3, [sp, #8]
 800592a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	4603      	mov	r3, r0
 8005938:	6978      	ldr	r0, [r7, #20]
 800593a:	f7ff fcb7 	bl	80052ac <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800593e:	4603      	mov	r3, r0
 8005940:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        &ctx_start_us, &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 8005944:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x6a>
        return init_res;
 800594c:	f997 4063 	ldrsb.w	r4, [r7, #99]	; 0x63
 8005950:	e0c4      	b.n	8005adc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 8005952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b09      	cmp	r3, #9
 8005958:	d002      	beq.n	8005960 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800595a:	f06f 0408 	mvn.w	r4, #8
 800595e:	e0bd      	b.n	8005adc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 8005960:	f015 f94e 	bl	801ac00 <_Z16ei_read_timer_usv>
 8005964:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f107 0018 	add.w	r0, r7, #24
 8005974:	2101      	movs	r1, #1
 8005976:	f7fc f82f 	bl	80019d8 <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(impulse, signal, &features_matrix, ei_dsp_blocks[0].config, impulse->frequency);
 800597a:	4b5f      	ldr	r3, [pc, #380]	; (8005af8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x210>)
 800597c:	6899      	ldr	r1, [r3, #8]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005984:	f107 0218 	add.w	r2, r7, #24
 8005988:	eeb0 0a67 	vmov.f32	s0, s15
 800598c:	460b      	mov	r3, r1
 800598e:	6939      	ldr	r1, [r7, #16]
 8005990:	6978      	ldr	r0, [r7, #20]
 8005992:	f7ff f8af 	bl	8004af4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>
 8005996:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != EIDSP_OK) {
 8005998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800599a:	2b00      	cmp	r3, #0
 800599c:	d006      	beq.n	80059ac <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 800599e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059a0:	4856      	ldr	r0, [pc, #344]	; (8005afc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x214>)
 80059a2:	f000 fabb 	bl	8005f1c <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 80059a6:	f06f 0404 	mvn.w	r4, #4
 80059aa:	e092      	b.n	8005ad2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80059ac:	f015 f920 	bl	801abf0 <_Z29ei_run_impulse_check_canceledv>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f113 0f02 	cmn.w	r3, #2
 80059b6:	bf0c      	ite	eq
 80059b8:	2301      	moveq	r3, #1
 80059ba:	2300      	movne	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xe0>
        return EI_IMPULSE_CANCELED;
 80059c2:	f06f 0401 	mvn.w	r4, #1
 80059c6:	e084      	b.n	8005ad2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 80059c8:	f015 f91a 	bl	801ac00 <_Z16ei_read_timer_usv>
 80059cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059d0:	ebb0 0802 	subs.w	r8, r0, r2
 80059d4:	eb61 0903 	sbc.w	r9, r1, r3
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	68f9      	ldr	r1, [r7, #12]
 80059de:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 80059e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	f7fb f954 	bl	8000c9c <__aeabi_ldivmod>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 80059fe:	7afb      	ldrb	r3, [r7, #11]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d02d      	beq.n	8005a60 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x178>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	483c      	ldr	r0, [pc, #240]	; (8005b00 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x218>)
 8005a0e:	f000 fa85 	bl	8005f1c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005a12:	2300      	movs	r3, #0
 8005a14:	667b      	str	r3, [r7, #100]	; 0x64
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d21d      	bcs.n	8005a5a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x172>
            ei_printf_float((features_matrix.buffer[ix] - impulse->tflite_input_zeropoint) * impulse->tflite_input_scale);
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a22:	4413      	add	r3, r2
 8005a24:	f993 3000 	ldrsb.w	r3, [r3]
 8005a28:	ee07 3a90 	vmov	s15, r3
 8005a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005a36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a44:	eeb0 0a67 	vmov.f32	s0, s15
 8005a48:	f015 f8ee 	bl	801ac28 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8005a4c:	482d      	ldr	r0, [pc, #180]	; (8005b04 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x21c>)
 8005a4e:	f000 fa65 	bl	8005f1c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005a52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a54:	3301      	adds	r3, #1
 8005a56:	667b      	str	r3, [r7, #100]	; 0x64
 8005a58:	e7dd      	b.n	8005a16 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x12e>
        }
        ei_printf("\n");
 8005a5a:	482b      	ldr	r0, [pc, #172]	; (8005b08 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x220>)
 8005a5c:	f000 fa5e 	bl	8005f1c <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 8005a60:	f015 f8ce 	bl	801ac00 <_Z16ei_read_timer_usv>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8005a6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005a70:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	607b      	str	r3, [r7, #4]
 8005a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a78:	603a      	str	r2, [r7, #0]
        ctx_start_us,
        output,
        output_labels,
        output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
 8005a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 ff96 	bl	80069b0 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8005a84:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8005a86:	7afb      	ldrb	r3, [r7, #11]
 8005a88:	9305      	str	r3, [sp, #20]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	9304      	str	r3, [sp, #16]
 8005a8e:	9203      	str	r2, [sp, #12]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	9202      	str	r2, [sp, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	9600      	str	r6, [sp, #0]
 8005a9a:	4642      	mov	r2, r8
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	6978      	ldr	r0, [r7, #20]
 8005aa0:	f7ff fd0a 	bl	80054b8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 8005aaa:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1d0>
        return run_res;
 8005ab2:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8005ab6:	e00c      	b.n	8005ad2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8005ab8:	f015 f8a2 	bl	801ac00 <_Z16ei_read_timer_usv>
 8005abc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ac0:	1a84      	subs	r4, r0, r2
 8005ac2:	eb61 0503 	sbc.w	r5, r1, r3
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	462b      	mov	r3, r5
 8005aca:	68f9      	ldr	r1, [r7, #12]
 8005acc:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    return EI_IMPULSE_OK;
 8005ad0:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8005ad2:	f107 0318 	add.w	r3, r7, #24
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fb ffa8 	bl	8001a2c <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fdd5 	bl	8006690 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	4618      	mov	r0, r3
 8005aea:	376c      	adds	r7, #108	; 0x6c
 8005aec:	46bd      	mov	sp, r7
 8005aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005af2:	bf00      	nop
 8005af4:	08001685 	.word	0x08001685
 8005af8:	20000058 	.word	0x20000058
 8005afc:	0802837c 	.word	0x0802837c
 8005b00:	080283a4 	.word	0x080283a4
 8005b04:	080283b8 	.word	0x080283b8
 8005b08:	08027ee0 	.word	0x08027ee0

08005b0c <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	70fb      	strb	r3, [r7, #3]
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE && EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)
    EI_IMPULSE_ERROR nn_res = run_nn_inference(impulse, fmatrix, result, debug);
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff fdd7 	bl	80056d4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
 8005b26:	4603      	mov	r3, r0
 8005b28:	75fb      	strb	r3, [r7, #23]
    if (nn_res != EI_IMPULSE_OK) {
 8005b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <run_inference+0x2c>
        return nn_res;
 8005b32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b36:	e00e      	b.n	8005b56 <run_inference+0x4a>
            return anomaly_res;
        }
    }
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005b38:	f015 f85a 	bl	801abf0 <_Z29ei_run_impulse_check_canceledv>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f113 0f02 	cmn.w	r3, #2
 8005b42:	bf0c      	ite	eq
 8005b44:	2301      	moveq	r3, #1
 8005b46:	2300      	movne	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 8005b4e:	f06f 0301 	mvn.w	r3, #1
 8005b52:	e000      	b.n	8005b56 <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3310      	adds	r3, #16
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fe72 	bl	8004854 <_ZN2ei11ei_signal_tD1Ev>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(const ei_impulse_t *impulse,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 8005b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b80:	b0a5      	sub	sp, #148	; 0x94
 8005b82:	af02      	add	r7, sp, #8
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
 8005b8a:	70fb      	strb	r3, [r7, #3]
 8005b8c:	2600      	movs	r6, #0

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized(impulse) == EI_IMPULSE_OK) {
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f928 	bl	8005de4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	bf0c      	ite	eq
 8005b9a:	2301      	moveq	r3, #1
 8005b9c:	2300      	movne	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <process_impulse+0x3a>
        return run_classifier_image_quantized(impulse, signal, result, debug);
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	68b9      	ldr	r1, [r7, #8]
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 f954 	bl	8005e58 <run_classifier_image_quantized>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	461e      	mov	r6, r3
 8005bb4:	e0ef      	b.n	8005d96 <process_impulse+0x21a>
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bba:	2100      	movs	r1, #0
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f01d fe07 	bl	80237d0 <memset>

    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8005bca:	2300      	movs	r3, #0
 8005bcc:	2101      	movs	r1, #1
 8005bce:	f7fb feae 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 8005bd2:	f015 f815 	bl	801ac00 <_Z16ei_read_timer_usv>
 8005bd6:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

    size_t out_features_index = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8005be0:	2300      	movs	r3, #0
 8005be2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d27c      	bcs.n	8005cec <process_impulse+0x170>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005bf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8005c08:	461d      	mov	r5, r3
 8005c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c0e:	682b      	ldr	r3, [r5, #0]
 8005c10:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 8005c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c18:	441a      	add	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d905      	bls.n	8005c2e <process_impulse+0xb2>
            ei_printf("ERR: Would write outside feature buffer\n");
 8005c22:	4860      	ldr	r0, [pc, #384]	; (8005da4 <process_impulse+0x228>)
 8005c24:	f000 f97a 	bl	8005f1c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005c28:	f06f 0604 	mvn.w	r6, #4
 8005c2c:	e0ad      	b.n	8005d8a <process_impulse+0x20e>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8005c2e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005c30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005c3e:	460a      	mov	r2, r1
 8005c40:	2101      	movs	r1, #1
 8005c42:	f7fb fe74 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, impulse->frequency);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 8005c46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c4a:	f107 0014 	add.w	r0, r7, #20
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	460b      	mov	r3, r1
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	f7ff f9a9 	bl	8004fac <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 8005c5a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8005c5c:	f107 0314 	add.w	r3, r7, #20
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff f9d3 	bl	800500c <_ZN14SignalWithAxes10get_signalEv>
 8005c66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005c6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c72:	eeb0 0a67 	vmov.f32	s0, s15
 8005c76:	4619      	mov	r1, r3
 8005c78:	47a0      	blx	r4
 8005c7a:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

        if (ret != EIDSP_OK) {
 8005c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <process_impulse+0x116>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8005c82:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005c84:	4848      	ldr	r0, [pc, #288]	; (8005da8 <process_impulse+0x22c>)
 8005c86:	f000 f949 	bl	8005f1c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005c8a:	f06f 0604 	mvn.w	r6, #4
 8005c8e:	2400      	movs	r4, #0
 8005c90:	e015      	b.n	8005cbe <process_impulse+0x142>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005c92:	f014 ffad 	bl	801abf0 <_Z29ei_run_impulse_check_canceledv>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f113 0f02 	cmn.w	r3, #2
 8005c9c:	bf0c      	ite	eq
 8005c9e:	2301      	moveq	r3, #1
 8005ca0:	2300      	movne	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <process_impulse+0x134>
            return EI_IMPULSE_CANCELED;
 8005ca8:	f06f 0601 	mvn.w	r6, #1
 8005cac:	2400      	movs	r4, #0
 8005cae:	e006      	b.n	8005cbe <process_impulse+0x142>
        }

        out_features_index += block.n_output_features;
 8005cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cbc:	2401      	movs	r4, #1
 8005cbe:	f107 0314 	add.w	r3, r7, #20
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff ff4b 	bl	8005b5e <_ZN14SignalWithAxesD1Ev>
 8005cc8:	2c01      	cmp	r4, #1
 8005cca:	d001      	beq.n	8005cd0 <process_impulse+0x154>
 8005ccc:	2400      	movs	r4, #0
 8005cce:	e000      	b.n	8005cd2 <process_impulse+0x156>
 8005cd0:	2401      	movs	r4, #1
 8005cd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fb fe54 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8005cdc:	2c01      	cmp	r4, #1
 8005cde:	d154      	bne.n	8005d8a <process_impulse+0x20e>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8005ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cea:	e77c      	b.n	8005be6 <process_impulse+0x6a>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8005cec:	f014 ff88 	bl	801ac00 <_Z16ei_read_timer_usv>
 8005cf0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005cf4:	ebb0 0802 	subs.w	r8, r0, r2
 8005cf8:	eb61 0903 	sbc.w	r9, r1, r3
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8005d0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	f7fa ffc2 	bl	8000c9c <__aeabi_ldivmod>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d020      	beq.n	8005d6a <process_impulse+0x1ee>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005d2e:	4619      	mov	r1, r3
 8005d30:	481e      	ldr	r0, [pc, #120]	; (8005dac <process_impulse+0x230>)
 8005d32:	f000 f8f3 	bl	8005f1c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005d36:	2300      	movs	r3, #0
 8005d38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d210      	bcs.n	8005d64 <process_impulse+0x1e8>
            ei_printf_float(features_matrix.buffer[ix]);
 8005d42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	edd3 7a00 	vldr	s15, [r3]
 8005d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8005d52:	f014 ff69 	bl	801ac28 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8005d56:	4816      	ldr	r0, [pc, #88]	; (8005db0 <process_impulse+0x234>)
 8005d58:	f000 f8e0 	bl	8005f1c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005d5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d5e:	3301      	adds	r3, #1
 8005d60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d62:	e7ea      	b.n	8005d3a <process_impulse+0x1be>
        }
        ei_printf("\n");
 8005d64:	4813      	ldr	r0, [pc, #76]	; (8005db4 <process_impulse+0x238>)
 8005d66:	f000 f8d9 	bl	8005f1c <_Z9ei_printfPKcz>
    }

    if (debug) {
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <process_impulse+0x1fa>
        ei_printf("Running impulse...\n");
 8005d70:	4811      	ldr	r0, [pc, #68]	; (8005db8 <process_impulse+0x23c>)
 8005d72:	f000 f8d3 	bl	8005f1c <_Z9ei_printfPKcz>
    }

    return run_inference(impulse, &features_matrix, result, debug);
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f7ff fec4 	bl	8005b0c <run_inference>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461e      	mov	r6, r3
 8005d88:	e000      	b.n	8005d8c <process_impulse+0x210>
            return EI_IMPULSE_DSP_ERROR;
 8005d8a:	bf00      	nop
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8005d8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fb fdf7 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>

}
 8005d96:	4633      	mov	r3, r6
 8005d98:	4618      	mov	r0, r3
 8005d9a:	378c      	adds	r7, #140	; 0x8c
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005da2:	bf00      	nop
 8005da4:	080283bc 	.word	0x080283bc
 8005da8:	0802837c 	.word	0x0802837c
 8005dac:	080283a4 	.word	0x080283a4
 8005db0:	080283b8 	.word	0x080283b8
 8005db4:	08027ee0 	.word	0x08027ee0
 8005db8:	080283e8 	.word	0x080283e8

08005dbc <ei_construct_impulse>:
#if EI_CLASSIFIER_STUDIO_VERSION < 3
/**
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

const ei_impulse_t impulse =
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a06      	ldr	r2, [pc, #24]	; (8005de0 <ei_construct_impulse+0x24>)
 8005dc8:	4618      	mov	r0, r3
 8005dca:	4611      	mov	r1, r2
 8005dcc:	23a4      	movs	r3, #164	; 0xa4
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f01d fcd6 	bl	8023780 <memcpy>
    .model_reset = NULL,
#endif
    .categories = ei_classifier_inferencing_categories
    };

    return impulse;
 8005dd4:	bf00      	nop
}
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	08028460 	.word	0x08028460

08005de4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>:
#endif

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse) {
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d00a      	beq.n	8005e0a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	d006      	beq.n	8005e0a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI) // check later
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e00:	2b07      	cmp	r3, #7
 8005e02:	d002      	beq.n	8005e0a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005e04:	f06f 0309 	mvn.w	r3, #9
 8005e08:	e01d      	b.n	8005e46 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    if (impulse->has_anomaly == 1){
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d102      	bne.n	8005e1a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x36>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005e14:	f06f 0308 	mvn.w	r3, #8
 8005e18:	e015      	b.n	8005e46 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

        // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    if (impulse->tflite_input_quantized != 1) {
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d002      	beq.n	8005e2a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x46>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005e24:	f06f 0308 	mvn.w	r3, #8
 8005e28:	e00d      	b.n	8005e46 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d105      	bne.n	8005e3e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x5a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4a06      	ldr	r2, [pc, #24]	; (8005e54 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x70>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d002      	beq.n	8005e44 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x60>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005e3e:	f06f 0308 	mvn.w	r3, #8
 8005e42:	e000      	b.n	8005e46 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    return EI_IMPULSE_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	08004921 	.word	0x08004921

08005e58 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	70fb      	strb	r3, [r7, #3]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized(impulse);
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7ff ffbc 	bl	8005de4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 8005e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <run_classifier_image_quantized+0x26>
        return verify_res;
 8005e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e7c:	e00d      	b.n	8005e9a <run_classifier_image_quantized+0x42>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e82:	2100      	movs	r1, #0
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f01d fca3 	bl	80237d0 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, debug);
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7ff fd29 	bl	80058e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>
 8005e96:	4603      	mov	r3, r0
 8005e98:	bf00      	nop

}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b0ae      	sub	sp, #184	; 0xb8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	4613      	mov	r3, r2
 8005eae:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
 8005eb0:	f107 0314 	add.w	r3, r7, #20
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff ff81 	bl	8005dbc <ei_construct_impulse>
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    return process_impulse(&impulse, signal, result, debug);
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	f107 0014 	add.w	r0, r7, #20
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	68f9      	ldr	r1, [r7, #12]
 8005ec4:	f7ff fe5a 	bl	8005b7c <process_impulse>
 8005ec8:	4603      	mov	r3, r0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	37b8      	adds	r7, #184	; 0xb8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <_Z6vprintPKcSt9__va_list>:
TIM_HandleTypeDef htim7;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
void vprint(const char *fmt, va_list argp)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b0b4      	sub	sp, #208	; 0xd0
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8005edc:	f107 0308 	add.w	r3, r7, #8
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f01f f9e3 	bl	80252b0 <vsiprintf>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bfcc      	ite	gt
 8005ef0:	2301      	movgt	r3, #1
 8005ef2:	2300      	movle	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00c      	beq.n	8005f14 <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	 CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8005efa:	f107 0308 	add.w	r3, r7, #8
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fa f9c0 	bl	8000284 <strlen>
 8005f04:	4603      	mov	r3, r0
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	f107 0308 	add.w	r3, r7, #8
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f01a f9fc 	bl	802030c <CDC_Transmit_FS>
    }
}
 8005f14:	bf00      	nop
 8005f16:	37d0      	adds	r7, #208	; 0xd0
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8005f1c:	b40f      	push	{r0, r1, r2, r3}
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8005f24:	f107 0314 	add.w	r3, r7, #20
 8005f28:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	6938      	ldr	r0, [r7, #16]
 8005f2e:	f7ff ffd0 	bl	8005ed2 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f3c:	b004      	add	sp, #16
 8005f3e:	4770      	bx	lr

08005f40 <_Z16get_feature_datajjPf>:
using namespace ei;

static float features[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE] = { 0.0 };

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4a06      	ldr	r2, [pc, #24]	; (8005f6c <_Z16get_feature_datajjPf+0x2c>)
 8005f52:	1899      	adds	r1, r3, r2
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f01d fc10 	bl	8023780 <memcpy>
    return 0;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	2000057c 	.word	0x2000057c

08005f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b0ca      	sub	sp, #296	; 0x128
 8005f74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f76:	f003 f981 	bl	800927c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f7a:	f000 f91d 	bl	80061b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f7e:	f000 fa23 	bl	80063c8 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8005f82:	f000 f9a5 	bl	80062d0 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8005f86:	f01a f903 	bl	8020190 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8005f8a:	f000 f9dd 	bl	8006348 <_ZL12MX_TIM7_Initv>
  MX_CRC_Init();
 8005f8e:	f000 f987 	bl	80062a0 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
	myAccConfigDef.dataRate = LIS3DSH_DATARATE_800;
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8005f98:	2308      	movs	r3, #8
 8005f9a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8005f9e:	2307      	movs	r3, #7
 8005fa0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	myAccConfigDef.interruptEnable = true;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	//myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8005faa:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005fae:	4619      	mov	r1, r3
 8005fb0:	486f      	ldr	r0, [pc, #444]	; (8006170 <main+0x200>)
 8005fb2:	f7fb f8e9 	bl	8001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>

	LIS3DSH_X_calibrate(-1000.0, 980.0);
 8005fb6:	eddf 0a6f 	vldr	s1, [pc, #444]	; 8006174 <main+0x204>
 8005fba:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8006178 <main+0x208>
 8005fbe:	f7fb fa69 	bl	8001494 <_Z19LIS3DSH_X_calibrateff>
	LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 8005fc2:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800617c <main+0x20c>
 8005fc6:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8006180 <main+0x210>
 8005fca:	f7fb fa91 	bl	80014f0 <_Z19LIS3DSH_Y_calibrateff>
	LIS3DSH_Z_calibrate(-920.0, 1040.0);
 8005fce:	eddf 0a6b 	vldr	s1, [pc, #428]	; 800617c <main+0x20c>
 8005fd2:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8006184 <main+0x214>
 8005fd6:	f7fb fab9 	bl	800154c <_Z19LIS3DSH_Z_calibrateff>
	signal_t signal;
 8005fda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fc2b 	bl	800483a <_ZN2ei11ei_signal_tC1Ev>
	  	signal.total_length = sizeof(features) / sizeof(features[0]);
 8005fe4:	f640 1396 	movw	r3, #2454	; 0x996
 8005fe8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  	signal.get_data = &get_feature_data;
 8005fec:	4b66      	ldr	r3, [pc, #408]	; (8006188 <main+0x218>)
 8005fee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ff2:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8005ff6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 fc98 	bl	8006932 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(;featuresarrayisready==false;)
 8006002:	4b62      	ldr	r3, [pc, #392]	; (800618c <main+0x21c>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d14f      	bne.n	80060aa <main+0x13a>
		{
		  	if(drdyFlag==1){
 800600a:	4b61      	ldr	r3, [pc, #388]	; (8006190 <main+0x220>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d1f7      	bne.n	8006002 <main+0x92>
		  		drdyFlag=0;
 8006012:	4b5f      	ldr	r3, [pc, #380]	; (8006190 <main+0x220>)
 8006014:	2200      	movs	r2, #0
 8006016:	701a      	strb	r2, [r3, #0]
		  		myData = LIS3DSH_GetDataScaled();
 8006018:	f7fb f9ba 	bl	8001390 <_Z21LIS3DSH_GetDataScaledv>
 800601c:	eef0 6a40 	vmov.f32	s13, s0
 8006020:	eeb0 7a60 	vmov.f32	s14, s1
 8006024:	eef0 7a41 	vmov.f32	s15, s2
 8006028:	4b5a      	ldr	r3, [pc, #360]	; (8006194 <main+0x224>)
 800602a:	edc3 6a00 	vstr	s13, [r3]
 800602e:	ed83 7a01 	vstr	s14, [r3, #4]
 8006032:	edc3 7a02 	vstr	s15, [r3, #8]
		  		  	features[3*countt]=myData.x;
 8006036:	4b58      	ldr	r3, [pc, #352]	; (8006198 <main+0x228>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4613      	mov	r3, r2
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	4413      	add	r3, r2
 8006040:	4a54      	ldr	r2, [pc, #336]	; (8006194 <main+0x224>)
 8006042:	6812      	ldr	r2, [r2, #0]
 8006044:	4955      	ldr	r1, [pc, #340]	; (800619c <main+0x22c>)
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	601a      	str	r2, [r3, #0]
		  		  	features[3*countt+1]=myData.y;
 800604c:	4b52      	ldr	r3, [pc, #328]	; (8006198 <main+0x228>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	4413      	add	r3, r2
 8006056:	3301      	adds	r3, #1
 8006058:	4a4e      	ldr	r2, [pc, #312]	; (8006194 <main+0x224>)
 800605a:	6852      	ldr	r2, [r2, #4]
 800605c:	494f      	ldr	r1, [pc, #316]	; (800619c <main+0x22c>)
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	601a      	str	r2, [r3, #0]
		  		  	features[3*countt+2]=myData.z;
 8006064:	4b4c      	ldr	r3, [pc, #304]	; (8006198 <main+0x228>)
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	4413      	add	r3, r2
 800606e:	3302      	adds	r3, #2
 8006070:	4a48      	ldr	r2, [pc, #288]	; (8006194 <main+0x224>)
 8006072:	6892      	ldr	r2, [r2, #8]
 8006074:	4949      	ldr	r1, [pc, #292]	; (800619c <main+0x22c>)
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	601a      	str	r2, [r3, #0]
		  		  	countt++;
 800607c:	4b46      	ldr	r3, [pc, #280]	; (8006198 <main+0x228>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3301      	adds	r3, #1
 8006082:	4a45      	ldr	r2, [pc, #276]	; (8006198 <main+0x228>)
 8006084:	6013      	str	r3, [r2, #0]
			//CDC_Transmit_FS((uint8_t*)features, strlen(features));
			//HAL_Delay(5000);
			  if(countt==EI_CLASSIFIER_RAW_SAMPLE_COUNT){
 8006086:	4b44      	ldr	r3, [pc, #272]	; (8006198 <main+0x228>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f240 3232 	movw	r2, #818	; 0x332
 800608e:	4293      	cmp	r3, r2
 8006090:	d105      	bne.n	800609e <main+0x12e>
						countt=0;
 8006092:	4b41      	ldr	r3, [pc, #260]	; (8006198 <main+0x228>)
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
						featuresarrayisready=true;
 8006098:	4b3c      	ldr	r3, [pc, #240]	; (800618c <main+0x21c>)
 800609a:	2201      	movs	r2, #1
 800609c:	701a      	strb	r2, [r3, #0]
					}
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800609e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060a2:	483f      	ldr	r0, [pc, #252]	; (80061a0 <main+0x230>)
 80060a4:	f003 fc63 	bl	800996e <HAL_GPIO_TogglePin>
	  for(;featuresarrayisready==false;)
 80060a8:	e7ab      	b.n	8006002 <main+0x92>

		  	}

		}
	  ei_impulse_result_t result = { 0 };
 80060aa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80060ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80060b2:	4618      	mov	r0, r3
 80060b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060b8:	461a      	mov	r2, r3
 80060ba:	2100      	movs	r1, #0
 80060bc:	f01d fb88 	bl	80237d0 <memset>
	  	      EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 80060c0:	4639      	mov	r1, r7
 80060c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80060c6:	2201      	movs	r2, #1
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff feea 	bl	8005ea2 <run_classifier>
 80060ce:	4603      	mov	r3, r0
 80060d0:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	  	      ei_printf("\n run_classifier returned: %d\n", res);
 80060d4:	f997 3123 	ldrsb.w	r3, [r7, #291]	; 0x123
 80060d8:	4619      	mov	r1, r3
 80060da:	4832      	ldr	r0, [pc, #200]	; (80061a4 <main+0x234>)
 80060dc:	f7ff ff1e 	bl	8005f1c <_Z9ei_printfPKcz>

	  	      ei_printf("\n\n Predictions: \n DSP: %d ms.\n Classification: %d ms.\n Anomaly: %d ms. \n",
 80060e0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80060e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80060e8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80060ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80060f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80060f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80060f8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80060fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006100:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006104:	4828      	ldr	r0, [pc, #160]	; (80061a8 <main+0x238>)
 8006106:	f7ff ff09 	bl	8005f1c <_Z9ei_printfPKcz>
	  	    		result.timing.dsp,result.timing.classification,result.timing.anomaly);

	  	      // print the predictions
	  	      ei_printf("[");
 800610a:	4828      	ldr	r0, [pc, #160]	; (80061ac <main+0x23c>)
 800610c:	f7ff ff06 	bl	8005f1c <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8006110:	2300      	movs	r3, #0
 8006112:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006116:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800611a:	2b02      	cmp	r3, #2
 800611c:	d81c      	bhi.n	8006158 <main+0x1e8>
	  	    	  ei_printf_float(result.classification[ix].value);
 800611e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006122:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8006126:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800612a:	3301      	adds	r3, #1
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	4413      	add	r3, r2
 8006130:	3304      	adds	r3, #4
 8006132:	edd3 7a00 	vldr	s15, [r3]
 8006136:	eeb0 0a67 	vmov.f32	s0, s15
 800613a:	f014 fd75 	bl	801ac28 <_Z15ei_printf_floatf>
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	          ei_printf(", ");
	  	  #else
	  	          if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 800613e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006142:	2b02      	cmp	r3, #2
 8006144:	d002      	beq.n	800614c <main+0x1dc>
	  	              ei_printf(", ");
 8006146:	481a      	ldr	r0, [pc, #104]	; (80061b0 <main+0x240>)
 8006148:	f7ff fee8 	bl	8005f1c <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800614c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006150:	3301      	adds	r3, #1
 8006152:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006156:	e7de      	b.n	8006116 <main+0x1a6>
	  	      }
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1

	  	      ei_printf_float("["result.anomaly"]\n\n");
	  	  #endif
	  	      ei_printf("]\n\n\n");
 8006158:	4816      	ldr	r0, [pc, #88]	; (80061b4 <main+0x244>)
 800615a:	f7ff fedf 	bl	8005f1c <_Z9ei_printfPKcz>


	  //memset(features, 0.0, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
	  HAL_Delay(1500);
 800615e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006162:	f003 f8fd 	bl	8009360 <HAL_Delay>
	  featuresarrayisready=false;
 8006166:	4b09      	ldr	r3, [pc, #36]	; (800618c <main+0x21c>)
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]

  }
 800616c:	e749      	b.n	8006002 <main+0x92>
 800616e:	bf00      	nop
 8006170:	200004dc 	.word	0x200004dc
 8006174:	44750000 	.word	0x44750000
 8006178:	c47a0000 	.word	0xc47a0000
 800617c:	44820000 	.word	0x44820000
 8006180:	c47f0000 	.word	0xc47f0000
 8006184:	c4660000 	.word	0xc4660000
 8006188:	08005f41 	.word	0x08005f41
 800618c:	20002be1 	.word	0x20002be1
 8006190:	20002be0 	.word	0x20002be0
 8006194:	20002bd4 	.word	0x20002bd4
 8006198:	20002be4 	.word	0x20002be4
 800619c:	2000057c 	.word	0x2000057c
 80061a0:	40020c00 	.word	0x40020c00
 80061a4:	08028530 	.word	0x08028530
 80061a8:	08028550 	.word	0x08028550
 80061ac:	0802859c 	.word	0x0802859c
 80061b0:	080285a0 	.word	0x080285a0
 80061b4:	080285a4 	.word	0x080285a4

080061b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b094      	sub	sp, #80	; 0x50
 80061bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80061be:	f107 0320 	add.w	r3, r7, #32
 80061c2:	2230      	movs	r2, #48	; 0x30
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f01d fb02 	bl	80237d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061cc:	f107 030c 	add.w	r3, r7, #12
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	605a      	str	r2, [r3, #4]
 80061d6:	609a      	str	r2, [r3, #8]
 80061d8:	60da      	str	r2, [r3, #12]
 80061da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80061dc:	2300      	movs	r3, #0
 80061de:	60bb      	str	r3, [r7, #8]
 80061e0:	4b2d      	ldr	r3, [pc, #180]	; (8006298 <_Z18SystemClock_Configv+0xe0>)
 80061e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e4:	4a2c      	ldr	r2, [pc, #176]	; (8006298 <_Z18SystemClock_Configv+0xe0>)
 80061e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ea:	6413      	str	r3, [r2, #64]	; 0x40
 80061ec:	4b2a      	ldr	r3, [pc, #168]	; (8006298 <_Z18SystemClock_Configv+0xe0>)
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80061f8:	2300      	movs	r3, #0
 80061fa:	607b      	str	r3, [r7, #4]
 80061fc:	4b27      	ldr	r3, [pc, #156]	; (800629c <_Z18SystemClock_Configv+0xe4>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a26      	ldr	r2, [pc, #152]	; (800629c <_Z18SystemClock_Configv+0xe4>)
 8006202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	4b24      	ldr	r3, [pc, #144]	; (800629c <_Z18SystemClock_Configv+0xe4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006210:	607b      	str	r3, [r7, #4]
 8006212:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006214:	2301      	movs	r3, #1
 8006216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800621e:	2302      	movs	r3, #2
 8006220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006228:	2304      	movs	r3, #4
 800622a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800622c:	2348      	movs	r3, #72	; 0x48
 800622e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006230:	2302      	movs	r3, #2
 8006232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006234:	2303      	movs	r3, #3
 8006236:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006238:	f107 0320 	add.w	r3, r7, #32
 800623c:	4618      	mov	r0, r3
 800623e:	f004 fe47 	bl	800aed0 <HAL_RCC_OscConfig>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	bf14      	ite	ne
 8006248:	2301      	movne	r3, #1
 800624a:	2300      	moveq	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8006252:	f000 f961 	bl	8006518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006256:	230f      	movs	r3, #15
 8006258:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800625a:	2302      	movs	r3, #2
 800625c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800625e:	2300      	movs	r3, #0
 8006260:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006262:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006266:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800626c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800626e:	f107 030c 	add.w	r3, r7, #12
 8006272:	2102      	movs	r1, #2
 8006274:	4618      	mov	r0, r3
 8006276:	f005 f8a3 	bl	800b3c0 <HAL_RCC_ClockConfig>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	bf14      	ite	ne
 8006280:	2301      	movne	r3, #1
 8006282:	2300      	moveq	r3, #0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800628a:	f000 f945 	bl	8006518 <Error_Handler>
  }
}
 800628e:	bf00      	nop
 8006290:	3750      	adds	r7, #80	; 0x50
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40023800 	.word	0x40023800
 800629c:	40007000 	.word	0x40007000

080062a0 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80062a4:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <_ZL11MX_CRC_Initv+0x28>)
 80062a6:	4a09      	ldr	r2, [pc, #36]	; (80062cc <_ZL11MX_CRC_Initv+0x2c>)
 80062a8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80062aa:	4807      	ldr	r0, [pc, #28]	; (80062c8 <_ZL11MX_CRC_Initv+0x28>)
 80062ac:	f003 f98d 	bl	80095ca <HAL_CRC_Init>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 80062c0:	f000 f92a 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80062c4:	bf00      	nop
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	200004d4 	.word	0x200004d4
 80062cc:	40023000 	.word	0x40023000

080062d0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80062d4:	4b1a      	ldr	r3, [pc, #104]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062d6:	4a1b      	ldr	r2, [pc, #108]	; (8006344 <_ZL12MX_SPI1_Initv+0x74>)
 80062d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80062da:	4b19      	ldr	r3, [pc, #100]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80062e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80062e2:	4b17      	ldr	r3, [pc, #92]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80062e8:	4b15      	ldr	r3, [pc, #84]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80062ee:	4b14      	ldr	r3, [pc, #80]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80062f4:	4b12      	ldr	r3, [pc, #72]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80062fa:	4b11      	ldr	r3, [pc, #68]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006300:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 8006304:	2210      	movs	r2, #16
 8006306:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006308:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 800630a:	2200      	movs	r2, #0
 800630c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800630e:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 8006310:	2200      	movs	r2, #0
 8006312:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006314:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 8006316:	2200      	movs	r2, #0
 8006318:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800631a:	4b09      	ldr	r3, [pc, #36]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 800631c:	220a      	movs	r2, #10
 800631e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006320:	4807      	ldr	r0, [pc, #28]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 8006322:	f005 fa45 	bl	800b7b0 <HAL_SPI_Init>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	bf14      	ite	ne
 800632c:	2301      	movne	r3, #1
 800632e:	2300      	moveq	r3, #0
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8006336:	f000 f8ef 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800633a:	bf00      	nop
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	200004dc 	.word	0x200004dc
 8006344:	40013000 	.word	0x40013000

08006348 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800634e:	463b      	mov	r3, r7
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006356:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 8006358:	4a1a      	ldr	r2, [pc, #104]	; (80063c4 <_ZL12MX_TIM7_Initv+0x7c>)
 800635a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20000;
 800635c:	4b18      	ldr	r3, [pc, #96]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 800635e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006362:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006364:	4b16      	ldr	r3, [pc, #88]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 8006366:	2200      	movs	r2, #0
 8006368:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 800636a:	4b15      	ldr	r3, [pc, #84]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 800636c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006370:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006372:	4b13      	ldr	r3, [pc, #76]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 8006374:	2200      	movs	r2, #0
 8006376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006378:	4811      	ldr	r0, [pc, #68]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 800637a:	f005 ffc1 	bl	800c300 <HAL_TIM_Base_Init>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	bf14      	ite	ne
 8006384:	2301      	movne	r3, #1
 8006386:	2300      	moveq	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800638e:	f000 f8c3 	bl	8006518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006392:	2300      	movs	r3, #0
 8006394:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800639a:	463b      	mov	r3, r7
 800639c:	4619      	mov	r1, r3
 800639e:	4808      	ldr	r0, [pc, #32]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 80063a0:	f006 f89e 	bl	800c4e0 <HAL_TIMEx_MasterConfigSynchronization>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bf14      	ite	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	2300      	moveq	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 80063b4:	f000 f8b0 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80063b8:	bf00      	nop
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20000534 	.word	0x20000534
 80063c4:	40001400 	.word	0x40001400

080063c8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	; 0x28
 80063cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063ce:	f107 0314 	add.w	r3, r7, #20
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	605a      	str	r2, [r3, #4]
 80063d8:	609a      	str	r2, [r3, #8]
 80063da:	60da      	str	r2, [r3, #12]
 80063dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80063de:	2300      	movs	r3, #0
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	4b41      	ldr	r3, [pc, #260]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	4a40      	ldr	r2, [pc, #256]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 80063e8:	f043 0310 	orr.w	r3, r3, #16
 80063ec:	6313      	str	r3, [r2, #48]	; 0x30
 80063ee:	4b3e      	ldr	r3, [pc, #248]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	f003 0310 	and.w	r3, r3, #16
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80063fa:	2300      	movs	r3, #0
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	4b3a      	ldr	r3, [pc, #232]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	4a39      	ldr	r2, [pc, #228]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 8006404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006408:	6313      	str	r3, [r2, #48]	; 0x30
 800640a:	4b37      	ldr	r3, [pc, #220]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006416:	2300      	movs	r3, #0
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	4b33      	ldr	r3, [pc, #204]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	4a32      	ldr	r2, [pc, #200]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 8006420:	f043 0301 	orr.w	r3, r3, #1
 8006424:	6313      	str	r3, [r2, #48]	; 0x30
 8006426:	4b30      	ldr	r3, [pc, #192]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	60bb      	str	r3, [r7, #8]
 8006430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	607b      	str	r3, [r7, #4]
 8006436:	4b2c      	ldr	r3, [pc, #176]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	4a2b      	ldr	r2, [pc, #172]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 800643c:	f043 0308 	orr.w	r3, r3, #8
 8006440:	6313      	str	r3, [r2, #48]	; 0x30
 8006442:	4b29      	ldr	r3, [pc, #164]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	607b      	str	r3, [r7, #4]
 800644c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 800644e:	2200      	movs	r2, #0
 8006450:	2108      	movs	r1, #8
 8006452:	4826      	ldr	r0, [pc, #152]	; (80064ec <_ZL12MX_GPIO_Initv+0x124>)
 8006454:	f003 fa72 	bl	800993c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8006458:	2200      	movs	r2, #0
 800645a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800645e:	4824      	ldr	r0, [pc, #144]	; (80064f0 <_ZL12MX_GPIO_Initv+0x128>)
 8006460:	f003 fa6c 	bl	800993c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MEMS_CS_Pin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 8006464:	2308      	movs	r3, #8
 8006466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006468:	2301      	movs	r3, #1
 800646a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800646c:	2300      	movs	r3, #0
 800646e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006470:	2300      	movs	r3, #0
 8006472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 8006474:	f107 0314 	add.w	r3, r7, #20
 8006478:	4619      	mov	r1, r3
 800647a:	481c      	ldr	r0, [pc, #112]	; (80064ec <_ZL12MX_GPIO_Initv+0x124>)
 800647c:	f003 f8c2 	bl	8009604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006480:	2301      	movs	r3, #1
 8006482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006484:	2300      	movs	r3, #0
 8006486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006488:	2300      	movs	r3, #0
 800648a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800648c:	f107 0314 	add.w	r3, r7, #20
 8006490:	4619      	mov	r1, r3
 8006492:	4818      	ldr	r0, [pc, #96]	; (80064f4 <_ZL12MX_GPIO_Initv+0x12c>)
 8006494:	f003 f8b6 	bl	8009604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006498:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800649c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800649e:	2301      	movs	r3, #1
 80064a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064a6:	2300      	movs	r3, #0
 80064a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064aa:	f107 0314 	add.w	r3, r7, #20
 80064ae:	4619      	mov	r1, r3
 80064b0:	480f      	ldr	r0, [pc, #60]	; (80064f0 <_ZL12MX_GPIO_Initv+0x128>)
 80064b2:	f003 f8a7 	bl	8009604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80064b6:	2301      	movs	r3, #1
 80064b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80064ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80064be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064c4:	f107 0314 	add.w	r3, r7, #20
 80064c8:	4619      	mov	r1, r3
 80064ca:	4808      	ldr	r0, [pc, #32]	; (80064ec <_ZL12MX_GPIO_Initv+0x124>)
 80064cc:	f003 f89a 	bl	8009604 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80064d0:	2200      	movs	r2, #0
 80064d2:	2100      	movs	r1, #0
 80064d4:	2006      	movs	r0, #6
 80064d6:	f003 f842 	bl	800955e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80064da:	2006      	movs	r0, #6
 80064dc:	f003 f85b 	bl	8009596 <HAL_NVIC_EnableIRQ>

}
 80064e0:	bf00      	nop
 80064e2:	3728      	adds	r7, #40	; 0x28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	40023800 	.word	0x40023800
 80064ec:	40021000 	.word	0x40021000
 80064f0:	40020c00 	.word	0x40020c00
 80064f4:	40020000 	.word	0x40020000

080064f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	80fb      	strh	r3, [r7, #6]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
 /* if(GPIO_Pin==GPIO_PIN_0){
  	  if(HAL_GPIO_ReadPin( GPIOA,GPIO_PIN_0)){*/
  drdyFlag = 1;
 8006502:	4b04      	ldr	r3, [pc, #16]	; (8006514 <HAL_GPIO_EXTI_Callback+0x1c>)
 8006504:	2201      	movs	r2, #1
 8006506:	701a      	strb	r2, [r3, #0]
  		CDC_Transmit_FS("\n", strlen("\n"));
  		  }
  	  }
  }*/

}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	20002be0 	.word	0x20002be0

08006518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800651c:	e7fe      	b.n	800651c <Error_Handler+0x4>

0800651e <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>:
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	607a      	str	r2, [r7, #4]
 800652a:	603b      	str	r3, [r7, #0]
#else
      explicit
      vector(size_type __n, const bool& __value = bool(),
	     const allocator_type& __a = allocator_type())
#endif
      : _Base(__a)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fa4a 	bl	80069ca <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>
      {
	_M_initialize(__n);
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 fa69 	bl	8006a10 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>
	_M_initialize_value(__value);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	4619      	mov	r1, r3
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fab1 	bl	8006aac <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>
      }
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>:
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      ~vector() _GLIBCXX_NOEXCEPT { }
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fa4a 	bl	80069f8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>:
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return begin() == end(); }

      reference
      operator[](size_type __n)
 800656e:	b580      	push	{r7, lr}
 8006570:	b086      	sub	sp, #24
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
      {
	return *iterator(this->_M_impl._M_start._M_p
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	681a      	ldr	r2, [r3, #0]
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	095b      	lsrs	r3, r3, #5
 8006582:	009b      	lsls	r3, r3, #2
	return *iterator(this->_M_impl._M_start._M_p
 8006584:	18d1      	adds	r1, r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f003 021f 	and.w	r2, r3, #31
 800658c:	f107 0310 	add.w	r3, r7, #16
 8006590:	4618      	mov	r0, r3
 8006592:	f7fb f93b 	bl	800180c <_ZNSt13_Bit_iteratorC1EPmj>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f107 0210 	add.w	r2, r7, #16
 800659c:	4611      	mov	r1, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fb f945 	bl	800182e <_ZNKSt13_Bit_iteratordeEv>
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 80065a4:	bf00      	nop
      }
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7ff ffed 	bl	80065ae <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80065d4:	4603      	mov	r3, r0
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80065da:	6838      	ldr	r0, [r7, #0]
 80065dc:	f7ff ffe7 	bl	80065ae <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80065e0:	4603      	mov	r3, r0
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80065e8:	f107 030c 	add.w	r3, r7, #12
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff ffde 	bl	80065ae <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80065f2:	4603      	mov	r3, r0
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	601a      	str	r2, [r3, #0]
    }
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8006602:	b5b0      	push	{r4, r5, r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	ed87 0a01 	vstr	s0, [r7, #4]
 800660c:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7f9 ffa4 	bl	800055c <__aeabi_f2d>
 8006614:	4604      	mov	r4, r0
 8006616:	460d      	mov	r5, r1
 8006618:	6838      	ldr	r0, [r7, #0]
 800661a:	f7f9 ff8d 	bl	8000538 <__aeabi_i2d>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	ec43 2b11 	vmov	d1, r2, r3
 8006626:	ec45 4b10 	vmov	d0, r4, r5
 800662a:	f01a fd17 	bl	802105c <pow>
 800662e:	eeb0 7a40 	vmov.f32	s14, s0
 8006632:	eef0 7a60 	vmov.f32	s15, s1
    }
 8006636:	eeb0 0a47 	vmov.f32	s0, s14
 800663a:	eef0 0a67 	vmov.f32	s1, s15
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bdb0      	pop	{r4, r5, r7, pc}

08006644 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fa77 	bl	8006b4a <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 8006666:	b590      	push	{r4, r7, lr}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 8006672:	68fc      	ldr	r4, [r7, #12]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fa5d 	bl	8006b34 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 800667a:	4603      	mov	r3, r0
 800667c:	461a      	mov	r2, r3
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	4620      	mov	r0, r4
 8006682:	f7ff ffdf 	bl	8006644 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	bd90      	pop	{r4, r7, pc}

08006690 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8006690:	b590      	push	{r4, r7, lr}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fa6b 	bl	8006b76 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80066a0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00b      	beq.n	80066c2 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fa70 	bl	8006b90 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 80066b0:	4603      	mov	r3, r0
 80066b2:	681c      	ldr	r4, [r3, #0]
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 fa78 	bl	8006baa <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 80066ba:	4603      	mov	r3, r0
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	47a0      	blx	r4
	__ptr = pointer();
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
      }
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd90      	pop	{r4, r7, pc}

080066d2 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 80066d2:	b590      	push	{r4, r7, lr}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 80066dc:	687c      	ldr	r4, [r7, #4]
 80066de:	463b      	mov	r3, r7
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fa62 	bl	8006baa <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 80066e6:	4603      	mov	r3, r0
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4619      	mov	r1, r3
 80066ec:	4620      	mov	r0, r4
 80066ee:	f000 fa67 	bl	8006bc0 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>
      }
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}

080066fa <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	ed93 7a00 	vldr	s14, [r3]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	edd3 7a00 	vldr	s15, [r3]
 8006710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006718:	d501      	bpl.n	800671e <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	e000      	b.n	8006720 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800671e:	687b      	ldr	r3, [r7, #4]
    }
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800672c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
 800673a:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fb f8e4 	bl	800190c <_ZNKSt14_Function_base8_M_emptyEv>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 800674a:	f7fb f985 	bl	8001a58 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	68dc      	ldr	r4, [r3, #12]
 8006752:	68fd      	ldr	r5, [r7, #12]
 8006754:	f107 0308 	add.w	r3, r7, #8
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fa50 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800675e:	4606      	mov	r6, r0
 8006760:	1d3b      	adds	r3, r7, #4
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fa4b 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006768:	4680      	mov	r8, r0
 800676a:	463b      	mov	r3, r7
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fa51 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006772:	4603      	mov	r3, r0
 8006774:	4642      	mov	r2, r8
 8006776:	4631      	mov	r1, r6
 8006778:	4628      	mov	r0, r5
 800677a:	47a0      	blx	r4
 800677c:	4603      	mov	r3, r0
    }
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006788 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7f9 fed1 	bl	8000538 <__aeabi_i2d>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	ec43 2b17 	vmov	d7, r2, r3
 800679e:	eeb0 0a47 	vmov.f32	s0, s14
 80067a2:	eef0 0a67 	vmov.f32	s1, s15
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fa37 	bl	8006c2a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>
	{ }
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80067de:	461a      	mov	r2, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fa36 	bl	8006c52 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      }
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80067f0:	b5b0      	push	{r4, r5, r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681c      	ldr	r4, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fa38 	bl	8006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006808:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800680a:	461a      	mov	r2, r3
 800680c:	4629      	mov	r1, r5
 800680e:	4620      	mov	r0, r4
 8006810:	f000 fa3d 	bl	8006c8e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff ffd5 	bl	80067c6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bdb0      	pop	{r4, r5, r7, pc}

08006826 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	429a      	cmp	r2, r3
 800683a:	d00d      	beq.n	8006858 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	f000 fa3c 	bl	8006cc2 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
				     __x);
	    ++this->_M_impl._M_finish;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f103 0208 	add.w	r2, r3, #8
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8006856:	e008      	b.n	800686a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f81a 	bl	8006892 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 800685e:	4603      	mov	r3, r0
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fa55 	bl	8006d14 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>
      }
 800686a:	bf00      	nop
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	f107 030c 	add.w	r3, r7, #12
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fb02 	bl	8006e8c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	1d1a      	adds	r2, r3, #4
 800689e:	f107 030c 	add.w	r3, r7, #12
 80068a2:	4611      	mov	r1, r2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 faf1 	bl	8006e8c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80068b4:	b590      	push	{r4, r7, lr}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	713a      	strb	r2, [r7, #4]
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 faf3 	bl	8006eac <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 80068c6:	4622      	mov	r2, r4
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fb01 	bl	8006ed2 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80068d0:	bf00      	nop
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd90      	pop	{r4, r7, pc}

080068d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	10db      	asrs	r3, r3, #3
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	4413      	add	r3, r2
      }
 800690c:	4618      	mov	r0, r3
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4618      	mov	r0, r3
 8006924:	f7fa ffd1 	bl	80018ca <_ZNSt14_Function_baseC1Ev>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8006932:	b580      	push	{r7, lr}
 8006934:	b086      	sub	sp, #24
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800693c:	6838      	ldr	r0, [r7, #0]
 800693e:	f000 faf5 	bl	8006f2c <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006942:	4603      	mov	r3, r0
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	f107 0308 	add.w	r3, r7, #8
 800694a:	4611      	mov	r1, r2
 800694c:	4618      	mov	r0, r3
 800694e:	f000 faf9 	bl	8006f44 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8006952:	f107 0308 	add.w	r3, r7, #8
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	4618      	mov	r0, r3
 800695a:	f000 f8ca 	bl	8006af2 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800695e:	f107 0308 	add.w	r3, r7, #8
 8006962:	4618      	mov	r0, r3
 8006964:	f7fd ff5c 	bl	8004820 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8006968:	687b      	ldr	r3, [r7, #4]
	}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8006972:	b580      	push	{r7, lr}
 8006974:	b086      	sub	sp, #24
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800697c:	6838      	ldr	r0, [r7, #0]
 800697e:	f000 fb0b 	bl	8006f98 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8006982:	4602      	mov	r2, r0
 8006984:	f107 0308 	add.w	r3, r7, #8
 8006988:	6811      	ldr	r1, [r2, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fb10 	bl	8006fb0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8006990:	f107 0308 	add.w	r3, r7, #8
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f8ab 	bl	8006af2 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800699c:	f107 0308 	add.w	r3, r7, #8
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fd ff3d 	bl	8004820 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 80069a6:	687b      	ldr	r3, [r7, #4]
	}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
      get() const noexcept
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fb22 	bl	8007004 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80069c0:	4603      	mov	r3, r0
 80069c2:	4618      	mov	r0, r3
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>:
      _Bvector_base(const allocator_type& __a)
 80069ca:	b590      	push	{r4, r7, lr}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80069d4:	687c      	ldr	r4, [r7, #4]
 80069d6:	f107 030c 	add.w	r3, r7, #12
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fb1f 	bl	8007020 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>
 80069e2:	f107 030c 	add.w	r3, r7, #12
 80069e6:	4619      	mov	r1, r3
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fb25 	bl	8007038 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd90      	pop	{r4, r7, pc}

080069f8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>:
      ~_Bvector_base()
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fb27 	bl	8007054 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>:
	return std::copy(const_iterator(__last._M_p, 0), __last,
			 iterator(__q, 0));
      }

      void
      _M_initialize(size_type __n)
 8006a10:	b590      	push	{r4, r7, lr}
 8006a12:	b08b      	sub	sp, #44	; 0x2c
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
      {
	if (__n)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d021      	beq.n	8006a64 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x54>
	  {
	    _Bit_pointer __q = this->_M_allocate(__n);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fb3a 	bl	800709e <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>
 8006a2a:	6278      	str	r0, [r7, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 8006a2c:	68b8      	ldr	r0, [r7, #8]
 8006a2e:	f000 fb49 	bl	80070c4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 8006a32:	4603      	mov	r3, r0
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a38:	441a      	add	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	611a      	str	r2, [r3, #16]
	    this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
 8006a3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a40:	f000 fb4d 	bl	80070de <_ZSt11__addressofImEPT_RS0_>
 8006a44:	4601      	mov	r1, r0
 8006a46:	f107 0314 	add.w	r3, r7, #20
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fa fedd 	bl	800180c <_ZNSt13_Bit_iteratorC1EPmj>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	461a      	mov	r2, r3
 8006a56:	f107 0314 	add.w	r3, r7, #20
 8006a5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006a5e:	e882 0003 	stmia.w	r2, {r0, r1}
 8006a62:	e011      	b.n	8006a88 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x78>
	  }
	else
	  {
	    this->_M_impl._M_end_of_storage = _Bit_pointer();
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	611a      	str	r2, [r3, #16]
	    this->_M_impl._M_start = iterator(0, 0);
 8006a6a:	f107 031c 	add.w	r3, r7, #28
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2100      	movs	r1, #0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fa feca 	bl	800180c <_ZNSt13_Bit_iteratorC1EPmj>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f107 031c 	add.w	r3, r7, #28
 8006a80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006a84:	e882 0003 	stmia.w	r2, {r0, r1}
	  }
	this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
 8006a88:	68f9      	ldr	r1, [r7, #12]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	68fc      	ldr	r4, [r7, #12]
 8006a8e:	463b      	mov	r3, r7
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fa feef 	bl	8001874 <_ZStplRKSt13_Bit_iteratori>
 8006a96:	f104 0308 	add.w	r3, r4, #8
 8006a9a:	463a      	mov	r2, r7
 8006a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006aa0:	e883 0003 	stmia.w	r3, {r0, r1}

      }
 8006aa4:	bf00      	nop
 8006aa6:	372c      	adds	r7, #44	; 0x2c
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd90      	pop	{r4, r7, pc}

08006aac <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>:

      void
      _M_initialize_value(bool __x)
 8006aac:	b590      	push	{r4, r7, lr}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
      {
	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d012      	beq.n	8006aea <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x3e>
	  __builtin_memset(__p, __x ? ~0 : 0,
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x24>
 8006aca:	f04f 34ff 	mov.w	r4, #4294967295
 8006ace:	e000      	b.n	8006ad2 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x26>
 8006ad0:	2400      	movs	r4, #0
			   (this->_M_impl._M_end_addr() - __p)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fb0d 	bl	80070f4 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 8006ada:	4602      	mov	r2, r0
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	1ad3      	subs	r3, r2, r3
	  __builtin_memset(__p, __x ? ~0 : 0,
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f01c fe73 	bl	80237d0 <memset>
			   * sizeof(_Bit_type));
      }
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd90      	pop	{r4, r7, pc}

08006af2 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	4611      	mov	r1, r2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fb17 	bl	8007136 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f103 0208 	add.w	r2, r3, #8
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	3308      	adds	r3, #8
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f000 fb40 	bl	800719a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f103 020c 	add.w	r2, r3, #12
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	330c      	adds	r3, #12
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f000 fb61 	bl	80071ee <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8006b4a:	b590      	push	{r4, r7, lr}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8006b56:	68fc      	ldr	r4, [r7, #12]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fb67 	bl	800722c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	f107 0308 	add.w	r3, r7, #8
 8006b64:	4619      	mov	r1, r3
 8006b66:	4620      	mov	r0, r4
 8006b68:	f000 fb6b 	bl	8007242 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd90      	pop	{r4, r7, pc}

08006b76 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fb77 	bl	8007274 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8006b86:	4603      	mov	r3, r0
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fb77 	bl	800728e <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>:
      void reset(pointer __p) noexcept
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff ffd3 	bl	8006b76 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff ffcd 	bl	8006b76 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d006      	beq.n	8006bf6 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_+0x36>
	  _M_deleter()(__old_p);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fb50 	bl	800728e <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	4798      	blx	r3
      }
 8006bf6:	bf00      	nop
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	605a      	str	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	609a      	str	r2, [r3, #8]
	{ }
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	607a      	str	r2, [r7, #4]
	if (__p)
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fb1c 	bl	80072a8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>
      }
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>:
   * destroy() even if _Tp has a trivial destructor.
   */

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	607a      	str	r2, [r7, #4]
	     _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d00b      	beq.n	8006cba <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0x2c>
#if __cplusplus < 201103L
	__alloc.destroy(std::__addressof(*__first));
#else
	allocator_traits<_Allocator>::destroy(__alloc,
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fb0f 	bl	80072c6 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fb15 	bl	80072dc <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
      for (; __first != __last; ++__first)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3308      	adds	r3, #8
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	e7ef      	b.n	8006c9a <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0xc>
					      std::__addressof(*__first));
#endif
    }
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fb12 	bl	80072f8 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	68b9      	ldr	r1, [r7, #8]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 fb17 	bl	800730e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>
 8006ce0:	bf00      	nop
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>:
      _S_use_relocate()
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 f805 	bl	8006cfe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8006cf4:	4603      	mov	r3, r0
      }
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8006d06:	2301      	movs	r3, #1
      }
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8006d14:	b5b0      	push	{r4, r5, r7, lr}
 8006d16:	b08c      	sub	sp, #48	; 0x30
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006d20:	4a59      	ldr	r2, [pc, #356]	; (8006e88 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x174>)
 8006d22:	2101      	movs	r1, #1
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 fb0b 	bl	8007340 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>
 8006d2a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff fd9a 	bl	8006872 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	f107 0214 	add.w	r2, r7, #20
 8006d46:	f107 0308 	add.w	r3, r7, #8
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fb3e 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8006d52:	4603      	mov	r3, r0
 8006d54:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fb4c 	bl	80073f8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>
 8006d60:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8006d66:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	18d5      	adds	r5, r2, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fac1 	bl	80072f8 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006d76:	4603      	mov	r3, r0
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f7ff ffa0 	bl	8006cc2 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8006d82:	2300      	movs	r3, #0
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8006d86:	f7ff ffaf 	bl	8006ce8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d027      	beq.n	8006de0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006d90:	f107 0308 	add.w	r3, r7, #8
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fb57 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff ff69 	bl	8006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006da6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	4621      	mov	r1, r4
 8006dac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dae:	f000 fb37 	bl	8007420 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 8006db2:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	3308      	adds	r3, #8
 8006db8:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006dba:	f107 0308 	add.w	r3, r7, #8
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fb42 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff ff54 	bl	8006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006dd0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dd4:	6a39      	ldr	r1, [r7, #32]
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 fb22 	bl	8007420 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 8006ddc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006dde:	e026      	b.n	8006e2e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8006de0:	f107 0308 	add.w	r3, r7, #8
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fb2f 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006dea:	4603      	mov	r3, r0
 8006dec:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff ff41 	bl	8006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006df6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dfe:	f000 fb2e 	bl	800745e <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8006e02:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	3308      	adds	r3, #8
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8006e0a:	f107 0308 	add.w	r3, r7, #8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fb1a 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006e14:	4603      	mov	r3, r0
 8006e16:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff ff2c 	bl	8006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006e20:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e24:	6a39      	ldr	r1, [r7, #32]
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 fb19 	bl	800745e <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8006e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006e2e:	f7ff ff5b 	bl	8006ce8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f083 0301 	eor.w	r3, r3, #1
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ff19 	bl	8006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006e46:	4603      	mov	r3, r0
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6a39      	ldr	r1, [r7, #32]
 8006e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e4e:	f7ff ff1e 	bl	8006c8e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8006e52:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e62:	f7ff fef6 	bl	8006c52 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e70:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	441a      	add	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	609a      	str	r2, [r3, #8]
    }
 8006e7e:	bf00      	nop
 8006e80:	3730      	adds	r7, #48	; 0x30
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bdb0      	pop	{r4, r5, r7, pc}
 8006e86:	bf00      	nop
 8006e88:	080285ac 	.word	0x080285ac

08006e8c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 8006eac:	b5b0      	push	{r4, r5, r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8006eb4:	1d3b      	adds	r3, r7, #4
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 faea 	bl	8007490 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 8006ebc:	f107 030c 	add.w	r3, r7, #12
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 faef 	bl	80074a6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 8006ec8:	bf00      	nop
 8006eca:	4620      	mov	r0, r4
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bdb0      	pop	{r4, r5, r7, pc}

08006ed2 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	60b9      	str	r1, [r7, #8]
 8006edc:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 8006ede:	f107 0208 	add.w	r2, r7, #8
 8006ee2:	f107 030c 	add.w	r3, r7, #12
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 faea 	bl	80074c2 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d017      	beq.n	8006f24 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x52>
				std::__lg(__last - __first) * 2,
 8006ef4:	f107 020c 	add.w	r2, r7, #12
 8006ef8:	f107 0308 	add.w	r3, r7, #8
 8006efc:	4611      	mov	r1, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fa65 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8006f04:	4603      	mov	r3, r0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fa fb5e 	bl	80015c8 <_ZSt4__lgi>
 8006f0c:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8006f0e:	005a      	lsls	r2, r3, #1
 8006f10:	793b      	ldrb	r3, [r7, #4]
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 faec 	bl	80074f2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8006f1a:	793a      	ldrb	r2, [r7, #4]
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 fb1e 	bl	8007560 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006f44:	b590      	push	{r4, r7, lr}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fa fcba 	bl	80018ca <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fb39 	bl	80075d0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00f      	beq.n	8006f84 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006f64:	687c      	ldr	r4, [r7, #4]
 8006f66:	463b      	mov	r3, r7
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fb41 	bl	80075f0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4619      	mov	r1, r3
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 fb47 	bl	8007606 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a05      	ldr	r2, [pc, #20]	; (8006f90 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8006f7c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a04      	ldr	r2, [pc, #16]	; (8006f94 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8006f82:	609a      	str	r2, [r3, #8]
      }
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4618      	mov	r0, r3
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd90      	pop	{r4, r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	0800762b 	.word	0x0800762b
 8006f94:	0800766d 	.word	0x0800766d

08006f98 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006fb0:	b590      	push	{r4, r7, lr}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fa fc84 	bl	80018ca <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 fb70 	bl	80076aa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00f      	beq.n	8006ff0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006fd0:	687c      	ldr	r4, [r7, #4]
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fb73 	bl	80076c0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f000 fb79 	bl	80076d6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a05      	ldr	r2, [pc, #20]	; (8006ffc <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8006fe8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a04      	ldr	r2, [pc, #16]	; (8007000 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8006fee:	609a      	str	r2, [r3, #8]
      }
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd90      	pop	{r4, r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	080076fb 	.word	0x080076fb
 8007000:	0800773d 	.word	0x0800773d

08007004 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fbb3 	bl	800777a <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8007014:	4603      	mov	r3, r0
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>:
struct EiAlloc
{
    typedef T value_type;
    EiAlloc() = default;
    template <class U>
    constexpr EiAlloc(const EiAlloc<U> &) noexcept {}
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4618      	mov	r0, r3
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>:
	  _Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
	  : _Bit_alloc_type(__a)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fba5 	bl	8007794 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
	  { }
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>:
      _M_deallocate()
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d018      	beq.n	8007096 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4618      	mov	r0, r3
 8007068:	f000 f844 	bl	80070f4 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 800706c:	4602      	mov	r2, r0
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	109b      	asrs	r3, r3, #2
 8007076:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 8007078:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691a      	ldr	r2, [r3, #16]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 8007084:	4413      	add	r3, r2
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4619      	mov	r1, r3
 800708a:	f000 fb98 	bl	80077be <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>
	    _M_impl._M_reset();
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4618      	mov	r0, r3
 8007092:	f000 fba3 	bl	80077dc <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>
      }
 8007096:	bf00      	nop
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800709e:	b590      	push	{r4, r7, lr}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
 80070a8:	687c      	ldr	r4, [r7, #4]
 80070aa:	6838      	ldr	r0, [r7, #0]
 80070ac:	f000 f80a 	bl	80070c4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 80070b0:	4603      	mov	r3, r0
 80070b2:	4619      	mov	r1, r3
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 fbb1 	bl	800781c <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>
 80070ba:	4603      	mov	r3, r0
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd90      	pop	{r4, r7, pc}

080070c4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>:
      _S_nword(size_t __n)
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	331f      	adds	r3, #31
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	4618      	mov	r0, r3
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	3b04      	subs	r3, #4
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff ffe7 	bl	80070de <_ZSt11__addressofImEPT_RS0_>
 8007110:	4603      	mov	r3, r0
 8007112:	3304      	adds	r3, #4
 8007114:	e000      	b.n	8007118 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 8007116:	2300      	movs	r3, #0
	}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4618      	mov	r0, r3
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff ffed 	bl	8007120 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8007146:	4602      	mov	r2, r0
 8007148:	f107 0308 	add.w	r3, r7, #8
 800714c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007150:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8007154:	6838      	ldr	r0, [r7, #0]
 8007156:	f7ff ffe3 	bl	8007120 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800715a:	4602      	mov	r2, r0
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007162:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8007166:	f107 0308 	add.w	r3, r7, #8
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff ffd8 	bl	8007120 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8007170:	4602      	mov	r2, r0
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007178:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800717c:	bf00      	nop
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff ffed 	bl	8007184 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80071aa:	4603      	mov	r3, r0
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80071b0:	6838      	ldr	r0, [r7, #0]
 80071b2:	f7ff ffe7 	bl	8007184 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80071b6:	4603      	mov	r3, r0
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80071be:	f107 030c 	add.w	r3, r7, #12
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff ffde 	bl	8007184 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80071c8:	4603      	mov	r3, r0
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	601a      	str	r2, [r3, #0]
    }
 80071d0:	bf00      	nop
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4618      	mov	r0, r3
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff ffed 	bl	80071d8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80071fe:	4603      	mov	r3, r0
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8007204:	6838      	ldr	r0, [r7, #0]
 8007206:	f7ff ffe7 	bl	80071d8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800720a:	4603      	mov	r3, r0
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8007212:	f107 030c 	add.w	r3, r7, #12
 8007216:	4618      	mov	r0, r3
 8007218:	f7ff ffde 	bl	80071d8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800721c:	4603      	mov	r3, r0
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	601a      	str	r2, [r3, #0]
    }
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8007242:	b5b0      	push	{r4, r5, r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800724e:	68fc      	ldr	r4, [r7, #12]
 8007250:	68b8      	ldr	r0, [r7, #8]
 8007252:	f000 faf1 	bl	8007838 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8007256:	4605      	mov	r5, r0
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff ffe7 	bl	800722c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800725e:	4603      	mov	r3, r0
 8007260:	461a      	mov	r2, r3
 8007262:	4629      	mov	r1, r5
 8007264:	4620      	mov	r0, r4
 8007266:	f000 faf2 	bl	800784e <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bdb0      	pop	{r4, r5, r7, pc}

08007274 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fb03 	bl	800788a <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007284:	4603      	mov	r3, r0
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fb02 	bl	80078a2 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800729e:	4603      	mov	r3, r0
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	68b9      	ldr	r1, [r7, #8]
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 faff 	bl	80078bc <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>
 80072be:	bf00      	nop
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 80072e6:	2200      	movs	r2, #0
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 faf3 	bl	80078d6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800730e:	b590      	push	{r4, r7, lr}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff ffec 	bl	80072f8 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007320:	4604      	mov	r4, r0
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4619      	mov	r1, r3
 8007326:	2008      	movs	r0, #8
 8007328:	f7fa f95d 	bl	80015e6 <_ZnwjPv>
 800732c:	4603      	mov	r3, r0
 800732e:	4622      	mov	r2, r4
 8007330:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007334:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	bd90      	pop	{r4, r7, pc}

08007340 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8007340:	b590      	push	{r4, r7, lr}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 fad1 	bl	80078f4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8007352:	4604      	mov	r4, r0
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff fabf 	bl	80068d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800735a:	4603      	mov	r3, r0
 800735c:	1ae2      	subs	r2, r4, r3
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	429a      	cmp	r2, r3
 8007362:	bf34      	ite	cc
 8007364:	2301      	movcc	r3, #1
 8007366:	2300      	movcs	r3, #0
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f019 fc3d 	bl	8020bee <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7ff faaf 	bl	80068d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800737a:	4604      	mov	r4, r0
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff faab 	bl	80068d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8007382:	4603      	mov	r3, r0
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	f107 0208 	add.w	r2, r7, #8
 800738a:	f107 0310 	add.w	r3, r7, #16
 800738e:	4611      	mov	r1, r2
 8007390:	4618      	mov	r0, r3
 8007392:	f000 fac0 	bl	8007916 <_ZSt3maxIjERKT_S2_S2_>
 8007396:	4603      	mov	r3, r0
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4423      	add	r3, r4
 800739c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff fa9a 	bl	80068d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 80073a4:	4602      	mov	r2, r0
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d306      	bcc.n	80073ba <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x7a>
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 faa1 	bl	80078f4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 80073b2:	4602      	mov	r2, r0
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d904      	bls.n	80073c4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x84>
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 fa9a 	bl	80078f4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 80073c0:	4603      	mov	r3, r0
 80073c2:	e000      	b.n	80073c6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x86>
 80073c4:	697b      	ldr	r3, [r7, #20]
      }
 80073c6:	4618      	mov	r0, r3
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd90      	pop	{r4, r7, pc}

080073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80073ce:	b590      	push	{r4, r7, lr}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f835 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80073de:	4603      	mov	r3, r0
 80073e0:	681c      	ldr	r4, [r3, #0]
 80073e2:	6838      	ldr	r0, [r7, #0]
 80073e4:	f000 f830 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80073e8:	4603      	mov	r3, r0
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	1ae3      	subs	r3, r4, r3
 80073ee:	10db      	asrs	r3, r3, #3
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd90      	pop	{r4, r7, pc}

080073f8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d006      	beq.n	8007416 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x1e>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fa96 	bl	800793e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>
 8007412:	4603      	mov	r3, r0
 8007414:	e000      	b.n	8007418 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x20>
 8007416:	2300      	movs	r3, #0
      }
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8007420:	b590      	push	{r4, r7, lr}
 8007422:	b087      	sub	sp, #28
 8007424:	af02      	add	r7, sp, #8
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800742e:	f88d 4000 	strb.w	r4, [sp]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	68b9      	ldr	r1, [r7, #8]
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 fa8e 	bl	800795a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>
 800743e:	4603      	mov	r3, r0
      }
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	bd90      	pop	{r4, r7, pc}

08007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800745e:	b590      	push	{r4, r7, lr}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	607a      	str	r2, [r7, #4]
 800746a:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fa86 	bl	800797e <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 8007472:	4604      	mov	r4, r0
 8007474:	68b8      	ldr	r0, [r7, #8]
 8007476:	f000 fa82 	bl	800797e <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800747a:	4601      	mov	r1, r0
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	4620      	mov	r0, r4
 8007482:	f000 fa8b 	bl	800799c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>
 8007486:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	bd90      	pop	{r4, r7, pc}

08007490 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
      _Iter_comp_iter(_Compare __comp)
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b082      	sub	sp, #8
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 80074b0:	463b      	mov	r3, r7
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff ffec 	bl	8007490 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80074c2:	b590      	push	{r4, r7, lr}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff ffbb 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80074d2:	4603      	mov	r3, r0
 80074d4:	681c      	ldr	r4, [r3, #0]
 80074d6:	6838      	ldr	r0, [r7, #0]
 80074d8:	f7ff ffb6 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80074dc:	4603      	mov	r3, r0
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	429c      	cmp	r4, r3
 80074e2:	bf14      	ite	ne
 80074e4:	2301      	movne	r3, #1
 80074e6:	2300      	moveq	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	4618      	mov	r0, r3
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd90      	pop	{r4, r7, pc}

080074f2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b086      	sub	sp, #24
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	607a      	str	r2, [r7, #4]
 80074fe:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 8007500:	f107 020c 	add.w	r2, r7, #12
 8007504:	f107 0308 	add.w	r3, r7, #8
 8007508:	4611      	mov	r1, r2
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff ff5f 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8007510:	4603      	mov	r3, r0
 8007512:	2b10      	cmp	r3, #16
 8007514:	bfcc      	ite	gt
 8007516:	2301      	movgt	r3, #1
 8007518:	2300      	movle	r3, #0
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01c      	beq.n	800755a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  if (__depth_limit == 0)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d106      	bne.n	8007534 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x42>
	      std::__partial_sort(__first, __last, __last, __comp);
 8007526:	783b      	ldrb	r3, [r7, #0]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 fa66 	bl	80079fe <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
 8007532:	e012      	b.n	800755a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  --__depth_limit;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3b01      	subs	r3, #1
 8007538:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800753a:	783a      	ldrb	r2, [r7, #0]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fa74 	bl	8007a2c <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>
 8007544:	4603      	mov	r3, r0
 8007546:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8007548:	783b      	ldrb	r3, [r7, #0]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	6978      	ldr	r0, [r7, #20]
 8007550:	f7ff ffcf 	bl	80074f2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  __last = __cut;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8007558:	e7d2      	b.n	8007500 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xe>
    }
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800756c:	f107 020c 	add.w	r2, r7, #12
 8007570:	f107 0308 	add.w	r3, r7, #8
 8007574:	4611      	mov	r1, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff ff29 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800757c:	4603      	mov	r3, r0
 800757e:	2b10      	cmp	r3, #16
 8007580:	bfcc      	ite	gt
 8007582:	2301      	movgt	r3, #1
 8007584:	2300      	movle	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d018      	beq.n	80075be <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800758c:	f107 030c 	add.w	r3, r7, #12
 8007590:	2110      	movs	r1, #16
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fa8c 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007598:	4603      	mov	r3, r0
 800759a:	793a      	ldrb	r2, [r7, #4]
 800759c:	4619      	mov	r1, r3
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 fa9e 	bl	8007ae0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 80075a4:	f107 030c 	add.w	r3, r7, #12
 80075a8:	2110      	movs	r1, #16
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fa80 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80075b0:	4603      	mov	r3, r0
 80075b2:	793a      	ldrb	r2, [r7, #4]
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fafe 	bl	8007bb8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80075bc:	e004      	b.n	80075c8 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 80075be:	793a      	ldrb	r2, [r7, #4]
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fa8c 	bl	8007ae0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80075c8:	bf00      	nop
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	bf14      	ite	ne
 80075de:	2301      	movne	r3, #1
 80075e0:	2300      	moveq	r3, #0
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4618      	mov	r0, r3
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8007606:	b590      	push	{r4, r7, lr}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8007610:	6838      	ldr	r0, [r7, #0]
 8007612:	f7ff ffed 	bl	80075f0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8007616:	4603      	mov	r3, r0
 8007618:	4622      	mov	r2, r4
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fb03 	bl	8007c28 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	bd90      	pop	{r4, r7, pc}

0800762a <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800762a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
 8007636:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 fb0e 	bl	8007c5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800763e:	4604      	mov	r4, r0
 8007640:	68b8      	ldr	r0, [r7, #8]
 8007642:	f7ff fadc 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007646:	4605      	mov	r5, r0
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff fad8 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800764e:	4606      	mov	r6, r0
 8007650:	6838      	ldr	r0, [r7, #0]
 8007652:	f7ff fadf 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007656:	4603      	mov	r3, r0
 8007658:	4632      	mov	r2, r6
 800765a:	4629      	mov	r1, r5
 800765c:	4620      	mov	r0, r4
 800765e:	f000 fb0d 	bl	8007c7c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8007662:	4603      	mov	r3, r0
      }
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800766c <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800766c:	b590      	push	{r4, r7, lr}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	4613      	mov	r3, r2
 8007678:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d109      	bne.n	8007694 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fb20 	bl	8007cc6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8007686:	4604      	mov	r4, r0
 8007688:	68b8      	ldr	r0, [r7, #8]
 800768a:	f000 fae6 	bl	8007c5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800768e:	4603      	mov	r3, r0
 8007690:	6023      	str	r3, [r4, #0]
	    break;
 8007692:	e005      	b.n	80076a0 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	461a      	mov	r2, r3
 8007698:	68b9      	ldr	r1, [r7, #8]
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 fb1f 	bl	8007cde <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 80076a0:	2300      	movs	r3, #0
      }
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd90      	pop	{r4, r7, pc}

080076aa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
	  { return true; }
 80076b2:	2301      	movs	r3, #1
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4618      	mov	r0, r3
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80076d6:	b590      	push	{r4, r7, lr}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80076e0:	6838      	ldr	r0, [r7, #0]
 80076e2:	f7ff ffed 	bl	80076c0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80076e6:	4603      	mov	r3, r0
 80076e8:	4622      	mov	r2, r4
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fb21 	bl	8007d34 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd90      	pop	{r4, r7, pc}

080076fa <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80076fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	607a      	str	r2, [r7, #4]
 8007706:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 fb2c 	bl	8007d66 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800770e:	4604      	mov	r4, r0
 8007710:	68b8      	ldr	r0, [r7, #8]
 8007712:	f7ff fa74 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007716:	4605      	mov	r5, r0
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff fa70 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800771e:	4606      	mov	r6, r0
 8007720:	6838      	ldr	r0, [r7, #0]
 8007722:	f7ff fa77 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007726:	4603      	mov	r3, r0
 8007728:	4632      	mov	r2, r6
 800772a:	4629      	mov	r1, r5
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fb2b 	bl	8007d88 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8007732:	4603      	mov	r3, r0
      }
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800773c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800773c:	b590      	push	{r4, r7, lr}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4613      	mov	r3, r2
 8007748:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800774a:	79fb      	ldrb	r3, [r7, #7]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d109      	bne.n	8007764 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 fb3e 	bl	8007dd2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8007756:	4604      	mov	r4, r0
 8007758:	68b8      	ldr	r0, [r7, #8]
 800775a:	f000 fb04 	bl	8007d66 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800775e:	4603      	mov	r3, r0
 8007760:	6023      	str	r3, [r4, #0]
	    break;
 8007762:	e005      	b.n	8007770 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007764:	79fb      	ldrb	r3, [r7, #7]
 8007766:	461a      	mov	r2, r3
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 fb3d 	bl	8007dea <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8007770:	2300      	movs	r3, #0
      }
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	bd90      	pop	{r4, r7, pc}

0800777a <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800777a:	b580      	push	{r7, lr}
 800777c:	b082      	sub	sp, #8
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 fb5b 	bl	8007e40 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800778a:	4603      	mov	r3, r0
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fa f825 	bl	80017ee <_ZNSt13_Bit_iteratorC1Ev>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3308      	adds	r3, #8
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fa f820 	bl	80017ee <_ZNSt13_Bit_iteratorC1Ev>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	611a      	str	r2, [r3, #16]
	{ }
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	60b9      	str	r1, [r7, #8]
 80077c8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	68b9      	ldr	r1, [r7, #8]
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fb42 	bl	8007e58 <_ZN2ei7EiAllocImE10deallocateEPmj>
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
	  _M_start = _M_finish = _Bit_iterator();
 80077e4:	f107 0308 	add.w	r3, r7, #8
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fa f800 	bl	80017ee <_ZNSt13_Bit_iteratorC1Ev>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3308      	adds	r3, #8
 80077f2:	f107 0208 	add.w	r2, r7, #8
 80077f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f103 0208 	add.w	r2, r3, #8
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800780a:	e883 0003 	stmia.w	r3, {r0, r1}
	  _M_end_of_storage = _Bit_pointer();
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	611a      	str	r2, [r3, #16]
	}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fb22 	bl	8007e72 <_ZN2ei7EiAllocImE8allocateEj>
 800782e:	4603      	mov	r3, r0
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800784e:	b590      	push	{r4, r7, lr}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800785a:	68fc      	ldr	r4, [r7, #12]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff fce5 	bl	800722c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007862:	4603      	mov	r3, r0
 8007864:	4619      	mov	r1, r3
 8007866:	4620      	mov	r0, r4
 8007868:	f000 fb14 	bl	8007e94 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	1d1c      	adds	r4, r3, #4
 8007870:	68b8      	ldr	r0, [r7, #8]
 8007872:	f7ff ffe1 	bl	8007838 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8007876:	4603      	mov	r3, r0
 8007878:	4619      	mov	r1, r3
 800787a:	4620      	mov	r0, r4
 800787c:	f000 fb1d 	bl	8007eba <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	bd90      	pop	{r4, r7, pc}

0800788a <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fb22 	bl	8007edc <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8007898:	4603      	mov	r3, r0
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 fb23 	bl	8007ef8 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80078b2:	4603      	mov	r3, r0
 80078b4:	4618      	mov	r0, r3
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>:
        allocs[ptr] = bytes;
#endif
        return (T *)ptr;
    }

    void deallocate(T *p, size_t n) noexcept
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = allocs.find(p);
        ei_dsp_free(p,size_p->second);
        allocs.erase(size_p);
#else
        ei_dsp_free(p,0);
 80078c8:	68b8      	ldr	r0, [r7, #8]
 80078ca:	f013 fad7 	bl	801ae7c <_Z7ei_freePv>
#endif
    }
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 80078d6:	b40e      	push	{r1, r2, r3}
 80078d8:	b580      	push	{r7, lr}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 80078e0:	6978      	ldr	r0, [r7, #20]
 80078e2:	f000 fb15 	bl	8007f10 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078f0:	b003      	add	sp, #12
 80078f2:	4770      	bx	lr

080078f4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fb2a 	bl	8007f58 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8007904:	4603      	mov	r3, r0
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fb0c 	bl	8007f24 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>
 800790c:	4603      	mov	r3, r0
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d201      	bcs.n	8007930 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	e000      	b.n	8007932 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8007930:	687b      	ldr	r3, [r7, #4]
    }
 8007932:	4618      	mov	r0, r3
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>:
      allocate(_Alloc& __a, size_type __n)
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fb0f 	bl	8007f6e <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>
 8007950:	4603      	mov	r3, r0
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
 8007966:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	68b9      	ldr	r1, [r7, #8]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 fb0e 	bl	8007f90 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8007974:	4603      	mov	r3, r0
      }
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8007986:	f107 030c 	add.w	r3, r7, #12
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fb1c 	bl	8007fca <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800799c:	b590      	push	{r4, r7, lr}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 80079ae:	f107 0208 	add.w	r2, r7, #8
 80079b2:	f107 030c 	add.w	r3, r7, #12
 80079b6:	4611      	mov	r1, r2
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fb18 	bl	8007fee <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d017      	beq.n	80079f4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x58>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 80079c4:	6978      	ldr	r0, [r7, #20]
 80079c6:	f7ff fc7e 	bl	80072c6 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 80079ca:	4604      	mov	r4, r0
 80079cc:	f107 030c 	add.w	r3, r7, #12
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fb2e 	bl	8008032 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>
 80079d6:	4603      	mov	r3, r0
 80079d8:	461a      	mov	r2, r3
 80079da:	4621      	mov	r1, r4
 80079dc:	6838      	ldr	r0, [r7, #0]
 80079de:	f000 fb34 	bl	800804a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
	  for (; __first != __last; ++__first, (void)++__cur)
 80079e2:	f107 030c 	add.w	r3, r7, #12
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fb12 	bl	8008010 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	3308      	adds	r3, #8
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	e7dc      	b.n	80079ae <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x12>
	  return __cur;
 80079f4:	697b      	ldr	r3, [r7, #20]
    }
 80079f6:	4618      	mov	r0, r3
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd90      	pop	{r4, r7, pc}

080079fe <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	607a      	str	r2, [r7, #4]
 8007a0a:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 8007a0c:	783b      	ldrb	r3, [r7, #0]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	68b9      	ldr	r1, [r7, #8]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 fb2c 	bl	8008070 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
      std::__sort_heap(__first, __middle, __comp);
 8007a18:	463b      	mov	r3, r7
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	68b9      	ldr	r1, [r7, #8]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 fb58 	bl	80080d4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
    }
 8007a24:	bf00      	nop
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8007a2c:	b590      	push	{r4, r7, lr}
 8007a2e:	b089      	sub	sp, #36	; 0x24
 8007a30:	af02      	add	r7, sp, #8
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8007a38:	f107 020c 	add.w	r2, r7, #12
 8007a3c:	f107 0308 	add.w	r3, r7, #8
 8007a40:	4611      	mov	r1, r2
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff fcc3 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	0fda      	lsrs	r2, r3, #31
 8007a4c:	4413      	add	r3, r2
 8007a4e:	105b      	asrs	r3, r3, #1
 8007a50:	461a      	mov	r2, r3
 8007a52:	f107 030c 	add.w	r3, r7, #12
 8007a56:	4611      	mov	r1, r2
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 f829 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8007a62:	f107 030c 	add.w	r3, r7, #12
 8007a66:	2101      	movs	r1, #1
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f821 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007a6e:	4604      	mov	r4, r0
 8007a70:	f107 0308 	add.w	r3, r7, #8
 8007a74:	2101      	movs	r1, #1
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fb52 	bl	8008120 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	793b      	ldrb	r3, [r7, #4]
 8007a80:	f88d 3000 	strb.w	r3, [sp]
 8007a84:	4613      	mov	r3, r2
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	4621      	mov	r1, r4
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 fb7d 	bl	800818a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8007a90:	f107 030c 	add.w	r3, r7, #12
 8007a94:	2101      	movs	r1, #1
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 f80a 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007a9c:	793b      	ldrb	r3, [r7, #4]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	68b9      	ldr	r1, [r7, #8]
 8007aa2:	f000 fbc7 	bl	8008234 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>
 8007aa6:	4603      	mov	r3, r0
    }
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	371c      	adds	r7, #28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd90      	pop	{r4, r7, pc}

08007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	4413      	add	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	f107 020c 	add.w	r2, r7, #12
 8007aca:	f107 0308 	add.w	r3, r7, #8
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff f9db 	bl	8006e8c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 8007ae0:	b5b0      	push	{r4, r5, r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 8007aec:	f107 0208 	add.w	r2, r7, #8
 8007af0:	f107 030c 	add.w	r3, r7, #12
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 fbe4 	bl	80082c4 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d156      	bne.n	8007bb0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd0>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8007b02:	f107 030c 	add.w	r3, r7, #12
 8007b06:	2101      	movs	r1, #1
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff ffd1 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	61fb      	str	r3, [r7, #28]
 8007b12:	f107 0208 	add.w	r2, r7, #8
 8007b16:	f107 031c 	add.w	r3, r7, #28
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff fcd0 	bl	80074c2 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d044      	beq.n	8007bb2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd2>
	  if (__comp(__i, __first))
 8007b28:	1d3b      	adds	r3, r7, #4
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	69f9      	ldr	r1, [r7, #28]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fb0f 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d02d      	beq.n	8007b96 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xb6>
		__val = _GLIBCXX_MOVE(*__i);
 8007b3a:	f107 031c 	add.w	r3, r7, #28
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 fbe9 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007b44:	4603      	mov	r3, r0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fbf1 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	f107 0314 	add.w	r3, r7, #20
 8007b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b56:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8007b5a:	f107 031c 	add.w	r3, r7, #28
 8007b5e:	2101      	movs	r1, #1
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff ffa5 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007b66:	4603      	mov	r3, r0
 8007b68:	461a      	mov	r2, r3
 8007b6a:	69f9      	ldr	r1, [r7, #28]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fbe9 	bl	8008344 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>
	      *__first = _GLIBCXX_MOVE(__val);
 8007b72:	f107 0314 	add.w	r3, r7, #20
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fbd9 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	f107 030c 	add.w	r3, r7, #12
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 fbc7 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	4622      	mov	r2, r4
 8007b8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b90:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b94:	e006      	b.n	8007ba4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xc4>
	    std::__unguarded_linear_insert(__i,
 8007b96:	7938      	ldrb	r0, [r7, #4]
 8007b98:	f000 fbec 	bl	8008374 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	69f8      	ldr	r0, [r7, #28]
 8007ba0:	f000 fbfc 	bl	800839c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8007ba4:	f107 031c 	add.w	r3, r7, #28
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fba3 	bl	80082f4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 8007bae:	e7b0      	b.n	8007b12 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x32>
      if (__first == __last) return;
 8007bb0:	bf00      	nop
    }
 8007bb2:	3720      	adds	r7, #32
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bdb0      	pop	{r4, r5, r7, pc}

08007bb8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 8007bb8:	b590      	push	{r4, r7, lr}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	f107 0208 	add.w	r2, r7, #8
 8007bcc:	f107 0314 	add.w	r3, r7, #20
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff fc75 	bl	80074c2 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00c      	beq.n	8007bf8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x40>
	std::__unguarded_linear_insert(__i,
 8007bde:	7938      	ldrb	r0, [r7, #4]
 8007be0:	f000 fbc8 	bl	8008374 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 8007be4:	4621      	mov	r1, r4
 8007be6:	6978      	ldr	r0, [r7, #20]
 8007be8:	f000 fbd8 	bl	800839c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8007bec:	f107 0314 	add.w	r3, r7, #20
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 fb7f 	bl	80082f4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 8007bf6:	e7e7      	b.n	8007bc8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x10>
    }
 8007bf8:	bf00      	nop
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd90      	pop	{r4, r7, pc}

08007c00 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d201      	bcs.n	8007c1a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	e000      	b.n	8007c1c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007c1a:	687b      	ldr	r3, [r7, #4]
    }
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8007c28:	b590      	push	{r4, r7, lr}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8007c34:	68b8      	ldr	r0, [r7, #8]
 8007c36:	f7ff fcdb 	bl	80075f0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	681c      	ldr	r4, [r3, #0]
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7f9 fe2d 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 8007c44:	4603      	mov	r3, r0
 8007c46:	4619      	mov	r1, r3
 8007c48:	2004      	movs	r0, #4
 8007c4a:	f7f9 fccc 	bl	80015e6 <_ZnwjPv>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	601c      	str	r4, [r3, #0]
 8007c52:	bf00      	nop
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd90      	pop	{r4, r7, pc}

08007c5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fbef 	bl	8008446 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8007c68:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 fbf7 	bl	800845e <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8007c70:	4603      	mov	r3, r0
 8007c72:	bf00      	nop
	}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	b086      	sub	sp, #24
 8007c82:	af02      	add	r7, sp, #8
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	607a      	str	r2, [r7, #4]
 8007c8a:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 fbf1 	bl	8008474 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007c92:	4604      	mov	r4, r0
 8007c94:	68b8      	ldr	r0, [r7, #8]
 8007c96:	f7fe ffb2 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7fe ffae 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	6838      	ldr	r0, [r7, #0]
 8007ca6:	f7fe ffb5 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007caa:	4603      	mov	r3, r0
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	4633      	mov	r3, r6
 8007cb0:	462a      	mov	r2, r5
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	f000 fbe8 	bl	800848a <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8007cba:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007cc6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7f9 fde5 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007cde:	b5b0      	push	{r4, r5, r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d016      	beq.n	8007d20 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	dc19      	bgt.n	8007d2a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d002      	beq.n	8007d00 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d00a      	beq.n	8007d14 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8007cfe:	e014      	b.n	8007d2a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7ff ffe0 	bl	8007cc6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8007d06:	4604      	mov	r4, r0
 8007d08:	68b8      	ldr	r0, [r7, #8]
 8007d0a:	f7ff ffa6 	bl	8007c5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	6023      	str	r3, [r4, #0]
	      break;
 8007d12:	e00a      	b.n	8007d2a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8007d14:	462a      	mov	r2, r5
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 fbda 	bl	80084d2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8007d1e:	e004      	b.n	8007d2a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8007d20:	4621      	mov	r1, r4
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 fbee 	bl	8008504 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007d28:	bf00      	nop
	  return false;
 8007d2a:	2300      	movs	r3, #0
	}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bdb0      	pop	{r4, r5, r7, pc}

08007d34 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8007d34:	b590      	push	{r4, r7, lr}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8007d40:	68b8      	ldr	r0, [r7, #8]
 8007d42:	f7ff fcbd 	bl	80076c0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8007d46:	4604      	mov	r4, r0
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7f9 fda8 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	4619      	mov	r1, r3
 8007d52:	2004      	movs	r0, #4
 8007d54:	f7f9 fc47 	bl	80015e6 <_ZnwjPv>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	bf00      	nop
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd90      	pop	{r4, r7, pc}

08007d66 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fbd4 	bl	800851c <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8007d74:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 fbdc 	bl	8008534 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	bf00      	nop
	}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8c:	b086      	sub	sp, #24
 8007d8e:	af02      	add	r7, sp, #8
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
 8007d96:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 fbd6 	bl	800854a <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8007d9e:	4604      	mov	r4, r0
 8007da0:	68b8      	ldr	r0, [r7, #8]
 8007da2:	f7fe ff2c 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007da6:	4605      	mov	r5, r0
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7fe ff28 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007dae:	4606      	mov	r6, r0
 8007db0:	6838      	ldr	r0, [r7, #0]
 8007db2:	f7fe ff2f 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007db6:	4603      	mov	r3, r0
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4633      	mov	r3, r6
 8007dbc:	462a      	mov	r2, r5
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	f000 fbcd 	bl	8008560 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 8007dc6:	4603      	mov	r3, r0
    }
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007dd2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7f9 fd5f 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 8007de0:	4603      	mov	r3, r0
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007dea:	b5b0      	push	{r4, r5, r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	4613      	mov	r3, r2
 8007df6:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d016      	beq.n	8007e2c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	dc19      	bgt.n	8007e36 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d002      	beq.n	8007e0c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d00a      	beq.n	8007e20 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8007e0a:	e014      	b.n	8007e36 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f7ff ffe0 	bl	8007dd2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8007e12:	4604      	mov	r4, r0
 8007e14:	68b8      	ldr	r0, [r7, #8]
 8007e16:	f7ff ffa6 	bl	8007d66 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	6023      	str	r3, [r4, #0]
	      break;
 8007e1e:	e00a      	b.n	8007e36 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8007e20:	462a      	mov	r2, r5
 8007e22:	68b9      	ldr	r1, [r7, #8]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 fbbf 	bl	80085a8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8007e2a:	e004      	b.n	8007e36 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 fbd3 	bl	80085da <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007e34:	bf00      	nop
	  return false;
 8007e36:	2300      	movs	r3, #0
	}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bdb0      	pop	{r4, r5, r7, pc}

08007e40 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fbd2 	bl	80085f2 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <_ZN2ei7EiAllocImE10deallocateEPmj>:
    void deallocate(T *p, size_t n) noexcept
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 8007e64:	68b8      	ldr	r0, [r7, #8]
 8007e66:	f013 f809 	bl	801ae7c <_Z7ei_freePv>
    }
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <_ZN2ei7EiAllocImE8allocateEj>:
    T *allocate(size_t n)
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f012 ffe0 	bl	801ae48 <_Z9ei_mallocj>
 8007e88:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
    }
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8007e94:	b590      	push	{r4, r7, lr}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8007e9e:	687c      	ldr	r4, [r7, #4]
 8007ea0:	6838      	ldr	r0, [r7, #0]
 8007ea2:	f7ff f9c3 	bl	800722c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 fbaf 	bl	800860e <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd90      	pop	{r4, r7, pc}

08007eba <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007ec4:	6838      	ldr	r0, [r7, #0]
 8007ec6:	f7ff fcb7 	bl	8007838 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 fba1 	bl	8008630 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fba0 	bl	8008646 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8007f06:	4603      	mov	r3, r0
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR inline void
    _Destroy(_Tp* __pointer)
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
#endif
    }
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8007f2c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007f30:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fb94 	bl	8008660 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007f3c:	f107 0208 	add.w	r2, r7, #8
 8007f40:	f107 030c 	add.w	r3, r7, #12
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff fe5a 	bl	8007c00 <_ZSt3minIjERKT_S2_S2_>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	681b      	ldr	r3, [r3, #0]
      }
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4618      	mov	r0, r3
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>:
    T *allocate(size_t n)
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f012 ff62 	bl	801ae48 <_Z9ei_mallocj>
 8007f84:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 8007f86:	68bb      	ldr	r3, [r7, #8]
    }
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007f90:	b5b0      	push	{r4, r5, r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 fb6b 	bl	800867a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	68b8      	ldr	r0, [r7, #8]
 8007fa8:	f000 fb67 	bl	800867a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007fac:	4605      	mov	r5, r0
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fb63 	bl	800867a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fb68 	bl	8008690 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8007fc0:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bdb0      	pop	{r4, r5, r7, pc}

08007fca <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8007fd4:	463b      	mov	r3, r7
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fb80 	bl	80086dc <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fb79 	bl	80086f2 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 8008000:	4603      	mov	r3, r0
 8008002:	f083 0301 	eor.w	r3, r3, #1
 8008006:	b2db      	uxtb	r3, r3
 8008008:	4618      	mov	r0, r3
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>:
      operator++()
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
	++_M_current;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f103 0208 	add.w	r2, r3, #8
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	601a      	str	r2, [r3, #0]
	return *this;
 8008024:	687b      	ldr	r3, [r7, #4]
      }
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>:
      operator*() const
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fb61 	bl	800871e <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800805c:	4603      	mov	r3, r0
 800805e:	461a      	mov	r2, r3
 8008060:	68b9      	ldr	r1, [r7, #8]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 fb66 	bl	8008734 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800807e:	463b      	mov	r3, r7
 8008080:	461a      	mov	r2, r3
 8008082:	68b9      	ldr	r1, [r7, #8]
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fb6e 	bl	8008766 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	617b      	str	r3, [r7, #20]
 800808e:	1d3a      	adds	r2, r7, #4
 8008090:	f107 0314 	add.w	r3, r7, #20
 8008094:	4611      	mov	r1, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fbc4 	bl	8008824 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d014      	beq.n	80080cc <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x5c>
	if (__comp(__i, __first))
 80080a2:	463b      	mov	r3, r7
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	6979      	ldr	r1, [r7, #20]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 f852 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d005      	beq.n	80080c0 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x50>
	  std::__pop_heap(__first, __middle, __i, __comp);
 80080b4:	463b      	mov	r3, r7
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	68b9      	ldr	r1, [r7, #8]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fbca 	bl	8008854 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 80080c0:	f107 0314 	add.w	r3, r7, #20
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f915 	bl	80082f4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 80080ca:	e7e0      	b.n	800808e <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x1e>
    }
 80080cc:	bf00      	nop
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 80080e0:	f107 020c 	add.w	r2, r7, #12
 80080e4:	f107 0308 	add.w	r3, r7, #8
 80080e8:	4611      	mov	r1, r2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7ff f96f 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	bfcc      	ite	gt
 80080f6:	2301      	movgt	r3, #1
 80080f8:	2300      	movle	r3, #0
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x44>
	{
	  --__last;
 8008100:	f107 0308 	add.w	r3, r7, #8
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fbf1 	bl	80088ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	68b9      	ldr	r1, [r7, #8]
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 fb9f 	bl	8008854 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      while (__last - __first > 1)
 8008116:	e7e3      	b.n	80080e0 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xc>
	}
    }
 8008118:	bf00      	nop
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	425b      	negs	r3, r3
 8008134:	4413      	add	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	f107 020c 	add.w	r2, r7, #12
 800813c:	f107 0308 	add.w	r3, r7, #8
 8008140:	4611      	mov	r1, r2
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fea2 	bl	8006e8c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 8008152:	b5b0      	push	{r4, r5, r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 800815e:	68fc      	ldr	r4, [r7, #12]
 8008160:	f107 0308 	add.w	r3, r7, #8
 8008164:	4618      	mov	r0, r3
 8008166:	f000 f8d6 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800816a:	4605      	mov	r5, r0
 800816c:	1d3b      	adds	r3, r7, #4
 800816e:	4618      	mov	r0, r3
 8008170:	f000 f8d1 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008174:	4603      	mov	r3, r0
 8008176:	461a      	mov	r2, r3
 8008178:	4629      	mov	r1, r5
 800817a:	4620      	mov	r0, r4
 800817c:	f7fb f942 	bl	8003404 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8008180:	4603      	mov	r3, r0
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bdb0      	pop	{r4, r5, r7, pc}

0800818a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	f107 0018 	add.w	r0, r7, #24
 80081a0:	f7ff ffd7 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d020      	beq.n	80081ec <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x62>
	  if (__comp(__b, __c))
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	f107 0018 	add.w	r0, r7, #24
 80081b2:	f7ff ffce 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d004      	beq.n	80081c6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x3c>
	    std::iter_swap(__result, __b);
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 fba5 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 80081c4:	e032      	b.n	800822c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	  else if (__comp(__a, __c))
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	f107 0018 	add.w	r0, r7, #24
 80081ce:	f7ff ffc0 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d004      	beq.n	80081e2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x58>
	    std::iter_swap(__result, __c);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fb97 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 80081e0:	e024      	b.n	800822c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	    std::iter_swap(__result, __a);
 80081e2:	68b9      	ldr	r1, [r7, #8]
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 fb92 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 80081ea:	e01f      	b.n	800822c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__a, __c))
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	f107 0018 	add.w	r0, r7, #24
 80081f4:	f7ff ffad 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d004      	beq.n	8008208 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x7e>
	std::iter_swap(__result, __a);
 80081fe:	68b9      	ldr	r1, [r7, #8]
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 fb84 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8008206:	e011      	b.n	800822c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__b, __c))
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	f107 0018 	add.w	r0, r7, #24
 8008210:	f7ff ff9f 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x9a>
	std::iter_swap(__result, __c);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 fb76 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8008222:	e003      	b.n	800822c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	std::iter_swap(__result, __b);
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 fb71 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8008242:	463b      	mov	r3, r7
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	68f9      	ldr	r1, [r7, #12]
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff ff82 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x2c>
	    ++__first;
 8008254:	f107 030c 	add.w	r3, r7, #12
 8008258:	4618      	mov	r0, r3
 800825a:	f000 f84b 	bl	80082f4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800825e:	e7f0      	b.n	8008242 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0xe>
	  --__last;
 8008260:	f107 0308 	add.w	r3, r7, #8
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fb41 	bl	80088ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 800826a:	463b      	mov	r3, r7
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	4618      	mov	r0, r3
 8008272:	f7ff ff6e 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d005      	beq.n	8008288 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x54>
	    --__last;
 800827c:	f107 0308 	add.w	r3, r7, #8
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fb33 	bl	80088ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 8008286:	e7f0      	b.n	800826a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x36>
	  if (!(__first < __last))
 8008288:	f107 0208 	add.w	r2, r7, #8
 800828c:	f107 030c 	add.w	r3, r7, #12
 8008290:	4611      	mov	r1, r2
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fac6 	bl	8008824 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8008298:	4603      	mov	r3, r0
 800829a:	f083 0301 	eor.w	r3, r3, #1
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d001      	beq.n	80082a8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x74>
	    return __first;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	e009      	b.n	80082bc <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x88>
	  std::iter_swap(__first, __last);
 80082a8:	68b9      	ldr	r1, [r7, #8]
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 fb2f 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
	  ++__first;
 80082b0:	f107 030c 	add.w	r3, r7, #12
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 f81d 	bl	80082f4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 80082ba:	e7c2      	b.n	8008242 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0xe>
    }
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80082c4:	b590      	push	{r4, r7, lr}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7ff f8ba 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80082d4:	4603      	mov	r3, r0
 80082d6:	681c      	ldr	r4, [r3, #0]
 80082d8:	6838      	ldr	r0, [r7, #0]
 80082da:	f7ff f8b5 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80082de:	4603      	mov	r3, r0
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	429c      	cmp	r4, r3
 80082e4:	bf0c      	ite	eq
 80082e6:	2301      	moveq	r3, #1
 80082e8:	2300      	movne	r3, #0
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd90      	pop	{r4, r7, pc}

080082f4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
	++_M_current;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f103 0208 	add.w	r2, r3, #8
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	601a      	str	r2, [r3, #0]
	return *this;
 8008308:	687b      	ldr	r3, [r7, #4]
      }
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4618      	mov	r0, r3
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8008344:	b590      	push	{r4, r7, lr}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 faf3 	bl	800893c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 8008356:	4604      	mov	r4, r0
 8008358:	68b8      	ldr	r0, [r7, #8]
 800835a:	f000 faef 	bl	800893c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 800835e:	4603      	mov	r3, r0
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	4619      	mov	r1, r3
 8008364:	4620      	mov	r0, r4
 8008366:	f000 faf4 	bl	8008952 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>
 800836a:	4603      	mov	r3, r0
    }
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	bd90      	pop	{r4, r7, pc}

08008374 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 8008374:	b590      	push	{r4, r7, lr}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800837c:	1d3b      	adds	r3, r7, #4
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fb08 	bl	8008994 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 8008384:	4602      	mov	r2, r0
 8008386:	f107 030c 	add.w	r3, r7, #12
 800838a:	4611      	mov	r1, r2
 800838c:	4618      	mov	r0, r3
 800838e:	f000 fb0c 	bl	80089aa <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 8008392:	bf00      	nop
 8008394:	4620      	mov	r0, r4
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	bd90      	pop	{r4, r7, pc}

0800839c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800839c:	b590      	push	{r4, r7, lr}
 800839e:	b087      	sub	sp, #28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 80083a6:	1d3b      	adds	r3, r7, #4
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7ff ffb4 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80083ae:	4603      	mov	r3, r0
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff ffbc 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80083b6:	4602      	mov	r2, r0
 80083b8:	f107 0310 	add.w	r3, r7, #16
 80083bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083c0:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	60fb      	str	r3, [r7, #12]
      --__next;
 80083c8:	f107 030c 	add.w	r3, r7, #12
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fa8d 	bl	80088ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 80083d2:	f107 0110 	add.w	r1, r7, #16
 80083d6:	463b      	mov	r3, r7
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 faf3 	bl	80089c6 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d01b      	beq.n	800841e <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x82>
	  *__last = _GLIBCXX_MOVE(*__next);
 80083e6:	f107 030c 	add.w	r3, r7, #12
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff ff93 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80083f0:	4603      	mov	r3, r0
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff ff9b 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80083f8:	4604      	mov	r4, r0
 80083fa:	1d3b      	adds	r3, r7, #4
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7ff ff8a 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008402:	4603      	mov	r3, r0
 8008404:	4622      	mov	r2, r4
 8008406:	e892 0003 	ldmia.w	r2, {r0, r1}
 800840a:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	607b      	str	r3, [r7, #4]
	  --__next;
 8008412:	f107 030c 	add.w	r3, r7, #12
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fa68 	bl	80088ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 800841c:	e7d9      	b.n	80083d2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x36>
      *__last = _GLIBCXX_MOVE(__val);
 800841e:	f107 0310 	add.w	r3, r7, #16
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff ff83 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008428:	4604      	mov	r4, r0
 800842a:	1d3b      	adds	r3, r7, #4
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff ff72 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008432:	4603      	mov	r3, r0
 8008434:	4622      	mov	r2, r4
 8008436:	e892 0003 	ldmia.w	r2, {r0, r1}
 800843a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800843e:	bf00      	nop
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	bd90      	pop	{r4, r7, pc}

08008446 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7f9 fa30 	bl	80018b4 <_ZNKSt9_Any_data9_M_accessEv>
 8008454:	4603      	mov	r3, r0
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4618      	mov	r0, r3
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800848a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	7338      	strb	r0, [r7, #12]
 8008492:	60b9      	str	r1, [r7, #8]
 8008494:	607a      	str	r2, [r7, #4]
 8008496:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008498:	68b8      	ldr	r0, [r7, #8]
 800849a:	f7ff ffeb 	bl	8008474 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800849e:	4603      	mov	r3, r0
 80084a0:	681c      	ldr	r4, [r3, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7fe fbab 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80084a8:	4603      	mov	r3, r0
 80084aa:	681d      	ldr	r5, [r3, #0]
 80084ac:	6838      	ldr	r0, [r7, #0]
 80084ae:	f7fe fba6 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80084b2:	4603      	mov	r3, r0
 80084b4:	681e      	ldr	r6, [r3, #0]
 80084b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b8:	f7fe fbac 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80084bc:	4603      	mov	r3, r0
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	4631      	mov	r1, r6
 80084c4:	4628      	mov	r0, r5
 80084c6:	47a0      	blx	r4
 80084c8:	4603      	mov	r3, r0
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084d2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80084d2:	b590      	push	{r4, r7, lr}
 80084d4:	b085      	sub	sp, #20
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80084de:	68b8      	ldr	r0, [r7, #8]
 80084e0:	f7ff ffb1 	bl	8008446 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 80084e4:	4603      	mov	r3, r0
 80084e6:	681c      	ldr	r4, [r3, #0]
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f7f9 f9d8 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 80084ee:	4603      	mov	r3, r0
 80084f0:	4619      	mov	r1, r3
 80084f2:	2004      	movs	r0, #4
 80084f4:	f7f9 f877 	bl	80015e6 <_ZnwjPv>
 80084f8:	4603      	mov	r3, r0
 80084fa:	601c      	str	r4, [r3, #0]
	}
 80084fc:	bf00      	nop
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	bd90      	pop	{r4, r7, pc}

08008504 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fa6f 	bl	80089f2 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7f9 f9c5 	bl	80018b4 <_ZNKSt9_Any_data9_M_accessEv>
 800852a:	4603      	mov	r3, r0
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4618      	mov	r0, r3
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800854a:	b480      	push	{r7}
 800854c:	b083      	sub	sp, #12
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	7338      	strb	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
 800856c:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800856e:	68b8      	ldr	r0, [r7, #8]
 8008570:	f7ff ffeb 	bl	800854a <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8008574:	4606      	mov	r6, r0
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7fe fb41 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800857c:	4603      	mov	r3, r0
 800857e:	681c      	ldr	r4, [r3, #0]
 8008580:	6838      	ldr	r0, [r7, #0]
 8008582:	f7fe fb3c 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8008586:	4603      	mov	r3, r0
 8008588:	681d      	ldr	r5, [r3, #0]
 800858a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800858c:	f7fe fb42 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8008590:	4603      	mov	r3, r0
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	462a      	mov	r2, r5
 8008596:	4621      	mov	r1, r4
 8008598:	4630      	mov	r0, r6
 800859a:	f7fc fd24 	bl	8004fe6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 800859e:	4603      	mov	r3, r0
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085a8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80085a8:	b590      	push	{r4, r7, lr}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80085b4:	68b8      	ldr	r0, [r7, #8]
 80085b6:	f7ff ffb1 	bl	800851c <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 80085ba:	4604      	mov	r4, r0
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7f9 f96e 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 80085c2:	4603      	mov	r3, r0
 80085c4:	4619      	mov	r1, r3
 80085c6:	2004      	movs	r0, #4
 80085c8:	f7f9 f80d 	bl	80015e6 <_ZnwjPv>
 80085cc:	4602      	mov	r2, r0
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	6013      	str	r3, [r2, #0]
	}
 80085d2:	bf00      	nop
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd90      	pop	{r4, r7, pc}

080085da <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fa10 	bl	8008a0a <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 80085ea:	bf00      	nop
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	3304      	adds	r3, #4
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 fa0f 	bl	8008a22 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 8008604:	4603      	mov	r3, r0
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8008618:	6838      	ldr	r0, [r7, #0]
 800861a:	f7fe fe07 	bl	800722c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800861e:	4603      	mov	r3, r0
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	601a      	str	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4618      	mov	r0, r3
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 f9f1 	bl	8008a38 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 8008656:	4603      	mov	r3, r0
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>:
      max_size(const _Alloc& __a) noexcept
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 8008668:	2100      	movs	r1, #0
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f9ef 	bl	8008a4e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>
 8008670:	4603      	mov	r3, r0
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d013      	beq.n	80086d2 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 80086aa:	6978      	ldr	r0, [r7, #20]
 80086ac:	f7fe fe0b 	bl	80072c6 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 80086b0:	4604      	mov	r4, r0
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f7fe fe07 	bl	80072c6 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 80086b8:	4603      	mov	r3, r0
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	4619      	mov	r1, r3
 80086be:	4620      	mov	r0, r4
 80086c0:	f000 f9d0 	bl	8008a64 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3308      	adds	r3, #8
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	3308      	adds	r3, #8
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	e7e7      	b.n	80086a2 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x12>
      return __cur;
 80086d2:	697b      	ldr	r3, [r7, #20]
    }
 80086d4:	4618      	mov	r0, r3
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd90      	pop	{r4, r7, pc}

080086dc <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4618      	mov	r0, r3
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 80086f2:	b590      	push	{r4, r7, lr}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f9cc 	bl	8008a9a <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 8008702:	4604      	mov	r4, r0
 8008704:	6838      	ldr	r0, [r7, #0]
 8008706:	f000 f9c8 	bl	8008a9a <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 800870a:	4603      	mov	r3, r0
 800870c:	429c      	cmp	r4, r3
 800870e:	bf0c      	ite	eq
 8008710:	2301      	moveq	r3, #1
 8008712:	2300      	movne	r3, #0
 8008714:	b2db      	uxtb	r3, r3
 8008716:	4618      	mov	r0, r3
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	bd90      	pop	{r4, r7, pc}

0800871e <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4618      	mov	r0, r3
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 8008734:	b590      	push	{r4, r7, lr}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff ffec 	bl	800871e <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008746:	4604      	mov	r4, r0
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	4619      	mov	r1, r3
 800874c:	2008      	movs	r0, #8
 800874e:	f7f8 ff4a 	bl	80015e6 <_ZnwjPv>
 8008752:	4603      	mov	r3, r0
 8008754:	4622      	mov	r2, r4
 8008756:	e892 0003 	ldmia.w	r2, {r0, r1}
 800875a:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800875e:	bf00      	nop
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	bd90      	pop	{r4, r7, pc}

08008766 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008766:	b580      	push	{r7, lr}
 8008768:	b08a      	sub	sp, #40	; 0x28
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8008772:	f107 020c 	add.w	r2, r7, #12
 8008776:	f107 0308 	add.w	r3, r7, #8
 800877a:	4611      	mov	r1, r2
 800877c:	4618      	mov	r0, r3
 800877e:	f7fe fe26 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8008782:	4603      	mov	r3, r0
 8008784:	2b01      	cmp	r3, #1
 8008786:	bfd4      	ite	le
 8008788:	2301      	movle	r3, #1
 800878a:	2300      	movgt	r3, #0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d142      	bne.n	8008818 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb2>
      const _DistanceType __len = __last - __first;
 8008792:	f107 020c 	add.w	r2, r7, #12
 8008796:	f107 0308 	add.w	r3, r7, #8
 800879a:	4611      	mov	r1, r2
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe fe16 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80087a2:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	3b02      	subs	r3, #2
 80087a8:	0fda      	lsrs	r2, r3, #31
 80087aa:	4413      	add	r3, r2
 80087ac:	105b      	asrs	r3, r3, #1
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 80087b0:	f107 030c 	add.w	r3, r7, #12
 80087b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff f97a 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80087bc:	4603      	mov	r3, r0
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	f107 031c 	add.w	r3, r7, #28
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff fda6 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80087ca:	4603      	mov	r3, r0
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff fdae 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80087d2:	4602      	mov	r2, r0
 80087d4:	f107 0314 	add.w	r3, r7, #20
 80087d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087dc:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80087e0:	f107 0314 	add.w	r3, r7, #20
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff fda2 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80087ea:	4603      	mov	r3, r0
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	ed93 7a00 	vldr	s14, [r3]
 80087f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80087f6:	7813      	ldrb	r3, [r2, #0]
 80087f8:	eeb0 0a47 	vmov.f32	s0, s14
 80087fc:	eef0 0a67 	vmov.f32	s1, s15
 8008800:	6a3a      	ldr	r2, [r7, #32]
 8008802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 f954 	bl	8008ab2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
	  if (__parent == 0)
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	2b00      	cmp	r3, #0
 800880e:	d005      	beq.n	800881c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb6>
	  __parent--;
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	3b01      	subs	r3, #1
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 8008816:	e7cb      	b.n	80087b0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x4a>
	return;
 8008818:	bf00      	nop
 800881a:	e000      	b.n	800881e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb8>
	    return;
 800881c:	bf00      	nop
    }
 800881e:	3728      	adds	r7, #40	; 0x28
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008824:	b590      	push	{r4, r7, lr}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7fe fe0a 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8008834:	4603      	mov	r3, r0
 8008836:	681c      	ldr	r4, [r3, #0]
 8008838:	6838      	ldr	r0, [r7, #0]
 800883a:	f7fe fe05 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800883e:	4603      	mov	r3, r0
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	429c      	cmp	r4, r3
 8008844:	bf34      	ite	cc
 8008846:	2301      	movcc	r3, #1
 8008848:	2300      	movcs	r3, #0
 800884a:	b2db      	uxtb	r3, r3
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	bd90      	pop	{r4, r7, pc}

08008854 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008854:	b590      	push	{r4, r7, lr}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8008862:	1d3b      	adds	r3, r7, #4
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff fd56 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800886a:	4603      	mov	r3, r0
 800886c:	4618      	mov	r0, r3
 800886e:	f7ff fd5e 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008872:	4602      	mov	r2, r0
 8008874:	f107 0310 	add.w	r3, r7, #16
 8008878:	e892 0003 	ldmia.w	r2, {r0, r1}
 800887c:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8008880:	f107 030c 	add.w	r3, r7, #12
 8008884:	4618      	mov	r0, r3
 8008886:	f7ff fd46 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800888a:	4603      	mov	r3, r0
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff fd4e 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008892:	4604      	mov	r4, r0
 8008894:	1d3b      	adds	r3, r7, #4
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff fd3d 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800889c:	4603      	mov	r3, r0
 800889e:	4622      	mov	r2, r4
 80088a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80088a4:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 80088a8:	f107 020c 	add.w	r2, r7, #12
 80088ac:	f107 0308 	add.w	r3, r7, #8
 80088b0:	4611      	mov	r1, r2
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe fd8b 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80088b8:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 80088ba:	f107 0310 	add.w	r3, r7, #16
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff fd35 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80088c4:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	ed93 7a00 	vldr	s14, [r3]
 80088cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80088d0:	7813      	ldrb	r3, [r2, #0]
 80088d2:	eeb0 0a47 	vmov.f32	s0, s14
 80088d6:	eef0 0a67 	vmov.f32	s1, s15
 80088da:	4622      	mov	r2, r4
 80088dc:	2100      	movs	r1, #0
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 f8e7 	bl	8008ab2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
    }
 80088e4:	bf00      	nop
 80088e6:	371c      	adds	r7, #28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd90      	pop	{r4, r7, pc}

080088ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
	--_M_current;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f1a3 0208 	sub.w	r2, r3, #8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	601a      	str	r2, [r3, #0]
	return *this;
 8008900:	687b      	ldr	r3, [r7, #4]
      }
 8008902:	4618      	mov	r0, r3
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800890e:	b590      	push	{r4, r7, lr}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8008918:	1d3b      	adds	r3, r7, #4
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff fcfb 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008920:	4604      	mov	r4, r0
 8008922:	463b      	mov	r3, r7
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff fcf6 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800892a:	4603      	mov	r3, r0
 800892c:	4619      	mov	r1, r3
 800892e:	4620      	mov	r0, r4
 8008930:	f000 f982 	bl	8008c38 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	bd90      	pop	{r4, r7, pc}

0800893c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4618      	mov	r0, r3
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8008952:	b5b0      	push	{r4, r5, r7, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 f991 	bl	8008c86 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008964:	4604      	mov	r4, r0
 8008966:	68b8      	ldr	r0, [r7, #8]
 8008968:	f000 f98d 	bl	8008c86 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800896c:	4605      	mov	r5, r0
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f989 	bl	8008c86 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008974:	4603      	mov	r3, r0
 8008976:	461a      	mov	r2, r3
 8008978:	4629      	mov	r1, r5
 800897a:	4620      	mov	r0, r4
 800897c:	f000 f991 	bl	8008ca2 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8008980:	4603      	mov	r3, r0
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f99c 	bl	8008cc2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>
 800898a:	4603      	mov	r3, r0
    }
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bdb0      	pop	{r4, r5, r7, pc}

08008994 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b082      	sub	sp, #8
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe fd6a 	bl	8007490 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4618      	mov	r0, r3
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 80089c6:	b590      	push	{r4, r7, lr}
 80089c8:	b085      	sub	sp, #20
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 80089d2:	68fc      	ldr	r4, [r7, #12]
 80089d4:	1d3b      	adds	r3, r7, #4
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7ff fc9d 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80089dc:	4603      	mov	r3, r0
 80089de:	461a      	mov	r2, r3
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	4620      	mov	r0, r4
 80089e4:	f7fa fd0e 	bl	8003404 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 80089e8:	4603      	mov	r3, r0
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd90      	pop	{r4, r7, pc}

080089f2 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b082      	sub	sp, #8
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7f8 ff4f 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 8008a00:	4603      	mov	r3, r0
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7f8 ff43 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008a22:	b480      	push	{r7}
 8008a24:	b083      	sub	sp, #12
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 8008a4e:	b40f      	push	{r0, r1, r2, r3}
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 8008a54:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
	}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	b004      	add	sp, #16
 8008a62:	4770      	bx	lr

08008a64 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8008a70:	68b8      	ldr	r0, [r7, #8]
 8008a72:	f7ff fc5c 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008a76:	4603      	mov	r3, r0
 8008a78:	461a      	mov	r2, r3
 8008a7a:	68f9      	ldr	r1, [r7, #12]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff fae4 	bl	800804a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8008a82:	68b8      	ldr	r0, [r7, #8]
 8008a84:	f7fe fc1f 	bl	80072c6 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7fe fc25 	bl	80072dc <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
    }
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8008ab2:	b590      	push	{r4, r7, lr}
 8008ab4:	b08f      	sub	sp, #60	; 0x3c
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6178      	str	r0, [r7, #20]
 8008aba:	6139      	str	r1, [r7, #16]
 8008abc:	60fa      	str	r2, [r7, #12]
 8008abe:	eeb0 7a40 	vmov.f32	s14, s0
 8008ac2:	eef0 7a60 	vmov.f32	s15, s1
 8008ac6:	703b      	strb	r3, [r7, #0]
 8008ac8:	ed87 7a01 	vstr	s14, [r7, #4]
 8008acc:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	0fda      	lsrs	r2, r3, #31
 8008ade:	4413      	add	r3, r2
 8008ae0:	105b      	asrs	r3, r3, #1
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	da46      	bge.n	8008b78 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xc6>
	  __secondChild = 2 * (__secondChild + 1);
 8008aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aec:	3301      	adds	r3, #1
 8008aee:	005b      	lsls	r3, r3, #1
 8008af0:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 8008af2:	f107 0314 	add.w	r3, r7, #20
 8008af6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fe ffd9 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008afe:	4604      	mov	r4, r0
 8008b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b02:	1e5a      	subs	r2, r3, #1
 8008b04:	f107 0314 	add.w	r3, r7, #20
 8008b08:	4611      	mov	r1, r2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe ffd0 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008b10:	4602      	mov	r2, r0
 8008b12:	463b      	mov	r3, r7
 8008b14:	4621      	mov	r1, r4
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7ff fb1b 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x76>
	    __secondChild--;
 8008b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b24:	3b01      	subs	r3, #1
 8008b26:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8008b28:	f107 0314 	add.w	r3, r7, #20
 8008b2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe ffbe 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008b34:	4603      	mov	r3, r0
 8008b36:	623b      	str	r3, [r7, #32]
 8008b38:	f107 0320 	add.w	r3, r7, #32
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff fbea 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008b42:	4603      	mov	r3, r0
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff fbf2 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	f107 0314 	add.w	r3, r7, #20
 8008b50:	6939      	ldr	r1, [r7, #16]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe ffac 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff fbd8 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008b66:	4603      	mov	r3, r0
 8008b68:	4622      	mov	r2, r4
 8008b6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b6e:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 8008b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b74:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8008b76:	e7af      	b.n	8008ad8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x26>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d136      	bne.n	8008bf0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3b02      	subs	r3, #2
 8008b86:	0fda      	lsrs	r2, r3, #31
 8008b88:	4413      	add	r3, r2
 8008b8a:	105b      	asrs	r3, r3, #1
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d12d      	bne.n	8008bf0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
	  __secondChild = 2 * (__secondChild + 1);
 8008b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b96:	3301      	adds	r3, #1
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9e:	1e5a      	subs	r2, r3, #1
 8008ba0:	f107 0314 	add.w	r3, r7, #20
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe ff82 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008bac:	4603      	mov	r3, r0
 8008bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff fbae 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff fbb6 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	f107 0314 	add.w	r3, r7, #20
 8008bc8:	6939      	ldr	r1, [r7, #16]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe ff70 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff fb9c 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008bde:	4603      	mov	r3, r0
 8008be0:	4622      	mov	r2, r4
 8008be2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008be6:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 8008bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bec:	3b01      	subs	r3, #1
 8008bee:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 8008bf0:	463b      	mov	r3, r7
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff fece 	bl	8008994 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	f107 031c 	add.w	r3, r7, #28
 8008bfe:	4611      	mov	r1, r2
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 f875 	bl	8008cf0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8008c06:	1d3b      	adds	r3, r7, #4
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff fb90 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008c0e:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8008c10:	f107 021c 	add.w	r2, r7, #28
 8008c14:	ed93 7a00 	vldr	s14, [r3]
 8008c18:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	eeb0 0a47 	vmov.f32	s0, s14
 8008c22:	eef0 0a67 	vmov.f32	s1, s15
 8008c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c28:	6939      	ldr	r1, [r7, #16]
 8008c2a:	6978      	ldr	r0, [r7, #20]
 8008c2c:	f000 f86e 	bl	8008d0c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>
    }
 8008c30:	bf00      	nop
 8008c32:	373c      	adds	r7, #60	; 0x3c
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd90      	pop	{r4, r7, pc}

08008c38 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7ff fb73 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	f107 0308 	add.w	r3, r7, #8
 8008c4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c52:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8008c56:	6838      	ldr	r0, [r7, #0]
 8008c58:	f7ff fb69 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c64:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8008c68:	f107 0308 	add.w	r3, r7, #8
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff fb5e 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008c72:	4602      	mov	r2, r0
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c7a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008c7e:	bf00      	nop
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b082      	sub	sp, #8
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8008c8e:	1d3b      	adds	r3, r7, #4
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fe fbd9 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8008c96:	4603      	mov	r3, r0
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	68b9      	ldr	r1, [r7, #8]
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 f8a1 	bl	8008dfa <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>:
    __niter_wrap(_From __from, _To __res)
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7ff ffda 	bl	8008c86 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	1a9b      	subs	r3, r3, r2
 8008cd8:	10db      	asrs	r3, r3, #3
 8008cda:	461a      	mov	r2, r3
 8008cdc:	1d3b      	adds	r3, r7, #4
 8008cde:	4611      	mov	r1, r2
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe fee5 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fe fbc7 	bl	8007490 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8008d0c:	b590      	push	{r4, r7, lr}
 8008d0e:	b08b      	sub	sp, #44	; 0x2c
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6178      	str	r0, [r7, #20]
 8008d14:	6139      	str	r1, [r7, #16]
 8008d16:	60fa      	str	r2, [r7, #12]
 8008d18:	eeb0 7a40 	vmov.f32	s14, s0
 8008d1c:	eef0 7a60 	vmov.f32	s15, s1
 8008d20:	603b      	str	r3, [r7, #0]
 8008d22:	ed87 7a01 	vstr	s14, [r7, #4]
 8008d26:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	0fda      	lsrs	r2, r3, #31
 8008d30:	4413      	add	r3, r2
 8008d32:	105b      	asrs	r3, r3, #1
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	dd10      	ble.n	8008d60 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x54>
 8008d3e:	f107 0314 	add.w	r3, r7, #20
 8008d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fe feb3 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	1d3b      	adds	r3, r7, #4
 8008d4e:	461a      	mov	r2, r3
 8008d50:	6838      	ldr	r0, [r7, #0]
 8008d52:	f000 f862 	bl	8008e1a <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x54>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e000      	b.n	8008d62 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x56>
 8008d60:	2300      	movs	r3, #0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d02d      	beq.n	8008dc2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb6>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8008d66:	f107 0314 	add.w	r3, r7, #20
 8008d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe fe9f 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008d72:	4603      	mov	r3, r0
 8008d74:	61bb      	str	r3, [r7, #24]
 8008d76:	f107 0318 	add.w	r3, r7, #24
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff facb 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008d80:	4603      	mov	r3, r0
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff fad3 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008d88:	4604      	mov	r4, r0
 8008d8a:	f107 0314 	add.w	r3, r7, #20
 8008d8e:	6939      	ldr	r1, [r7, #16]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fe fe8d 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008d96:	4603      	mov	r3, r0
 8008d98:	61fb      	str	r3, [r7, #28]
 8008d9a:	f107 031c 	add.w	r3, r7, #28
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff fab9 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008da4:	4603      	mov	r3, r0
 8008da6:	4622      	mov	r2, r4
 8008da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dac:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	0fda      	lsrs	r2, r3, #31
 8008dba:	4413      	add	r3, r2
 8008dbc:	105b      	asrs	r3, r3, #1
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8008dc0:	e7b9      	b.n	8008d36 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x2a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8008dc2:	1d3b      	adds	r3, r7, #4
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff fab2 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008dca:	4604      	mov	r4, r0
 8008dcc:	f107 0314 	add.w	r3, r7, #20
 8008dd0:	6939      	ldr	r1, [r7, #16]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe fe6c 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	623b      	str	r3, [r7, #32]
 8008ddc:	f107 0320 	add.w	r3, r7, #32
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff fa98 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008de6:	4603      	mov	r3, r0
 8008de8:	4622      	mov	r2, r4
 8008dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008df2:	bf00      	nop
 8008df4:	372c      	adds	r7, #44	; 0x2c
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd90      	pop	{r4, r7, pc}

08008dfa <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	60f8      	str	r0, [r7, #12]
 8008e02:	60b9      	str	r1, [r7, #8]
 8008e04:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	68b9      	ldr	r1, [r7, #8]
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 f81c 	bl	8008e48 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 8008e10:	4603      	mov	r3, r0
    }
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 8008e1a:	b590      	push	{r4, r7, lr}
 8008e1c:	b085      	sub	sp, #20
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	60f8      	str	r0, [r7, #12]
 8008e22:	60b9      	str	r1, [r7, #8]
 8008e24:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 8008e26:	68fc      	ldr	r4, [r7, #12]
 8008e28:	f107 0308 	add.w	r3, r7, #8
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7ff fa72 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008e32:	4603      	mov	r3, r0
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	4619      	mov	r1, r3
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f7fa fae3 	bl	8003404 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd90      	pop	{r4, r7, pc}

08008e48 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	10db      	asrs	r3, r3, #3
 8008e5c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00a      	beq.n	8008e7a <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	425b      	negs	r3, r3
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	18d0      	adds	r0, r2, r3
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	461a      	mov	r2, r3
 8008e74:	68f9      	ldr	r1, [r7, #12]
 8008e76:	f01a fc91 	bl	802379c <memmove>
	  return __result - _Num;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	00db      	lsls	r3, r3, #3
 8008e7e:	425b      	negs	r3, r3
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	4413      	add	r3, r2
	}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e92:	2300      	movs	r3, #0
 8008e94:	607b      	str	r3, [r7, #4]
 8008e96:	4b10      	ldr	r3, [pc, #64]	; (8008ed8 <HAL_MspInit+0x4c>)
 8008e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9a:	4a0f      	ldr	r2, [pc, #60]	; (8008ed8 <HAL_MspInit+0x4c>)
 8008e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8008ea2:	4b0d      	ldr	r3, [pc, #52]	; (8008ed8 <HAL_MspInit+0x4c>)
 8008ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eaa:	607b      	str	r3, [r7, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008eae:	2300      	movs	r3, #0
 8008eb0:	603b      	str	r3, [r7, #0]
 8008eb2:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <HAL_MspInit+0x4c>)
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	4a08      	ldr	r2, [pc, #32]	; (8008ed8 <HAL_MspInit+0x4c>)
 8008eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8008ebe:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <HAL_MspInit+0x4c>)
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ec6:	603b      	str	r3, [r7, #0]
 8008ec8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008eca:	2007      	movs	r0, #7
 8008ecc:	f000 fb3c 	bl	8009548 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	40023800 	.word	0x40023800

08008edc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a0b      	ldr	r2, [pc, #44]	; (8008f18 <HAL_CRC_MspInit+0x3c>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d10d      	bne.n	8008f0a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	4b0a      	ldr	r3, [pc, #40]	; (8008f1c <HAL_CRC_MspInit+0x40>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef6:	4a09      	ldr	r2, [pc, #36]	; (8008f1c <HAL_CRC_MspInit+0x40>)
 8008ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008efc:	6313      	str	r3, [r2, #48]	; 0x30
 8008efe:	4b07      	ldr	r3, [pc, #28]	; (8008f1c <HAL_CRC_MspInit+0x40>)
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008f0a:	bf00      	nop
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	40023000 	.word	0x40023000
 8008f1c:	40023800 	.word	0x40023800

08008f20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08a      	sub	sp, #40	; 0x28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f28:	f107 0314 	add.w	r3, r7, #20
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	601a      	str	r2, [r3, #0]
 8008f30:	605a      	str	r2, [r3, #4]
 8008f32:	609a      	str	r2, [r3, #8]
 8008f34:	60da      	str	r2, [r3, #12]
 8008f36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a19      	ldr	r2, [pc, #100]	; (8008fa4 <HAL_SPI_MspInit+0x84>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d12b      	bne.n	8008f9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008f42:	2300      	movs	r3, #0
 8008f44:	613b      	str	r3, [r7, #16]
 8008f46:	4b18      	ldr	r3, [pc, #96]	; (8008fa8 <HAL_SPI_MspInit+0x88>)
 8008f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f4a:	4a17      	ldr	r2, [pc, #92]	; (8008fa8 <HAL_SPI_MspInit+0x88>)
 8008f4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f50:	6453      	str	r3, [r2, #68]	; 0x44
 8008f52:	4b15      	ldr	r3, [pc, #84]	; (8008fa8 <HAL_SPI_MspInit+0x88>)
 8008f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f5a:	613b      	str	r3, [r7, #16]
 8008f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <HAL_SPI_MspInit+0x88>)
 8008f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f66:	4a10      	ldr	r2, [pc, #64]	; (8008fa8 <HAL_SPI_MspInit+0x88>)
 8008f68:	f043 0301 	orr.w	r3, r3, #1
 8008f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f6e:	4b0e      	ldr	r3, [pc, #56]	; (8008fa8 <HAL_SPI_MspInit+0x88>)
 8008f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008f7a:	23e0      	movs	r3, #224	; 0xe0
 8008f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f7e:	2302      	movs	r3, #2
 8008f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f86:	2303      	movs	r3, #3
 8008f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008f8a:	2305      	movs	r3, #5
 8008f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f8e:	f107 0314 	add.w	r3, r7, #20
 8008f92:	4619      	mov	r1, r3
 8008f94:	4805      	ldr	r0, [pc, #20]	; (8008fac <HAL_SPI_MspInit+0x8c>)
 8008f96:	f000 fb35 	bl	8009604 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008f9a:	bf00      	nop
 8008f9c:	3728      	adds	r7, #40	; 0x28
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	40013000 	.word	0x40013000
 8008fa8:	40023800 	.word	0x40023800
 8008fac:	40020000 	.word	0x40020000

08008fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a0e      	ldr	r2, [pc, #56]	; (8008ff8 <HAL_TIM_Base_MspInit+0x48>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d115      	bne.n	8008fee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60fb      	str	r3, [r7, #12]
 8008fc6:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <HAL_TIM_Base_MspInit+0x4c>)
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fca:	4a0c      	ldr	r2, [pc, #48]	; (8008ffc <HAL_TIM_Base_MspInit+0x4c>)
 8008fcc:	f043 0320 	orr.w	r3, r3, #32
 8008fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8008fd2:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <HAL_TIM_Base_MspInit+0x4c>)
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	f003 0320 	and.w	r3, r3, #32
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	2037      	movs	r0, #55	; 0x37
 8008fe4:	f000 fabb 	bl	800955e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008fe8:	2037      	movs	r0, #55	; 0x37
 8008fea:	f000 fad4 	bl	8009596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8008fee:	bf00      	nop
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	40001400 	.word	0x40001400
 8008ffc:	40023800 	.word	0x40023800

08009000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009000:	b480      	push	{r7}
 8009002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009004:	e7fe      	b.n	8009004 <NMI_Handler+0x4>

08009006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009006:	b480      	push	{r7}
 8009008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800900a:	e7fe      	b.n	800900a <HardFault_Handler+0x4>

0800900c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009010:	e7fe      	b.n	8009010 <MemManage_Handler+0x4>

08009012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009012:	b480      	push	{r7}
 8009014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009016:	e7fe      	b.n	8009016 <BusFault_Handler+0x4>

08009018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009018:	b480      	push	{r7}
 800901a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800901c:	e7fe      	b.n	800901c <UsageFault_Handler+0x4>

0800901e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800901e:	b480      	push	{r7}
 8009020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009022:	bf00      	nop
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800902c:	b480      	push	{r7}
 800902e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009030:	bf00      	nop
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800903a:	b480      	push	{r7}
 800903c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800903e:	bf00      	nop
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800904c:	f000 f968 	bl	8009320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009050:	bf00      	nop
 8009052:	bd80      	pop	{r7, pc}

08009054 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8009058:	2001      	movs	r0, #1
 800905a:	f000 fca3 	bl	80099a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800905e:	bf00      	nop
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8009068:	4802      	ldr	r0, [pc, #8]	; (8009074 <OTG_FS_IRQHandler+0x10>)
 800906a:	f000 fe03 	bl	8009c74 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800906e:	bf00      	nop
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	200045b8 	.word	0x200045b8

08009078 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009078:	b480      	push	{r7}
 800907a:	af00      	add	r7, sp, #0
  return 1;
 800907c:	2301      	movs	r3, #1
}
 800907e:	4618      	mov	r0, r3
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <_kill>:

int _kill(int pid, int sig)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009092:	f01a fb25 	bl	80236e0 <__errno>
 8009096:	4603      	mov	r3, r0
 8009098:	2216      	movs	r2, #22
 800909a:	601a      	str	r2, [r3, #0]
  return -1;
 800909c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <_exit>:

void _exit (int status)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80090b0:	f04f 31ff 	mov.w	r1, #4294967295
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff ffe7 	bl	8009088 <_kill>
  while (1) {}    /* Make sure we hang here */
 80090ba:	e7fe      	b.n	80090ba <_exit+0x12>

080090bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]
 80090cc:	e00a      	b.n	80090e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80090ce:	f3af 8000 	nop.w
 80090d2:	4601      	mov	r1, r0
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	1c5a      	adds	r2, r3, #1
 80090d8:	60ba      	str	r2, [r7, #8]
 80090da:	b2ca      	uxtb	r2, r1
 80090dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	3301      	adds	r3, #1
 80090e2:	617b      	str	r3, [r7, #20]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	dbf0      	blt.n	80090ce <_read+0x12>
  }

  return len;
 80090ec:	687b      	ldr	r3, [r7, #4]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b086      	sub	sp, #24
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009102:	2300      	movs	r3, #0
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	e009      	b.n	800911c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	60ba      	str	r2, [r7, #8]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	4618      	mov	r0, r3
 8009112:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	3301      	adds	r3, #1
 800911a:	617b      	str	r3, [r7, #20]
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	429a      	cmp	r2, r3
 8009122:	dbf1      	blt.n	8009108 <_write+0x12>
  }
  return len;
 8009124:	687b      	ldr	r3, [r7, #4]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <_close>:

int _close(int file)
{
 800912e:	b480      	push	{r7}
 8009130:	b083      	sub	sp, #12
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009156:	605a      	str	r2, [r3, #4]
  return 0;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <_isatty>:

int _isatty(int file)
{
 8009166:	b480      	push	{r7}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800916e:	2301      	movs	r3, #1
}
 8009170:	4618      	mov	r0, r3
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
	...

08009198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80091a0:	4a14      	ldr	r2, [pc, #80]	; (80091f4 <_sbrk+0x5c>)
 80091a2:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <_sbrk+0x60>)
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80091ac:	4b13      	ldr	r3, [pc, #76]	; (80091fc <_sbrk+0x64>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d102      	bne.n	80091ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80091b4:	4b11      	ldr	r3, [pc, #68]	; (80091fc <_sbrk+0x64>)
 80091b6:	4a12      	ldr	r2, [pc, #72]	; (8009200 <_sbrk+0x68>)
 80091b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80091ba:	4b10      	ldr	r3, [pc, #64]	; (80091fc <_sbrk+0x64>)
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4413      	add	r3, r2
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d207      	bcs.n	80091d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80091c8:	f01a fa8a 	bl	80236e0 <__errno>
 80091cc:	4603      	mov	r3, r0
 80091ce:	220c      	movs	r2, #12
 80091d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80091d2:	f04f 33ff 	mov.w	r3, #4294967295
 80091d6:	e009      	b.n	80091ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80091d8:	4b08      	ldr	r3, [pc, #32]	; (80091fc <_sbrk+0x64>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80091de:	4b07      	ldr	r3, [pc, #28]	; (80091fc <_sbrk+0x64>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4413      	add	r3, r2
 80091e6:	4a05      	ldr	r2, [pc, #20]	; (80091fc <_sbrk+0x64>)
 80091e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80091ea:	68fb      	ldr	r3, [r7, #12]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3718      	adds	r7, #24
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20020000 	.word	0x20020000
 80091f8:	00000400 	.word	0x00000400
 80091fc:	20002be8 	.word	0x20002be8
 8009200:	20004cf8 	.word	0x20004cf8

08009204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009204:	b480      	push	{r7}
 8009206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009208:	4b06      	ldr	r3, [pc, #24]	; (8009224 <SystemInit+0x20>)
 800920a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800920e:	4a05      	ldr	r2, [pc, #20]	; (8009224 <SystemInit+0x20>)
 8009210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009218:	bf00      	nop
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	e000ed00 	.word	0xe000ed00

08009228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800922c:	480d      	ldr	r0, [pc, #52]	; (8009264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800922e:	490e      	ldr	r1, [pc, #56]	; (8009268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009230:	4a0e      	ldr	r2, [pc, #56]	; (800926c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009234:	e002      	b.n	800923c <LoopCopyDataInit>

08009236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800923a:	3304      	adds	r3, #4

0800923c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800923c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800923e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009240:	d3f9      	bcc.n	8009236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009242:	4a0b      	ldr	r2, [pc, #44]	; (8009270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009244:	4c0b      	ldr	r4, [pc, #44]	; (8009274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8009246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009248:	e001      	b.n	800924e <LoopFillZerobss>

0800924a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800924a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800924c:	3204      	adds	r2, #4

0800924e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800924e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009250:	d3fb      	bcc.n	800924a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009252:	f7ff ffd7 	bl	8009204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009256:	f01a fa5b 	bl	8023710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800925a:	f7fc fe89 	bl	8005f70 <main>
  bx  lr    
 800925e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009268:	20000454 	.word	0x20000454
  ldr r2, =_sidata
 800926c:	0802a418 	.word	0x0802a418
  ldr r2, =_sbss
 8009270:	20000454 	.word	0x20000454
  ldr r4, =_ebss
 8009274:	20004cf8 	.word	0x20004cf8

08009278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009278:	e7fe      	b.n	8009278 <ADC_IRQHandler>
	...

0800927c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009280:	4b0e      	ldr	r3, [pc, #56]	; (80092bc <HAL_Init+0x40>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a0d      	ldr	r2, [pc, #52]	; (80092bc <HAL_Init+0x40>)
 8009286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800928a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800928c:	4b0b      	ldr	r3, [pc, #44]	; (80092bc <HAL_Init+0x40>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <HAL_Init+0x40>)
 8009292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009298:	4b08      	ldr	r3, [pc, #32]	; (80092bc <HAL_Init+0x40>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a07      	ldr	r2, [pc, #28]	; (80092bc <HAL_Init+0x40>)
 800929e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80092a4:	2003      	movs	r0, #3
 80092a6:	f000 f94f 	bl	8009548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80092aa:	2000      	movs	r0, #0
 80092ac:	f000 f808 	bl	80092c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80092b0:	f7ff fdec 	bl	8008e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	40023c00 	.word	0x40023c00

080092c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80092c8:	4b12      	ldr	r3, [pc, #72]	; (8009314 <HAL_InitTick+0x54>)
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	4b12      	ldr	r3, [pc, #72]	; (8009318 <HAL_InitTick+0x58>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	4619      	mov	r1, r3
 80092d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80092da:	fbb2 f3f3 	udiv	r3, r2, r3
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 f967 	bl	80095b2 <HAL_SYSTICK_Config>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e00e      	b.n	800930c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b0f      	cmp	r3, #15
 80092f2:	d80a      	bhi.n	800930a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80092f4:	2200      	movs	r2, #0
 80092f6:	6879      	ldr	r1, [r7, #4]
 80092f8:	f04f 30ff 	mov.w	r0, #4294967295
 80092fc:	f000 f92f 	bl	800955e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009300:	4a06      	ldr	r2, [pc, #24]	; (800931c <HAL_InitTick+0x5c>)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	e000      	b.n	800930c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
}
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	20000070 	.word	0x20000070
 8009318:	20000078 	.word	0x20000078
 800931c:	20000074 	.word	0x20000074

08009320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009320:	b480      	push	{r7}
 8009322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009324:	4b06      	ldr	r3, [pc, #24]	; (8009340 <HAL_IncTick+0x20>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	461a      	mov	r2, r3
 800932a:	4b06      	ldr	r3, [pc, #24]	; (8009344 <HAL_IncTick+0x24>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4413      	add	r3, r2
 8009330:	4a04      	ldr	r2, [pc, #16]	; (8009344 <HAL_IncTick+0x24>)
 8009332:	6013      	str	r3, [r2, #0]
}
 8009334:	bf00      	nop
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	20000078 	.word	0x20000078
 8009344:	20002bec 	.word	0x20002bec

08009348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0
  return uwTick;
 800934c:	4b03      	ldr	r3, [pc, #12]	; (800935c <HAL_GetTick+0x14>)
 800934e:	681b      	ldr	r3, [r3, #0]
}
 8009350:	4618      	mov	r0, r3
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	20002bec 	.word	0x20002bec

08009360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009368:	f7ff ffee 	bl	8009348 <HAL_GetTick>
 800936c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d005      	beq.n	8009386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800937a:	4b0a      	ldr	r3, [pc, #40]	; (80093a4 <HAL_Delay+0x44>)
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	4413      	add	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009386:	bf00      	nop
 8009388:	f7ff ffde 	bl	8009348 <HAL_GetTick>
 800938c:	4602      	mov	r2, r0
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	429a      	cmp	r2, r3
 8009396:	d8f7      	bhi.n	8009388 <HAL_Delay+0x28>
  {
  }
}
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	20000078 	.word	0x20000078

080093a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80093b8:	4b0c      	ldr	r3, [pc, #48]	; (80093ec <__NVIC_SetPriorityGrouping+0x44>)
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80093c4:	4013      	ands	r3, r2
 80093c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80093d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80093d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80093da:	4a04      	ldr	r2, [pc, #16]	; (80093ec <__NVIC_SetPriorityGrouping+0x44>)
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	60d3      	str	r3, [r2, #12]
}
 80093e0:	bf00      	nop
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	e000ed00 	.word	0xe000ed00

080093f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80093f0:	b480      	push	{r7}
 80093f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80093f4:	4b04      	ldr	r3, [pc, #16]	; (8009408 <__NVIC_GetPriorityGrouping+0x18>)
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	0a1b      	lsrs	r3, r3, #8
 80093fa:	f003 0307 	and.w	r3, r3, #7
}
 80093fe:	4618      	mov	r0, r3
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	e000ed00 	.word	0xe000ed00

0800940c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	4603      	mov	r3, r0
 8009414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800941a:	2b00      	cmp	r3, #0
 800941c:	db0b      	blt.n	8009436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800941e:	79fb      	ldrb	r3, [r7, #7]
 8009420:	f003 021f 	and.w	r2, r3, #31
 8009424:	4907      	ldr	r1, [pc, #28]	; (8009444 <__NVIC_EnableIRQ+0x38>)
 8009426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800942a:	095b      	lsrs	r3, r3, #5
 800942c:	2001      	movs	r0, #1
 800942e:	fa00 f202 	lsl.w	r2, r0, r2
 8009432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009436:	bf00      	nop
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	e000e100 	.word	0xe000e100

08009448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	4603      	mov	r3, r0
 8009450:	6039      	str	r1, [r7, #0]
 8009452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009458:	2b00      	cmp	r3, #0
 800945a:	db0a      	blt.n	8009472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	b2da      	uxtb	r2, r3
 8009460:	490c      	ldr	r1, [pc, #48]	; (8009494 <__NVIC_SetPriority+0x4c>)
 8009462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009466:	0112      	lsls	r2, r2, #4
 8009468:	b2d2      	uxtb	r2, r2
 800946a:	440b      	add	r3, r1
 800946c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009470:	e00a      	b.n	8009488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	b2da      	uxtb	r2, r3
 8009476:	4908      	ldr	r1, [pc, #32]	; (8009498 <__NVIC_SetPriority+0x50>)
 8009478:	79fb      	ldrb	r3, [r7, #7]
 800947a:	f003 030f 	and.w	r3, r3, #15
 800947e:	3b04      	subs	r3, #4
 8009480:	0112      	lsls	r2, r2, #4
 8009482:	b2d2      	uxtb	r2, r2
 8009484:	440b      	add	r3, r1
 8009486:	761a      	strb	r2, [r3, #24]
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	e000e100 	.word	0xe000e100
 8009498:	e000ed00 	.word	0xe000ed00

0800949c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800949c:	b480      	push	{r7}
 800949e:	b089      	sub	sp, #36	; 0x24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f003 0307 	and.w	r3, r3, #7
 80094ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	f1c3 0307 	rsb	r3, r3, #7
 80094b6:	2b04      	cmp	r3, #4
 80094b8:	bf28      	it	cs
 80094ba:	2304      	movcs	r3, #4
 80094bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	3304      	adds	r3, #4
 80094c2:	2b06      	cmp	r3, #6
 80094c4:	d902      	bls.n	80094cc <NVIC_EncodePriority+0x30>
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	3b03      	subs	r3, #3
 80094ca:	e000      	b.n	80094ce <NVIC_EncodePriority+0x32>
 80094cc:	2300      	movs	r3, #0
 80094ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094d0:	f04f 32ff 	mov.w	r2, #4294967295
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	fa02 f303 	lsl.w	r3, r2, r3
 80094da:	43da      	mvns	r2, r3
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	401a      	ands	r2, r3
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80094e4:	f04f 31ff 	mov.w	r1, #4294967295
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	fa01 f303 	lsl.w	r3, r1, r3
 80094ee:	43d9      	mvns	r1, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094f4:	4313      	orrs	r3, r2
         );
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3724      	adds	r7, #36	; 0x24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
	...

08009504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	3b01      	subs	r3, #1
 8009510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009514:	d301      	bcc.n	800951a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009516:	2301      	movs	r3, #1
 8009518:	e00f      	b.n	800953a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800951a:	4a0a      	ldr	r2, [pc, #40]	; (8009544 <SysTick_Config+0x40>)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3b01      	subs	r3, #1
 8009520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009522:	210f      	movs	r1, #15
 8009524:	f04f 30ff 	mov.w	r0, #4294967295
 8009528:	f7ff ff8e 	bl	8009448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800952c:	4b05      	ldr	r3, [pc, #20]	; (8009544 <SysTick_Config+0x40>)
 800952e:	2200      	movs	r2, #0
 8009530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009532:	4b04      	ldr	r3, [pc, #16]	; (8009544 <SysTick_Config+0x40>)
 8009534:	2207      	movs	r2, #7
 8009536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	e000e010 	.word	0xe000e010

08009548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff ff29 	bl	80093a8 <__NVIC_SetPriorityGrouping>
}
 8009556:	bf00      	nop
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800955e:	b580      	push	{r7, lr}
 8009560:	b086      	sub	sp, #24
 8009562:	af00      	add	r7, sp, #0
 8009564:	4603      	mov	r3, r0
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	607a      	str	r2, [r7, #4]
 800956a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800956c:	2300      	movs	r3, #0
 800956e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009570:	f7ff ff3e 	bl	80093f0 <__NVIC_GetPriorityGrouping>
 8009574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	68b9      	ldr	r1, [r7, #8]
 800957a:	6978      	ldr	r0, [r7, #20]
 800957c:	f7ff ff8e 	bl	800949c <NVIC_EncodePriority>
 8009580:	4602      	mov	r2, r0
 8009582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009586:	4611      	mov	r1, r2
 8009588:	4618      	mov	r0, r3
 800958a:	f7ff ff5d 	bl	8009448 <__NVIC_SetPriority>
}
 800958e:	bf00      	nop
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	4603      	mov	r3, r0
 800959e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80095a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7ff ff31 	bl	800940c <__NVIC_EnableIRQ>
}
 80095aa:	bf00      	nop
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7ff ffa2 	bl	8009504 <SysTick_Config>
 80095c0:	4603      	mov	r3, r0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b082      	sub	sp, #8
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e00e      	b.n	80095fa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	795b      	ldrb	r3, [r3, #5]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d105      	bne.n	80095f2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff fc75 	bl	8008edc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009604:	b480      	push	{r7}
 8009606:	b089      	sub	sp, #36	; 0x24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009612:	2300      	movs	r3, #0
 8009614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009616:	2300      	movs	r3, #0
 8009618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800961a:	2300      	movs	r3, #0
 800961c:	61fb      	str	r3, [r7, #28]
 800961e:	e16b      	b.n	80098f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009620:	2201      	movs	r2, #1
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	fa02 f303 	lsl.w	r3, r2, r3
 8009628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	4013      	ands	r3, r2
 8009632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	429a      	cmp	r2, r3
 800963a:	f040 815a 	bne.w	80098f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f003 0303 	and.w	r3, r3, #3
 8009646:	2b01      	cmp	r3, #1
 8009648:	d005      	beq.n	8009656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009652:	2b02      	cmp	r3, #2
 8009654:	d130      	bne.n	80096b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	005b      	lsls	r3, r3, #1
 8009660:	2203      	movs	r2, #3
 8009662:	fa02 f303 	lsl.w	r3, r2, r3
 8009666:	43db      	mvns	r3, r3
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	4013      	ands	r3, r2
 800966c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	68da      	ldr	r2, [r3, #12]
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	fa02 f303 	lsl.w	r3, r2, r3
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	4313      	orrs	r3, r2
 800967e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	69ba      	ldr	r2, [r7, #24]
 8009684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800968c:	2201      	movs	r2, #1
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	fa02 f303 	lsl.w	r3, r2, r3
 8009694:	43db      	mvns	r3, r3
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	4013      	ands	r3, r2
 800969a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	091b      	lsrs	r3, r3, #4
 80096a2:	f003 0201 	and.w	r2, r3, #1
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	fa02 f303 	lsl.w	r3, r2, r3
 80096ac:	69ba      	ldr	r2, [r7, #24]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69ba      	ldr	r2, [r7, #24]
 80096b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d017      	beq.n	80096f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	2203      	movs	r2, #3
 80096d0:	fa02 f303 	lsl.w	r3, r2, r3
 80096d4:	43db      	mvns	r3, r3
 80096d6:	69ba      	ldr	r2, [r7, #24]
 80096d8:	4013      	ands	r3, r2
 80096da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	689a      	ldr	r2, [r3, #8]
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	fa02 f303 	lsl.w	r3, r2, r3
 80096e8:	69ba      	ldr	r2, [r7, #24]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	69ba      	ldr	r2, [r7, #24]
 80096f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f003 0303 	and.w	r3, r3, #3
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d123      	bne.n	8009748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	08da      	lsrs	r2, r3, #3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3208      	adds	r2, #8
 8009708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	f003 0307 	and.w	r3, r3, #7
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	220f      	movs	r2, #15
 8009718:	fa02 f303 	lsl.w	r3, r2, r3
 800971c:	43db      	mvns	r3, r3
 800971e:	69ba      	ldr	r2, [r7, #24]
 8009720:	4013      	ands	r3, r2
 8009722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	691a      	ldr	r2, [r3, #16]
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	f003 0307 	and.w	r3, r3, #7
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	fa02 f303 	lsl.w	r3, r2, r3
 8009734:	69ba      	ldr	r2, [r7, #24]
 8009736:	4313      	orrs	r3, r2
 8009738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	08da      	lsrs	r2, r3, #3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	3208      	adds	r2, #8
 8009742:	69b9      	ldr	r1, [r7, #24]
 8009744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	2203      	movs	r2, #3
 8009754:	fa02 f303 	lsl.w	r3, r2, r3
 8009758:	43db      	mvns	r3, r3
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	4013      	ands	r3, r2
 800975e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	f003 0203 	and.w	r2, r3, #3
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	fa02 f303 	lsl.w	r3, r2, r3
 8009770:	69ba      	ldr	r2, [r7, #24]
 8009772:	4313      	orrs	r3, r2
 8009774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 80b4 	beq.w	80098f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800978a:	2300      	movs	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]
 800978e:	4b60      	ldr	r3, [pc, #384]	; (8009910 <HAL_GPIO_Init+0x30c>)
 8009790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009792:	4a5f      	ldr	r2, [pc, #380]	; (8009910 <HAL_GPIO_Init+0x30c>)
 8009794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009798:	6453      	str	r3, [r2, #68]	; 0x44
 800979a:	4b5d      	ldr	r3, [pc, #372]	; (8009910 <HAL_GPIO_Init+0x30c>)
 800979c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800979e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80097a6:	4a5b      	ldr	r2, [pc, #364]	; (8009914 <HAL_GPIO_Init+0x310>)
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	089b      	lsrs	r3, r3, #2
 80097ac:	3302      	adds	r3, #2
 80097ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	f003 0303 	and.w	r3, r3, #3
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	220f      	movs	r2, #15
 80097be:	fa02 f303 	lsl.w	r3, r2, r3
 80097c2:	43db      	mvns	r3, r3
 80097c4:	69ba      	ldr	r2, [r7, #24]
 80097c6:	4013      	ands	r3, r2
 80097c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a52      	ldr	r2, [pc, #328]	; (8009918 <HAL_GPIO_Init+0x314>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d02b      	beq.n	800982a <HAL_GPIO_Init+0x226>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a51      	ldr	r2, [pc, #324]	; (800991c <HAL_GPIO_Init+0x318>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d025      	beq.n	8009826 <HAL_GPIO_Init+0x222>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a50      	ldr	r2, [pc, #320]	; (8009920 <HAL_GPIO_Init+0x31c>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d01f      	beq.n	8009822 <HAL_GPIO_Init+0x21e>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a4f      	ldr	r2, [pc, #316]	; (8009924 <HAL_GPIO_Init+0x320>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d019      	beq.n	800981e <HAL_GPIO_Init+0x21a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a4e      	ldr	r2, [pc, #312]	; (8009928 <HAL_GPIO_Init+0x324>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d013      	beq.n	800981a <HAL_GPIO_Init+0x216>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a4d      	ldr	r2, [pc, #308]	; (800992c <HAL_GPIO_Init+0x328>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d00d      	beq.n	8009816 <HAL_GPIO_Init+0x212>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a4c      	ldr	r2, [pc, #304]	; (8009930 <HAL_GPIO_Init+0x32c>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d007      	beq.n	8009812 <HAL_GPIO_Init+0x20e>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a4b      	ldr	r2, [pc, #300]	; (8009934 <HAL_GPIO_Init+0x330>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d101      	bne.n	800980e <HAL_GPIO_Init+0x20a>
 800980a:	2307      	movs	r3, #7
 800980c:	e00e      	b.n	800982c <HAL_GPIO_Init+0x228>
 800980e:	2308      	movs	r3, #8
 8009810:	e00c      	b.n	800982c <HAL_GPIO_Init+0x228>
 8009812:	2306      	movs	r3, #6
 8009814:	e00a      	b.n	800982c <HAL_GPIO_Init+0x228>
 8009816:	2305      	movs	r3, #5
 8009818:	e008      	b.n	800982c <HAL_GPIO_Init+0x228>
 800981a:	2304      	movs	r3, #4
 800981c:	e006      	b.n	800982c <HAL_GPIO_Init+0x228>
 800981e:	2303      	movs	r3, #3
 8009820:	e004      	b.n	800982c <HAL_GPIO_Init+0x228>
 8009822:	2302      	movs	r3, #2
 8009824:	e002      	b.n	800982c <HAL_GPIO_Init+0x228>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <HAL_GPIO_Init+0x228>
 800982a:	2300      	movs	r3, #0
 800982c:	69fa      	ldr	r2, [r7, #28]
 800982e:	f002 0203 	and.w	r2, r2, #3
 8009832:	0092      	lsls	r2, r2, #2
 8009834:	4093      	lsls	r3, r2
 8009836:	69ba      	ldr	r2, [r7, #24]
 8009838:	4313      	orrs	r3, r2
 800983a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800983c:	4935      	ldr	r1, [pc, #212]	; (8009914 <HAL_GPIO_Init+0x310>)
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	089b      	lsrs	r3, r3, #2
 8009842:	3302      	adds	r3, #2
 8009844:	69ba      	ldr	r2, [r7, #24]
 8009846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800984a:	4b3b      	ldr	r3, [pc, #236]	; (8009938 <HAL_GPIO_Init+0x334>)
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	43db      	mvns	r3, r3
 8009854:	69ba      	ldr	r2, [r7, #24]
 8009856:	4013      	ands	r3, r2
 8009858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	4313      	orrs	r3, r2
 800986c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800986e:	4a32      	ldr	r2, [pc, #200]	; (8009938 <HAL_GPIO_Init+0x334>)
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009874:	4b30      	ldr	r3, [pc, #192]	; (8009938 <HAL_GPIO_Init+0x334>)
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	43db      	mvns	r3, r3
 800987e:	69ba      	ldr	r2, [r7, #24]
 8009880:	4013      	ands	r3, r2
 8009882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	4313      	orrs	r3, r2
 8009896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009898:	4a27      	ldr	r2, [pc, #156]	; (8009938 <HAL_GPIO_Init+0x334>)
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800989e:	4b26      	ldr	r3, [pc, #152]	; (8009938 <HAL_GPIO_Init+0x334>)
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	43db      	mvns	r3, r3
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	4013      	ands	r3, r2
 80098ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80098ba:	69ba      	ldr	r2, [r7, #24]
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	4313      	orrs	r3, r2
 80098c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80098c2:	4a1d      	ldr	r2, [pc, #116]	; (8009938 <HAL_GPIO_Init+0x334>)
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80098c8:	4b1b      	ldr	r3, [pc, #108]	; (8009938 <HAL_GPIO_Init+0x334>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	43db      	mvns	r3, r3
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	4013      	ands	r3, r2
 80098d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d003      	beq.n	80098ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80098ec:	4a12      	ldr	r2, [pc, #72]	; (8009938 <HAL_GPIO_Init+0x334>)
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	3301      	adds	r3, #1
 80098f6:	61fb      	str	r3, [r7, #28]
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	2b0f      	cmp	r3, #15
 80098fc:	f67f ae90 	bls.w	8009620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009900:	bf00      	nop
 8009902:	bf00      	nop
 8009904:	3724      	adds	r7, #36	; 0x24
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	40023800 	.word	0x40023800
 8009914:	40013800 	.word	0x40013800
 8009918:	40020000 	.word	0x40020000
 800991c:	40020400 	.word	0x40020400
 8009920:	40020800 	.word	0x40020800
 8009924:	40020c00 	.word	0x40020c00
 8009928:	40021000 	.word	0x40021000
 800992c:	40021400 	.word	0x40021400
 8009930:	40021800 	.word	0x40021800
 8009934:	40021c00 	.word	0x40021c00
 8009938:	40013c00 	.word	0x40013c00

0800993c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	807b      	strh	r3, [r7, #2]
 8009948:	4613      	mov	r3, r2
 800994a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800994c:	787b      	ldrb	r3, [r7, #1]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009952:	887a      	ldrh	r2, [r7, #2]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009958:	e003      	b.n	8009962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800995a:	887b      	ldrh	r3, [r7, #2]
 800995c:	041a      	lsls	r2, r3, #16
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	619a      	str	r2, [r3, #24]
}
 8009962:	bf00      	nop
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800996e:	b480      	push	{r7}
 8009970:	b085      	sub	sp, #20
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	460b      	mov	r3, r1
 8009978:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009980:	887a      	ldrh	r2, [r7, #2]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	4013      	ands	r3, r2
 8009986:	041a      	lsls	r2, r3, #16
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	43d9      	mvns	r1, r3
 800998c:	887b      	ldrh	r3, [r7, #2]
 800998e:	400b      	ands	r3, r1
 8009990:	431a      	orrs	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	619a      	str	r2, [r3, #24]
}
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
	...

080099a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80099ae:	4b08      	ldr	r3, [pc, #32]	; (80099d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80099b0:	695a      	ldr	r2, [r3, #20]
 80099b2:	88fb      	ldrh	r3, [r7, #6]
 80099b4:	4013      	ands	r3, r2
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d006      	beq.n	80099c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80099ba:	4a05      	ldr	r2, [pc, #20]	; (80099d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80099bc:	88fb      	ldrh	r3, [r7, #6]
 80099be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80099c0:	88fb      	ldrh	r3, [r7, #6]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fc fd98 	bl	80064f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80099c8:	bf00      	nop
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	40013c00 	.word	0x40013c00

080099d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80099d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d6:	b08f      	sub	sp, #60	; 0x3c
 80099d8:	af0a      	add	r7, sp, #40	; 0x28
 80099da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e10f      	b.n	8009c06 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d106      	bne.n	8009a06 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f016 fdcb 	bl	802059c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2203      	movs	r2, #3
 8009a0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d102      	bne.n	8009a20 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f002 feec 	bl	800c802 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	603b      	str	r3, [r7, #0]
 8009a30:	687e      	ldr	r6, [r7, #4]
 8009a32:	466d      	mov	r5, sp
 8009a34:	f106 0410 	add.w	r4, r6, #16
 8009a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009a44:	e885 0003 	stmia.w	r5, {r0, r1}
 8009a48:	1d33      	adds	r3, r6, #4
 8009a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a4c:	6838      	ldr	r0, [r7, #0]
 8009a4e:	f002 fdc3 	bl	800c5d8 <USB_CoreInit>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d005      	beq.n	8009a64 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	e0d0      	b.n	8009c06 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2100      	movs	r1, #0
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f002 feda 	bl	800c824 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a70:	2300      	movs	r3, #0
 8009a72:	73fb      	strb	r3, [r7, #15]
 8009a74:	e04a      	b.n	8009b0c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009a76:	7bfa      	ldrb	r2, [r7, #15]
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	00db      	lsls	r3, r3, #3
 8009a7e:	4413      	add	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	440b      	add	r3, r1
 8009a84:	333d      	adds	r3, #61	; 0x3d
 8009a86:	2201      	movs	r2, #1
 8009a88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009a8a:	7bfa      	ldrb	r2, [r7, #15]
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	00db      	lsls	r3, r3, #3
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	440b      	add	r3, r1
 8009a98:	333c      	adds	r3, #60	; 0x3c
 8009a9a:	7bfa      	ldrb	r2, [r7, #15]
 8009a9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009a9e:	7bfa      	ldrb	r2, [r7, #15]
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
 8009aa2:	b298      	uxth	r0, r3
 8009aa4:	6879      	ldr	r1, [r7, #4]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	00db      	lsls	r3, r3, #3
 8009aaa:	4413      	add	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	440b      	add	r3, r1
 8009ab0:	3344      	adds	r3, #68	; 0x44
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009ab6:	7bfa      	ldrb	r2, [r7, #15]
 8009ab8:	6879      	ldr	r1, [r7, #4]
 8009aba:	4613      	mov	r3, r2
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	4413      	add	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	440b      	add	r3, r1
 8009ac4:	3340      	adds	r3, #64	; 0x40
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009aca:	7bfa      	ldrb	r2, [r7, #15]
 8009acc:	6879      	ldr	r1, [r7, #4]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	00db      	lsls	r3, r3, #3
 8009ad2:	4413      	add	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	440b      	add	r3, r1
 8009ad8:	3348      	adds	r3, #72	; 0x48
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009ade:	7bfa      	ldrb	r2, [r7, #15]
 8009ae0:	6879      	ldr	r1, [r7, #4]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	00db      	lsls	r3, r3, #3
 8009ae6:	4413      	add	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	440b      	add	r3, r1
 8009aec:	334c      	adds	r3, #76	; 0x4c
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009af2:	7bfa      	ldrb	r2, [r7, #15]
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	00db      	lsls	r3, r3, #3
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	440b      	add	r3, r1
 8009b00:	3354      	adds	r3, #84	; 0x54
 8009b02:	2200      	movs	r2, #0
 8009b04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	73fb      	strb	r3, [r7, #15]
 8009b0c:	7bfa      	ldrb	r2, [r7, #15]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d3af      	bcc.n	8009a76 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]
 8009b1a:	e044      	b.n	8009ba6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009b1c:	7bfa      	ldrb	r2, [r7, #15]
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	4613      	mov	r3, r2
 8009b22:	00db      	lsls	r3, r3, #3
 8009b24:	4413      	add	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	440b      	add	r3, r1
 8009b2a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009b2e:	2200      	movs	r2, #0
 8009b30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009b32:	7bfa      	ldrb	r2, [r7, #15]
 8009b34:	6879      	ldr	r1, [r7, #4]
 8009b36:	4613      	mov	r3, r2
 8009b38:	00db      	lsls	r3, r3, #3
 8009b3a:	4413      	add	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	440b      	add	r3, r1
 8009b40:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009b44:	7bfa      	ldrb	r2, [r7, #15]
 8009b46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009b48:	7bfa      	ldrb	r2, [r7, #15]
 8009b4a:	6879      	ldr	r1, [r7, #4]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	440b      	add	r3, r1
 8009b56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009b5e:	7bfa      	ldrb	r2, [r7, #15]
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	4613      	mov	r3, r2
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	4413      	add	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	440b      	add	r3, r1
 8009b6c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009b70:	2200      	movs	r2, #0
 8009b72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009b74:	7bfa      	ldrb	r2, [r7, #15]
 8009b76:	6879      	ldr	r1, [r7, #4]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	00db      	lsls	r3, r3, #3
 8009b7c:	4413      	add	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	440b      	add	r3, r1
 8009b82:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009b86:	2200      	movs	r2, #0
 8009b88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009b8a:	7bfa      	ldrb	r2, [r7, #15]
 8009b8c:	6879      	ldr	r1, [r7, #4]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	4413      	add	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	440b      	add	r3, r1
 8009b98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ba0:	7bfb      	ldrb	r3, [r7, #15]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	73fb      	strb	r3, [r7, #15]
 8009ba6:	7bfa      	ldrb	r2, [r7, #15]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d3b5      	bcc.n	8009b1c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	603b      	str	r3, [r7, #0]
 8009bb6:	687e      	ldr	r6, [r7, #4]
 8009bb8:	466d      	mov	r5, sp
 8009bba:	f106 0410 	add.w	r4, r6, #16
 8009bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009bc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009bca:	e885 0003 	stmia.w	r5, {r0, r1}
 8009bce:	1d33      	adds	r3, r6, #4
 8009bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009bd2:	6838      	ldr	r0, [r7, #0]
 8009bd4:	f002 fe72 	bl	800c8bc <USB_DevInit>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d005      	beq.n	8009bea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2202      	movs	r2, #2
 8009be2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e00d      	b.n	8009c06 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f003 ffc1 	bl	800db86 <USB_DevDisconnect>

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d101      	bne.n	8009c2a <HAL_PCD_Start+0x1c>
 8009c26:	2302      	movs	r3, #2
 8009c28:	e020      	b.n	8009c6c <HAL_PCD_Start+0x5e>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d109      	bne.n	8009c4e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d005      	beq.n	8009c4e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f002 fdc4 	bl	800c7e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f003 ff71 	bl	800db44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009c74:	b590      	push	{r4, r7, lr}
 8009c76:	b08d      	sub	sp, #52	; 0x34
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c82:	6a3b      	ldr	r3, [r7, #32]
 8009c84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f004 f82f 	bl	800dcee <USB_GetMode>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f040 848a 	bne.w	800a5ac <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f003 ff93 	bl	800dbc8 <USB_ReadInterrupts>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 8480 	beq.w	800a5aa <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	0a1b      	lsrs	r3, r3, #8
 8009cb4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f003 ff80 	bl	800dbc8 <USB_ReadInterrupts>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d107      	bne.n	8009ce2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	695a      	ldr	r2, [r3, #20]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f002 0202 	and.w	r2, r2, #2
 8009ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f003 ff6e 	bl	800dbc8 <USB_ReadInterrupts>
 8009cec:	4603      	mov	r3, r0
 8009cee:	f003 0310 	and.w	r3, r3, #16
 8009cf2:	2b10      	cmp	r3, #16
 8009cf4:	d161      	bne.n	8009dba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	699a      	ldr	r2, [r3, #24]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f022 0210 	bic.w	r2, r2, #16
 8009d04:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	f003 020f 	and.w	r2, r3, #15
 8009d12:	4613      	mov	r3, r2
 8009d14:	00db      	lsls	r3, r3, #3
 8009d16:	4413      	add	r3, r2
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	4413      	add	r3, r2
 8009d22:	3304      	adds	r3, #4
 8009d24:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	0c5b      	lsrs	r3, r3, #17
 8009d2a:	f003 030f 	and.w	r3, r3, #15
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d124      	bne.n	8009d7c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009d38:	4013      	ands	r3, r2
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d035      	beq.n	8009daa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	091b      	lsrs	r3, r3, #4
 8009d46:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	461a      	mov	r2, r3
 8009d50:	6a38      	ldr	r0, [r7, #32]
 8009d52:	f003 fda5 	bl	800d8a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	691a      	ldr	r2, [r3, #16]
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	091b      	lsrs	r3, r3, #4
 8009d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d62:	441a      	add	r2, r3
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	6a1a      	ldr	r2, [r3, #32]
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	091b      	lsrs	r3, r3, #4
 8009d70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d74:	441a      	add	r2, r3
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	621a      	str	r2, [r3, #32]
 8009d7a:	e016      	b.n	8009daa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	0c5b      	lsrs	r3, r3, #17
 8009d80:	f003 030f 	and.w	r3, r3, #15
 8009d84:	2b06      	cmp	r3, #6
 8009d86:	d110      	bne.n	8009daa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009d8e:	2208      	movs	r2, #8
 8009d90:	4619      	mov	r1, r3
 8009d92:	6a38      	ldr	r0, [r7, #32]
 8009d94:	f003 fd84 	bl	800d8a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	6a1a      	ldr	r2, [r3, #32]
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	091b      	lsrs	r3, r3, #4
 8009da0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009da4:	441a      	add	r2, r3
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	699a      	ldr	r2, [r3, #24]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f042 0210 	orr.w	r2, r2, #16
 8009db8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f003 ff02 	bl	800dbc8 <USB_ReadInterrupts>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009dca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009dce:	f040 80a7 	bne.w	8009f20 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f003 ff07 	bl	800dbee <USB_ReadDevAllOutEpInterrupt>
 8009de0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009de2:	e099      	b.n	8009f18 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 808e 	beq.w	8009f0c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009df6:	b2d2      	uxtb	r2, r2
 8009df8:	4611      	mov	r1, r2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f003 ff2b 	bl	800dc56 <USB_ReadDevOutEPInterrupt>
 8009e00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00c      	beq.n	8009e26 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e18:	461a      	mov	r2, r3
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fec3 	bl	800abac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f003 0308 	and.w	r3, r3, #8
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00c      	beq.n	8009e4a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	2308      	movs	r3, #8
 8009e40:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009e42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 ff99 	bl	800ad7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	f003 0310 	and.w	r3, r3, #16
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d008      	beq.n	8009e66 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e60:	461a      	mov	r2, r3
 8009e62:	2310      	movs	r3, #16
 8009e64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	f003 0302 	and.w	r3, r3, #2
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d030      	beq.n	8009ed2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	695b      	ldr	r3, [r3, #20]
 8009e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e78:	2b80      	cmp	r3, #128	; 0x80
 8009e7a:	d109      	bne.n	8009e90 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	69fa      	ldr	r2, [r7, #28]
 8009e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e8e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e92:	4613      	mov	r3, r2
 8009e94:	00db      	lsls	r3, r3, #3
 8009e96:	4413      	add	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	78db      	ldrb	r3, [r3, #3]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d108      	bne.n	8009ec0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	4619      	mov	r1, r3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f016 fc74 	bl	80207a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	015a      	lsls	r2, r3, #5
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ecc:	461a      	mov	r2, r3
 8009ece:	2302      	movs	r3, #2
 8009ed0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	f003 0320 	and.w	r3, r3, #32
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d008      	beq.n	8009eee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	015a      	lsls	r2, r3, #5
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee8:	461a      	mov	r2, r3
 8009eea:	2320      	movs	r3, #32
 8009eec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d009      	beq.n	8009f0c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f04:	461a      	mov	r2, r3
 8009f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f0a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	3301      	adds	r3, #1
 8009f10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	085b      	lsrs	r3, r3, #1
 8009f16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f47f af62 	bne.w	8009de4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f003 fe4f 	bl	800dbc8 <USB_ReadInterrupts>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f34:	f040 80db 	bne.w	800a0ee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f003 fe70 	bl	800dc22 <USB_ReadDevAllInEpInterrupt>
 8009f42:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009f44:	2300      	movs	r3, #0
 8009f46:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009f48:	e0cd      	b.n	800a0e6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 80c2 	beq.w	800a0da <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f5c:	b2d2      	uxtb	r2, r2
 8009f5e:	4611      	mov	r1, r2
 8009f60:	4618      	mov	r0, r3
 8009f62:	f003 fe96 	bl	800dc92 <USB_ReadDevInEPInterrupt>
 8009f66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d057      	beq.n	800a022 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	f003 030f 	and.w	r3, r3, #15
 8009f78:	2201      	movs	r2, #1
 8009f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	43db      	mvns	r3, r3
 8009f8c:	69f9      	ldr	r1, [r7, #28]
 8009f8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f92:	4013      	ands	r3, r2
 8009f94:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d132      	bne.n	800a016 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009fb0:	6879      	ldr	r1, [r7, #4]
 8009fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	334c      	adds	r3, #76	; 0x4c
 8009fc0:	6819      	ldr	r1, [r3, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	00db      	lsls	r3, r3, #3
 8009fca:	4413      	add	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4403      	add	r3, r0
 8009fd0:	3348      	adds	r3, #72	; 0x48
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4419      	add	r1, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fda:	4613      	mov	r3, r2
 8009fdc:	00db      	lsls	r3, r3, #3
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4403      	add	r3, r0
 8009fe4:	334c      	adds	r3, #76	; 0x4c
 8009fe6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d113      	bne.n	800a016 <HAL_PCD_IRQHandler+0x3a2>
 8009fee:	6879      	ldr	r1, [r7, #4]
 8009ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	00db      	lsls	r3, r3, #3
 8009ff6:	4413      	add	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	440b      	add	r3, r1
 8009ffc:	3354      	adds	r3, #84	; 0x54
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d108      	bne.n	800a016 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6818      	ldr	r0, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a00e:	461a      	mov	r2, r3
 800a010:	2101      	movs	r1, #1
 800a012:	f003 fe9d 	bl	800dd50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f016 fb3e 	bl	802069e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	f003 0308 	and.w	r3, r3, #8
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d008      	beq.n	800a03e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	015a      	lsls	r2, r3, #5
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	4413      	add	r3, r2
 800a034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a038:	461a      	mov	r2, r3
 800a03a:	2308      	movs	r3, #8
 800a03c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f003 0310 	and.w	r3, r3, #16
 800a044:	2b00      	cmp	r3, #0
 800a046:	d008      	beq.n	800a05a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a054:	461a      	mov	r2, r3
 800a056:	2310      	movs	r3, #16
 800a058:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a060:	2b00      	cmp	r3, #0
 800a062:	d008      	beq.n	800a076 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a070:	461a      	mov	r2, r3
 800a072:	2340      	movs	r3, #64	; 0x40
 800a074:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	f003 0302 	and.w	r3, r3, #2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d023      	beq.n	800a0c8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a082:	6a38      	ldr	r0, [r7, #32]
 800a084:	f002 fd7e 	bl	800cb84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08a:	4613      	mov	r3, r2
 800a08c:	00db      	lsls	r3, r3, #3
 800a08e:	4413      	add	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	3338      	adds	r3, #56	; 0x38
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	4413      	add	r3, r2
 800a098:	3304      	adds	r3, #4
 800a09a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	78db      	ldrb	r3, [r3, #3]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d108      	bne.n	800a0b6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f016 fb8b 	bl	80207cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a0d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fcdb 	bl	800aa90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	3301      	adds	r3, #1
 800a0de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	085b      	lsrs	r3, r3, #1
 800a0e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f47f af2e 	bne.w	8009f4a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f003 fd68 	bl	800dbc8 <USB_ReadInterrupts>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a102:	d122      	bne.n	800a14a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	69fa      	ldr	r2, [r7, #28]
 800a10e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a112:	f023 0301 	bic.w	r3, r3, #1
 800a116:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d108      	bne.n	800a134 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a12a:	2100      	movs	r1, #0
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fec3 	bl	800aeb8 <HAL_PCDEx_LPM_Callback>
 800a132:	e002      	b.n	800a13a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f016 fb29 	bl	802078c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	695a      	ldr	r2, [r3, #20]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a148:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4618      	mov	r0, r3
 800a150:	f003 fd3a 	bl	800dbc8 <USB_ReadInterrupts>
 800a154:	4603      	mov	r3, r0
 800a156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a15a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a15e:	d112      	bne.n	800a186 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	f003 0301 	and.w	r3, r3, #1
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d102      	bne.n	800a176 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f016 fae5 	bl	8020740 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	695a      	ldr	r2, [r3, #20]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a184:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f003 fd1c 	bl	800dbc8 <USB_ReadInterrupts>
 800a190:	4603      	mov	r3, r0
 800a192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a19a:	f040 80b7 	bne.w	800a30c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	69fa      	ldr	r2, [r7, #28]
 800a1a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1ac:	f023 0301 	bic.w	r3, r3, #1
 800a1b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2110      	movs	r1, #16
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f002 fce3 	bl	800cb84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1be:	2300      	movs	r3, #0
 800a1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1c2:	e046      	b.n	800a252 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	015a      	lsls	r2, r3, #5
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1e8:	0151      	lsls	r1, r2, #5
 800a1ea:	69fa      	ldr	r2, [r7, #28]
 800a1ec:	440a      	add	r2, r1
 800a1ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a1f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fa:	015a      	lsls	r2, r3, #5
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	4413      	add	r3, r2
 800a200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a204:	461a      	mov	r2, r3
 800a206:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a20a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a21c:	0151      	lsls	r1, r2, #5
 800a21e:	69fa      	ldr	r2, [r7, #28]
 800a220:	440a      	add	r2, r1
 800a222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a22a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a23c:	0151      	lsls	r1, r2, #5
 800a23e:	69fa      	ldr	r2, [r7, #28]
 800a240:	440a      	add	r2, r1
 800a242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a246:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a24a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24e:	3301      	adds	r3, #1
 800a250:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a258:	429a      	cmp	r2, r3
 800a25a:	d3b3      	bcc.n	800a1c4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	69fa      	ldr	r2, [r7, #28]
 800a266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a26a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a26e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a274:	2b00      	cmp	r3, #0
 800a276:	d016      	beq.n	800a2a6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a27e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a282:	69fa      	ldr	r2, [r7, #28]
 800a284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a288:	f043 030b 	orr.w	r3, r3, #11
 800a28c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a298:	69fa      	ldr	r2, [r7, #28]
 800a29a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a29e:	f043 030b 	orr.w	r3, r3, #11
 800a2a2:	6453      	str	r3, [r2, #68]	; 0x44
 800a2a4:	e015      	b.n	800a2d2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	69fa      	ldr	r2, [r7, #28]
 800a2b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a2b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a2bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	69fa      	ldr	r2, [r7, #28]
 800a2c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2cc:	f043 030b 	orr.w	r3, r3, #11
 800a2d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	69fa      	ldr	r2, [r7, #28]
 800a2dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a2e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6818      	ldr	r0, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f003 fd2a 	bl	800dd50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	695a      	ldr	r2, [r3, #20]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a30a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4618      	mov	r0, r3
 800a312:	f003 fc59 	bl	800dbc8 <USB_ReadInterrupts>
 800a316:	4603      	mov	r3, r0
 800a318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a31c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a320:	d124      	bne.n	800a36c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4618      	mov	r0, r3
 800a328:	f003 fcef 	bl	800dd0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4618      	mov	r0, r3
 800a332:	f002 fca4 	bl	800cc7e <USB_GetDevSpeed>
 800a336:	4603      	mov	r3, r0
 800a338:	461a      	mov	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681c      	ldr	r4, [r3, #0]
 800a342:	f001 fa29 	bl	800b798 <HAL_RCC_GetHCLKFreq>
 800a346:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	461a      	mov	r2, r3
 800a350:	4620      	mov	r0, r4
 800a352:	f002 f9a3 	bl	800c69c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f016 f9c9 	bl	80206ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	695a      	ldr	r2, [r3, #20]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a36a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4618      	mov	r0, r3
 800a372:	f003 fc29 	bl	800dbc8 <USB_ReadInterrupts>
 800a376:	4603      	mov	r3, r0
 800a378:	f003 0308 	and.w	r3, r3, #8
 800a37c:	2b08      	cmp	r3, #8
 800a37e:	d10a      	bne.n	800a396 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f016 f9a6 	bl	80206d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	695a      	ldr	r2, [r3, #20]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f002 0208 	and.w	r2, r2, #8
 800a394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f003 fc14 	bl	800dbc8 <USB_ReadInterrupts>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a6:	2b80      	cmp	r3, #128	; 0x80
 800a3a8:	d122      	bne.n	800a3f0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ba:	e014      	b.n	800a3e6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	00db      	lsls	r3, r3, #3
 800a3c4:	4413      	add	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	440b      	add	r3, r1
 800a3ca:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d105      	bne.n	800a3e0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fb27 	bl	800aa2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d3e5      	bcc.n	800a3bc <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f003 fbe7 	bl	800dbc8 <USB_ReadInterrupts>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a404:	d13b      	bne.n	800a47e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a406:	2301      	movs	r3, #1
 800a408:	627b      	str	r3, [r7, #36]	; 0x24
 800a40a:	e02b      	b.n	800a464 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a41c:	6879      	ldr	r1, [r7, #4]
 800a41e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a420:	4613      	mov	r3, r2
 800a422:	00db      	lsls	r3, r3, #3
 800a424:	4413      	add	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	440b      	add	r3, r1
 800a42a:	3340      	adds	r3, #64	; 0x40
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d115      	bne.n	800a45e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a432:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a434:	2b00      	cmp	r3, #0
 800a436:	da12      	bge.n	800a45e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a438:	6879      	ldr	r1, [r7, #4]
 800a43a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a43c:	4613      	mov	r3, r2
 800a43e:	00db      	lsls	r3, r3, #3
 800a440:	4413      	add	r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	440b      	add	r3, r1
 800a446:	333f      	adds	r3, #63	; 0x3f
 800a448:	2201      	movs	r2, #1
 800a44a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a454:	b2db      	uxtb	r3, r3
 800a456:	4619      	mov	r1, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fae8 	bl	800aa2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a460:	3301      	adds	r3, #1
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d3ce      	bcc.n	800a40c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	695a      	ldr	r2, [r3, #20]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a47c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4618      	mov	r0, r3
 800a484:	f003 fba0 	bl	800dbc8 <USB_ReadInterrupts>
 800a488:	4603      	mov	r3, r0
 800a48a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a48e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a492:	d155      	bne.n	800a540 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a494:	2301      	movs	r3, #1
 800a496:	627b      	str	r3, [r7, #36]	; 0x24
 800a498:	e045      	b.n	800a526 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49c:	015a      	lsls	r2, r3, #5
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a4aa:	6879      	ldr	r1, [r7, #4]
 800a4ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	00db      	lsls	r3, r3, #3
 800a4b2:	4413      	add	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	440b      	add	r3, r1
 800a4b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d12e      	bne.n	800a520 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a4c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	da2b      	bge.n	800a520 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a4d4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d121      	bne.n	800a520 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a4dc:	6879      	ldr	r1, [r7, #4]
 800a4de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	4413      	add	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	440b      	add	r3, r1
 800a4ea:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a4f2:	6a3b      	ldr	r3, [r7, #32]
 800a4f4:	699b      	ldr	r3, [r3, #24]
 800a4f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a4fa:	6a3b      	ldr	r3, [r7, #32]
 800a4fc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a4fe:	6a3b      	ldr	r3, [r7, #32]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10a      	bne.n	800a520 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	69fa      	ldr	r2, [r7, #28]
 800a514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a518:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a51c:	6053      	str	r3, [r2, #4]
            break;
 800a51e:	e007      	b.n	800a530 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a522:	3301      	adds	r3, #1
 800a524:	627b      	str	r3, [r7, #36]	; 0x24
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d3b4      	bcc.n	800a49a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	695a      	ldr	r2, [r3, #20]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a53e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4618      	mov	r0, r3
 800a546:	f003 fb3f 	bl	800dbc8 <USB_ReadInterrupts>
 800a54a:	4603      	mov	r3, r0
 800a54c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a554:	d10a      	bne.n	800a56c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f016 f94a 	bl	80207f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	695a      	ldr	r2, [r3, #20]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a56a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4618      	mov	r0, r3
 800a572:	f003 fb29 	bl	800dbc8 <USB_ReadInterrupts>
 800a576:	4603      	mov	r3, r0
 800a578:	f003 0304 	and.w	r3, r3, #4
 800a57c:	2b04      	cmp	r3, #4
 800a57e:	d115      	bne.n	800a5ac <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	f003 0304 	and.w	r3, r3, #4
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d002      	beq.n	800a598 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f016 f93a 	bl	802080c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6859      	ldr	r1, [r3, #4]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	69ba      	ldr	r2, [r7, #24]
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	605a      	str	r2, [r3, #4]
 800a5a8:	e000      	b.n	800a5ac <HAL_PCD_IRQHandler+0x938>
      return;
 800a5aa:	bf00      	nop
    }
  }
}
 800a5ac:	3734      	adds	r7, #52	; 0x34
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd90      	pop	{r4, r7, pc}

0800a5b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d101      	bne.n	800a5cc <HAL_PCD_SetAddress+0x1a>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e013      	b.n	800a5f4 <HAL_PCD_SetAddress+0x42>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	78fa      	ldrb	r2, [r7, #3]
 800a5d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	78fa      	ldrb	r2, [r7, #3]
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f003 fa87 	bl	800daf8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	4608      	mov	r0, r1
 800a606:	4611      	mov	r1, r2
 800a608:	461a      	mov	r2, r3
 800a60a:	4603      	mov	r3, r0
 800a60c:	70fb      	strb	r3, [r7, #3]
 800a60e:	460b      	mov	r3, r1
 800a610:	803b      	strh	r3, [r7, #0]
 800a612:	4613      	mov	r3, r2
 800a614:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a61a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	da0f      	bge.n	800a642 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a622:	78fb      	ldrb	r3, [r7, #3]
 800a624:	f003 020f 	and.w	r2, r3, #15
 800a628:	4613      	mov	r3, r2
 800a62a:	00db      	lsls	r3, r3, #3
 800a62c:	4413      	add	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	3338      	adds	r3, #56	; 0x38
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	4413      	add	r3, r2
 800a636:	3304      	adds	r3, #4
 800a638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2201      	movs	r2, #1
 800a63e:	705a      	strb	r2, [r3, #1]
 800a640:	e00f      	b.n	800a662 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a642:	78fb      	ldrb	r3, [r7, #3]
 800a644:	f003 020f 	and.w	r2, r3, #15
 800a648:	4613      	mov	r3, r2
 800a64a:	00db      	lsls	r3, r3, #3
 800a64c:	4413      	add	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	4413      	add	r3, r2
 800a658:	3304      	adds	r3, #4
 800a65a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a662:	78fb      	ldrb	r3, [r7, #3]
 800a664:	f003 030f 	and.w	r3, r3, #15
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a66e:	883a      	ldrh	r2, [r7, #0]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	78ba      	ldrb	r2, [r7, #2]
 800a678:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	785b      	ldrb	r3, [r3, #1]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d004      	beq.n	800a68c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	b29a      	uxth	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a68c:	78bb      	ldrb	r3, [r7, #2]
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d102      	bne.n	800a698 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <HAL_PCD_EP_Open+0xaa>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e00e      	b.n	800a6c4 <HAL_PCD_EP_Open+0xc8>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68f9      	ldr	r1, [r7, #12]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f002 fb07 	bl	800ccc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a6c2:	7afb      	ldrb	r3, [r7, #11]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a6d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	da0f      	bge.n	800a700 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	f003 020f 	and.w	r2, r3, #15
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	00db      	lsls	r3, r3, #3
 800a6ea:	4413      	add	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	3338      	adds	r3, #56	; 0x38
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	705a      	strb	r2, [r3, #1]
 800a6fe:	e00f      	b.n	800a720 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a700:	78fb      	ldrb	r3, [r7, #3]
 800a702:	f003 020f 	and.w	r2, r3, #15
 800a706:	4613      	mov	r3, r2
 800a708:	00db      	lsls	r3, r3, #3
 800a70a:	4413      	add	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	4413      	add	r3, r2
 800a716:	3304      	adds	r3, #4
 800a718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a720:	78fb      	ldrb	r3, [r7, #3]
 800a722:	f003 030f 	and.w	r3, r3, #15
 800a726:	b2da      	uxtb	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a732:	2b01      	cmp	r3, #1
 800a734:	d101      	bne.n	800a73a <HAL_PCD_EP_Close+0x6e>
 800a736:	2302      	movs	r3, #2
 800a738:	e00e      	b.n	800a758 <HAL_PCD_EP_Close+0x8c>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68f9      	ldr	r1, [r7, #12]
 800a748:	4618      	mov	r0, r3
 800a74a:	f002 fb45 	bl	800cdd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	607a      	str	r2, [r7, #4]
 800a76a:	603b      	str	r3, [r7, #0]
 800a76c:	460b      	mov	r3, r1
 800a76e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a770:	7afb      	ldrb	r3, [r7, #11]
 800a772:	f003 020f 	and.w	r2, r3, #15
 800a776:	4613      	mov	r3, r2
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	4413      	add	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	4413      	add	r3, r2
 800a786:	3304      	adds	r3, #4
 800a788:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	2200      	movs	r2, #0
 800a79a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a7a2:	7afb      	ldrb	r3, [r7, #11]
 800a7a4:	f003 030f 	and.w	r3, r3, #15
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d102      	bne.n	800a7bc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a7bc:	7afb      	ldrb	r3, [r7, #11]
 800a7be:	f003 030f 	and.w	r3, r3, #15
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d109      	bne.n	800a7da <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	6979      	ldr	r1, [r7, #20]
 800a7d4:	f002 fe24 	bl	800d420 <USB_EP0StartXfer>
 800a7d8:	e008      	b.n	800a7ec <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6818      	ldr	r0, [r3, #0]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	6979      	ldr	r1, [r7, #20]
 800a7e8:	f002 fbd2 	bl	800cf90 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	460b      	mov	r3, r1
 800a800:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a802:	78fb      	ldrb	r3, [r7, #3]
 800a804:	f003 020f 	and.w	r2, r3, #15
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	4613      	mov	r3, r2
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	4413      	add	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	440b      	add	r3, r1
 800a814:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a818:	681b      	ldr	r3, [r3, #0]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b086      	sub	sp, #24
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	607a      	str	r2, [r7, #4]
 800a830:	603b      	str	r3, [r7, #0]
 800a832:	460b      	mov	r3, r1
 800a834:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a836:	7afb      	ldrb	r3, [r7, #11]
 800a838:	f003 020f 	and.w	r2, r3, #15
 800a83c:	4613      	mov	r3, r2
 800a83e:	00db      	lsls	r3, r3, #3
 800a840:	4413      	add	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	3338      	adds	r3, #56	; 0x38
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	4413      	add	r3, r2
 800a84a:	3304      	adds	r3, #4
 800a84c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2200      	movs	r2, #0
 800a85e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	2201      	movs	r2, #1
 800a864:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a866:	7afb      	ldrb	r3, [r7, #11]
 800a868:	f003 030f 	and.w	r3, r3, #15
 800a86c:	b2da      	uxtb	r2, r3
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d102      	bne.n	800a880 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a880:	7afb      	ldrb	r3, [r7, #11]
 800a882:	f003 030f 	and.w	r3, r3, #15
 800a886:	2b00      	cmp	r3, #0
 800a888:	d109      	bne.n	800a89e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6818      	ldr	r0, [r3, #0]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	b2db      	uxtb	r3, r3
 800a894:	461a      	mov	r2, r3
 800a896:	6979      	ldr	r1, [r7, #20]
 800a898:	f002 fdc2 	bl	800d420 <USB_EP0StartXfer>
 800a89c:	e008      	b.n	800a8b0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6818      	ldr	r0, [r3, #0]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	6979      	ldr	r1, [r7, #20]
 800a8ac:	f002 fb70 	bl	800cf90 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b084      	sub	sp, #16
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a8c6:	78fb      	ldrb	r3, [r7, #3]
 800a8c8:	f003 020f 	and.w	r2, r3, #15
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d901      	bls.n	800a8d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e050      	b.n	800a97a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a8d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	da0f      	bge.n	800a900 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8e0:	78fb      	ldrb	r3, [r7, #3]
 800a8e2:	f003 020f 	and.w	r2, r3, #15
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	00db      	lsls	r3, r3, #3
 800a8ea:	4413      	add	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	3338      	adds	r3, #56	; 0x38
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	705a      	strb	r2, [r3, #1]
 800a8fe:	e00d      	b.n	800a91c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a900:	78fa      	ldrb	r2, [r7, #3]
 800a902:	4613      	mov	r3, r2
 800a904:	00db      	lsls	r3, r3, #3
 800a906:	4413      	add	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	4413      	add	r3, r2
 800a912:	3304      	adds	r3, #4
 800a914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2201      	movs	r2, #1
 800a920:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a922:	78fb      	ldrb	r3, [r7, #3]
 800a924:	f003 030f 	and.w	r3, r3, #15
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a934:	2b01      	cmp	r3, #1
 800a936:	d101      	bne.n	800a93c <HAL_PCD_EP_SetStall+0x82>
 800a938:	2302      	movs	r3, #2
 800a93a:	e01e      	b.n	800a97a <HAL_PCD_EP_SetStall+0xc0>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68f9      	ldr	r1, [r7, #12]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f003 f800 	bl	800d950 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a950:	78fb      	ldrb	r3, [r7, #3]
 800a952:	f003 030f 	and.w	r3, r3, #15
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10a      	bne.n	800a970 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6818      	ldr	r0, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	b2d9      	uxtb	r1, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a96a:	461a      	mov	r2, r3
 800a96c:	f003 f9f0 	bl	800dd50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	460b      	mov	r3, r1
 800a98c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a98e:	78fb      	ldrb	r3, [r7, #3]
 800a990:	f003 020f 	and.w	r2, r3, #15
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d901      	bls.n	800a9a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e042      	b.n	800aa26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a9a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	da0f      	bge.n	800a9c8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	f003 020f 	and.w	r2, r3, #15
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	00db      	lsls	r3, r3, #3
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	3338      	adds	r3, #56	; 0x38
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	3304      	adds	r3, #4
 800a9be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	705a      	strb	r2, [r3, #1]
 800a9c6:	e00f      	b.n	800a9e8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a9c8:	78fb      	ldrb	r3, [r7, #3]
 800a9ca:	f003 020f 	and.w	r2, r3, #15
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	00db      	lsls	r3, r3, #3
 800a9d2:	4413      	add	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	4413      	add	r3, r2
 800a9de:	3304      	adds	r3, #4
 800a9e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a9ee:	78fb      	ldrb	r3, [r7, #3]
 800a9f0:	f003 030f 	and.w	r3, r3, #15
 800a9f4:	b2da      	uxtb	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d101      	bne.n	800aa08 <HAL_PCD_EP_ClrStall+0x86>
 800aa04:	2302      	movs	r3, #2
 800aa06:	e00e      	b.n	800aa26 <HAL_PCD_EP_ClrStall+0xa4>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	68f9      	ldr	r1, [r7, #12]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f003 f808 	bl	800da2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b084      	sub	sp, #16
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	460b      	mov	r3, r1
 800aa38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800aa3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	da0c      	bge.n	800aa5c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	f003 020f 	and.w	r2, r3, #15
 800aa48:	4613      	mov	r3, r2
 800aa4a:	00db      	lsls	r3, r3, #3
 800aa4c:	4413      	add	r3, r2
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	3338      	adds	r3, #56	; 0x38
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	4413      	add	r3, r2
 800aa56:	3304      	adds	r3, #4
 800aa58:	60fb      	str	r3, [r7, #12]
 800aa5a:	e00c      	b.n	800aa76 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aa5c:	78fb      	ldrb	r3, [r7, #3]
 800aa5e:	f003 020f 	and.w	r2, r3, #15
 800aa62:	4613      	mov	r3, r2
 800aa64:	00db      	lsls	r3, r3, #3
 800aa66:	4413      	add	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	4413      	add	r3, r2
 800aa72:	3304      	adds	r3, #4
 800aa74:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68f9      	ldr	r1, [r7, #12]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f002 fe27 	bl	800d6d0 <USB_EPStopXfer>
 800aa82:	4603      	mov	r3, r0
 800aa84:	72fb      	strb	r3, [r7, #11]

  return ret;
 800aa86:	7afb      	ldrb	r3, [r7, #11]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08a      	sub	sp, #40	; 0x28
 800aa94:	af02      	add	r7, sp, #8
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	00db      	lsls	r3, r3, #3
 800aaaa:	4413      	add	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	3338      	adds	r3, #56	; 0x38
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	4413      	add	r3, r2
 800aab4:	3304      	adds	r3, #4
 800aab6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6a1a      	ldr	r2, [r3, #32]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	699b      	ldr	r3, [r3, #24]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d901      	bls.n	800aac8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	e06c      	b.n	800aba2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	699a      	ldr	r2, [r3, #24]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6a1b      	ldr	r3, [r3, #32]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	69fa      	ldr	r2, [r7, #28]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d902      	bls.n	800aae4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	3303      	adds	r3, #3
 800aae8:	089b      	lsrs	r3, r3, #2
 800aaea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800aaec:	e02b      	b.n	800ab46 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	699a      	ldr	r2, [r3, #24]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	69fa      	ldr	r2, [r7, #28]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d902      	bls.n	800ab0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	3303      	adds	r3, #3
 800ab0e:	089b      	lsrs	r3, r3, #2
 800ab10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6919      	ldr	r1, [r3, #16]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	4603      	mov	r3, r0
 800ab28:	6978      	ldr	r0, [r7, #20]
 800ab2a:	f002 fe7b 	bl	800d824 <USB_WritePacket>

    ep->xfer_buff  += len;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	691a      	ldr	r2, [r3, #16]
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	441a      	add	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6a1a      	ldr	r2, [r3, #32]
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	441a      	add	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	015a      	lsls	r2, r3, #5
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d809      	bhi.n	800ab70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6a1a      	ldr	r2, [r3, #32]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d203      	bcs.n	800ab70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1be      	bne.n	800aaee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	699a      	ldr	r2, [r3, #24]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d811      	bhi.n	800aba0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	f003 030f 	and.w	r3, r3, #15
 800ab82:	2201      	movs	r2, #1
 800ab84:	fa02 f303 	lsl.w	r3, r2, r3
 800ab88:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	43db      	mvns	r3, r3
 800ab96:	6939      	ldr	r1, [r7, #16]
 800ab98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3720      	adds	r7, #32
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
	...

0800abac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b088      	sub	sp, #32
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	333c      	adds	r3, #60	; 0x3c
 800abc4:	3304      	adds	r3, #4
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	015a      	lsls	r2, r3, #5
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	4413      	add	r3, r2
 800abd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d17b      	bne.n	800acda <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f003 0308 	and.w	r3, r3, #8
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d015      	beq.n	800ac18 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	4a61      	ldr	r2, [pc, #388]	; (800ad74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	f240 80b9 	bls.w	800ad68 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f000 80b3 	beq.w	800ad68 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac14:	6093      	str	r3, [r2, #8]
 800ac16:	e0a7      	b.n	800ad68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	f003 0320 	and.w	r3, r3, #32
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d009      	beq.n	800ac36 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	015a      	lsls	r2, r3, #5
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac2e:	461a      	mov	r2, r3
 800ac30:	2320      	movs	r3, #32
 800ac32:	6093      	str	r3, [r2, #8]
 800ac34:	e098      	b.n	800ad68 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f040 8093 	bne.w	800ad68 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	4a4b      	ldr	r2, [pc, #300]	; (800ad74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d90f      	bls.n	800ac6a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00a      	beq.n	800ac6a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	015a      	lsls	r2, r3, #5
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac60:	461a      	mov	r2, r3
 800ac62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac66:	6093      	str	r3, [r2, #8]
 800ac68:	e07e      	b.n	800ad68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	00db      	lsls	r3, r3, #3
 800ac70:	4413      	add	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	3304      	adds	r3, #4
 800ac7e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	69da      	ldr	r2, [r3, #28]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	0159      	lsls	r1, r3, #5
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	440b      	add	r3, r1
 800ac8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac96:	1ad2      	subs	r2, r2, r3
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d114      	bne.n	800accc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d109      	bne.n	800acbe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6818      	ldr	r0, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800acb4:	461a      	mov	r2, r3
 800acb6:	2101      	movs	r1, #1
 800acb8:	f003 f84a 	bl	800dd50 <USB_EP0_OutStart>
 800acbc:	e006      	b.n	800accc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	691a      	ldr	r2, [r3, #16]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6a1b      	ldr	r3, [r3, #32]
 800acc6:	441a      	add	r2, r3
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	4619      	mov	r1, r3
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f015 fcc8 	bl	8020668 <HAL_PCD_DataOutStageCallback>
 800acd8:	e046      	b.n	800ad68 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	4a26      	ldr	r2, [pc, #152]	; (800ad78 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d124      	bne.n	800ad2c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00a      	beq.n	800ad02 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	015a      	lsls	r2, r3, #5
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	4413      	add	r3, r2
 800acf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acf8:	461a      	mov	r2, r3
 800acfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acfe:	6093      	str	r3, [r2, #8]
 800ad00:	e032      	b.n	800ad68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	f003 0320 	and.w	r3, r3, #32
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d008      	beq.n	800ad1e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	015a      	lsls	r2, r3, #5
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	4413      	add	r3, r2
 800ad14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad18:	461a      	mov	r2, r3
 800ad1a:	2320      	movs	r3, #32
 800ad1c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f015 fc9f 	bl	8020668 <HAL_PCD_DataOutStageCallback>
 800ad2a:	e01d      	b.n	800ad68 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d114      	bne.n	800ad5c <PCD_EP_OutXfrComplete_int+0x1b0>
 800ad32:	6879      	ldr	r1, [r7, #4]
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	4613      	mov	r3, r2
 800ad38:	00db      	lsls	r3, r3, #3
 800ad3a:	4413      	add	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	440b      	add	r3, r1
 800ad40:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d108      	bne.n	800ad5c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6818      	ldr	r0, [r3, #0]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ad54:	461a      	mov	r2, r3
 800ad56:	2100      	movs	r1, #0
 800ad58:	f002 fffa 	bl	800dd50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	4619      	mov	r1, r3
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f015 fc80 	bl	8020668 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3720      	adds	r7, #32
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	4f54300a 	.word	0x4f54300a
 800ad78:	4f54310a 	.word	0x4f54310a

0800ad7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	333c      	adds	r3, #60	; 0x3c
 800ad94:	3304      	adds	r3, #4
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	015a      	lsls	r2, r3, #5
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	4413      	add	r3, r2
 800ada2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	4a15      	ldr	r2, [pc, #84]	; (800ae04 <PCD_EP_OutSetupPacket_int+0x88>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d90e      	bls.n	800add0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d009      	beq.n	800add0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	015a      	lsls	r2, r3, #5
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	4413      	add	r3, r2
 800adc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc8:	461a      	mov	r2, r3
 800adca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f015 fc37 	bl	8020644 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	4a0a      	ldr	r2, [pc, #40]	; (800ae04 <PCD_EP_OutSetupPacket_int+0x88>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d90c      	bls.n	800adf8 <PCD_EP_OutSetupPacket_int+0x7c>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d108      	bne.n	800adf8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6818      	ldr	r0, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800adf0:	461a      	mov	r2, r3
 800adf2:	2101      	movs	r1, #1
 800adf4:	f002 ffac 	bl	800dd50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3718      	adds	r7, #24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	4f54300a 	.word	0x4f54300a

0800ae08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70fb      	strb	r3, [r7, #3]
 800ae14:	4613      	mov	r3, r2
 800ae16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800ae20:	78fb      	ldrb	r3, [r7, #3]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d107      	bne.n	800ae36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ae26:	883b      	ldrh	r3, [r7, #0]
 800ae28:	0419      	lsls	r1, r3, #16
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	430a      	orrs	r2, r1
 800ae32:	629a      	str	r2, [r3, #40]	; 0x28
 800ae34:	e028      	b.n	800ae88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3c:	0c1b      	lsrs	r3, r3, #16
 800ae3e:	68ba      	ldr	r2, [r7, #8]
 800ae40:	4413      	add	r3, r2
 800ae42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ae44:	2300      	movs	r3, #0
 800ae46:	73fb      	strb	r3, [r7, #15]
 800ae48:	e00d      	b.n	800ae66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
 800ae50:	3340      	adds	r3, #64	; 0x40
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4413      	add	r3, r2
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	0c1b      	lsrs	r3, r3, #16
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	3301      	adds	r3, #1
 800ae64:	73fb      	strb	r3, [r7, #15]
 800ae66:	7bfa      	ldrb	r2, [r7, #15]
 800ae68:	78fb      	ldrb	r3, [r7, #3]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d3ec      	bcc.n	800ae4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ae70:	883b      	ldrh	r3, [r7, #0]
 800ae72:	0418      	lsls	r0, r3, #16
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6819      	ldr	r1, [r3, #0]
 800ae78:	78fb      	ldrb	r3, [r7, #3]
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	4302      	orrs	r2, r0
 800ae80:	3340      	adds	r3, #64	; 0x40
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	440b      	add	r3, r1
 800ae86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b083      	sub	sp, #12
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	887a      	ldrh	r2, [r7, #2]
 800aea8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e267      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f003 0301 	and.w	r3, r3, #1
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d075      	beq.n	800afda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aeee:	4b88      	ldr	r3, [pc, #544]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	f003 030c 	and.w	r3, r3, #12
 800aef6:	2b04      	cmp	r3, #4
 800aef8:	d00c      	beq.n	800af14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aefa:	4b85      	ldr	r3, [pc, #532]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800af02:	2b08      	cmp	r3, #8
 800af04:	d112      	bne.n	800af2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af06:	4b82      	ldr	r3, [pc, #520]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af12:	d10b      	bne.n	800af2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af14:	4b7e      	ldr	r3, [pc, #504]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d05b      	beq.n	800afd8 <HAL_RCC_OscConfig+0x108>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d157      	bne.n	800afd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e242      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af34:	d106      	bne.n	800af44 <HAL_RCC_OscConfig+0x74>
 800af36:	4b76      	ldr	r3, [pc, #472]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a75      	ldr	r2, [pc, #468]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800af3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af40:	6013      	str	r3, [r2, #0]
 800af42:	e01d      	b.n	800af80 <HAL_RCC_OscConfig+0xb0>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af4c:	d10c      	bne.n	800af68 <HAL_RCC_OscConfig+0x98>
 800af4e:	4b70      	ldr	r3, [pc, #448]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a6f      	ldr	r2, [pc, #444]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800af54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af58:	6013      	str	r3, [r2, #0]
 800af5a:	4b6d      	ldr	r3, [pc, #436]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a6c      	ldr	r2, [pc, #432]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800af60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	e00b      	b.n	800af80 <HAL_RCC_OscConfig+0xb0>
 800af68:	4b69      	ldr	r3, [pc, #420]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a68      	ldr	r2, [pc, #416]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800af6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af72:	6013      	str	r3, [r2, #0]
 800af74:	4b66      	ldr	r3, [pc, #408]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a65      	ldr	r2, [pc, #404]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800af7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d013      	beq.n	800afb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af88:	f7fe f9de 	bl	8009348 <HAL_GetTick>
 800af8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af8e:	e008      	b.n	800afa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af90:	f7fe f9da 	bl	8009348 <HAL_GetTick>
 800af94:	4602      	mov	r2, r0
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	2b64      	cmp	r3, #100	; 0x64
 800af9c:	d901      	bls.n	800afa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e207      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afa2:	4b5b      	ldr	r3, [pc, #364]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0f0      	beq.n	800af90 <HAL_RCC_OscConfig+0xc0>
 800afae:	e014      	b.n	800afda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afb0:	f7fe f9ca 	bl	8009348 <HAL_GetTick>
 800afb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afb6:	e008      	b.n	800afca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800afb8:	f7fe f9c6 	bl	8009348 <HAL_GetTick>
 800afbc:	4602      	mov	r2, r0
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	1ad3      	subs	r3, r2, r3
 800afc2:	2b64      	cmp	r3, #100	; 0x64
 800afc4:	d901      	bls.n	800afca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800afc6:	2303      	movs	r3, #3
 800afc8:	e1f3      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afca:	4b51      	ldr	r3, [pc, #324]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1f0      	bne.n	800afb8 <HAL_RCC_OscConfig+0xe8>
 800afd6:	e000      	b.n	800afda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 0302 	and.w	r3, r3, #2
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d063      	beq.n	800b0ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800afe6:	4b4a      	ldr	r3, [pc, #296]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	f003 030c 	and.w	r3, r3, #12
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00b      	beq.n	800b00a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aff2:	4b47      	ldr	r3, [pc, #284]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800affa:	2b08      	cmp	r3, #8
 800affc:	d11c      	bne.n	800b038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800affe:	4b44      	ldr	r3, [pc, #272]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b006:	2b00      	cmp	r3, #0
 800b008:	d116      	bne.n	800b038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b00a:	4b41      	ldr	r3, [pc, #260]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0302 	and.w	r3, r3, #2
 800b012:	2b00      	cmp	r3, #0
 800b014:	d005      	beq.n	800b022 <HAL_RCC_OscConfig+0x152>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d001      	beq.n	800b022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	e1c7      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b022:	4b3b      	ldr	r3, [pc, #236]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	00db      	lsls	r3, r3, #3
 800b030:	4937      	ldr	r1, [pc, #220]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800b032:	4313      	orrs	r3, r2
 800b034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b036:	e03a      	b.n	800b0ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d020      	beq.n	800b082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b040:	4b34      	ldr	r3, [pc, #208]	; (800b114 <HAL_RCC_OscConfig+0x244>)
 800b042:	2201      	movs	r2, #1
 800b044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b046:	f7fe f97f 	bl	8009348 <HAL_GetTick>
 800b04a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b04c:	e008      	b.n	800b060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b04e:	f7fe f97b 	bl	8009348 <HAL_GetTick>
 800b052:	4602      	mov	r2, r0
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d901      	bls.n	800b060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e1a8      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b060:	4b2b      	ldr	r3, [pc, #172]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 0302 	and.w	r3, r3, #2
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d0f0      	beq.n	800b04e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b06c:	4b28      	ldr	r3, [pc, #160]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	00db      	lsls	r3, r3, #3
 800b07a:	4925      	ldr	r1, [pc, #148]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800b07c:	4313      	orrs	r3, r2
 800b07e:	600b      	str	r3, [r1, #0]
 800b080:	e015      	b.n	800b0ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b082:	4b24      	ldr	r3, [pc, #144]	; (800b114 <HAL_RCC_OscConfig+0x244>)
 800b084:	2200      	movs	r2, #0
 800b086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b088:	f7fe f95e 	bl	8009348 <HAL_GetTick>
 800b08c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b08e:	e008      	b.n	800b0a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b090:	f7fe f95a 	bl	8009348 <HAL_GetTick>
 800b094:	4602      	mov	r2, r0
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d901      	bls.n	800b0a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e187      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0a2:	4b1b      	ldr	r3, [pc, #108]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 0302 	and.w	r3, r3, #2
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1f0      	bne.n	800b090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 0308 	and.w	r3, r3, #8
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d036      	beq.n	800b128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	695b      	ldr	r3, [r3, #20]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d016      	beq.n	800b0f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b0c2:	4b15      	ldr	r3, [pc, #84]	; (800b118 <HAL_RCC_OscConfig+0x248>)
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0c8:	f7fe f93e 	bl	8009348 <HAL_GetTick>
 800b0cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0ce:	e008      	b.n	800b0e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b0d0:	f7fe f93a 	bl	8009348 <HAL_GetTick>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d901      	bls.n	800b0e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e167      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0e2:	4b0b      	ldr	r3, [pc, #44]	; (800b110 <HAL_RCC_OscConfig+0x240>)
 800b0e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0e6:	f003 0302 	and.w	r3, r3, #2
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0f0      	beq.n	800b0d0 <HAL_RCC_OscConfig+0x200>
 800b0ee:	e01b      	b.n	800b128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0f0:	4b09      	ldr	r3, [pc, #36]	; (800b118 <HAL_RCC_OscConfig+0x248>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0f6:	f7fe f927 	bl	8009348 <HAL_GetTick>
 800b0fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0fc:	e00e      	b.n	800b11c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b0fe:	f7fe f923 	bl	8009348 <HAL_GetTick>
 800b102:	4602      	mov	r2, r0
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d907      	bls.n	800b11c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b10c:	2303      	movs	r3, #3
 800b10e:	e150      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
 800b110:	40023800 	.word	0x40023800
 800b114:	42470000 	.word	0x42470000
 800b118:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b11c:	4b88      	ldr	r3, [pc, #544]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b11e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b120:	f003 0302 	and.w	r3, r3, #2
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1ea      	bne.n	800b0fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 0304 	and.w	r3, r3, #4
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 8097 	beq.w	800b264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b136:	2300      	movs	r3, #0
 800b138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b13a:	4b81      	ldr	r3, [pc, #516]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b142:	2b00      	cmp	r3, #0
 800b144:	d10f      	bne.n	800b166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b146:	2300      	movs	r3, #0
 800b148:	60bb      	str	r3, [r7, #8]
 800b14a:	4b7d      	ldr	r3, [pc, #500]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14e:	4a7c      	ldr	r2, [pc, #496]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b154:	6413      	str	r3, [r2, #64]	; 0x40
 800b156:	4b7a      	ldr	r3, [pc, #488]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b15e:	60bb      	str	r3, [r7, #8]
 800b160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b162:	2301      	movs	r3, #1
 800b164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b166:	4b77      	ldr	r3, [pc, #476]	; (800b344 <HAL_RCC_OscConfig+0x474>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d118      	bne.n	800b1a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b172:	4b74      	ldr	r3, [pc, #464]	; (800b344 <HAL_RCC_OscConfig+0x474>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a73      	ldr	r2, [pc, #460]	; (800b344 <HAL_RCC_OscConfig+0x474>)
 800b178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b17c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b17e:	f7fe f8e3 	bl	8009348 <HAL_GetTick>
 800b182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b184:	e008      	b.n	800b198 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b186:	f7fe f8df 	bl	8009348 <HAL_GetTick>
 800b18a:	4602      	mov	r2, r0
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	2b02      	cmp	r3, #2
 800b192:	d901      	bls.n	800b198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b194:	2303      	movs	r3, #3
 800b196:	e10c      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b198:	4b6a      	ldr	r3, [pc, #424]	; (800b344 <HAL_RCC_OscConfig+0x474>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d0f0      	beq.n	800b186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d106      	bne.n	800b1ba <HAL_RCC_OscConfig+0x2ea>
 800b1ac:	4b64      	ldr	r3, [pc, #400]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1b0:	4a63      	ldr	r2, [pc, #396]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b1b2:	f043 0301 	orr.w	r3, r3, #1
 800b1b6:	6713      	str	r3, [r2, #112]	; 0x70
 800b1b8:	e01c      	b.n	800b1f4 <HAL_RCC_OscConfig+0x324>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	2b05      	cmp	r3, #5
 800b1c0:	d10c      	bne.n	800b1dc <HAL_RCC_OscConfig+0x30c>
 800b1c2:	4b5f      	ldr	r3, [pc, #380]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c6:	4a5e      	ldr	r2, [pc, #376]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b1c8:	f043 0304 	orr.w	r3, r3, #4
 800b1cc:	6713      	str	r3, [r2, #112]	; 0x70
 800b1ce:	4b5c      	ldr	r3, [pc, #368]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d2:	4a5b      	ldr	r2, [pc, #364]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b1d4:	f043 0301 	orr.w	r3, r3, #1
 800b1d8:	6713      	str	r3, [r2, #112]	; 0x70
 800b1da:	e00b      	b.n	800b1f4 <HAL_RCC_OscConfig+0x324>
 800b1dc:	4b58      	ldr	r3, [pc, #352]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b1de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e0:	4a57      	ldr	r2, [pc, #348]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b1e2:	f023 0301 	bic.w	r3, r3, #1
 800b1e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b1e8:	4b55      	ldr	r3, [pc, #340]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b1ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ec:	4a54      	ldr	r2, [pc, #336]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b1ee:	f023 0304 	bic.w	r3, r3, #4
 800b1f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d015      	beq.n	800b228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1fc:	f7fe f8a4 	bl	8009348 <HAL_GetTick>
 800b200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b202:	e00a      	b.n	800b21a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b204:	f7fe f8a0 	bl	8009348 <HAL_GetTick>
 800b208:	4602      	mov	r2, r0
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b212:	4293      	cmp	r3, r2
 800b214:	d901      	bls.n	800b21a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b216:	2303      	movs	r3, #3
 800b218:	e0cb      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b21a:	4b49      	ldr	r3, [pc, #292]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b21e:	f003 0302 	and.w	r3, r3, #2
 800b222:	2b00      	cmp	r3, #0
 800b224:	d0ee      	beq.n	800b204 <HAL_RCC_OscConfig+0x334>
 800b226:	e014      	b.n	800b252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b228:	f7fe f88e 	bl	8009348 <HAL_GetTick>
 800b22c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b22e:	e00a      	b.n	800b246 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b230:	f7fe f88a 	bl	8009348 <HAL_GetTick>
 800b234:	4602      	mov	r2, r0
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b23e:	4293      	cmp	r3, r2
 800b240:	d901      	bls.n	800b246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b242:	2303      	movs	r3, #3
 800b244:	e0b5      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b246:	4b3e      	ldr	r3, [pc, #248]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b24a:	f003 0302 	and.w	r3, r3, #2
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1ee      	bne.n	800b230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b252:	7dfb      	ldrb	r3, [r7, #23]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d105      	bne.n	800b264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b258:	4b39      	ldr	r3, [pc, #228]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25c:	4a38      	ldr	r2, [pc, #224]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b25e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b262:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	699b      	ldr	r3, [r3, #24]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f000 80a1 	beq.w	800b3b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b26e:	4b34      	ldr	r3, [pc, #208]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	f003 030c 	and.w	r3, r3, #12
 800b276:	2b08      	cmp	r3, #8
 800b278:	d05c      	beq.n	800b334 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	2b02      	cmp	r3, #2
 800b280:	d141      	bne.n	800b306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b282:	4b31      	ldr	r3, [pc, #196]	; (800b348 <HAL_RCC_OscConfig+0x478>)
 800b284:	2200      	movs	r2, #0
 800b286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b288:	f7fe f85e 	bl	8009348 <HAL_GetTick>
 800b28c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b28e:	e008      	b.n	800b2a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b290:	f7fe f85a 	bl	8009348 <HAL_GetTick>
 800b294:	4602      	mov	r2, r0
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d901      	bls.n	800b2a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e087      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2a2:	4b27      	ldr	r3, [pc, #156]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1f0      	bne.n	800b290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	69da      	ldr	r2, [r3, #28]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6a1b      	ldr	r3, [r3, #32]
 800b2b6:	431a      	orrs	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	019b      	lsls	r3, r3, #6
 800b2be:	431a      	orrs	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c4:	085b      	lsrs	r3, r3, #1
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	041b      	lsls	r3, r3, #16
 800b2ca:	431a      	orrs	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	061b      	lsls	r3, r3, #24
 800b2d2:	491b      	ldr	r1, [pc, #108]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b2d8:	4b1b      	ldr	r3, [pc, #108]	; (800b348 <HAL_RCC_OscConfig+0x478>)
 800b2da:	2201      	movs	r2, #1
 800b2dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2de:	f7fe f833 	bl	8009348 <HAL_GetTick>
 800b2e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2e4:	e008      	b.n	800b2f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2e6:	f7fe f82f 	bl	8009348 <HAL_GetTick>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d901      	bls.n	800b2f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	e05c      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2f8:	4b11      	ldr	r3, [pc, #68]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d0f0      	beq.n	800b2e6 <HAL_RCC_OscConfig+0x416>
 800b304:	e054      	b.n	800b3b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b306:	4b10      	ldr	r3, [pc, #64]	; (800b348 <HAL_RCC_OscConfig+0x478>)
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b30c:	f7fe f81c 	bl	8009348 <HAL_GetTick>
 800b310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b312:	e008      	b.n	800b326 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b314:	f7fe f818 	bl	8009348 <HAL_GetTick>
 800b318:	4602      	mov	r2, r0
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d901      	bls.n	800b326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b322:	2303      	movs	r3, #3
 800b324:	e045      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b326:	4b06      	ldr	r3, [pc, #24]	; (800b340 <HAL_RCC_OscConfig+0x470>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1f0      	bne.n	800b314 <HAL_RCC_OscConfig+0x444>
 800b332:	e03d      	b.n	800b3b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	699b      	ldr	r3, [r3, #24]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d107      	bne.n	800b34c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e038      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
 800b340:	40023800 	.word	0x40023800
 800b344:	40007000 	.word	0x40007000
 800b348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b34c:	4b1b      	ldr	r3, [pc, #108]	; (800b3bc <HAL_RCC_OscConfig+0x4ec>)
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	2b01      	cmp	r3, #1
 800b358:	d028      	beq.n	800b3ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b364:	429a      	cmp	r2, r3
 800b366:	d121      	bne.n	800b3ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b372:	429a      	cmp	r2, r3
 800b374:	d11a      	bne.n	800b3ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b37c:	4013      	ands	r3, r2
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b384:	4293      	cmp	r3, r2
 800b386:	d111      	bne.n	800b3ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	3b01      	subs	r3, #1
 800b396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b398:	429a      	cmp	r2, r3
 800b39a:	d107      	bne.n	800b3ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d001      	beq.n	800b3b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e000      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	40023800 	.word	0x40023800

0800b3c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e0cc      	b.n	800b56e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b3d4:	4b68      	ldr	r3, [pc, #416]	; (800b578 <HAL_RCC_ClockConfig+0x1b8>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f003 0307 	and.w	r3, r3, #7
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d90c      	bls.n	800b3fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3e2:	4b65      	ldr	r3, [pc, #404]	; (800b578 <HAL_RCC_ClockConfig+0x1b8>)
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	b2d2      	uxtb	r2, r2
 800b3e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3ea:	4b63      	ldr	r3, [pc, #396]	; (800b578 <HAL_RCC_ClockConfig+0x1b8>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f003 0307 	and.w	r3, r3, #7
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d001      	beq.n	800b3fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e0b8      	b.n	800b56e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 0302 	and.w	r3, r3, #2
 800b404:	2b00      	cmp	r3, #0
 800b406:	d020      	beq.n	800b44a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f003 0304 	and.w	r3, r3, #4
 800b410:	2b00      	cmp	r3, #0
 800b412:	d005      	beq.n	800b420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b414:	4b59      	ldr	r3, [pc, #356]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	4a58      	ldr	r2, [pc, #352]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b41a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b41e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 0308 	and.w	r3, r3, #8
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d005      	beq.n	800b438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b42c:	4b53      	ldr	r3, [pc, #332]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	4a52      	ldr	r2, [pc, #328]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b438:	4b50      	ldr	r3, [pc, #320]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	494d      	ldr	r1, [pc, #308]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b446:	4313      	orrs	r3, r2
 800b448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	2b00      	cmp	r3, #0
 800b454:	d044      	beq.n	800b4e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d107      	bne.n	800b46e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b45e:	4b47      	ldr	r3, [pc, #284]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b466:	2b00      	cmp	r3, #0
 800b468:	d119      	bne.n	800b49e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e07f      	b.n	800b56e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	2b02      	cmp	r3, #2
 800b474:	d003      	beq.n	800b47e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d107      	bne.n	800b48e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b47e:	4b3f      	ldr	r3, [pc, #252]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d109      	bne.n	800b49e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e06f      	b.n	800b56e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b48e:	4b3b      	ldr	r3, [pc, #236]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f003 0302 	and.w	r3, r3, #2
 800b496:	2b00      	cmp	r3, #0
 800b498:	d101      	bne.n	800b49e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e067      	b.n	800b56e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b49e:	4b37      	ldr	r3, [pc, #220]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	f023 0203 	bic.w	r2, r3, #3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	4934      	ldr	r1, [pc, #208]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b4b0:	f7fd ff4a 	bl	8009348 <HAL_GetTick>
 800b4b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4b6:	e00a      	b.n	800b4ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4b8:	f7fd ff46 	bl	8009348 <HAL_GetTick>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d901      	bls.n	800b4ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b4ca:	2303      	movs	r3, #3
 800b4cc:	e04f      	b.n	800b56e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4ce:	4b2b      	ldr	r3, [pc, #172]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f003 020c 	and.w	r2, r3, #12
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d1eb      	bne.n	800b4b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b4e0:	4b25      	ldr	r3, [pc, #148]	; (800b578 <HAL_RCC_ClockConfig+0x1b8>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 0307 	and.w	r3, r3, #7
 800b4e8:	683a      	ldr	r2, [r7, #0]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d20c      	bcs.n	800b508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4ee:	4b22      	ldr	r3, [pc, #136]	; (800b578 <HAL_RCC_ClockConfig+0x1b8>)
 800b4f0:	683a      	ldr	r2, [r7, #0]
 800b4f2:	b2d2      	uxtb	r2, r2
 800b4f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4f6:	4b20      	ldr	r3, [pc, #128]	; (800b578 <HAL_RCC_ClockConfig+0x1b8>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 0307 	and.w	r3, r3, #7
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	429a      	cmp	r2, r3
 800b502:	d001      	beq.n	800b508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	e032      	b.n	800b56e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0304 	and.w	r3, r3, #4
 800b510:	2b00      	cmp	r3, #0
 800b512:	d008      	beq.n	800b526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b514:	4b19      	ldr	r3, [pc, #100]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	4916      	ldr	r1, [pc, #88]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b522:	4313      	orrs	r3, r2
 800b524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f003 0308 	and.w	r3, r3, #8
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d009      	beq.n	800b546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b532:	4b12      	ldr	r3, [pc, #72]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	691b      	ldr	r3, [r3, #16]
 800b53e:	00db      	lsls	r3, r3, #3
 800b540:	490e      	ldr	r1, [pc, #56]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b542:	4313      	orrs	r3, r2
 800b544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b546:	f000 f821 	bl	800b58c <HAL_RCC_GetSysClockFreq>
 800b54a:	4602      	mov	r2, r0
 800b54c:	4b0b      	ldr	r3, [pc, #44]	; (800b57c <HAL_RCC_ClockConfig+0x1bc>)
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	091b      	lsrs	r3, r3, #4
 800b552:	f003 030f 	and.w	r3, r3, #15
 800b556:	490a      	ldr	r1, [pc, #40]	; (800b580 <HAL_RCC_ClockConfig+0x1c0>)
 800b558:	5ccb      	ldrb	r3, [r1, r3]
 800b55a:	fa22 f303 	lsr.w	r3, r2, r3
 800b55e:	4a09      	ldr	r2, [pc, #36]	; (800b584 <HAL_RCC_ClockConfig+0x1c4>)
 800b560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b562:	4b09      	ldr	r3, [pc, #36]	; (800b588 <HAL_RCC_ClockConfig+0x1c8>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4618      	mov	r0, r3
 800b568:	f7fd feaa 	bl	80092c0 <HAL_InitTick>

  return HAL_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	40023c00 	.word	0x40023c00
 800b57c:	40023800 	.word	0x40023800
 800b580:	080296b4 	.word	0x080296b4
 800b584:	20000070 	.word	0x20000070
 800b588:	20000074 	.word	0x20000074

0800b58c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b58c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b590:	b094      	sub	sp, #80	; 0x50
 800b592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b594:	2300      	movs	r3, #0
 800b596:	647b      	str	r3, [r7, #68]	; 0x44
 800b598:	2300      	movs	r3, #0
 800b59a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b59c:	2300      	movs	r3, #0
 800b59e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5a4:	4b79      	ldr	r3, [pc, #484]	; (800b78c <HAL_RCC_GetSysClockFreq+0x200>)
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	f003 030c 	and.w	r3, r3, #12
 800b5ac:	2b08      	cmp	r3, #8
 800b5ae:	d00d      	beq.n	800b5cc <HAL_RCC_GetSysClockFreq+0x40>
 800b5b0:	2b08      	cmp	r3, #8
 800b5b2:	f200 80e1 	bhi.w	800b778 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d002      	beq.n	800b5c0 <HAL_RCC_GetSysClockFreq+0x34>
 800b5ba:	2b04      	cmp	r3, #4
 800b5bc:	d003      	beq.n	800b5c6 <HAL_RCC_GetSysClockFreq+0x3a>
 800b5be:	e0db      	b.n	800b778 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b5c0:	4b73      	ldr	r3, [pc, #460]	; (800b790 <HAL_RCC_GetSysClockFreq+0x204>)
 800b5c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b5c4:	e0db      	b.n	800b77e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b5c6:	4b73      	ldr	r3, [pc, #460]	; (800b794 <HAL_RCC_GetSysClockFreq+0x208>)
 800b5c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b5ca:	e0d8      	b.n	800b77e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b5cc:	4b6f      	ldr	r3, [pc, #444]	; (800b78c <HAL_RCC_GetSysClockFreq+0x200>)
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b5d6:	4b6d      	ldr	r3, [pc, #436]	; (800b78c <HAL_RCC_GetSysClockFreq+0x200>)
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d063      	beq.n	800b6aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5e2:	4b6a      	ldr	r3, [pc, #424]	; (800b78c <HAL_RCC_GetSysClockFreq+0x200>)
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	099b      	lsrs	r3, r3, #6
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f4:	633b      	str	r3, [r7, #48]	; 0x30
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b5fe:	4622      	mov	r2, r4
 800b600:	462b      	mov	r3, r5
 800b602:	f04f 0000 	mov.w	r0, #0
 800b606:	f04f 0100 	mov.w	r1, #0
 800b60a:	0159      	lsls	r1, r3, #5
 800b60c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b610:	0150      	lsls	r0, r2, #5
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	4621      	mov	r1, r4
 800b618:	1a51      	subs	r1, r2, r1
 800b61a:	6139      	str	r1, [r7, #16]
 800b61c:	4629      	mov	r1, r5
 800b61e:	eb63 0301 	sbc.w	r3, r3, r1
 800b622:	617b      	str	r3, [r7, #20]
 800b624:	f04f 0200 	mov.w	r2, #0
 800b628:	f04f 0300 	mov.w	r3, #0
 800b62c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b630:	4659      	mov	r1, fp
 800b632:	018b      	lsls	r3, r1, #6
 800b634:	4651      	mov	r1, sl
 800b636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b63a:	4651      	mov	r1, sl
 800b63c:	018a      	lsls	r2, r1, #6
 800b63e:	4651      	mov	r1, sl
 800b640:	ebb2 0801 	subs.w	r8, r2, r1
 800b644:	4659      	mov	r1, fp
 800b646:	eb63 0901 	sbc.w	r9, r3, r1
 800b64a:	f04f 0200 	mov.w	r2, #0
 800b64e:	f04f 0300 	mov.w	r3, #0
 800b652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b65a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b65e:	4690      	mov	r8, r2
 800b660:	4699      	mov	r9, r3
 800b662:	4623      	mov	r3, r4
 800b664:	eb18 0303 	adds.w	r3, r8, r3
 800b668:	60bb      	str	r3, [r7, #8]
 800b66a:	462b      	mov	r3, r5
 800b66c:	eb49 0303 	adc.w	r3, r9, r3
 800b670:	60fb      	str	r3, [r7, #12]
 800b672:	f04f 0200 	mov.w	r2, #0
 800b676:	f04f 0300 	mov.w	r3, #0
 800b67a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b67e:	4629      	mov	r1, r5
 800b680:	024b      	lsls	r3, r1, #9
 800b682:	4621      	mov	r1, r4
 800b684:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b688:	4621      	mov	r1, r4
 800b68a:	024a      	lsls	r2, r1, #9
 800b68c:	4610      	mov	r0, r2
 800b68e:	4619      	mov	r1, r3
 800b690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b692:	2200      	movs	r2, #0
 800b694:	62bb      	str	r3, [r7, #40]	; 0x28
 800b696:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b69c:	f7f5 fb4e 	bl	8000d3c <__aeabi_uldivmod>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6a8:	e058      	b.n	800b75c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6aa:	4b38      	ldr	r3, [pc, #224]	; (800b78c <HAL_RCC_GetSysClockFreq+0x200>)
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	099b      	lsrs	r3, r3, #6
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	4611      	mov	r1, r2
 800b6b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b6ba:	623b      	str	r3, [r7, #32]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	627b      	str	r3, [r7, #36]	; 0x24
 800b6c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b6c4:	4642      	mov	r2, r8
 800b6c6:	464b      	mov	r3, r9
 800b6c8:	f04f 0000 	mov.w	r0, #0
 800b6cc:	f04f 0100 	mov.w	r1, #0
 800b6d0:	0159      	lsls	r1, r3, #5
 800b6d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b6d6:	0150      	lsls	r0, r2, #5
 800b6d8:	4602      	mov	r2, r0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4641      	mov	r1, r8
 800b6de:	ebb2 0a01 	subs.w	sl, r2, r1
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	eb63 0b01 	sbc.w	fp, r3, r1
 800b6e8:	f04f 0200 	mov.w	r2, #0
 800b6ec:	f04f 0300 	mov.w	r3, #0
 800b6f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b6f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b6f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b6fc:	ebb2 040a 	subs.w	r4, r2, sl
 800b700:	eb63 050b 	sbc.w	r5, r3, fp
 800b704:	f04f 0200 	mov.w	r2, #0
 800b708:	f04f 0300 	mov.w	r3, #0
 800b70c:	00eb      	lsls	r3, r5, #3
 800b70e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b712:	00e2      	lsls	r2, r4, #3
 800b714:	4614      	mov	r4, r2
 800b716:	461d      	mov	r5, r3
 800b718:	4643      	mov	r3, r8
 800b71a:	18e3      	adds	r3, r4, r3
 800b71c:	603b      	str	r3, [r7, #0]
 800b71e:	464b      	mov	r3, r9
 800b720:	eb45 0303 	adc.w	r3, r5, r3
 800b724:	607b      	str	r3, [r7, #4]
 800b726:	f04f 0200 	mov.w	r2, #0
 800b72a:	f04f 0300 	mov.w	r3, #0
 800b72e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b732:	4629      	mov	r1, r5
 800b734:	028b      	lsls	r3, r1, #10
 800b736:	4621      	mov	r1, r4
 800b738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b73c:	4621      	mov	r1, r4
 800b73e:	028a      	lsls	r2, r1, #10
 800b740:	4610      	mov	r0, r2
 800b742:	4619      	mov	r1, r3
 800b744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b746:	2200      	movs	r2, #0
 800b748:	61bb      	str	r3, [r7, #24]
 800b74a:	61fa      	str	r2, [r7, #28]
 800b74c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b750:	f7f5 faf4 	bl	8000d3c <__aeabi_uldivmod>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	4613      	mov	r3, r2
 800b75a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b75c:	4b0b      	ldr	r3, [pc, #44]	; (800b78c <HAL_RCC_GetSysClockFreq+0x200>)
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	0c1b      	lsrs	r3, r3, #16
 800b762:	f003 0303 	and.w	r3, r3, #3
 800b766:	3301      	adds	r3, #1
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b76c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b76e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b770:	fbb2 f3f3 	udiv	r3, r2, r3
 800b774:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b776:	e002      	b.n	800b77e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b778:	4b05      	ldr	r3, [pc, #20]	; (800b790 <HAL_RCC_GetSysClockFreq+0x204>)
 800b77a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b77c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b77e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b780:	4618      	mov	r0, r3
 800b782:	3750      	adds	r7, #80	; 0x50
 800b784:	46bd      	mov	sp, r7
 800b786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b78a:	bf00      	nop
 800b78c:	40023800 	.word	0x40023800
 800b790:	00f42400 	.word	0x00f42400
 800b794:	007a1200 	.word	0x007a1200

0800b798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b798:	b480      	push	{r7}
 800b79a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b79c:	4b03      	ldr	r3, [pc, #12]	; (800b7ac <HAL_RCC_GetHCLKFreq+0x14>)
 800b79e:	681b      	ldr	r3, [r3, #0]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	20000070 	.word	0x20000070

0800b7b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d101      	bne.n	800b7c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e07b      	b.n	800b8ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d108      	bne.n	800b7dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7d2:	d009      	beq.n	800b7e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	61da      	str	r2, [r3, #28]
 800b7da:	e005      	b.n	800b7e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d106      	bne.n	800b808 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f7fd fb8c 	bl	8008f20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2202      	movs	r2, #2
 800b80c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b81e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b830:	431a      	orrs	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b83a:	431a      	orrs	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	f003 0302 	and.w	r3, r3, #2
 800b844:	431a      	orrs	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	431a      	orrs	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b858:	431a      	orrs	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	69db      	ldr	r3, [r3, #28]
 800b85e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b862:	431a      	orrs	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a1b      	ldr	r3, [r3, #32]
 800b868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b86c:	ea42 0103 	orr.w	r1, r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b874:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	430a      	orrs	r2, r1
 800b87e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	0c1b      	lsrs	r3, r3, #16
 800b886:	f003 0104 	and.w	r1, r3, #4
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88e:	f003 0210 	and.w	r2, r3, #16
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	430a      	orrs	r2, r1
 800b898:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	69da      	ldr	r2, [r3, #28]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b088      	sub	sp, #32
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	60f8      	str	r0, [r7, #12]
 800b8ca:	60b9      	str	r1, [r7, #8]
 800b8cc:	603b      	str	r3, [r7, #0]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d101      	bne.n	800b8e4 <HAL_SPI_Transmit+0x22>
 800b8e0:	2302      	movs	r3, #2
 800b8e2:	e126      	b.n	800bb32 <HAL_SPI_Transmit+0x270>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8ec:	f7fd fd2c 	bl	8009348 <HAL_GetTick>
 800b8f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b8f2:	88fb      	ldrh	r3, [r7, #6]
 800b8f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d002      	beq.n	800b908 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b902:	2302      	movs	r3, #2
 800b904:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b906:	e10b      	b.n	800bb20 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d002      	beq.n	800b914 <HAL_SPI_Transmit+0x52>
 800b90e:	88fb      	ldrh	r3, [r7, #6]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d102      	bne.n	800b91a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b914:	2301      	movs	r3, #1
 800b916:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b918:	e102      	b.n	800bb20 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2203      	movs	r2, #3
 800b91e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2200      	movs	r2, #0
 800b926:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	88fa      	ldrh	r2, [r7, #6]
 800b932:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	88fa      	ldrh	r2, [r7, #6]
 800b938:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b960:	d10f      	bne.n	800b982 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b970:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b980:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b98c:	2b40      	cmp	r3, #64	; 0x40
 800b98e:	d007      	beq.n	800b9a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b99e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9a8:	d14b      	bne.n	800ba42 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <HAL_SPI_Transmit+0xf6>
 800b9b2:	8afb      	ldrh	r3, [r7, #22]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d13e      	bne.n	800ba36 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9bc:	881a      	ldrh	r2, [r3, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c8:	1c9a      	adds	r2, r3, #2
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b9dc:	e02b      	b.n	800ba36 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	f003 0302 	and.w	r3, r3, #2
 800b9e8:	2b02      	cmp	r3, #2
 800b9ea:	d112      	bne.n	800ba12 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f0:	881a      	ldrh	r2, [r3, #0]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9fc:	1c9a      	adds	r2, r3, #2
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	86da      	strh	r2, [r3, #54]	; 0x36
 800ba10:	e011      	b.n	800ba36 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba12:	f7fd fc99 	bl	8009348 <HAL_GetTick>
 800ba16:	4602      	mov	r2, r0
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	683a      	ldr	r2, [r7, #0]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d803      	bhi.n	800ba2a <HAL_SPI_Transmit+0x168>
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba28:	d102      	bne.n	800ba30 <HAL_SPI_Transmit+0x16e>
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d102      	bne.n	800ba36 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ba30:	2303      	movs	r3, #3
 800ba32:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ba34:	e074      	b.n	800bb20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1ce      	bne.n	800b9de <HAL_SPI_Transmit+0x11c>
 800ba40:	e04c      	b.n	800badc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d002      	beq.n	800ba50 <HAL_SPI_Transmit+0x18e>
 800ba4a:	8afb      	ldrh	r3, [r7, #22]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d140      	bne.n	800bad2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	330c      	adds	r3, #12
 800ba5a:	7812      	ldrb	r2, [r2, #0]
 800ba5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba62:	1c5a      	adds	r2, r3, #1
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ba76:	e02c      	b.n	800bad2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f003 0302 	and.w	r3, r3, #2
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d113      	bne.n	800baae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	330c      	adds	r3, #12
 800ba90:	7812      	ldrb	r2, [r2, #0]
 800ba92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba98:	1c5a      	adds	r2, r3, #1
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	3b01      	subs	r3, #1
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	86da      	strh	r2, [r3, #54]	; 0x36
 800baac:	e011      	b.n	800bad2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800baae:	f7fd fc4b 	bl	8009348 <HAL_GetTick>
 800bab2:	4602      	mov	r2, r0
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	1ad3      	subs	r3, r2, r3
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	429a      	cmp	r2, r3
 800babc:	d803      	bhi.n	800bac6 <HAL_SPI_Transmit+0x204>
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac4:	d102      	bne.n	800bacc <HAL_SPI_Transmit+0x20a>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800bacc:	2303      	movs	r3, #3
 800bace:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bad0:	e026      	b.n	800bb20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1cd      	bne.n	800ba78 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800badc:	69ba      	ldr	r2, [r7, #24]
 800bade:	6839      	ldr	r1, [r7, #0]
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f000 fbcb 	bl	800c27c <SPI_EndRxTxTransaction>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d002      	beq.n	800baf2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2220      	movs	r2, #32
 800baf0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10a      	bne.n	800bb10 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bafa:	2300      	movs	r3, #0
 800bafc:	613b      	str	r3, [r7, #16]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	613b      	str	r3, [r7, #16]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	613b      	str	r3, [r7, #16]
 800bb0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	77fb      	strb	r3, [r7, #31]
 800bb1c:	e000      	b.n	800bb20 <HAL_SPI_Transmit+0x25e>
  }

error:
 800bb1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bb30:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3720      	adds	r7, #32
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b088      	sub	sp, #32
 800bb3e:	af02      	add	r7, sp, #8
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	603b      	str	r3, [r7, #0]
 800bb46:	4613      	mov	r3, r2
 800bb48:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb56:	d112      	bne.n	800bb7e <HAL_SPI_Receive+0x44>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10e      	bne.n	800bb7e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2204      	movs	r2, #4
 800bb64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bb68:	88fa      	ldrh	r2, [r7, #6]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	68b9      	ldr	r1, [r7, #8]
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f000 f8f1 	bl	800bd5c <HAL_SPI_TransmitReceive>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	e0ea      	b.n	800bd54 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d101      	bne.n	800bb8c <HAL_SPI_Receive+0x52>
 800bb88:	2302      	movs	r3, #2
 800bb8a:	e0e3      	b.n	800bd54 <HAL_SPI_Receive+0x21a>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb94:	f7fd fbd8 	bl	8009348 <HAL_GetTick>
 800bb98:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d002      	beq.n	800bbac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bba6:	2302      	movs	r3, #2
 800bba8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bbaa:	e0ca      	b.n	800bd42 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d002      	beq.n	800bbb8 <HAL_SPI_Receive+0x7e>
 800bbb2:	88fb      	ldrh	r3, [r7, #6]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d102      	bne.n	800bbbe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bbbc:	e0c1      	b.n	800bd42 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2204      	movs	r2, #4
 800bbc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	88fa      	ldrh	r2, [r7, #6]
 800bbd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	88fa      	ldrh	r2, [r7, #6]
 800bbdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2200      	movs	r2, #0
 800bbee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc04:	d10f      	bne.n	800bc26 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc30:	2b40      	cmp	r3, #64	; 0x40
 800bc32:	d007      	beq.n	800bc44 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d162      	bne.n	800bd12 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bc4c:	e02e      	b.n	800bcac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	f003 0301 	and.w	r3, r3, #1
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d115      	bne.n	800bc88 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f103 020c 	add.w	r2, r3, #12
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc68:	7812      	ldrb	r2, [r2, #0]
 800bc6a:	b2d2      	uxtb	r2, r2
 800bc6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc72:	1c5a      	adds	r2, r3, #1
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc86:	e011      	b.n	800bcac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc88:	f7fd fb5e 	bl	8009348 <HAL_GetTick>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	1ad3      	subs	r3, r2, r3
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d803      	bhi.n	800bca0 <HAL_SPI_Receive+0x166>
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc9e:	d102      	bne.n	800bca6 <HAL_SPI_Receive+0x16c>
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d102      	bne.n	800bcac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bcaa:	e04a      	b.n	800bd42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1cb      	bne.n	800bc4e <HAL_SPI_Receive+0x114>
 800bcb6:	e031      	b.n	800bd1c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d113      	bne.n	800bcee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	68da      	ldr	r2, [r3, #12]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd0:	b292      	uxth	r2, r2
 800bcd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd8:	1c9a      	adds	r2, r3, #2
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	3b01      	subs	r3, #1
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bcec:	e011      	b.n	800bd12 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bcee:	f7fd fb2b 	bl	8009348 <HAL_GetTick>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	1ad3      	subs	r3, r2, r3
 800bcf8:	683a      	ldr	r2, [r7, #0]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d803      	bhi.n	800bd06 <HAL_SPI_Receive+0x1cc>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd04:	d102      	bne.n	800bd0c <HAL_SPI_Receive+0x1d2>
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d102      	bne.n	800bd12 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800bd0c:	2303      	movs	r3, #3
 800bd0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bd10:	e017      	b.n	800bd42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1cd      	bne.n	800bcb8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bd1c:	693a      	ldr	r2, [r7, #16]
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f000 fa45 	bl	800c1b0 <SPI_EndRxTransaction>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2220      	movs	r2, #32
 800bd30:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d002      	beq.n	800bd40 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	75fb      	strb	r3, [r7, #23]
 800bd3e:	e000      	b.n	800bd42 <HAL_SPI_Receive+0x208>
  }

error :
 800bd40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08c      	sub	sp, #48	; 0x30
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
 800bd68:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d101      	bne.n	800bd82 <HAL_SPI_TransmitReceive+0x26>
 800bd7e:	2302      	movs	r3, #2
 800bd80:	e18a      	b.n	800c098 <HAL_SPI_TransmitReceive+0x33c>
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd8a:	f7fd fadd 	bl	8009348 <HAL_GetTick>
 800bd8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bda0:	887b      	ldrh	r3, [r7, #2]
 800bda2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bda4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d00f      	beq.n	800bdcc <HAL_SPI_TransmitReceive+0x70>
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdb2:	d107      	bne.n	800bdc4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d103      	bne.n	800bdc4 <HAL_SPI_TransmitReceive+0x68>
 800bdbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdc0:	2b04      	cmp	r3, #4
 800bdc2:	d003      	beq.n	800bdcc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bdca:	e15b      	b.n	800c084 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d005      	beq.n	800bdde <HAL_SPI_TransmitReceive+0x82>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d002      	beq.n	800bdde <HAL_SPI_TransmitReceive+0x82>
 800bdd8:	887b      	ldrh	r3, [r7, #2]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d103      	bne.n	800bde6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bde4:	e14e      	b.n	800c084 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	2b04      	cmp	r3, #4
 800bdf0:	d003      	beq.n	800bdfa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2205      	movs	r2, #5
 800bdf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	887a      	ldrh	r2, [r7, #2]
 800be0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	887a      	ldrh	r2, [r7, #2]
 800be10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	887a      	ldrh	r2, [r7, #2]
 800be1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	887a      	ldrh	r2, [r7, #2]
 800be22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be3a:	2b40      	cmp	r3, #64	; 0x40
 800be3c:	d007      	beq.n	800be4e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be56:	d178      	bne.n	800bf4a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d002      	beq.n	800be66 <HAL_SPI_TransmitReceive+0x10a>
 800be60:	8b7b      	ldrh	r3, [r7, #26]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d166      	bne.n	800bf34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be6a:	881a      	ldrh	r2, [r3, #0]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be76:	1c9a      	adds	r2, r3, #2
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be80:	b29b      	uxth	r3, r3
 800be82:	3b01      	subs	r3, #1
 800be84:	b29a      	uxth	r2, r3
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be8a:	e053      	b.n	800bf34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	f003 0302 	and.w	r3, r3, #2
 800be96:	2b02      	cmp	r3, #2
 800be98:	d11b      	bne.n	800bed2 <HAL_SPI_TransmitReceive+0x176>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d016      	beq.n	800bed2 <HAL_SPI_TransmitReceive+0x176>
 800bea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d113      	bne.n	800bed2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beae:	881a      	ldrh	r2, [r3, #0]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beba:	1c9a      	adds	r2, r3, #2
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	3b01      	subs	r3, #1
 800bec8:	b29a      	uxth	r2, r3
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bece:	2300      	movs	r3, #0
 800bed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	f003 0301 	and.w	r3, r3, #1
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d119      	bne.n	800bf14 <HAL_SPI_TransmitReceive+0x1b8>
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d014      	beq.n	800bf14 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	68da      	ldr	r2, [r3, #12]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef4:	b292      	uxth	r2, r2
 800bef6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800befc:	1c9a      	adds	r2, r3, #2
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf10:	2301      	movs	r3, #1
 800bf12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bf14:	f7fd fa18 	bl	8009348 <HAL_GetTick>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d807      	bhi.n	800bf34 <HAL_SPI_TransmitReceive+0x1d8>
 800bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2a:	d003      	beq.n	800bf34 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bf32:	e0a7      	b.n	800c084 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1a6      	bne.n	800be8c <HAL_SPI_TransmitReceive+0x130>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1a1      	bne.n	800be8c <HAL_SPI_TransmitReceive+0x130>
 800bf48:	e07c      	b.n	800c044 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d002      	beq.n	800bf58 <HAL_SPI_TransmitReceive+0x1fc>
 800bf52:	8b7b      	ldrh	r3, [r7, #26]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d16b      	bne.n	800c030 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	330c      	adds	r3, #12
 800bf62:	7812      	ldrb	r2, [r2, #0]
 800bf64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf6a:	1c5a      	adds	r2, r3, #1
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	3b01      	subs	r3, #1
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf7e:	e057      	b.n	800c030 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	f003 0302 	and.w	r3, r3, #2
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d11c      	bne.n	800bfc8 <HAL_SPI_TransmitReceive+0x26c>
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d017      	beq.n	800bfc8 <HAL_SPI_TransmitReceive+0x26c>
 800bf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d114      	bne.n	800bfc8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	330c      	adds	r3, #12
 800bfa8:	7812      	ldrb	r2, [r2, #0]
 800bfaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb0:	1c5a      	adds	r2, r3, #1
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f003 0301 	and.w	r3, r3, #1
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d119      	bne.n	800c00a <HAL_SPI_TransmitReceive+0x2ae>
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d014      	beq.n	800c00a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68da      	ldr	r2, [r3, #12]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfea:	b2d2      	uxtb	r2, r2
 800bfec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff2:	1c5a      	adds	r2, r3, #1
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	3b01      	subs	r3, #1
 800c000:	b29a      	uxth	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c006:	2301      	movs	r3, #1
 800c008:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c00a:	f7fd f99d 	bl	8009348 <HAL_GetTick>
 800c00e:	4602      	mov	r2, r0
 800c010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c016:	429a      	cmp	r2, r3
 800c018:	d803      	bhi.n	800c022 <HAL_SPI_TransmitReceive+0x2c6>
 800c01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c020:	d102      	bne.n	800c028 <HAL_SPI_TransmitReceive+0x2cc>
 800c022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c024:	2b00      	cmp	r3, #0
 800c026:	d103      	bne.n	800c030 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c028:	2303      	movs	r3, #3
 800c02a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c02e:	e029      	b.n	800c084 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c034:	b29b      	uxth	r3, r3
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1a2      	bne.n	800bf80 <HAL_SPI_TransmitReceive+0x224>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c03e:	b29b      	uxth	r3, r3
 800c040:	2b00      	cmp	r3, #0
 800c042:	d19d      	bne.n	800bf80 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c046:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f000 f917 	bl	800c27c <SPI_EndRxTxTransaction>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d006      	beq.n	800c062 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2220      	movs	r2, #32
 800c05e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c060:	e010      	b.n	800c084 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10b      	bne.n	800c082 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c06a:	2300      	movs	r3, #0
 800c06c:	617b      	str	r3, [r7, #20]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	617b      	str	r3, [r7, #20]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	617b      	str	r3, [r7, #20]
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	e000      	b.n	800c084 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c082:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c094:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3730      	adds	r7, #48	; 0x30
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b088      	sub	sp, #32
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	603b      	str	r3, [r7, #0]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c0b0:	f7fd f94a 	bl	8009348 <HAL_GetTick>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b8:	1a9b      	subs	r3, r3, r2
 800c0ba:	683a      	ldr	r2, [r7, #0]
 800c0bc:	4413      	add	r3, r2
 800c0be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c0c0:	f7fd f942 	bl	8009348 <HAL_GetTick>
 800c0c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c0c6:	4b39      	ldr	r3, [pc, #228]	; (800c1ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	015b      	lsls	r3, r3, #5
 800c0cc:	0d1b      	lsrs	r3, r3, #20
 800c0ce:	69fa      	ldr	r2, [r7, #28]
 800c0d0:	fb02 f303 	mul.w	r3, r2, r3
 800c0d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c0d6:	e054      	b.n	800c182 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0de:	d050      	beq.n	800c182 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c0e0:	f7fd f932 	bl	8009348 <HAL_GetTick>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	69fa      	ldr	r2, [r7, #28]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d902      	bls.n	800c0f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d13d      	bne.n	800c172 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	685a      	ldr	r2, [r3, #4]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c104:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c10e:	d111      	bne.n	800c134 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c118:	d004      	beq.n	800c124 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c122:	d107      	bne.n	800c134 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c132:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c13c:	d10f      	bne.n	800c15e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c15c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c16e:	2303      	movs	r3, #3
 800c170:	e017      	b.n	800c1a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d101      	bne.n	800c17c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c178:	2300      	movs	r3, #0
 800c17a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	3b01      	subs	r3, #1
 800c180:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	689a      	ldr	r2, [r3, #8]
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	4013      	ands	r3, r2
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	429a      	cmp	r2, r3
 800c190:	bf0c      	ite	eq
 800c192:	2301      	moveq	r3, #1
 800c194:	2300      	movne	r3, #0
 800c196:	b2db      	uxtb	r3, r3
 800c198:	461a      	mov	r2, r3
 800c19a:	79fb      	ldrb	r3, [r7, #7]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d19b      	bne.n	800c0d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3720      	adds	r7, #32
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	20000070 	.word	0x20000070

0800c1b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af02      	add	r7, sp, #8
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1c4:	d111      	bne.n	800c1ea <SPI_EndRxTransaction+0x3a>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1ce:	d004      	beq.n	800c1da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1d8:	d107      	bne.n	800c1ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1f2:	d12a      	bne.n	800c24a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1fc:	d012      	beq.n	800c224 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	9300      	str	r3, [sp, #0]
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	2200      	movs	r2, #0
 800c206:	2180      	movs	r1, #128	; 0x80
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f7ff ff49 	bl	800c0a0 <SPI_WaitFlagStateUntilTimeout>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d02d      	beq.n	800c270 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c218:	f043 0220 	orr.w	r2, r3, #32
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c220:	2303      	movs	r3, #3
 800c222:	e026      	b.n	800c272 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	2200      	movs	r2, #0
 800c22c:	2101      	movs	r1, #1
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f7ff ff36 	bl	800c0a0 <SPI_WaitFlagStateUntilTimeout>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d01a      	beq.n	800c270 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c23e:	f043 0220 	orr.w	r2, r3, #32
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c246:	2303      	movs	r3, #3
 800c248:	e013      	b.n	800c272 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	9300      	str	r3, [sp, #0]
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	2200      	movs	r2, #0
 800c252:	2101      	movs	r1, #1
 800c254:	68f8      	ldr	r0, [r7, #12]
 800c256:	f7ff ff23 	bl	800c0a0 <SPI_WaitFlagStateUntilTimeout>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d007      	beq.n	800c270 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c264:	f043 0220 	orr.w	r2, r3, #32
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c26c:	2303      	movs	r3, #3
 800c26e:	e000      	b.n	800c272 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
	...

0800c27c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b088      	sub	sp, #32
 800c280:	af02      	add	r7, sp, #8
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c288:	4b1b      	ldr	r3, [pc, #108]	; (800c2f8 <SPI_EndRxTxTransaction+0x7c>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a1b      	ldr	r2, [pc, #108]	; (800c2fc <SPI_EndRxTxTransaction+0x80>)
 800c28e:	fba2 2303 	umull	r2, r3, r2, r3
 800c292:	0d5b      	lsrs	r3, r3, #21
 800c294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c298:	fb02 f303 	mul.w	r3, r2, r3
 800c29c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2a6:	d112      	bne.n	800c2ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	2180      	movs	r1, #128	; 0x80
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f7ff fef4 	bl	800c0a0 <SPI_WaitFlagStateUntilTimeout>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d016      	beq.n	800c2ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c2:	f043 0220 	orr.w	r2, r3, #32
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	e00f      	b.n	800c2ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00a      	beq.n	800c2ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2e4:	2b80      	cmp	r3, #128	; 0x80
 800c2e6:	d0f2      	beq.n	800c2ce <SPI_EndRxTxTransaction+0x52>
 800c2e8:	e000      	b.n	800c2ec <SPI_EndRxTxTransaction+0x70>
        break;
 800c2ea:	bf00      	nop
  }

  return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20000070 	.word	0x20000070
 800c2fc:	165e9f81 	.word	0x165e9f81

0800c300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d101      	bne.n	800c312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	e041      	b.n	800c396 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d106      	bne.n	800c32c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2200      	movs	r2, #0
 800c322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7fc fe42 	bl	8008fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2202      	movs	r2, #2
 800c330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	3304      	adds	r3, #4
 800c33c:	4619      	mov	r1, r3
 800c33e:	4610      	mov	r0, r2
 800c340:	f000 f82e 	bl	800c3a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2201      	movs	r2, #1
 800c358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2201      	movs	r2, #1
 800c370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2201      	movs	r2, #1
 800c378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2201      	movs	r2, #1
 800c380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3708      	adds	r7, #8
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
	...

0800c3a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4a40      	ldr	r2, [pc, #256]	; (800c4b4 <TIM_Base_SetConfig+0x114>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d013      	beq.n	800c3e0 <TIM_Base_SetConfig+0x40>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3be:	d00f      	beq.n	800c3e0 <TIM_Base_SetConfig+0x40>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a3d      	ldr	r2, [pc, #244]	; (800c4b8 <TIM_Base_SetConfig+0x118>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d00b      	beq.n	800c3e0 <TIM_Base_SetConfig+0x40>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a3c      	ldr	r2, [pc, #240]	; (800c4bc <TIM_Base_SetConfig+0x11c>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d007      	beq.n	800c3e0 <TIM_Base_SetConfig+0x40>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4a3b      	ldr	r2, [pc, #236]	; (800c4c0 <TIM_Base_SetConfig+0x120>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d003      	beq.n	800c3e0 <TIM_Base_SetConfig+0x40>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4a3a      	ldr	r2, [pc, #232]	; (800c4c4 <TIM_Base_SetConfig+0x124>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d108      	bne.n	800c3f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a2f      	ldr	r2, [pc, #188]	; (800c4b4 <TIM_Base_SetConfig+0x114>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d02b      	beq.n	800c452 <TIM_Base_SetConfig+0xb2>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c400:	d027      	beq.n	800c452 <TIM_Base_SetConfig+0xb2>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	4a2c      	ldr	r2, [pc, #176]	; (800c4b8 <TIM_Base_SetConfig+0x118>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d023      	beq.n	800c452 <TIM_Base_SetConfig+0xb2>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4a2b      	ldr	r2, [pc, #172]	; (800c4bc <TIM_Base_SetConfig+0x11c>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d01f      	beq.n	800c452 <TIM_Base_SetConfig+0xb2>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4a2a      	ldr	r2, [pc, #168]	; (800c4c0 <TIM_Base_SetConfig+0x120>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d01b      	beq.n	800c452 <TIM_Base_SetConfig+0xb2>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4a29      	ldr	r2, [pc, #164]	; (800c4c4 <TIM_Base_SetConfig+0x124>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d017      	beq.n	800c452 <TIM_Base_SetConfig+0xb2>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4a28      	ldr	r2, [pc, #160]	; (800c4c8 <TIM_Base_SetConfig+0x128>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d013      	beq.n	800c452 <TIM_Base_SetConfig+0xb2>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4a27      	ldr	r2, [pc, #156]	; (800c4cc <TIM_Base_SetConfig+0x12c>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d00f      	beq.n	800c452 <TIM_Base_SetConfig+0xb2>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4a26      	ldr	r2, [pc, #152]	; (800c4d0 <TIM_Base_SetConfig+0x130>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d00b      	beq.n	800c452 <TIM_Base_SetConfig+0xb2>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	4a25      	ldr	r2, [pc, #148]	; (800c4d4 <TIM_Base_SetConfig+0x134>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d007      	beq.n	800c452 <TIM_Base_SetConfig+0xb2>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a24      	ldr	r2, [pc, #144]	; (800c4d8 <TIM_Base_SetConfig+0x138>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d003      	beq.n	800c452 <TIM_Base_SetConfig+0xb2>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4a23      	ldr	r2, [pc, #140]	; (800c4dc <TIM_Base_SetConfig+0x13c>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d108      	bne.n	800c464 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	4313      	orrs	r3, r2
 800c462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	695b      	ldr	r3, [r3, #20]
 800c46e:	4313      	orrs	r3, r2
 800c470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	689a      	ldr	r2, [r3, #8]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	4a0a      	ldr	r2, [pc, #40]	; (800c4b4 <TIM_Base_SetConfig+0x114>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d003      	beq.n	800c498 <TIM_Base_SetConfig+0xf8>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	4a0c      	ldr	r2, [pc, #48]	; (800c4c4 <TIM_Base_SetConfig+0x124>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d103      	bne.n	800c4a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	691a      	ldr	r2, [r3, #16]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	615a      	str	r2, [r3, #20]
}
 800c4a6:	bf00      	nop
 800c4a8:	3714      	adds	r7, #20
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	40010000 	.word	0x40010000
 800c4b8:	40000400 	.word	0x40000400
 800c4bc:	40000800 	.word	0x40000800
 800c4c0:	40000c00 	.word	0x40000c00
 800c4c4:	40010400 	.word	0x40010400
 800c4c8:	40014000 	.word	0x40014000
 800c4cc:	40014400 	.word	0x40014400
 800c4d0:	40014800 	.word	0x40014800
 800c4d4:	40001800 	.word	0x40001800
 800c4d8:	40001c00 	.word	0x40001c00
 800c4dc:	40002000 	.word	0x40002000

0800c4e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d101      	bne.n	800c4f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c4f4:	2302      	movs	r3, #2
 800c4f6:	e05a      	b.n	800c5ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2202      	movs	r2, #2
 800c504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c51e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	4313      	orrs	r3, r2
 800c528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a21      	ldr	r2, [pc, #132]	; (800c5bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d022      	beq.n	800c582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c544:	d01d      	beq.n	800c582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a1d      	ldr	r2, [pc, #116]	; (800c5c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d018      	beq.n	800c582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a1b      	ldr	r2, [pc, #108]	; (800c5c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d013      	beq.n	800c582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a1a      	ldr	r2, [pc, #104]	; (800c5c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d00e      	beq.n	800c582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a18      	ldr	r2, [pc, #96]	; (800c5cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d009      	beq.n	800c582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a17      	ldr	r2, [pc, #92]	; (800c5d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d004      	beq.n	800c582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a15      	ldr	r2, [pc, #84]	; (800c5d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d10c      	bne.n	800c59c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	4313      	orrs	r3, r2
 800c592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68ba      	ldr	r2, [r7, #8]
 800c59a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5ac:	2300      	movs	r3, #0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	40010000 	.word	0x40010000
 800c5c0:	40000400 	.word	0x40000400
 800c5c4:	40000800 	.word	0x40000800
 800c5c8:	40000c00 	.word	0x40000c00
 800c5cc:	40010400 	.word	0x40010400
 800c5d0:	40014000 	.word	0x40014000
 800c5d4:	40001800 	.word	0x40001800

0800c5d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c5d8:	b084      	sub	sp, #16
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b084      	sub	sp, #16
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	f107 001c 	add.w	r0, r7, #28
 800c5e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d122      	bne.n	800c636 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d105      	bne.n	800c62a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f001 fbee 	bl	800de0c <USB_CoreReset>
 800c630:	4603      	mov	r3, r0
 800c632:	73fb      	strb	r3, [r7, #15]
 800c634:	e01a      	b.n	800c66c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f001 fbe2 	bl	800de0c <USB_CoreReset>
 800c648:	4603      	mov	r3, r0
 800c64a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c64c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d106      	bne.n	800c660 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c656:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	639a      	str	r2, [r3, #56]	; 0x38
 800c65e:	e005      	b.n	800c66c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c664:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d10b      	bne.n	800c68a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	f043 0206 	orr.w	r2, r3, #6
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	f043 0220 	orr.w	r2, r3, #32
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3710      	adds	r7, #16
 800c690:	46bd      	mov	sp, r7
 800c692:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c696:	b004      	add	sp, #16
 800c698:	4770      	bx	lr
	...

0800c69c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b087      	sub	sp, #28
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c6aa:	79fb      	ldrb	r3, [r7, #7]
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d165      	bne.n	800c77c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	4a41      	ldr	r2, [pc, #260]	; (800c7b8 <USB_SetTurnaroundTime+0x11c>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d906      	bls.n	800c6c6 <USB_SetTurnaroundTime+0x2a>
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	4a40      	ldr	r2, [pc, #256]	; (800c7bc <USB_SetTurnaroundTime+0x120>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d202      	bcs.n	800c6c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c6c0:	230f      	movs	r3, #15
 800c6c2:	617b      	str	r3, [r7, #20]
 800c6c4:	e062      	b.n	800c78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	4a3c      	ldr	r2, [pc, #240]	; (800c7bc <USB_SetTurnaroundTime+0x120>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d306      	bcc.n	800c6dc <USB_SetTurnaroundTime+0x40>
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	4a3b      	ldr	r2, [pc, #236]	; (800c7c0 <USB_SetTurnaroundTime+0x124>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d202      	bcs.n	800c6dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c6d6:	230e      	movs	r3, #14
 800c6d8:	617b      	str	r3, [r7, #20]
 800c6da:	e057      	b.n	800c78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	4a38      	ldr	r2, [pc, #224]	; (800c7c0 <USB_SetTurnaroundTime+0x124>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d306      	bcc.n	800c6f2 <USB_SetTurnaroundTime+0x56>
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	4a37      	ldr	r2, [pc, #220]	; (800c7c4 <USB_SetTurnaroundTime+0x128>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d202      	bcs.n	800c6f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c6ec:	230d      	movs	r3, #13
 800c6ee:	617b      	str	r3, [r7, #20]
 800c6f0:	e04c      	b.n	800c78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	4a33      	ldr	r2, [pc, #204]	; (800c7c4 <USB_SetTurnaroundTime+0x128>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d306      	bcc.n	800c708 <USB_SetTurnaroundTime+0x6c>
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	4a32      	ldr	r2, [pc, #200]	; (800c7c8 <USB_SetTurnaroundTime+0x12c>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d802      	bhi.n	800c708 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c702:	230c      	movs	r3, #12
 800c704:	617b      	str	r3, [r7, #20]
 800c706:	e041      	b.n	800c78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	4a2f      	ldr	r2, [pc, #188]	; (800c7c8 <USB_SetTurnaroundTime+0x12c>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d906      	bls.n	800c71e <USB_SetTurnaroundTime+0x82>
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	4a2e      	ldr	r2, [pc, #184]	; (800c7cc <USB_SetTurnaroundTime+0x130>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d802      	bhi.n	800c71e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c718:	230b      	movs	r3, #11
 800c71a:	617b      	str	r3, [r7, #20]
 800c71c:	e036      	b.n	800c78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	4a2a      	ldr	r2, [pc, #168]	; (800c7cc <USB_SetTurnaroundTime+0x130>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d906      	bls.n	800c734 <USB_SetTurnaroundTime+0x98>
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	4a29      	ldr	r2, [pc, #164]	; (800c7d0 <USB_SetTurnaroundTime+0x134>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d802      	bhi.n	800c734 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c72e:	230a      	movs	r3, #10
 800c730:	617b      	str	r3, [r7, #20]
 800c732:	e02b      	b.n	800c78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	4a26      	ldr	r2, [pc, #152]	; (800c7d0 <USB_SetTurnaroundTime+0x134>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d906      	bls.n	800c74a <USB_SetTurnaroundTime+0xae>
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	4a25      	ldr	r2, [pc, #148]	; (800c7d4 <USB_SetTurnaroundTime+0x138>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d202      	bcs.n	800c74a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c744:	2309      	movs	r3, #9
 800c746:	617b      	str	r3, [r7, #20]
 800c748:	e020      	b.n	800c78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	4a21      	ldr	r2, [pc, #132]	; (800c7d4 <USB_SetTurnaroundTime+0x138>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d306      	bcc.n	800c760 <USB_SetTurnaroundTime+0xc4>
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	4a20      	ldr	r2, [pc, #128]	; (800c7d8 <USB_SetTurnaroundTime+0x13c>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d802      	bhi.n	800c760 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c75a:	2308      	movs	r3, #8
 800c75c:	617b      	str	r3, [r7, #20]
 800c75e:	e015      	b.n	800c78c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	4a1d      	ldr	r2, [pc, #116]	; (800c7d8 <USB_SetTurnaroundTime+0x13c>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d906      	bls.n	800c776 <USB_SetTurnaroundTime+0xda>
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	4a1c      	ldr	r2, [pc, #112]	; (800c7dc <USB_SetTurnaroundTime+0x140>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d202      	bcs.n	800c776 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c770:	2307      	movs	r3, #7
 800c772:	617b      	str	r3, [r7, #20]
 800c774:	e00a      	b.n	800c78c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c776:	2306      	movs	r3, #6
 800c778:	617b      	str	r3, [r7, #20]
 800c77a:	e007      	b.n	800c78c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c77c:	79fb      	ldrb	r3, [r7, #7]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d102      	bne.n	800c788 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c782:	2309      	movs	r3, #9
 800c784:	617b      	str	r3, [r7, #20]
 800c786:	e001      	b.n	800c78c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c788:	2309      	movs	r3, #9
 800c78a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	68da      	ldr	r2, [r3, #12]
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	029b      	lsls	r3, r3, #10
 800c7a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c7a4:	431a      	orrs	r2, r3
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c7aa:	2300      	movs	r3, #0
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	371c      	adds	r7, #28
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr
 800c7b8:	00d8acbf 	.word	0x00d8acbf
 800c7bc:	00e4e1c0 	.word	0x00e4e1c0
 800c7c0:	00f42400 	.word	0x00f42400
 800c7c4:	01067380 	.word	0x01067380
 800c7c8:	011a499f 	.word	0x011a499f
 800c7cc:	01312cff 	.word	0x01312cff
 800c7d0:	014ca43f 	.word	0x014ca43f
 800c7d4:	016e3600 	.word	0x016e3600
 800c7d8:	01a6ab1f 	.word	0x01a6ab1f
 800c7dc:	01e84800 	.word	0x01e84800

0800c7e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	f043 0201 	orr.w	r2, r3, #1
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	370c      	adds	r7, #12
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr

0800c802 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c802:	b480      	push	{r7}
 800c804:	b083      	sub	sp, #12
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	f023 0201 	bic.w	r2, r3, #1
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c816:	2300      	movs	r3, #0
}
 800c818:	4618      	mov	r0, r3
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	460b      	mov	r3, r1
 800c82e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c830:	2300      	movs	r3, #0
 800c832:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	68db      	ldr	r3, [r3, #12]
 800c838:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c840:	78fb      	ldrb	r3, [r7, #3]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d115      	bne.n	800c872 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c852:	2001      	movs	r0, #1
 800c854:	f7fc fd84 	bl	8009360 <HAL_Delay>
      ms++;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	3301      	adds	r3, #1
 800c85c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f001 fa45 	bl	800dcee <USB_GetMode>
 800c864:	4603      	mov	r3, r0
 800c866:	2b01      	cmp	r3, #1
 800c868:	d01e      	beq.n	800c8a8 <USB_SetCurrentMode+0x84>
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2b31      	cmp	r3, #49	; 0x31
 800c86e:	d9f0      	bls.n	800c852 <USB_SetCurrentMode+0x2e>
 800c870:	e01a      	b.n	800c8a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c872:	78fb      	ldrb	r3, [r7, #3]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d115      	bne.n	800c8a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c884:	2001      	movs	r0, #1
 800c886:	f7fc fd6b 	bl	8009360 <HAL_Delay>
      ms++;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	3301      	adds	r3, #1
 800c88e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f001 fa2c 	bl	800dcee <USB_GetMode>
 800c896:	4603      	mov	r3, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d005      	beq.n	800c8a8 <USB_SetCurrentMode+0x84>
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b31      	cmp	r3, #49	; 0x31
 800c8a0:	d9f0      	bls.n	800c884 <USB_SetCurrentMode+0x60>
 800c8a2:	e001      	b.n	800c8a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e005      	b.n	800c8b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2b32      	cmp	r3, #50	; 0x32
 800c8ac:	d101      	bne.n	800c8b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e000      	b.n	800c8b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8bc:	b084      	sub	sp, #16
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b086      	sub	sp, #24
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
 800c8c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c8ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	613b      	str	r3, [r7, #16]
 800c8da:	e009      	b.n	800c8f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	3340      	adds	r3, #64	; 0x40
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	4413      	add	r3, r2
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	613b      	str	r3, [r7, #16]
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	2b0e      	cmp	r3, #14
 800c8f4:	d9f2      	bls.n	800c8dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c8f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d11c      	bne.n	800c936 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c90a:	f043 0302 	orr.w	r3, r3, #2
 800c90e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c914:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c920:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	639a      	str	r2, [r3, #56]	; 0x38
 800c934:	e00b      	b.n	800c94e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c946:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c954:	461a      	mov	r2, r3
 800c956:	2300      	movs	r3, #0
 800c958:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c960:	4619      	mov	r1, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c968:	461a      	mov	r2, r3
 800c96a:	680b      	ldr	r3, [r1, #0]
 800c96c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c970:	2b01      	cmp	r3, #1
 800c972:	d10c      	bne.n	800c98e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	2b00      	cmp	r3, #0
 800c978:	d104      	bne.n	800c984 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c97a:	2100      	movs	r1, #0
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 f965 	bl	800cc4c <USB_SetDevSpeed>
 800c982:	e008      	b.n	800c996 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c984:	2101      	movs	r1, #1
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f960 	bl	800cc4c <USB_SetDevSpeed>
 800c98c:	e003      	b.n	800c996 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c98e:	2103      	movs	r1, #3
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 f95b 	bl	800cc4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c996:	2110      	movs	r1, #16
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 f8f3 	bl	800cb84 <USB_FlushTxFifo>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d001      	beq.n	800c9a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f91f 	bl	800cbec <USB_FlushRxFifo>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d001      	beq.n	800c9b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9be:	461a      	mov	r2, r3
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	2300      	movs	r3, #0
 800c9da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9dc:	2300      	movs	r3, #0
 800c9de:	613b      	str	r3, [r7, #16]
 800c9e0:	e043      	b.n	800ca6a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	015a      	lsls	r2, r3, #5
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9f8:	d118      	bne.n	800ca2c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10a      	bne.n	800ca16 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	015a      	lsls	r2, r3, #5
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	4413      	add	r3, r2
 800ca08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca12:	6013      	str	r3, [r2, #0]
 800ca14:	e013      	b.n	800ca3e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	015a      	lsls	r2, r3, #5
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca22:	461a      	mov	r2, r3
 800ca24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca28:	6013      	str	r3, [r2, #0]
 800ca2a:	e008      	b.n	800ca3e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	015a      	lsls	r2, r3, #5
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	4413      	add	r3, r2
 800ca34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca38:	461a      	mov	r2, r3
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	015a      	lsls	r2, r3, #5
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	4413      	add	r3, r2
 800ca46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	015a      	lsls	r2, r3, #5
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	4413      	add	r3, r2
 800ca58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	3301      	adds	r3, #1
 800ca68:	613b      	str	r3, [r7, #16]
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6c:	693a      	ldr	r2, [r7, #16]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d3b7      	bcc.n	800c9e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca72:	2300      	movs	r3, #0
 800ca74:	613b      	str	r3, [r7, #16]
 800ca76:	e043      	b.n	800cb00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	015a      	lsls	r2, r3, #5
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	4413      	add	r3, r2
 800ca80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca8e:	d118      	bne.n	800cac2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d10a      	bne.n	800caac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	015a      	lsls	r2, r3, #5
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa2:	461a      	mov	r2, r3
 800caa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800caa8:	6013      	str	r3, [r2, #0]
 800caaa:	e013      	b.n	800cad4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	015a      	lsls	r2, r3, #5
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	4413      	add	r3, r2
 800cab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab8:	461a      	mov	r2, r3
 800caba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cabe:	6013      	str	r3, [r2, #0]
 800cac0:	e008      	b.n	800cad4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	015a      	lsls	r2, r3, #5
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	4413      	add	r3, r2
 800caca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cace:	461a      	mov	r2, r3
 800cad0:	2300      	movs	r3, #0
 800cad2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	015a      	lsls	r2, r3, #5
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	4413      	add	r3, r2
 800cadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cae0:	461a      	mov	r2, r3
 800cae2:	2300      	movs	r3, #0
 800cae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	015a      	lsls	r2, r3, #5
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	4413      	add	r3, r2
 800caee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caf2:	461a      	mov	r2, r3
 800caf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800caf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	3301      	adds	r3, #1
 800cafe:	613b      	str	r3, [r7, #16]
 800cb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb02:	693a      	ldr	r2, [r7, #16]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d3b7      	bcc.n	800ca78 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb0e:	691b      	ldr	r3, [r3, #16]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cb28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d105      	bne.n	800cb3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	699b      	ldr	r3, [r3, #24]
 800cb34:	f043 0210 	orr.w	r2, r3, #16
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	699a      	ldr	r2, [r3, #24]
 800cb40:	4b0f      	ldr	r3, [pc, #60]	; (800cb80 <USB_DevInit+0x2c4>)
 800cb42:	4313      	orrs	r3, r2
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cb48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d005      	beq.n	800cb5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	699b      	ldr	r3, [r3, #24]
 800cb52:	f043 0208 	orr.w	r2, r3, #8
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cb5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d107      	bne.n	800cb70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	699b      	ldr	r3, [r3, #24]
 800cb64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb68:	f043 0304 	orr.w	r3, r3, #4
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3718      	adds	r7, #24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb7c:	b004      	add	sp, #16
 800cb7e:	4770      	bx	lr
 800cb80:	803c3800 	.word	0x803c3800

0800cb84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	3301      	adds	r3, #1
 800cb96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	4a13      	ldr	r2, [pc, #76]	; (800cbe8 <USB_FlushTxFifo+0x64>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d901      	bls.n	800cba4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e01b      	b.n	800cbdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	691b      	ldr	r3, [r3, #16]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	daf2      	bge.n	800cb92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cbac:	2300      	movs	r3, #0
 800cbae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	019b      	lsls	r3, r3, #6
 800cbb4:	f043 0220 	orr.w	r2, r3, #32
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	4a08      	ldr	r2, [pc, #32]	; (800cbe8 <USB_FlushTxFifo+0x64>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d901      	bls.n	800cbce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cbca:	2303      	movs	r3, #3
 800cbcc:	e006      	b.n	800cbdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	f003 0320 	and.w	r3, r3, #32
 800cbd6:	2b20      	cmp	r3, #32
 800cbd8:	d0f0      	beq.n	800cbbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cbda:	2300      	movs	r3, #0
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3714      	adds	r7, #20
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	00030d40 	.word	0x00030d40

0800cbec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	4a11      	ldr	r2, [pc, #68]	; (800cc48 <USB_FlushRxFifo+0x5c>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d901      	bls.n	800cc0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cc06:	2303      	movs	r3, #3
 800cc08:	e018      	b.n	800cc3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	daf2      	bge.n	800cbf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cc12:	2300      	movs	r3, #0
 800cc14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2210      	movs	r2, #16
 800cc1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	4a08      	ldr	r2, [pc, #32]	; (800cc48 <USB_FlushRxFifo+0x5c>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d901      	bls.n	800cc2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cc2a:	2303      	movs	r3, #3
 800cc2c:	e006      	b.n	800cc3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	691b      	ldr	r3, [r3, #16]
 800cc32:	f003 0310 	and.w	r3, r3, #16
 800cc36:	2b10      	cmp	r3, #16
 800cc38:	d0f0      	beq.n	800cc1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cc3a:	2300      	movs	r3, #0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3714      	adds	r7, #20
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	00030d40 	.word	0x00030d40

0800cc4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b085      	sub	sp, #20
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	460b      	mov	r3, r1
 800cc56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	78fb      	ldrb	r3, [r7, #3]
 800cc66:	68f9      	ldr	r1, [r7, #12]
 800cc68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3714      	adds	r7, #20
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cc7e:	b480      	push	{r7}
 800cc80:	b087      	sub	sp, #28
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	f003 0306 	and.w	r3, r3, #6
 800cc96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d102      	bne.n	800cca4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	75fb      	strb	r3, [r7, #23]
 800cca2:	e00a      	b.n	800ccba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d002      	beq.n	800ccb0 <USB_GetDevSpeed+0x32>
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2b06      	cmp	r3, #6
 800ccae:	d102      	bne.n	800ccb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	75fb      	strb	r3, [r7, #23]
 800ccb4:	e001      	b.n	800ccba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ccb6:	230f      	movs	r3, #15
 800ccb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ccba:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	371c      	adds	r7, #28
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	785b      	ldrb	r3, [r3, #1]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d13a      	bne.n	800cd5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccea:	69da      	ldr	r2, [r3, #28]
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	f003 030f 	and.w	r3, r3, #15
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	fa01 f303 	lsl.w	r3, r1, r3
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	68f9      	ldr	r1, [r7, #12]
 800ccfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd02:	4313      	orrs	r3, r2
 800cd04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	015a      	lsls	r2, r3, #5
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d155      	bne.n	800cdc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	015a      	lsls	r2, r3, #5
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	4413      	add	r3, r2
 800cd24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	791b      	ldrb	r3, [r3, #4]
 800cd36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	059b      	lsls	r3, r3, #22
 800cd3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd40:	4313      	orrs	r3, r2
 800cd42:	68ba      	ldr	r2, [r7, #8]
 800cd44:	0151      	lsls	r1, r2, #5
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	440a      	add	r2, r1
 800cd4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd56:	6013      	str	r3, [r2, #0]
 800cd58:	e036      	b.n	800cdc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd60:	69da      	ldr	r2, [r3, #28]
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	f003 030f 	and.w	r3, r3, #15
 800cd6a:	2101      	movs	r1, #1
 800cd6c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd70:	041b      	lsls	r3, r3, #16
 800cd72:	68f9      	ldr	r1, [r7, #12]
 800cd74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	015a      	lsls	r2, r3, #5
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	4413      	add	r3, r2
 800cd84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d11a      	bne.n	800cdc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	015a      	lsls	r2, r3, #5
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	4413      	add	r3, r2
 800cd9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	791b      	ldrb	r3, [r3, #4]
 800cdac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cdae:	430b      	orrs	r3, r1
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	0151      	lsls	r1, r2, #5
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	440a      	add	r2, r1
 800cdba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3714      	adds	r7, #20
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr
	...

0800cdd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	785b      	ldrb	r3, [r3, #1]
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d161      	bne.n	800ceb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	015a      	lsls	r2, r3, #5
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce0a:	d11f      	bne.n	800ce4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	015a      	lsls	r2, r3, #5
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	4413      	add	r3, r2
 800ce14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	68ba      	ldr	r2, [r7, #8]
 800ce1c:	0151      	lsls	r1, r2, #5
 800ce1e:	68fa      	ldr	r2, [r7, #12]
 800ce20:	440a      	add	r2, r1
 800ce22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ce2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	015a      	lsls	r2, r3, #5
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	4413      	add	r3, r2
 800ce34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	0151      	lsls	r1, r2, #5
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	440a      	add	r2, r1
 800ce42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	f003 030f 	and.w	r3, r3, #15
 800ce5c:	2101      	movs	r1, #1
 800ce5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	43db      	mvns	r3, r3
 800ce66:	68f9      	ldr	r1, [r7, #12]
 800ce68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce6c:	4013      	ands	r3, r2
 800ce6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce76:	69da      	ldr	r2, [r3, #28]
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	f003 030f 	and.w	r3, r3, #15
 800ce80:	2101      	movs	r1, #1
 800ce82:	fa01 f303 	lsl.w	r3, r1, r3
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	43db      	mvns	r3, r3
 800ce8a:	68f9      	ldr	r1, [r7, #12]
 800ce8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce90:	4013      	ands	r3, r2
 800ce92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	015a      	lsls	r2, r3, #5
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	0159      	lsls	r1, r3, #5
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	440b      	add	r3, r1
 800ceaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceae:	4619      	mov	r1, r3
 800ceb0:	4b35      	ldr	r3, [pc, #212]	; (800cf88 <USB_DeactivateEndpoint+0x1b0>)
 800ceb2:	4013      	ands	r3, r2
 800ceb4:	600b      	str	r3, [r1, #0]
 800ceb6:	e060      	b.n	800cf7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	015a      	lsls	r2, r3, #5
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	4413      	add	r3, r2
 800cec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ceca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cece:	d11f      	bne.n	800cf10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	015a      	lsls	r2, r3, #5
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	4413      	add	r3, r2
 800ced8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	68ba      	ldr	r2, [r7, #8]
 800cee0:	0151      	lsls	r1, r2, #5
 800cee2:	68fa      	ldr	r2, [r7, #12]
 800cee4:	440a      	add	r2, r1
 800cee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ceee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	015a      	lsls	r2, r3, #5
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	4413      	add	r3, r2
 800cef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	0151      	lsls	r1, r2, #5
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	440a      	add	r2, r1
 800cf06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	f003 030f 	and.w	r3, r3, #15
 800cf20:	2101      	movs	r1, #1
 800cf22:	fa01 f303 	lsl.w	r3, r1, r3
 800cf26:	041b      	lsls	r3, r3, #16
 800cf28:	43db      	mvns	r3, r3
 800cf2a:	68f9      	ldr	r1, [r7, #12]
 800cf2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf30:	4013      	ands	r3, r2
 800cf32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf3a:	69da      	ldr	r2, [r3, #28]
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	f003 030f 	and.w	r3, r3, #15
 800cf44:	2101      	movs	r1, #1
 800cf46:	fa01 f303 	lsl.w	r3, r1, r3
 800cf4a:	041b      	lsls	r3, r3, #16
 800cf4c:	43db      	mvns	r3, r3
 800cf4e:	68f9      	ldr	r1, [r7, #12]
 800cf50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf54:	4013      	ands	r3, r2
 800cf56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	015a      	lsls	r2, r3, #5
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	4413      	add	r3, r2
 800cf60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	0159      	lsls	r1, r3, #5
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	440b      	add	r3, r1
 800cf6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf72:	4619      	mov	r1, r3
 800cf74:	4b05      	ldr	r3, [pc, #20]	; (800cf8c <USB_DeactivateEndpoint+0x1b4>)
 800cf76:	4013      	ands	r3, r2
 800cf78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3714      	adds	r7, #20
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr
 800cf88:	ec337800 	.word	0xec337800
 800cf8c:	eff37800 	.word	0xeff37800

0800cf90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08a      	sub	sp, #40	; 0x28
 800cf94:	af02      	add	r7, sp, #8
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	785b      	ldrb	r3, [r3, #1]
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	f040 815c 	bne.w	800d26a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	699b      	ldr	r3, [r3, #24]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d132      	bne.n	800d020 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	015a      	lsls	r2, r3, #5
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	69ba      	ldr	r2, [r7, #24]
 800cfca:	0151      	lsls	r1, r2, #5
 800cfcc:	69fa      	ldr	r2, [r7, #28]
 800cfce:	440a      	add	r2, r1
 800cfd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cfd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cfdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	015a      	lsls	r2, r3, #5
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfea:	691b      	ldr	r3, [r3, #16]
 800cfec:	69ba      	ldr	r2, [r7, #24]
 800cfee:	0151      	lsls	r1, r2, #5
 800cff0:	69fa      	ldr	r2, [r7, #28]
 800cff2:	440a      	add	r2, r1
 800cff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cff8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cffc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	015a      	lsls	r2, r3, #5
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	4413      	add	r3, r2
 800d006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	69ba      	ldr	r2, [r7, #24]
 800d00e:	0151      	lsls	r1, r2, #5
 800d010:	69fa      	ldr	r2, [r7, #28]
 800d012:	440a      	add	r2, r1
 800d014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d018:	0cdb      	lsrs	r3, r3, #19
 800d01a:	04db      	lsls	r3, r3, #19
 800d01c:	6113      	str	r3, [r2, #16]
 800d01e:	e074      	b.n	800d10a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	015a      	lsls	r2, r3, #5
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	4413      	add	r3, r2
 800d028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d02c:	691b      	ldr	r3, [r3, #16]
 800d02e:	69ba      	ldr	r2, [r7, #24]
 800d030:	0151      	lsls	r1, r2, #5
 800d032:	69fa      	ldr	r2, [r7, #28]
 800d034:	440a      	add	r2, r1
 800d036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d03a:	0cdb      	lsrs	r3, r3, #19
 800d03c:	04db      	lsls	r3, r3, #19
 800d03e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	015a      	lsls	r2, r3, #5
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	4413      	add	r3, r2
 800d048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	69ba      	ldr	r2, [r7, #24]
 800d050:	0151      	lsls	r1, r2, #5
 800d052:	69fa      	ldr	r2, [r7, #28]
 800d054:	440a      	add	r2, r1
 800d056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d05a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d05e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	015a      	lsls	r2, r3, #5
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	4413      	add	r3, r2
 800d06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d070:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	6999      	ldr	r1, [r3, #24]
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	440b      	add	r3, r1
 800d07c:	1e59      	subs	r1, r3, #1
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	fbb1 f3f3 	udiv	r3, r1, r3
 800d086:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d088:	4b9d      	ldr	r3, [pc, #628]	; (800d300 <USB_EPStartXfer+0x370>)
 800d08a:	400b      	ands	r3, r1
 800d08c:	69b9      	ldr	r1, [r7, #24]
 800d08e:	0148      	lsls	r0, r1, #5
 800d090:	69f9      	ldr	r1, [r7, #28]
 800d092:	4401      	add	r1, r0
 800d094:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d098:	4313      	orrs	r3, r2
 800d09a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	015a      	lsls	r2, r3, #5
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0a8:	691a      	ldr	r2, [r3, #16]
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	699b      	ldr	r3, [r3, #24]
 800d0ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d0b2:	69b9      	ldr	r1, [r7, #24]
 800d0b4:	0148      	lsls	r0, r1, #5
 800d0b6:	69f9      	ldr	r1, [r7, #28]
 800d0b8:	4401      	add	r1, r0
 800d0ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	791b      	ldrb	r3, [r3, #4]
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d11f      	bne.n	800d10a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	015a      	lsls	r2, r3, #5
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0d6:	691b      	ldr	r3, [r3, #16]
 800d0d8:	69ba      	ldr	r2, [r7, #24]
 800d0da:	0151      	lsls	r1, r2, #5
 800d0dc:	69fa      	ldr	r2, [r7, #28]
 800d0de:	440a      	add	r2, r1
 800d0e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d0e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	015a      	lsls	r2, r3, #5
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0f6:	691b      	ldr	r3, [r3, #16]
 800d0f8:	69ba      	ldr	r2, [r7, #24]
 800d0fa:	0151      	lsls	r1, r2, #5
 800d0fc:	69fa      	ldr	r2, [r7, #28]
 800d0fe:	440a      	add	r2, r1
 800d100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d104:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d108:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d14b      	bne.n	800d1a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	695b      	ldr	r3, [r3, #20]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d009      	beq.n	800d12c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	015a      	lsls	r2, r3, #5
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	4413      	add	r3, r2
 800d120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d124:	461a      	mov	r2, r3
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	695b      	ldr	r3, [r3, #20]
 800d12a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	791b      	ldrb	r3, [r3, #4]
 800d130:	2b01      	cmp	r3, #1
 800d132:	d128      	bne.n	800d186 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d140:	2b00      	cmp	r3, #0
 800d142:	d110      	bne.n	800d166 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d144:	69bb      	ldr	r3, [r7, #24]
 800d146:	015a      	lsls	r2, r3, #5
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	4413      	add	r3, r2
 800d14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	69ba      	ldr	r2, [r7, #24]
 800d154:	0151      	lsls	r1, r2, #5
 800d156:	69fa      	ldr	r2, [r7, #28]
 800d158:	440a      	add	r2, r1
 800d15a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d15e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d162:	6013      	str	r3, [r2, #0]
 800d164:	e00f      	b.n	800d186 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	015a      	lsls	r2, r3, #5
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	4413      	add	r3, r2
 800d16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	69ba      	ldr	r2, [r7, #24]
 800d176:	0151      	lsls	r1, r2, #5
 800d178:	69fa      	ldr	r2, [r7, #28]
 800d17a:	440a      	add	r2, r1
 800d17c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d184:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	015a      	lsls	r2, r3, #5
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	4413      	add	r3, r2
 800d18e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	69ba      	ldr	r2, [r7, #24]
 800d196:	0151      	lsls	r1, r2, #5
 800d198:	69fa      	ldr	r2, [r7, #28]
 800d19a:	440a      	add	r2, r1
 800d19c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1a4:	6013      	str	r3, [r2, #0]
 800d1a6:	e133      	b.n	800d410 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	015a      	lsls	r2, r3, #5
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	69ba      	ldr	r2, [r7, #24]
 800d1b8:	0151      	lsls	r1, r2, #5
 800d1ba:	69fa      	ldr	r2, [r7, #28]
 800d1bc:	440a      	add	r2, r1
 800d1be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	791b      	ldrb	r3, [r3, #4]
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d015      	beq.n	800d1fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	699b      	ldr	r3, [r3, #24]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f000 811b 	beq.w	800d410 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	f003 030f 	and.w	r3, r3, #15
 800d1ea:	2101      	movs	r1, #1
 800d1ec:	fa01 f303 	lsl.w	r3, r1, r3
 800d1f0:	69f9      	ldr	r1, [r7, #28]
 800d1f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	634b      	str	r3, [r1, #52]	; 0x34
 800d1fa:	e109      	b.n	800d410 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d110      	bne.n	800d22e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	015a      	lsls	r2, r3, #5
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	4413      	add	r3, r2
 800d214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	69ba      	ldr	r2, [r7, #24]
 800d21c:	0151      	lsls	r1, r2, #5
 800d21e:	69fa      	ldr	r2, [r7, #28]
 800d220:	440a      	add	r2, r1
 800d222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d226:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d22a:	6013      	str	r3, [r2, #0]
 800d22c:	e00f      	b.n	800d24e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	015a      	lsls	r2, r3, #5
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	4413      	add	r3, r2
 800d236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	69ba      	ldr	r2, [r7, #24]
 800d23e:	0151      	lsls	r1, r2, #5
 800d240:	69fa      	ldr	r2, [r7, #28]
 800d242:	440a      	add	r2, r1
 800d244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d24c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	6919      	ldr	r1, [r3, #16]
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	781a      	ldrb	r2, [r3, #0]
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	699b      	ldr	r3, [r3, #24]
 800d25a:	b298      	uxth	r0, r3
 800d25c:	79fb      	ldrb	r3, [r7, #7]
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	4603      	mov	r3, r0
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	f000 fade 	bl	800d824 <USB_WritePacket>
 800d268:	e0d2      	b.n	800d410 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	015a      	lsls	r2, r3, #5
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	4413      	add	r3, r2
 800d272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	69ba      	ldr	r2, [r7, #24]
 800d27a:	0151      	lsls	r1, r2, #5
 800d27c:	69fa      	ldr	r2, [r7, #28]
 800d27e:	440a      	add	r2, r1
 800d280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d284:	0cdb      	lsrs	r3, r3, #19
 800d286:	04db      	lsls	r3, r3, #19
 800d288:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	015a      	lsls	r2, r3, #5
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	4413      	add	r3, r2
 800d292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d296:	691b      	ldr	r3, [r3, #16]
 800d298:	69ba      	ldr	r2, [r7, #24]
 800d29a:	0151      	lsls	r1, r2, #5
 800d29c:	69fa      	ldr	r2, [r7, #28]
 800d29e:	440a      	add	r2, r1
 800d2a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d2a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d2ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	699b      	ldr	r3, [r3, #24]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d126      	bne.n	800d304 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	015a      	lsls	r2, r3, #5
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	4413      	add	r3, r2
 800d2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2c2:	691a      	ldr	r2, [r3, #16]
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2cc:	69b9      	ldr	r1, [r7, #24]
 800d2ce:	0148      	lsls	r0, r1, #5
 800d2d0:	69f9      	ldr	r1, [r7, #28]
 800d2d2:	4401      	add	r1, r0
 800d2d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	015a      	lsls	r2, r3, #5
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	69ba      	ldr	r2, [r7, #24]
 800d2ec:	0151      	lsls	r1, r2, #5
 800d2ee:	69fa      	ldr	r2, [r7, #28]
 800d2f0:	440a      	add	r2, r1
 800d2f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2fa:	6113      	str	r3, [r2, #16]
 800d2fc:	e03a      	b.n	800d374 <USB_EPStartXfer+0x3e4>
 800d2fe:	bf00      	nop
 800d300:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	699a      	ldr	r2, [r3, #24]
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	4413      	add	r3, r2
 800d30e:	1e5a      	subs	r2, r3, #1
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	fbb2 f3f3 	udiv	r3, r2, r3
 800d318:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	8afa      	ldrh	r2, [r7, #22]
 800d320:	fb03 f202 	mul.w	r2, r3, r2
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d328:	69bb      	ldr	r3, [r7, #24]
 800d32a:	015a      	lsls	r2, r3, #5
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	4413      	add	r3, r2
 800d330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d334:	691a      	ldr	r2, [r3, #16]
 800d336:	8afb      	ldrh	r3, [r7, #22]
 800d338:	04d9      	lsls	r1, r3, #19
 800d33a:	4b38      	ldr	r3, [pc, #224]	; (800d41c <USB_EPStartXfer+0x48c>)
 800d33c:	400b      	ands	r3, r1
 800d33e:	69b9      	ldr	r1, [r7, #24]
 800d340:	0148      	lsls	r0, r1, #5
 800d342:	69f9      	ldr	r1, [r7, #28]
 800d344:	4401      	add	r1, r0
 800d346:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d34a:	4313      	orrs	r3, r2
 800d34c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	015a      	lsls	r2, r3, #5
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	4413      	add	r3, r2
 800d356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d35a:	691a      	ldr	r2, [r3, #16]
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	69db      	ldr	r3, [r3, #28]
 800d360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d364:	69b9      	ldr	r1, [r7, #24]
 800d366:	0148      	lsls	r0, r1, #5
 800d368:	69f9      	ldr	r1, [r7, #28]
 800d36a:	4401      	add	r1, r0
 800d36c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d370:	4313      	orrs	r3, r2
 800d372:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d374:	79fb      	ldrb	r3, [r7, #7]
 800d376:	2b01      	cmp	r3, #1
 800d378:	d10d      	bne.n	800d396 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	691b      	ldr	r3, [r3, #16]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d009      	beq.n	800d396 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	6919      	ldr	r1, [r3, #16]
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	015a      	lsls	r2, r3, #5
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	4413      	add	r3, r2
 800d38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d392:	460a      	mov	r2, r1
 800d394:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	791b      	ldrb	r3, [r3, #4]
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d128      	bne.n	800d3f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3a4:	689b      	ldr	r3, [r3, #8]
 800d3a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d110      	bne.n	800d3d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d3ae:	69bb      	ldr	r3, [r7, #24]
 800d3b0:	015a      	lsls	r2, r3, #5
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	69ba      	ldr	r2, [r7, #24]
 800d3be:	0151      	lsls	r1, r2, #5
 800d3c0:	69fa      	ldr	r2, [r7, #28]
 800d3c2:	440a      	add	r2, r1
 800d3c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d3cc:	6013      	str	r3, [r2, #0]
 800d3ce:	e00f      	b.n	800d3f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	015a      	lsls	r2, r3, #5
 800d3d4:	69fb      	ldr	r3, [r7, #28]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	69ba      	ldr	r2, [r7, #24]
 800d3e0:	0151      	lsls	r1, r2, #5
 800d3e2:	69fa      	ldr	r2, [r7, #28]
 800d3e4:	440a      	add	r2, r1
 800d3e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	015a      	lsls	r2, r3, #5
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	69ba      	ldr	r2, [r7, #24]
 800d400:	0151      	lsls	r1, r2, #5
 800d402:	69fa      	ldr	r2, [r7, #28]
 800d404:	440a      	add	r2, r1
 800d406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d40a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d40e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d410:	2300      	movs	r3, #0
}
 800d412:	4618      	mov	r0, r3
 800d414:	3720      	adds	r7, #32
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	1ff80000 	.word	0x1ff80000

0800d420 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d420:	b480      	push	{r7}
 800d422:	b087      	sub	sp, #28
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	4613      	mov	r3, r2
 800d42c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	785b      	ldrb	r3, [r3, #1]
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	f040 80ce 	bne.w	800d5de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	699b      	ldr	r3, [r3, #24]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d132      	bne.n	800d4b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	015a      	lsls	r2, r3, #5
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	4413      	add	r3, r2
 800d452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d456:	691b      	ldr	r3, [r3, #16]
 800d458:	693a      	ldr	r2, [r7, #16]
 800d45a:	0151      	lsls	r1, r2, #5
 800d45c:	697a      	ldr	r2, [r7, #20]
 800d45e:	440a      	add	r2, r1
 800d460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d464:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d468:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d46c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	015a      	lsls	r2, r3, #5
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	4413      	add	r3, r2
 800d476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	693a      	ldr	r2, [r7, #16]
 800d47e:	0151      	lsls	r1, r2, #5
 800d480:	697a      	ldr	r2, [r7, #20]
 800d482:	440a      	add	r2, r1
 800d484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d488:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d48c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	015a      	lsls	r2, r3, #5
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	4413      	add	r3, r2
 800d496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d49a:	691b      	ldr	r3, [r3, #16]
 800d49c:	693a      	ldr	r2, [r7, #16]
 800d49e:	0151      	lsls	r1, r2, #5
 800d4a0:	697a      	ldr	r2, [r7, #20]
 800d4a2:	440a      	add	r2, r1
 800d4a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4a8:	0cdb      	lsrs	r3, r3, #19
 800d4aa:	04db      	lsls	r3, r3, #19
 800d4ac:	6113      	str	r3, [r2, #16]
 800d4ae:	e04e      	b.n	800d54e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	015a      	lsls	r2, r3, #5
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4bc:	691b      	ldr	r3, [r3, #16]
 800d4be:	693a      	ldr	r2, [r7, #16]
 800d4c0:	0151      	lsls	r1, r2, #5
 800d4c2:	697a      	ldr	r2, [r7, #20]
 800d4c4:	440a      	add	r2, r1
 800d4c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4ca:	0cdb      	lsrs	r3, r3, #19
 800d4cc:	04db      	lsls	r3, r3, #19
 800d4ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	015a      	lsls	r2, r3, #5
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	693a      	ldr	r2, [r7, #16]
 800d4e0:	0151      	lsls	r1, r2, #5
 800d4e2:	697a      	ldr	r2, [r7, #20]
 800d4e4:	440a      	add	r2, r1
 800d4e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d4ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d4f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	699a      	ldr	r2, [r3, #24]
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d903      	bls.n	800d508 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	68da      	ldr	r2, [r3, #12]
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	015a      	lsls	r2, r3, #5
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	4413      	add	r3, r2
 800d510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	693a      	ldr	r2, [r7, #16]
 800d518:	0151      	lsls	r1, r2, #5
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	440a      	add	r2, r1
 800d51e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d522:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	015a      	lsls	r2, r3, #5
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	4413      	add	r3, r2
 800d530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d534:	691a      	ldr	r2, [r3, #16]
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	699b      	ldr	r3, [r3, #24]
 800d53a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d53e:	6939      	ldr	r1, [r7, #16]
 800d540:	0148      	lsls	r0, r1, #5
 800d542:	6979      	ldr	r1, [r7, #20]
 800d544:	4401      	add	r1, r0
 800d546:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d54a:	4313      	orrs	r3, r2
 800d54c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d54e:	79fb      	ldrb	r3, [r7, #7]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d11e      	bne.n	800d592 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	695b      	ldr	r3, [r3, #20]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d009      	beq.n	800d570 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	015a      	lsls	r2, r3, #5
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	4413      	add	r3, r2
 800d564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d568:	461a      	mov	r2, r3
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	695b      	ldr	r3, [r3, #20]
 800d56e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	015a      	lsls	r2, r3, #5
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	4413      	add	r3, r2
 800d578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	693a      	ldr	r2, [r7, #16]
 800d580:	0151      	lsls	r1, r2, #5
 800d582:	697a      	ldr	r2, [r7, #20]
 800d584:	440a      	add	r2, r1
 800d586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d58a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d58e:	6013      	str	r3, [r2, #0]
 800d590:	e097      	b.n	800d6c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	015a      	lsls	r2, r3, #5
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	4413      	add	r3, r2
 800d59a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	693a      	ldr	r2, [r7, #16]
 800d5a2:	0151      	lsls	r1, r2, #5
 800d5a4:	697a      	ldr	r2, [r7, #20]
 800d5a6:	440a      	add	r2, r1
 800d5a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d5b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	699b      	ldr	r3, [r3, #24]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f000 8083 	beq.w	800d6c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	f003 030f 	and.w	r3, r3, #15
 800d5cc:	2101      	movs	r1, #1
 800d5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d5d2:	6979      	ldr	r1, [r7, #20]
 800d5d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	634b      	str	r3, [r1, #52]	; 0x34
 800d5dc:	e071      	b.n	800d6c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	015a      	lsls	r2, r3, #5
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	4413      	add	r3, r2
 800d5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ea:	691b      	ldr	r3, [r3, #16]
 800d5ec:	693a      	ldr	r2, [r7, #16]
 800d5ee:	0151      	lsls	r1, r2, #5
 800d5f0:	697a      	ldr	r2, [r7, #20]
 800d5f2:	440a      	add	r2, r1
 800d5f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5f8:	0cdb      	lsrs	r3, r3, #19
 800d5fa:	04db      	lsls	r3, r3, #19
 800d5fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	015a      	lsls	r2, r3, #5
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	4413      	add	r3, r2
 800d606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d60a:	691b      	ldr	r3, [r3, #16]
 800d60c:	693a      	ldr	r2, [r7, #16]
 800d60e:	0151      	lsls	r1, r2, #5
 800d610:	697a      	ldr	r2, [r7, #20]
 800d612:	440a      	add	r2, r1
 800d614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d618:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d61c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d620:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	699b      	ldr	r3, [r3, #24]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d003      	beq.n	800d632 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	68da      	ldr	r2, [r3, #12]
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	68da      	ldr	r2, [r3, #12]
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	015a      	lsls	r2, r3, #5
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	4413      	add	r3, r2
 800d642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d646:	691b      	ldr	r3, [r3, #16]
 800d648:	693a      	ldr	r2, [r7, #16]
 800d64a:	0151      	lsls	r1, r2, #5
 800d64c:	697a      	ldr	r2, [r7, #20]
 800d64e:	440a      	add	r2, r1
 800d650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	015a      	lsls	r2, r3, #5
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	4413      	add	r3, r2
 800d662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d666:	691a      	ldr	r2, [r3, #16]
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	69db      	ldr	r3, [r3, #28]
 800d66c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d670:	6939      	ldr	r1, [r7, #16]
 800d672:	0148      	lsls	r0, r1, #5
 800d674:	6979      	ldr	r1, [r7, #20]
 800d676:	4401      	add	r1, r0
 800d678:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d67c:	4313      	orrs	r3, r2
 800d67e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d680:	79fb      	ldrb	r3, [r7, #7]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d10d      	bne.n	800d6a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	691b      	ldr	r3, [r3, #16]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d009      	beq.n	800d6a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	6919      	ldr	r1, [r3, #16]
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	015a      	lsls	r2, r3, #5
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	4413      	add	r3, r2
 800d69a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d69e:	460a      	mov	r2, r1
 800d6a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	015a      	lsls	r2, r3, #5
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	693a      	ldr	r2, [r7, #16]
 800d6b2:	0151      	lsls	r1, r2, #5
 800d6b4:	697a      	ldr	r2, [r7, #20]
 800d6b6:	440a      	add	r2, r1
 800d6b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d6c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	371c      	adds	r7, #28
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b087      	sub	sp, #28
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	785b      	ldrb	r3, [r3, #1]
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d14a      	bne.n	800d784 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	015a      	lsls	r2, r3, #5
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d706:	f040 8086 	bne.w	800d816 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	015a      	lsls	r2, r3, #5
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	4413      	add	r3, r2
 800d714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	683a      	ldr	r2, [r7, #0]
 800d71c:	7812      	ldrb	r2, [r2, #0]
 800d71e:	0151      	lsls	r1, r2, #5
 800d720:	693a      	ldr	r2, [r7, #16]
 800d722:	440a      	add	r2, r1
 800d724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d728:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d72c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	015a      	lsls	r2, r3, #5
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	4413      	add	r3, r2
 800d738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	683a      	ldr	r2, [r7, #0]
 800d740:	7812      	ldrb	r2, [r2, #0]
 800d742:	0151      	lsls	r1, r2, #5
 800d744:	693a      	ldr	r2, [r7, #16]
 800d746:	440a      	add	r2, r1
 800d748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d74c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d750:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	3301      	adds	r3, #1
 800d756:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f242 7210 	movw	r2, #10000	; 0x2710
 800d75e:	4293      	cmp	r3, r2
 800d760:	d902      	bls.n	800d768 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d762:	2301      	movs	r3, #1
 800d764:	75fb      	strb	r3, [r7, #23]
          break;
 800d766:	e056      	b.n	800d816 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	015a      	lsls	r2, r3, #5
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	4413      	add	r3, r2
 800d772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d77c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d780:	d0e7      	beq.n	800d752 <USB_EPStopXfer+0x82>
 800d782:	e048      	b.n	800d816 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	015a      	lsls	r2, r3, #5
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	4413      	add	r3, r2
 800d78e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d79c:	d13b      	bne.n	800d816 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	015a      	lsls	r2, r3, #5
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	683a      	ldr	r2, [r7, #0]
 800d7b0:	7812      	ldrb	r2, [r2, #0]
 800d7b2:	0151      	lsls	r1, r2, #5
 800d7b4:	693a      	ldr	r2, [r7, #16]
 800d7b6:	440a      	add	r2, r1
 800d7b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d7c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	015a      	lsls	r2, r3, #5
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	4413      	add	r3, r2
 800d7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	683a      	ldr	r2, [r7, #0]
 800d7d4:	7812      	ldrb	r2, [r2, #0]
 800d7d6:	0151      	lsls	r1, r2, #5
 800d7d8:	693a      	ldr	r2, [r7, #16]
 800d7da:	440a      	add	r2, r1
 800d7dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d7e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f242 7210 	movw	r2, #10000	; 0x2710
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d902      	bls.n	800d7fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	75fb      	strb	r3, [r7, #23]
          break;
 800d7fa:	e00c      	b.n	800d816 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	015a      	lsls	r2, r3, #5
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	4413      	add	r3, r2
 800d806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d814:	d0e7      	beq.n	800d7e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d816:	7dfb      	ldrb	r3, [r7, #23]
}
 800d818:	4618      	mov	r0, r3
 800d81a:	371c      	adds	r7, #28
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d824:	b480      	push	{r7}
 800d826:	b089      	sub	sp, #36	; 0x24
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	4611      	mov	r1, r2
 800d830:	461a      	mov	r2, r3
 800d832:	460b      	mov	r3, r1
 800d834:	71fb      	strb	r3, [r7, #7]
 800d836:	4613      	mov	r3, r2
 800d838:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d842:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d846:	2b00      	cmp	r3, #0
 800d848:	d123      	bne.n	800d892 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d84a:	88bb      	ldrh	r3, [r7, #4]
 800d84c:	3303      	adds	r3, #3
 800d84e:	089b      	lsrs	r3, r3, #2
 800d850:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d852:	2300      	movs	r3, #0
 800d854:	61bb      	str	r3, [r7, #24]
 800d856:	e018      	b.n	800d88a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d858:	79fb      	ldrb	r3, [r7, #7]
 800d85a:	031a      	lsls	r2, r3, #12
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	4413      	add	r3, r2
 800d860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d864:	461a      	mov	r2, r3
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	3301      	adds	r3, #1
 800d870:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	3301      	adds	r3, #1
 800d876:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d878:	69fb      	ldr	r3, [r7, #28]
 800d87a:	3301      	adds	r3, #1
 800d87c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	3301      	adds	r3, #1
 800d882:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	3301      	adds	r3, #1
 800d888:	61bb      	str	r3, [r7, #24]
 800d88a:	69ba      	ldr	r2, [r7, #24]
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d3e2      	bcc.n	800d858 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d892:	2300      	movs	r3, #0
}
 800d894:	4618      	mov	r0, r3
 800d896:	3724      	adds	r7, #36	; 0x24
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b08b      	sub	sp, #44	; 0x2c
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	4613      	mov	r3, r2
 800d8ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d8b6:	88fb      	ldrh	r3, [r7, #6]
 800d8b8:	089b      	lsrs	r3, r3, #2
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d8be:	88fb      	ldrh	r3, [r7, #6]
 800d8c0:	f003 0303 	and.w	r3, r3, #3
 800d8c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	623b      	str	r3, [r7, #32]
 800d8ca:	e014      	b.n	800d8f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d6:	601a      	str	r2, [r3, #0]
    pDest++;
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8da:	3301      	adds	r3, #1
 800d8dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d8f0:	6a3b      	ldr	r3, [r7, #32]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	623b      	str	r3, [r7, #32]
 800d8f6:	6a3a      	ldr	r2, [r7, #32]
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d3e6      	bcc.n	800d8cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d8fe:	8bfb      	ldrh	r3, [r7, #30]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d01e      	beq.n	800d942 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d904:	2300      	movs	r3, #0
 800d906:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d90e:	461a      	mov	r2, r3
 800d910:	f107 0310 	add.w	r3, r7, #16
 800d914:	6812      	ldr	r2, [r2, #0]
 800d916:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d918:	693a      	ldr	r2, [r7, #16]
 800d91a:	6a3b      	ldr	r3, [r7, #32]
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	00db      	lsls	r3, r3, #3
 800d920:	fa22 f303 	lsr.w	r3, r2, r3
 800d924:	b2da      	uxtb	r2, r3
 800d926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d928:	701a      	strb	r2, [r3, #0]
      i++;
 800d92a:	6a3b      	ldr	r3, [r7, #32]
 800d92c:	3301      	adds	r3, #1
 800d92e:	623b      	str	r3, [r7, #32]
      pDest++;
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	3301      	adds	r3, #1
 800d934:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d936:	8bfb      	ldrh	r3, [r7, #30]
 800d938:	3b01      	subs	r3, #1
 800d93a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d93c:	8bfb      	ldrh	r3, [r7, #30]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d1ea      	bne.n	800d918 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d944:	4618      	mov	r0, r3
 800d946:	372c      	adds	r7, #44	; 0x2c
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	785b      	ldrb	r3, [r3, #1]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d12c      	bne.n	800d9c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	015a      	lsls	r2, r3, #5
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	4413      	add	r3, r2
 800d974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	db12      	blt.n	800d9a4 <USB_EPSetStall+0x54>
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d00f      	beq.n	800d9a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	015a      	lsls	r2, r3, #5
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	4413      	add	r3, r2
 800d98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	68ba      	ldr	r2, [r7, #8]
 800d994:	0151      	lsls	r1, r2, #5
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	440a      	add	r2, r1
 800d99a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d99e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d9a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	015a      	lsls	r2, r3, #5
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68ba      	ldr	r2, [r7, #8]
 800d9b4:	0151      	lsls	r1, r2, #5
 800d9b6:	68fa      	ldr	r2, [r7, #12]
 800d9b8:	440a      	add	r2, r1
 800d9ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d9c2:	6013      	str	r3, [r2, #0]
 800d9c4:	e02b      	b.n	800da1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	015a      	lsls	r2, r3, #5
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	db12      	blt.n	800d9fe <USB_EPSetStall+0xae>
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00f      	beq.n	800d9fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	015a      	lsls	r2, r3, #5
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	0151      	lsls	r1, r2, #5
 800d9f0:	68fa      	ldr	r2, [r7, #12]
 800d9f2:	440a      	add	r2, r1
 800d9f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d9fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	015a      	lsls	r2, r3, #5
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	4413      	add	r3, r2
 800da06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	0151      	lsls	r1, r2, #5
 800da10:	68fa      	ldr	r2, [r7, #12]
 800da12:	440a      	add	r2, r1
 800da14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800da1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da1e:	2300      	movs	r3, #0
}
 800da20:	4618      	mov	r0, r3
 800da22:	3714      	adds	r7, #20
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr

0800da2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	785b      	ldrb	r3, [r3, #1]
 800da44:	2b01      	cmp	r3, #1
 800da46:	d128      	bne.n	800da9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	015a      	lsls	r2, r3, #5
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	4413      	add	r3, r2
 800da50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68ba      	ldr	r2, [r7, #8]
 800da58:	0151      	lsls	r1, r2, #5
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	440a      	add	r2, r1
 800da5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800da66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	791b      	ldrb	r3, [r3, #4]
 800da6c:	2b03      	cmp	r3, #3
 800da6e:	d003      	beq.n	800da78 <USB_EPClearStall+0x4c>
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	791b      	ldrb	r3, [r3, #4]
 800da74:	2b02      	cmp	r3, #2
 800da76:	d138      	bne.n	800daea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	015a      	lsls	r2, r3, #5
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	4413      	add	r3, r2
 800da80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	68ba      	ldr	r2, [r7, #8]
 800da88:	0151      	lsls	r1, r2, #5
 800da8a:	68fa      	ldr	r2, [r7, #12]
 800da8c:	440a      	add	r2, r1
 800da8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da96:	6013      	str	r3, [r2, #0]
 800da98:	e027      	b.n	800daea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	015a      	lsls	r2, r3, #5
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	4413      	add	r3, r2
 800daa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	0151      	lsls	r1, r2, #5
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	440a      	add	r2, r1
 800dab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dab4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dab8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	791b      	ldrb	r3, [r3, #4]
 800dabe:	2b03      	cmp	r3, #3
 800dac0:	d003      	beq.n	800daca <USB_EPClearStall+0x9e>
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	791b      	ldrb	r3, [r3, #4]
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	d10f      	bne.n	800daea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	015a      	lsls	r2, r3, #5
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	4413      	add	r3, r2
 800dad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	68ba      	ldr	r2, [r7, #8]
 800dada:	0151      	lsls	r1, r2, #5
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	440a      	add	r2, r1
 800dae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dae8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800daea:	2300      	movs	r3, #0
}
 800daec:	4618      	mov	r0, r3
 800daee:	3714      	adds	r7, #20
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr

0800daf8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b085      	sub	sp, #20
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	460b      	mov	r3, r1
 800db02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68fa      	ldr	r2, [r7, #12]
 800db12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800db1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	78fb      	ldrb	r3, [r7, #3]
 800db26:	011b      	lsls	r3, r3, #4
 800db28:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800db2c:	68f9      	ldr	r1, [r7, #12]
 800db2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db32:	4313      	orrs	r3, r2
 800db34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800db36:	2300      	movs	r3, #0
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3714      	adds	r7, #20
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db5e:	f023 0303 	bic.w	r3, r3, #3
 800db62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db72:	f023 0302 	bic.w	r3, r3, #2
 800db76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3714      	adds	r7, #20
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr

0800db86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800db86:	b480      	push	{r7}
 800db88:	b085      	sub	sp, #20
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dba0:	f023 0303 	bic.w	r3, r3, #3
 800dba4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dbb4:	f043 0302 	orr.w	r3, r3, #2
 800dbb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dbba:	2300      	movs	r3, #0
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3714      	adds	r7, #20
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr

0800dbc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b085      	sub	sp, #20
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	695b      	ldr	r3, [r3, #20]
 800dbd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	699b      	ldr	r3, [r3, #24]
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	4013      	ands	r3, r2
 800dbde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3714      	adds	r7, #20
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dbee:	b480      	push	{r7}
 800dbf0:	b085      	sub	sp, #20
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc00:	699b      	ldr	r3, [r3, #24]
 800dc02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc0a:	69db      	ldr	r3, [r3, #28]
 800dc0c:	68ba      	ldr	r2, [r7, #8]
 800dc0e:	4013      	ands	r3, r2
 800dc10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	0c1b      	lsrs	r3, r3, #16
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3714      	adds	r7, #20
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr

0800dc22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dc22:	b480      	push	{r7}
 800dc24:	b085      	sub	sp, #20
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc34:	699b      	ldr	r3, [r3, #24]
 800dc36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc3e:	69db      	ldr	r3, [r3, #28]
 800dc40:	68ba      	ldr	r2, [r7, #8]
 800dc42:	4013      	ands	r3, r2
 800dc44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	b29b      	uxth	r3, r3
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3714      	adds	r7, #20
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc56:	b480      	push	{r7}
 800dc58:	b085      	sub	sp, #20
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
 800dc5e:	460b      	mov	r3, r1
 800dc60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dc66:	78fb      	ldrb	r3, [r7, #3]
 800dc68:	015a      	lsls	r2, r3, #5
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc7c:	695b      	ldr	r3, [r3, #20]
 800dc7e:	68ba      	ldr	r2, [r7, #8]
 800dc80:	4013      	ands	r3, r2
 800dc82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dc84:	68bb      	ldr	r3, [r7, #8]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3714      	adds	r7, #20
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc92:	b480      	push	{r7}
 800dc94:	b087      	sub	sp, #28
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dca8:	691b      	ldr	r3, [r3, #16]
 800dcaa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcb4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dcb6:	78fb      	ldrb	r3, [r7, #3]
 800dcb8:	f003 030f 	and.w	r3, r3, #15
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	fa22 f303 	lsr.w	r3, r2, r3
 800dcc2:	01db      	lsls	r3, r3, #7
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	693a      	ldr	r2, [r7, #16]
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dccc:	78fb      	ldrb	r3, [r7, #3]
 800dcce:	015a      	lsls	r2, r3, #5
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	693a      	ldr	r2, [r7, #16]
 800dcdc:	4013      	ands	r3, r2
 800dcde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dce0:	68bb      	ldr	r3, [r7, #8]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	371c      	adds	r7, #28
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr

0800dcee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800dcee:	b480      	push	{r7}
 800dcf0:	b083      	sub	sp, #12
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	695b      	ldr	r3, [r3, #20]
 800dcfa:	f003 0301 	and.w	r3, r3, #1
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	370c      	adds	r7, #12
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr

0800dd0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800dd0a:	b480      	push	{r7}
 800dd0c:	b085      	sub	sp, #20
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	68fa      	ldr	r2, [r7, #12]
 800dd20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dd28:	f023 0307 	bic.w	r3, r3, #7
 800dd2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dd42:	2300      	movs	r3, #0
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3714      	adds	r7, #20
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b087      	sub	sp, #28
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	607a      	str	r2, [r7, #4]
 800dd5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	333c      	adds	r3, #60	; 0x3c
 800dd66:	3304      	adds	r3, #4
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	4a26      	ldr	r2, [pc, #152]	; (800de08 <USB_EP0_OutStart+0xb8>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d90a      	bls.n	800dd8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd84:	d101      	bne.n	800dd8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	e037      	b.n	800ddfa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd90:	461a      	mov	r2, r3
 800dd92:	2300      	movs	r3, #0
 800dd94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dda4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dda8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	697a      	ldr	r2, [r7, #20]
 800ddb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddb8:	f043 0318 	orr.w	r3, r3, #24
 800ddbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	697a      	ldr	r2, [r7, #20]
 800ddc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddcc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ddd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ddd2:	7afb      	ldrb	r3, [r7, #11]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d10f      	bne.n	800ddf8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddde:	461a      	mov	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	697a      	ldr	r2, [r7, #20]
 800ddee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddf2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ddf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	371c      	adds	r7, #28
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop
 800de08:	4f54300a 	.word	0x4f54300a

0800de0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de14:	2300      	movs	r3, #0
 800de16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	3301      	adds	r3, #1
 800de1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	4a13      	ldr	r2, [pc, #76]	; (800de70 <USB_CoreReset+0x64>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d901      	bls.n	800de2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800de26:	2303      	movs	r3, #3
 800de28:	e01b      	b.n	800de62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	691b      	ldr	r3, [r3, #16]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	daf2      	bge.n	800de18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800de32:	2300      	movs	r3, #0
 800de34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	691b      	ldr	r3, [r3, #16]
 800de3a:	f043 0201 	orr.w	r2, r3, #1
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	3301      	adds	r3, #1
 800de46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	4a09      	ldr	r2, [pc, #36]	; (800de70 <USB_CoreReset+0x64>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d901      	bls.n	800de54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800de50:	2303      	movs	r3, #3
 800de52:	e006      	b.n	800de62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	691b      	ldr	r3, [r3, #16]
 800de58:	f003 0301 	and.w	r3, r3, #1
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d0f0      	beq.n	800de42 <USB_CoreReset+0x36>

  return HAL_OK;
 800de60:	2300      	movs	r3, #0
}
 800de62:	4618      	mov	r0, r3
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	00030d40 	.word	0x00030d40

0800de74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	460b      	mov	r3, r1
 800de7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800de80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800de84:	f012 fe5a 	bl	8020b3c <USBD_static_malloc>
 800de88:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d109      	bne.n	800dea4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	32b0      	adds	r2, #176	; 0xb0
 800de9a:	2100      	movs	r1, #0
 800de9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dea0:	2302      	movs	r3, #2
 800dea2:	e0d4      	b.n	800e04e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dea4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800dea8:	2100      	movs	r1, #0
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f015 fc90 	bl	80237d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	32b0      	adds	r2, #176	; 0xb0
 800deba:	68f9      	ldr	r1, [r7, #12]
 800debc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	32b0      	adds	r2, #176	; 0xb0
 800deca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	7c1b      	ldrb	r3, [r3, #16]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d138      	bne.n	800df4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dedc:	4b5e      	ldr	r3, [pc, #376]	; (800e058 <USBD_CDC_Init+0x1e4>)
 800dede:	7819      	ldrb	r1, [r3, #0]
 800dee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dee4:	2202      	movs	r2, #2
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f012 fd05 	bl	80208f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800deec:	4b5a      	ldr	r3, [pc, #360]	; (800e058 <USBD_CDC_Init+0x1e4>)
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	f003 020f 	and.w	r2, r3, #15
 800def4:	6879      	ldr	r1, [r7, #4]
 800def6:	4613      	mov	r3, r2
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	4413      	add	r3, r2
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	440b      	add	r3, r1
 800df00:	3324      	adds	r3, #36	; 0x24
 800df02:	2201      	movs	r2, #1
 800df04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800df06:	4b55      	ldr	r3, [pc, #340]	; (800e05c <USBD_CDC_Init+0x1e8>)
 800df08:	7819      	ldrb	r1, [r3, #0]
 800df0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df0e:	2202      	movs	r2, #2
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f012 fcf0 	bl	80208f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800df16:	4b51      	ldr	r3, [pc, #324]	; (800e05c <USBD_CDC_Init+0x1e8>)
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	f003 020f 	and.w	r2, r3, #15
 800df1e:	6879      	ldr	r1, [r7, #4]
 800df20:	4613      	mov	r3, r2
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	4413      	add	r3, r2
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	440b      	add	r3, r1
 800df2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df2e:	2201      	movs	r2, #1
 800df30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800df32:	4b4b      	ldr	r3, [pc, #300]	; (800e060 <USBD_CDC_Init+0x1ec>)
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	f003 020f 	and.w	r2, r3, #15
 800df3a:	6879      	ldr	r1, [r7, #4]
 800df3c:	4613      	mov	r3, r2
 800df3e:	009b      	lsls	r3, r3, #2
 800df40:	4413      	add	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	440b      	add	r3, r1
 800df46:	3326      	adds	r3, #38	; 0x26
 800df48:	2210      	movs	r2, #16
 800df4a:	801a      	strh	r2, [r3, #0]
 800df4c:	e035      	b.n	800dfba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800df4e:	4b42      	ldr	r3, [pc, #264]	; (800e058 <USBD_CDC_Init+0x1e4>)
 800df50:	7819      	ldrb	r1, [r3, #0]
 800df52:	2340      	movs	r3, #64	; 0x40
 800df54:	2202      	movs	r2, #2
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f012 fccd 	bl	80208f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800df5c:	4b3e      	ldr	r3, [pc, #248]	; (800e058 <USBD_CDC_Init+0x1e4>)
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	f003 020f 	and.w	r2, r3, #15
 800df64:	6879      	ldr	r1, [r7, #4]
 800df66:	4613      	mov	r3, r2
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	4413      	add	r3, r2
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	440b      	add	r3, r1
 800df70:	3324      	adds	r3, #36	; 0x24
 800df72:	2201      	movs	r2, #1
 800df74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800df76:	4b39      	ldr	r3, [pc, #228]	; (800e05c <USBD_CDC_Init+0x1e8>)
 800df78:	7819      	ldrb	r1, [r3, #0]
 800df7a:	2340      	movs	r3, #64	; 0x40
 800df7c:	2202      	movs	r2, #2
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f012 fcb9 	bl	80208f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800df84:	4b35      	ldr	r3, [pc, #212]	; (800e05c <USBD_CDC_Init+0x1e8>)
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	f003 020f 	and.w	r2, r3, #15
 800df8c:	6879      	ldr	r1, [r7, #4]
 800df8e:	4613      	mov	r3, r2
 800df90:	009b      	lsls	r3, r3, #2
 800df92:	4413      	add	r3, r2
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	440b      	add	r3, r1
 800df98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df9c:	2201      	movs	r2, #1
 800df9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dfa0:	4b2f      	ldr	r3, [pc, #188]	; (800e060 <USBD_CDC_Init+0x1ec>)
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	f003 020f 	and.w	r2, r3, #15
 800dfa8:	6879      	ldr	r1, [r7, #4]
 800dfaa:	4613      	mov	r3, r2
 800dfac:	009b      	lsls	r3, r3, #2
 800dfae:	4413      	add	r3, r2
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	440b      	add	r3, r1
 800dfb4:	3326      	adds	r3, #38	; 0x26
 800dfb6:	2210      	movs	r2, #16
 800dfb8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dfba:	4b29      	ldr	r3, [pc, #164]	; (800e060 <USBD_CDC_Init+0x1ec>)
 800dfbc:	7819      	ldrb	r1, [r3, #0]
 800dfbe:	2308      	movs	r3, #8
 800dfc0:	2203      	movs	r2, #3
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f012 fc97 	bl	80208f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dfc8:	4b25      	ldr	r3, [pc, #148]	; (800e060 <USBD_CDC_Init+0x1ec>)
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	f003 020f 	and.w	r2, r3, #15
 800dfd0:	6879      	ldr	r1, [r7, #4]
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4413      	add	r3, r2
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	440b      	add	r3, r1
 800dfdc:	3324      	adds	r3, #36	; 0x24
 800dfde:	2201      	movs	r2, #1
 800dfe0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	33b0      	adds	r3, #176	; 0xb0
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4413      	add	r3, r2
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2200      	movs	r2, #0
 800e002:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2200      	movs	r2, #0
 800e00a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e014:	2b00      	cmp	r3, #0
 800e016:	d101      	bne.n	800e01c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e018:	2302      	movs	r3, #2
 800e01a:	e018      	b.n	800e04e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	7c1b      	ldrb	r3, [r3, #16]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d10a      	bne.n	800e03a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e024:	4b0d      	ldr	r3, [pc, #52]	; (800e05c <USBD_CDC_Init+0x1e8>)
 800e026:	7819      	ldrb	r1, [r3, #0]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e02e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f012 fd4e 	bl	8020ad4 <USBD_LL_PrepareReceive>
 800e038:	e008      	b.n	800e04c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e03a:	4b08      	ldr	r3, [pc, #32]	; (800e05c <USBD_CDC_Init+0x1e8>)
 800e03c:	7819      	ldrb	r1, [r3, #0]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e044:	2340      	movs	r3, #64	; 0x40
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f012 fd44 	bl	8020ad4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e04c:	2300      	movs	r3, #0
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	20000103 	.word	0x20000103
 800e05c:	20000104 	.word	0x20000104
 800e060:	20000105 	.word	0x20000105

0800e064 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	460b      	mov	r3, r1
 800e06e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e070:	4b3a      	ldr	r3, [pc, #232]	; (800e15c <USBD_CDC_DeInit+0xf8>)
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	4619      	mov	r1, r3
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f012 fc63 	bl	8020942 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e07c:	4b37      	ldr	r3, [pc, #220]	; (800e15c <USBD_CDC_DeInit+0xf8>)
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	f003 020f 	and.w	r2, r3, #15
 800e084:	6879      	ldr	r1, [r7, #4]
 800e086:	4613      	mov	r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	4413      	add	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	440b      	add	r3, r1
 800e090:	3324      	adds	r3, #36	; 0x24
 800e092:	2200      	movs	r2, #0
 800e094:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e096:	4b32      	ldr	r3, [pc, #200]	; (800e160 <USBD_CDC_DeInit+0xfc>)
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	4619      	mov	r1, r3
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f012 fc50 	bl	8020942 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e0a2:	4b2f      	ldr	r3, [pc, #188]	; (800e160 <USBD_CDC_DeInit+0xfc>)
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	f003 020f 	and.w	r2, r3, #15
 800e0aa:	6879      	ldr	r1, [r7, #4]
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	440b      	add	r3, r1
 800e0b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e0be:	4b29      	ldr	r3, [pc, #164]	; (800e164 <USBD_CDC_DeInit+0x100>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f012 fc3c 	bl	8020942 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e0ca:	4b26      	ldr	r3, [pc, #152]	; (800e164 <USBD_CDC_DeInit+0x100>)
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	f003 020f 	and.w	r2, r3, #15
 800e0d2:	6879      	ldr	r1, [r7, #4]
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	4413      	add	r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	440b      	add	r3, r1
 800e0de:	3324      	adds	r3, #36	; 0x24
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e0e4:	4b1f      	ldr	r3, [pc, #124]	; (800e164 <USBD_CDC_DeInit+0x100>)
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	f003 020f 	and.w	r2, r3, #15
 800e0ec:	6879      	ldr	r1, [r7, #4]
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	4413      	add	r3, r2
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	440b      	add	r3, r1
 800e0f8:	3326      	adds	r3, #38	; 0x26
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	32b0      	adds	r2, #176	; 0xb0
 800e108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d01f      	beq.n	800e150 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	33b0      	adds	r3, #176	; 0xb0
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	32b0      	adds	r2, #176	; 0xb0
 800e12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e132:	4618      	mov	r0, r3
 800e134:	f012 fd10 	bl	8020b58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	32b0      	adds	r2, #176	; 0xb0
 800e142:	2100      	movs	r1, #0
 800e144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2200      	movs	r2, #0
 800e14c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e150:	2300      	movs	r3, #0
}
 800e152:	4618      	mov	r0, r3
 800e154:	3708      	adds	r7, #8
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	20000103 	.word	0x20000103
 800e160:	20000104 	.word	0x20000104
 800e164:	20000105 	.word	0x20000105

0800e168 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	32b0      	adds	r2, #176	; 0xb0
 800e17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e180:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e182:	2300      	movs	r3, #0
 800e184:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e186:	2300      	movs	r3, #0
 800e188:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e18a:	2300      	movs	r3, #0
 800e18c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d101      	bne.n	800e198 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e194:	2303      	movs	r3, #3
 800e196:	e0bf      	b.n	800e318 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d050      	beq.n	800e246 <USBD_CDC_Setup+0xde>
 800e1a4:	2b20      	cmp	r3, #32
 800e1a6:	f040 80af 	bne.w	800e308 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	88db      	ldrh	r3, [r3, #6]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d03a      	beq.n	800e228 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	b25b      	sxtb	r3, r3
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	da1b      	bge.n	800e1f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	33b0      	adds	r3, #176	; 0xb0
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	4413      	add	r3, r2
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	683a      	ldr	r2, [r7, #0]
 800e1d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e1d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e1d4:	683a      	ldr	r2, [r7, #0]
 800e1d6:	88d2      	ldrh	r2, [r2, #6]
 800e1d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	88db      	ldrh	r3, [r3, #6]
 800e1de:	2b07      	cmp	r3, #7
 800e1e0:	bf28      	it	cs
 800e1e2:	2307      	movcs	r3, #7
 800e1e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	89fa      	ldrh	r2, [r7, #14]
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f001 fd89 	bl	800fd04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e1f2:	e090      	b.n	800e316 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	785a      	ldrb	r2, [r3, #1]
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	88db      	ldrh	r3, [r3, #6]
 800e202:	2b3f      	cmp	r3, #63	; 0x3f
 800e204:	d803      	bhi.n	800e20e <USBD_CDC_Setup+0xa6>
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	88db      	ldrh	r3, [r3, #6]
 800e20a:	b2da      	uxtb	r2, r3
 800e20c:	e000      	b.n	800e210 <USBD_CDC_Setup+0xa8>
 800e20e:	2240      	movs	r2, #64	; 0x40
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e216:	6939      	ldr	r1, [r7, #16]
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e21e:	461a      	mov	r2, r3
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f001 fd9b 	bl	800fd5c <USBD_CtlPrepareRx>
      break;
 800e226:	e076      	b.n	800e316 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	33b0      	adds	r3, #176	; 0xb0
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	4413      	add	r3, r2
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	689b      	ldr	r3, [r3, #8]
 800e23a:	683a      	ldr	r2, [r7, #0]
 800e23c:	7850      	ldrb	r0, [r2, #1]
 800e23e:	2200      	movs	r2, #0
 800e240:	6839      	ldr	r1, [r7, #0]
 800e242:	4798      	blx	r3
      break;
 800e244:	e067      	b.n	800e316 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	785b      	ldrb	r3, [r3, #1]
 800e24a:	2b0b      	cmp	r3, #11
 800e24c:	d851      	bhi.n	800e2f2 <USBD_CDC_Setup+0x18a>
 800e24e:	a201      	add	r2, pc, #4	; (adr r2, 800e254 <USBD_CDC_Setup+0xec>)
 800e250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e254:	0800e285 	.word	0x0800e285
 800e258:	0800e301 	.word	0x0800e301
 800e25c:	0800e2f3 	.word	0x0800e2f3
 800e260:	0800e2f3 	.word	0x0800e2f3
 800e264:	0800e2f3 	.word	0x0800e2f3
 800e268:	0800e2f3 	.word	0x0800e2f3
 800e26c:	0800e2f3 	.word	0x0800e2f3
 800e270:	0800e2f3 	.word	0x0800e2f3
 800e274:	0800e2f3 	.word	0x0800e2f3
 800e278:	0800e2f3 	.word	0x0800e2f3
 800e27c:	0800e2af 	.word	0x0800e2af
 800e280:	0800e2d9 	.word	0x0800e2d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	2b03      	cmp	r3, #3
 800e28e:	d107      	bne.n	800e2a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e290:	f107 030a 	add.w	r3, r7, #10
 800e294:	2202      	movs	r2, #2
 800e296:	4619      	mov	r1, r3
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f001 fd33 	bl	800fd04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e29e:	e032      	b.n	800e306 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e2a0:	6839      	ldr	r1, [r7, #0]
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f001 fcbd 	bl	800fc22 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2a8:	2303      	movs	r3, #3
 800e2aa:	75fb      	strb	r3, [r7, #23]
          break;
 800e2ac:	e02b      	b.n	800e306 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	2b03      	cmp	r3, #3
 800e2b8:	d107      	bne.n	800e2ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e2ba:	f107 030d 	add.w	r3, r7, #13
 800e2be:	2201      	movs	r2, #1
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f001 fd1e 	bl	800fd04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2c8:	e01d      	b.n	800e306 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e2ca:	6839      	ldr	r1, [r7, #0]
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f001 fca8 	bl	800fc22 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2d2:	2303      	movs	r3, #3
 800e2d4:	75fb      	strb	r3, [r7, #23]
          break;
 800e2d6:	e016      	b.n	800e306 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	2b03      	cmp	r3, #3
 800e2e2:	d00f      	beq.n	800e304 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e2e4:	6839      	ldr	r1, [r7, #0]
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f001 fc9b 	bl	800fc22 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2ec:	2303      	movs	r3, #3
 800e2ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e2f0:	e008      	b.n	800e304 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e2f2:	6839      	ldr	r1, [r7, #0]
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f001 fc94 	bl	800fc22 <USBD_CtlError>
          ret = USBD_FAIL;
 800e2fa:	2303      	movs	r3, #3
 800e2fc:	75fb      	strb	r3, [r7, #23]
          break;
 800e2fe:	e002      	b.n	800e306 <USBD_CDC_Setup+0x19e>
          break;
 800e300:	bf00      	nop
 800e302:	e008      	b.n	800e316 <USBD_CDC_Setup+0x1ae>
          break;
 800e304:	bf00      	nop
      }
      break;
 800e306:	e006      	b.n	800e316 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e308:	6839      	ldr	r1, [r7, #0]
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f001 fc89 	bl	800fc22 <USBD_CtlError>
      ret = USBD_FAIL;
 800e310:	2303      	movs	r3, #3
 800e312:	75fb      	strb	r3, [r7, #23]
      break;
 800e314:	bf00      	nop
  }

  return (uint8_t)ret;
 800e316:	7dfb      	ldrb	r3, [r7, #23]
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3718      	adds	r7, #24
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	460b      	mov	r3, r1
 800e32a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e332:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	32b0      	adds	r2, #176	; 0xb0
 800e33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d101      	bne.n	800e34a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e346:	2303      	movs	r3, #3
 800e348:	e065      	b.n	800e416 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	32b0      	adds	r2, #176	; 0xb0
 800e354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e358:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e35a:	78fb      	ldrb	r3, [r7, #3]
 800e35c:	f003 020f 	and.w	r2, r3, #15
 800e360:	6879      	ldr	r1, [r7, #4]
 800e362:	4613      	mov	r3, r2
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	4413      	add	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	440b      	add	r3, r1
 800e36c:	3318      	adds	r3, #24
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d02f      	beq.n	800e3d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e374:	78fb      	ldrb	r3, [r7, #3]
 800e376:	f003 020f 	and.w	r2, r3, #15
 800e37a:	6879      	ldr	r1, [r7, #4]
 800e37c:	4613      	mov	r3, r2
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	4413      	add	r3, r2
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	440b      	add	r3, r1
 800e386:	3318      	adds	r3, #24
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	78fb      	ldrb	r3, [r7, #3]
 800e38c:	f003 010f 	and.w	r1, r3, #15
 800e390:	68f8      	ldr	r0, [r7, #12]
 800e392:	460b      	mov	r3, r1
 800e394:	00db      	lsls	r3, r3, #3
 800e396:	440b      	add	r3, r1
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	4403      	add	r3, r0
 800e39c:	3348      	adds	r3, #72	; 0x48
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800e3a4:	fb01 f303 	mul.w	r3, r1, r3
 800e3a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d112      	bne.n	800e3d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e3ae:	78fb      	ldrb	r3, [r7, #3]
 800e3b0:	f003 020f 	and.w	r2, r3, #15
 800e3b4:	6879      	ldr	r1, [r7, #4]
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	4413      	add	r3, r2
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	440b      	add	r3, r1
 800e3c0:	3318      	adds	r3, #24
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e3c6:	78f9      	ldrb	r1, [r7, #3]
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f012 fb60 	bl	8020a92 <USBD_LL_Transmit>
 800e3d2:	e01f      	b.n	800e414 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	33b0      	adds	r3, #176	; 0xb0
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	4413      	add	r3, r2
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	691b      	ldr	r3, [r3, #16]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d010      	beq.n	800e414 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	33b0      	adds	r3, #176	; 0xb0
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	4413      	add	r3, r2
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e40a:	68ba      	ldr	r2, [r7, #8]
 800e40c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e410:	78fa      	ldrb	r2, [r7, #3]
 800e412:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e414:	2300      	movs	r3, #0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e41e:	b580      	push	{r7, lr}
 800e420:	b084      	sub	sp, #16
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
 800e426:	460b      	mov	r3, r1
 800e428:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	32b0      	adds	r2, #176	; 0xb0
 800e434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e438:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	32b0      	adds	r2, #176	; 0xb0
 800e444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e44c:	2303      	movs	r3, #3
 800e44e:	e01a      	b.n	800e486 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e450:	78fb      	ldrb	r3, [r7, #3]
 800e452:	4619      	mov	r1, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f012 fb5e 	bl	8020b16 <USBD_LL_GetRxDataSize>
 800e45a:	4602      	mov	r2, r0
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	33b0      	adds	r3, #176	; 0xb0
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	4413      	add	r3, r2
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e47a:	68fa      	ldr	r2, [r7, #12]
 800e47c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e480:	4611      	mov	r1, r2
 800e482:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e48e:	b580      	push	{r7, lr}
 800e490:	b084      	sub	sp, #16
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	32b0      	adds	r2, #176	; 0xb0
 800e4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d101      	bne.n	800e4b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e4ac:	2303      	movs	r3, #3
 800e4ae:	e025      	b.n	800e4fc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	33b0      	adds	r3, #176	; 0xb0
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	4413      	add	r3, r2
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d01a      	beq.n	800e4fa <USBD_CDC_EP0_RxReady+0x6c>
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e4ca:	2bff      	cmp	r3, #255	; 0xff
 800e4cc:	d015      	beq.n	800e4fa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	33b0      	adds	r3, #176	; 0xb0
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	4413      	add	r3, r2
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	689b      	ldr	r3, [r3, #8]
 800e4e0:	68fa      	ldr	r2, [r7, #12]
 800e4e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e4e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e4e8:	68fa      	ldr	r2, [r7, #12]
 800e4ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e4ee:	b292      	uxth	r2, r2
 800e4f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	22ff      	movs	r2, #255	; 0xff
 800e4f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e4fa:	2300      	movs	r3, #0
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3710      	adds	r7, #16
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b086      	sub	sp, #24
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e50c:	2182      	movs	r1, #130	; 0x82
 800e50e:	4818      	ldr	r0, [pc, #96]	; (800e570 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e510:	f000 fd4f 	bl	800efb2 <USBD_GetEpDesc>
 800e514:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e516:	2101      	movs	r1, #1
 800e518:	4815      	ldr	r0, [pc, #84]	; (800e570 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e51a:	f000 fd4a 	bl	800efb2 <USBD_GetEpDesc>
 800e51e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e520:	2181      	movs	r1, #129	; 0x81
 800e522:	4813      	ldr	r0, [pc, #76]	; (800e570 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e524:	f000 fd45 	bl	800efb2 <USBD_GetEpDesc>
 800e528:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d002      	beq.n	800e536 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	2210      	movs	r2, #16
 800e534:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d006      	beq.n	800e54a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	2200      	movs	r2, #0
 800e540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e544:	711a      	strb	r2, [r3, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d006      	beq.n	800e55e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2200      	movs	r2, #0
 800e554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e558:	711a      	strb	r2, [r3, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2243      	movs	r2, #67	; 0x43
 800e562:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e564:	4b02      	ldr	r3, [pc, #8]	; (800e570 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e566:	4618      	mov	r0, r3
 800e568:	3718      	adds	r7, #24
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	200000c0 	.word	0x200000c0

0800e574 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e57c:	2182      	movs	r1, #130	; 0x82
 800e57e:	4818      	ldr	r0, [pc, #96]	; (800e5e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e580:	f000 fd17 	bl	800efb2 <USBD_GetEpDesc>
 800e584:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e586:	2101      	movs	r1, #1
 800e588:	4815      	ldr	r0, [pc, #84]	; (800e5e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e58a:	f000 fd12 	bl	800efb2 <USBD_GetEpDesc>
 800e58e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e590:	2181      	movs	r1, #129	; 0x81
 800e592:	4813      	ldr	r0, [pc, #76]	; (800e5e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e594:	f000 fd0d 	bl	800efb2 <USBD_GetEpDesc>
 800e598:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d002      	beq.n	800e5a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	2210      	movs	r2, #16
 800e5a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d006      	beq.n	800e5ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	711a      	strb	r2, [r3, #4]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	f042 0202 	orr.w	r2, r2, #2
 800e5b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d006      	beq.n	800e5ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	711a      	strb	r2, [r3, #4]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f042 0202 	orr.w	r2, r2, #2
 800e5cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2243      	movs	r2, #67	; 0x43
 800e5d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e5d4:	4b02      	ldr	r3, [pc, #8]	; (800e5e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3718      	adds	r7, #24
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	200000c0 	.word	0x200000c0

0800e5e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e5ec:	2182      	movs	r1, #130	; 0x82
 800e5ee:	4818      	ldr	r0, [pc, #96]	; (800e650 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5f0:	f000 fcdf 	bl	800efb2 <USBD_GetEpDesc>
 800e5f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e5f6:	2101      	movs	r1, #1
 800e5f8:	4815      	ldr	r0, [pc, #84]	; (800e650 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5fa:	f000 fcda 	bl	800efb2 <USBD_GetEpDesc>
 800e5fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e600:	2181      	movs	r1, #129	; 0x81
 800e602:	4813      	ldr	r0, [pc, #76]	; (800e650 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e604:	f000 fcd5 	bl	800efb2 <USBD_GetEpDesc>
 800e608:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d002      	beq.n	800e616 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	2210      	movs	r2, #16
 800e614:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d006      	beq.n	800e62a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	2200      	movs	r2, #0
 800e620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e624:	711a      	strb	r2, [r3, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d006      	beq.n	800e63e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2200      	movs	r2, #0
 800e634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e638:	711a      	strb	r2, [r3, #4]
 800e63a:	2200      	movs	r2, #0
 800e63c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2243      	movs	r2, #67	; 0x43
 800e642:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e644:	4b02      	ldr	r3, [pc, #8]	; (800e650 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e646:	4618      	mov	r0, r3
 800e648:	3718      	adds	r7, #24
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	200000c0 	.word	0x200000c0

0800e654 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e654:	b480      	push	{r7}
 800e656:	b083      	sub	sp, #12
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	220a      	movs	r2, #10
 800e660:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e662:	4b03      	ldr	r3, [pc, #12]	; (800e670 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e664:	4618      	mov	r0, r3
 800e666:	370c      	adds	r7, #12
 800e668:	46bd      	mov	sp, r7
 800e66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66e:	4770      	bx	lr
 800e670:	2000007c 	.word	0x2000007c

0800e674 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e674:	b480      	push	{r7}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d101      	bne.n	800e688 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e684:	2303      	movs	r3, #3
 800e686:	e009      	b.n	800e69c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	33b0      	adds	r3, #176	; 0xb0
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	4413      	add	r3, r2
 800e696:	683a      	ldr	r2, [r7, #0]
 800e698:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b087      	sub	sp, #28
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	32b0      	adds	r2, #176	; 0xb0
 800e6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6c2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d101      	bne.n	800e6ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e6ca:	2303      	movs	r3, #3
 800e6cc:	e008      	b.n	800e6e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	68ba      	ldr	r2, [r7, #8]
 800e6d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e6de:	2300      	movs	r3, #0
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	371c      	adds	r7, #28
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b085      	sub	sp, #20
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	32b0      	adds	r2, #176	; 0xb0
 800e700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e704:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d101      	bne.n	800e710 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e70c:	2303      	movs	r3, #3
 800e70e:	e004      	b.n	800e71a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	683a      	ldr	r2, [r7, #0]
 800e714:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3714      	adds	r7, #20
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
	...

0800e728 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	32b0      	adds	r2, #176	; 0xb0
 800e73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e73e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e740:	2301      	movs	r3, #1
 800e742:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	32b0      	adds	r2, #176	; 0xb0
 800e74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d101      	bne.n	800e75a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e756:	2303      	movs	r3, #3
 800e758:	e025      	b.n	800e7a6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e760:	2b00      	cmp	r3, #0
 800e762:	d11f      	bne.n	800e7a4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	2201      	movs	r2, #1
 800e768:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e76c:	4b10      	ldr	r3, [pc, #64]	; (800e7b0 <USBD_CDC_TransmitPacket+0x88>)
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	f003 020f 	and.w	r2, r3, #15
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	4613      	mov	r3, r2
 800e77e:	009b      	lsls	r3, r3, #2
 800e780:	4413      	add	r3, r2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4403      	add	r3, r0
 800e786:	3318      	adds	r3, #24
 800e788:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e78a:	4b09      	ldr	r3, [pc, #36]	; (800e7b0 <USBD_CDC_TransmitPacket+0x88>)
 800e78c:	7819      	ldrb	r1, [r3, #0]
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f012 f979 	bl	8020a92 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	20000103 	.word	0x20000103

0800e7b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	32b0      	adds	r2, #176	; 0xb0
 800e7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	32b0      	adds	r2, #176	; 0xb0
 800e7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d101      	bne.n	800e7e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e7de:	2303      	movs	r3, #3
 800e7e0:	e018      	b.n	800e814 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	7c1b      	ldrb	r3, [r3, #16]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d10a      	bne.n	800e800 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e7ea:	4b0c      	ldr	r3, [pc, #48]	; (800e81c <USBD_CDC_ReceivePacket+0x68>)
 800e7ec:	7819      	ldrb	r1, [r3, #0]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e7f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f012 f96b 	bl	8020ad4 <USBD_LL_PrepareReceive>
 800e7fe:	e008      	b.n	800e812 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e800:	4b06      	ldr	r3, [pc, #24]	; (800e81c <USBD_CDC_ReceivePacket+0x68>)
 800e802:	7819      	ldrb	r1, [r3, #0]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e80a:	2340      	movs	r3, #64	; 0x40
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f012 f961 	bl	8020ad4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e812:	2300      	movs	r3, #0
}
 800e814:	4618      	mov	r0, r3
 800e816:	3710      	adds	r7, #16
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	20000104 	.word	0x20000104

0800e820 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	4613      	mov	r3, r2
 800e82c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d101      	bne.n	800e838 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e834:	2303      	movs	r3, #3
 800e836:	e01f      	b.n	800e878 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2200      	movs	r2, #0
 800e844:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2200      	movs	r2, #0
 800e84c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d003      	beq.n	800e85e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	68ba      	ldr	r2, [r7, #8]
 800e85a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2201      	movs	r2, #1
 800e862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	79fa      	ldrb	r2, [r7, #7]
 800e86a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e86c:	68f8      	ldr	r0, [r7, #12]
 800e86e:	f011 ffdb 	bl	8020828 <USBD_LL_Init>
 800e872:	4603      	mov	r3, r0
 800e874:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e876:	7dfb      	ldrb	r3, [r7, #23]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3718      	adds	r7, #24
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b084      	sub	sp, #16
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e88a:	2300      	movs	r3, #0
 800e88c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d101      	bne.n	800e898 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e894:	2303      	movs	r3, #3
 800e896:	e025      	b.n	800e8e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	683a      	ldr	r2, [r7, #0]
 800e89c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	32ae      	adds	r2, #174	; 0xae
 800e8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d00f      	beq.n	800e8d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	32ae      	adds	r2, #174	; 0xae
 800e8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c4:	f107 020e 	add.w	r2, r7, #14
 800e8c8:	4610      	mov	r0, r2
 800e8ca:	4798      	blx	r3
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e8da:	1c5a      	adds	r2, r3, #1
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e8e2:	2300      	movs	r3, #0
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3710      	adds	r7, #16
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f011 ffe3 	bl	80208c0 <USBD_LL_Start>
 800e8fa:	4603      	mov	r3, r0
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3708      	adds	r7, #8
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e90c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e90e:	4618      	mov	r0, r3
 800e910:	370c      	adds	r7, #12
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e91a:	b580      	push	{r7, lr}
 800e91c:	b084      	sub	sp, #16
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	460b      	mov	r3, r1
 800e924:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e926:	2300      	movs	r3, #0
 800e928:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e930:	2b00      	cmp	r3, #0
 800e932:	d009      	beq.n	800e948 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	78fa      	ldrb	r2, [r7, #3]
 800e93e:	4611      	mov	r1, r2
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	4798      	blx	r3
 800e944:	4603      	mov	r3, r0
 800e946:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e948:	7bfb      	ldrb	r3, [r7, #15]
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3710      	adds	r7, #16
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b084      	sub	sp, #16
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
 800e95a:	460b      	mov	r3, r1
 800e95c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e95e:	2300      	movs	r3, #0
 800e960:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	78fa      	ldrb	r2, [r7, #3]
 800e96c:	4611      	mov	r1, r2
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	4798      	blx	r3
 800e972:	4603      	mov	r3, r0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d001      	beq.n	800e97c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e978:	2303      	movs	r3, #3
 800e97a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b084      	sub	sp, #16
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
 800e98e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e996:	6839      	ldr	r1, [r7, #0]
 800e998:	4618      	mov	r0, r3
 800e99a:	f001 f908 	bl	800fbae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e9ba:	f003 031f 	and.w	r3, r3, #31
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d01a      	beq.n	800e9f8 <USBD_LL_SetupStage+0x72>
 800e9c2:	2b02      	cmp	r3, #2
 800e9c4:	d822      	bhi.n	800ea0c <USBD_LL_SetupStage+0x86>
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d002      	beq.n	800e9d0 <USBD_LL_SetupStage+0x4a>
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	d00a      	beq.n	800e9e4 <USBD_LL_SetupStage+0x5e>
 800e9ce:	e01d      	b.n	800ea0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 fb5f 	bl	800f09c <USBD_StdDevReq>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800e9e2:	e020      	b.n	800ea26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f000 fbc7 	bl	800f180 <USBD_StdItfReq>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	73fb      	strb	r3, [r7, #15]
      break;
 800e9f6:	e016      	b.n	800ea26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e9fe:	4619      	mov	r1, r3
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 fc29 	bl	800f258 <USBD_StdEPReq>
 800ea06:	4603      	mov	r3, r0
 800ea08:	73fb      	strb	r3, [r7, #15]
      break;
 800ea0a:	e00c      	b.n	800ea26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ea12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	4619      	mov	r1, r3
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f011 ffb0 	bl	8020980 <USBD_LL_StallEP>
 800ea20:	4603      	mov	r3, r0
 800ea22:	73fb      	strb	r3, [r7, #15]
      break;
 800ea24:	bf00      	nop
  }

  return ret;
 800ea26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	460b      	mov	r3, r1
 800ea3a:	607a      	str	r2, [r7, #4]
 800ea3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ea42:	7afb      	ldrb	r3, [r7, #11]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d16e      	bne.n	800eb26 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ea4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ea56:	2b03      	cmp	r3, #3
 800ea58:	f040 8098 	bne.w	800eb8c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	689a      	ldr	r2, [r3, #8]
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	68db      	ldr	r3, [r3, #12]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d913      	bls.n	800ea90 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	689a      	ldr	r2, [r3, #8]
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	1ad2      	subs	r2, r2, r3
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	68da      	ldr	r2, [r3, #12]
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	689b      	ldr	r3, [r3, #8]
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	bf28      	it	cs
 800ea82:	4613      	movcs	r3, r2
 800ea84:	461a      	mov	r2, r3
 800ea86:	6879      	ldr	r1, [r7, #4]
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f001 f984 	bl	800fd96 <USBD_CtlContinueRx>
 800ea8e:	e07d      	b.n	800eb8c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ea96:	f003 031f 	and.w	r3, r3, #31
 800ea9a:	2b02      	cmp	r3, #2
 800ea9c:	d014      	beq.n	800eac8 <USBD_LL_DataOutStage+0x98>
 800ea9e:	2b02      	cmp	r3, #2
 800eaa0:	d81d      	bhi.n	800eade <USBD_LL_DataOutStage+0xae>
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d002      	beq.n	800eaac <USBD_LL_DataOutStage+0x7c>
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d003      	beq.n	800eab2 <USBD_LL_DataOutStage+0x82>
 800eaaa:	e018      	b.n	800eade <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800eaac:	2300      	movs	r3, #0
 800eaae:	75bb      	strb	r3, [r7, #22]
            break;
 800eab0:	e018      	b.n	800eae4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	4619      	mov	r1, r3
 800eabc:	68f8      	ldr	r0, [r7, #12]
 800eabe:	f000 fa5e 	bl	800ef7e <USBD_CoreFindIF>
 800eac2:	4603      	mov	r3, r0
 800eac4:	75bb      	strb	r3, [r7, #22]
            break;
 800eac6:	e00d      	b.n	800eae4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	4619      	mov	r1, r3
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f000 fa60 	bl	800ef98 <USBD_CoreFindEP>
 800ead8:	4603      	mov	r3, r0
 800eada:	75bb      	strb	r3, [r7, #22]
            break;
 800eadc:	e002      	b.n	800eae4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800eade:	2300      	movs	r3, #0
 800eae0:	75bb      	strb	r3, [r7, #22]
            break;
 800eae2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800eae4:	7dbb      	ldrb	r3, [r7, #22]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d119      	bne.n	800eb1e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	2b03      	cmp	r3, #3
 800eaf4:	d113      	bne.n	800eb1e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800eaf6:	7dba      	ldrb	r2, [r7, #22]
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	32ae      	adds	r2, #174	; 0xae
 800eafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb00:	691b      	ldr	r3, [r3, #16]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00b      	beq.n	800eb1e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800eb06:	7dba      	ldrb	r2, [r7, #22]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800eb0e:	7dba      	ldrb	r2, [r7, #22]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	32ae      	adds	r2, #174	; 0xae
 800eb14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb18:	691b      	ldr	r3, [r3, #16]
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	f001 f94a 	bl	800fdb8 <USBD_CtlSendStatus>
 800eb24:	e032      	b.n	800eb8c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800eb26:	7afb      	ldrb	r3, [r7, #11]
 800eb28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	4619      	mov	r1, r3
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f000 fa31 	bl	800ef98 <USBD_CoreFindEP>
 800eb36:	4603      	mov	r3, r0
 800eb38:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eb3a:	7dbb      	ldrb	r3, [r7, #22]
 800eb3c:	2bff      	cmp	r3, #255	; 0xff
 800eb3e:	d025      	beq.n	800eb8c <USBD_LL_DataOutStage+0x15c>
 800eb40:	7dbb      	ldrb	r3, [r7, #22]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d122      	bne.n	800eb8c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	2b03      	cmp	r3, #3
 800eb50:	d117      	bne.n	800eb82 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800eb52:	7dba      	ldrb	r2, [r7, #22]
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	32ae      	adds	r2, #174	; 0xae
 800eb58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb5c:	699b      	ldr	r3, [r3, #24]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00f      	beq.n	800eb82 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800eb62:	7dba      	ldrb	r2, [r7, #22]
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800eb6a:	7dba      	ldrb	r2, [r7, #22]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	32ae      	adds	r2, #174	; 0xae
 800eb70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb74:	699b      	ldr	r3, [r3, #24]
 800eb76:	7afa      	ldrb	r2, [r7, #11]
 800eb78:	4611      	mov	r1, r2
 800eb7a:	68f8      	ldr	r0, [r7, #12]
 800eb7c:	4798      	blx	r3
 800eb7e:	4603      	mov	r3, r0
 800eb80:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800eb82:	7dfb      	ldrb	r3, [r7, #23]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d001      	beq.n	800eb8c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800eb88:	7dfb      	ldrb	r3, [r7, #23]
 800eb8a:	e000      	b.n	800eb8e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3718      	adds	r7, #24
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}

0800eb96 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eb96:	b580      	push	{r7, lr}
 800eb98:	b086      	sub	sp, #24
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	60f8      	str	r0, [r7, #12]
 800eb9e:	460b      	mov	r3, r1
 800eba0:	607a      	str	r2, [r7, #4]
 800eba2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800eba4:	7afb      	ldrb	r3, [r7, #11]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d16f      	bne.n	800ec8a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	3314      	adds	r3, #20
 800ebae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ebb6:	2b02      	cmp	r3, #2
 800ebb8:	d15a      	bne.n	800ec70 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	689a      	ldr	r2, [r3, #8]
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	68db      	ldr	r3, [r3, #12]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d914      	bls.n	800ebf0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	689a      	ldr	r2, [r3, #8]
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	1ad2      	subs	r2, r2, r3
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	461a      	mov	r2, r3
 800ebda:	6879      	ldr	r1, [r7, #4]
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f001 f8ac 	bl	800fd3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	2100      	movs	r1, #0
 800ebe8:	68f8      	ldr	r0, [r7, #12]
 800ebea:	f011 ff73 	bl	8020ad4 <USBD_LL_PrepareReceive>
 800ebee:	e03f      	b.n	800ec70 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	68da      	ldr	r2, [r3, #12]
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	689b      	ldr	r3, [r3, #8]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d11c      	bne.n	800ec36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	685a      	ldr	r2, [r3, #4]
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d316      	bcc.n	800ec36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	685a      	ldr	r2, [r3, #4]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d20f      	bcs.n	800ec36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ec16:	2200      	movs	r2, #0
 800ec18:	2100      	movs	r1, #0
 800ec1a:	68f8      	ldr	r0, [r7, #12]
 800ec1c:	f001 f88d 	bl	800fd3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2200      	movs	r2, #0
 800ec24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec28:	2300      	movs	r3, #0
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	f011 ff50 	bl	8020ad4 <USBD_LL_PrepareReceive>
 800ec34:	e01c      	b.n	800ec70 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	2b03      	cmp	r3, #3
 800ec40:	d10f      	bne.n	800ec62 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d009      	beq.n	800ec62 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	2200      	movs	r2, #0
 800ec52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	68f8      	ldr	r0, [r7, #12]
 800ec60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec62:	2180      	movs	r1, #128	; 0x80
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f011 fe8b 	bl	8020980 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ec6a:	68f8      	ldr	r0, [r7, #12]
 800ec6c:	f001 f8b7 	bl	800fdde <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d03a      	beq.n	800ecf0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ec7a:	68f8      	ldr	r0, [r7, #12]
 800ec7c:	f7ff fe42 	bl	800e904 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2200      	movs	r2, #0
 800ec84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ec88:	e032      	b.n	800ecf0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ec8a:	7afb      	ldrb	r3, [r7, #11]
 800ec8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	4619      	mov	r1, r3
 800ec94:	68f8      	ldr	r0, [r7, #12]
 800ec96:	f000 f97f 	bl	800ef98 <USBD_CoreFindEP>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ec9e:	7dfb      	ldrb	r3, [r7, #23]
 800eca0:	2bff      	cmp	r3, #255	; 0xff
 800eca2:	d025      	beq.n	800ecf0 <USBD_LL_DataInStage+0x15a>
 800eca4:	7dfb      	ldrb	r3, [r7, #23]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d122      	bne.n	800ecf0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	2b03      	cmp	r3, #3
 800ecb4:	d11c      	bne.n	800ecf0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ecb6:	7dfa      	ldrb	r2, [r7, #23]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	32ae      	adds	r2, #174	; 0xae
 800ecbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecc0:	695b      	ldr	r3, [r3, #20]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d014      	beq.n	800ecf0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ecc6:	7dfa      	ldrb	r2, [r7, #23]
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ecce:	7dfa      	ldrb	r2, [r7, #23]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	32ae      	adds	r2, #174	; 0xae
 800ecd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecd8:	695b      	ldr	r3, [r3, #20]
 800ecda:	7afa      	ldrb	r2, [r7, #11]
 800ecdc:	4611      	mov	r1, r2
 800ecde:	68f8      	ldr	r0, [r7, #12]
 800ece0:	4798      	blx	r3
 800ece2:	4603      	mov	r3, r0
 800ece4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ece6:	7dbb      	ldrb	r3, [r7, #22]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d001      	beq.n	800ecf0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ecec:	7dbb      	ldrb	r3, [r7, #22]
 800ecee:	e000      	b.n	800ecf2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3718      	adds	r7, #24
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b084      	sub	sp, #16
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed02:	2300      	movs	r3, #0
 800ed04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2201      	movs	r2, #1
 800ed0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d014      	beq.n	800ed60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00e      	beq.n	800ed60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed48:	685b      	ldr	r3, [r3, #4]
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	6852      	ldr	r2, [r2, #4]
 800ed4e:	b2d2      	uxtb	r2, r2
 800ed50:	4611      	mov	r1, r2
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	4798      	blx	r3
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d001      	beq.n	800ed60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ed5c:	2303      	movs	r3, #3
 800ed5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed60:	2340      	movs	r3, #64	; 0x40
 800ed62:	2200      	movs	r2, #0
 800ed64:	2100      	movs	r1, #0
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f011 fdc5 	bl	80208f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2201      	movs	r2, #1
 800ed70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2240      	movs	r2, #64	; 0x40
 800ed78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed7c:	2340      	movs	r3, #64	; 0x40
 800ed7e:	2200      	movs	r2, #0
 800ed80:	2180      	movs	r1, #128	; 0x80
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f011 fdb7 	bl	80208f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2240      	movs	r2, #64	; 0x40
 800ed92:	621a      	str	r2, [r3, #32]

  return ret;
 800ed94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ed9e:	b480      	push	{r7}
 800eda0:	b083      	sub	sp, #12
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	460b      	mov	r3, r1
 800eda8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	78fa      	ldrb	r2, [r7, #3]
 800edae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800edb0:	2300      	movs	r3, #0
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	370c      	adds	r7, #12
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr

0800edbe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800edbe:	b480      	push	{r7}
 800edc0:	b083      	sub	sp, #12
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edcc:	b2da      	uxtb	r2, r3
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2204      	movs	r2, #4
 800edd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eddc:	2300      	movs	r3, #0
}
 800edde:	4618      	mov	r0, r3
 800ede0:	370c      	adds	r7, #12
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr

0800edea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800edea:	b480      	push	{r7}
 800edec:	b083      	sub	sp, #12
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	2b04      	cmp	r3, #4
 800edfc:	d106      	bne.n	800ee0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ee04:	b2da      	uxtb	r2, r3
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ee0c:	2300      	movs	r3, #0
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	370c      	adds	r7, #12
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr

0800ee1a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ee1a:	b580      	push	{r7, lr}
 800ee1c:	b082      	sub	sp, #8
 800ee1e:	af00      	add	r7, sp, #0
 800ee20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	2b03      	cmp	r3, #3
 800ee2c:	d110      	bne.n	800ee50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00b      	beq.n	800ee50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee3e:	69db      	ldr	r3, [r3, #28]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d005      	beq.n	800ee50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee4a:	69db      	ldr	r3, [r3, #28]
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ee50:	2300      	movs	r3, #0
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}

0800ee5a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ee5a:	b580      	push	{r7, lr}
 800ee5c:	b082      	sub	sp, #8
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	6078      	str	r0, [r7, #4]
 800ee62:	460b      	mov	r3, r1
 800ee64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	32ae      	adds	r2, #174	; 0xae
 800ee70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d101      	bne.n	800ee7c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ee78:	2303      	movs	r3, #3
 800ee7a:	e01c      	b.n	800eeb6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	2b03      	cmp	r3, #3
 800ee86:	d115      	bne.n	800eeb4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	32ae      	adds	r2, #174	; 0xae
 800ee92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee96:	6a1b      	ldr	r3, [r3, #32]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d00b      	beq.n	800eeb4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	32ae      	adds	r2, #174	; 0xae
 800eea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeaa:	6a1b      	ldr	r3, [r3, #32]
 800eeac:	78fa      	ldrb	r2, [r7, #3]
 800eeae:	4611      	mov	r1, r2
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eeb4:	2300      	movs	r3, #0
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3708      	adds	r7, #8
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}

0800eebe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b082      	sub	sp, #8
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
 800eec6:	460b      	mov	r3, r1
 800eec8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	32ae      	adds	r2, #174	; 0xae
 800eed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d101      	bne.n	800eee0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800eedc:	2303      	movs	r3, #3
 800eede:	e01c      	b.n	800ef1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	2b03      	cmp	r3, #3
 800eeea:	d115      	bne.n	800ef18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	32ae      	adds	r2, #174	; 0xae
 800eef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d00b      	beq.n	800ef18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	32ae      	adds	r2, #174	; 0xae
 800ef0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef10:	78fa      	ldrb	r2, [r7, #3]
 800ef12:	4611      	mov	r1, r2
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ef18:	2300      	movs	r3, #0
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}

0800ef22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ef22:	b480      	push	{r7}
 800ef24:	b083      	sub	sp, #12
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ef2a:	2300      	movs	r3, #0
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	370c      	adds	r7, #12
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr

0800ef38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ef40:	2300      	movs	r3, #0
 800ef42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2201      	movs	r2, #1
 800ef48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d00e      	beq.n	800ef74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	6852      	ldr	r2, [r2, #4]
 800ef62:	b2d2      	uxtb	r2, r2
 800ef64:	4611      	mov	r1, r2
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	4798      	blx	r3
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d001      	beq.n	800ef74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ef70:	2303      	movs	r3, #3
 800ef72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3710      	adds	r7, #16
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}

0800ef7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ef7e:	b480      	push	{r7}
 800ef80:	b083      	sub	sp, #12
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	6078      	str	r0, [r7, #4]
 800ef86:	460b      	mov	r3, r1
 800ef88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ef8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	370c      	adds	r7, #12
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	460b      	mov	r3, r1
 800efa2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800efa4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	370c      	adds	r7, #12
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr

0800efb2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800efb2:	b580      	push	{r7, lr}
 800efb4:	b086      	sub	sp, #24
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
 800efba:	460b      	mov	r3, r1
 800efbc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800efc6:	2300      	movs	r3, #0
 800efc8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	885b      	ldrh	r3, [r3, #2]
 800efce:	b29a      	uxth	r2, r3
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d920      	bls.n	800f01c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	b29b      	uxth	r3, r3
 800efe0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800efe2:	e013      	b.n	800f00c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800efe4:	f107 030a 	add.w	r3, r7, #10
 800efe8:	4619      	mov	r1, r3
 800efea:	6978      	ldr	r0, [r7, #20]
 800efec:	f000 f81b 	bl	800f026 <USBD_GetNextDesc>
 800eff0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	785b      	ldrb	r3, [r3, #1]
 800eff6:	2b05      	cmp	r3, #5
 800eff8:	d108      	bne.n	800f00c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	789b      	ldrb	r3, [r3, #2]
 800f002:	78fa      	ldrb	r2, [r7, #3]
 800f004:	429a      	cmp	r2, r3
 800f006:	d008      	beq.n	800f01a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f008:	2300      	movs	r3, #0
 800f00a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	885b      	ldrh	r3, [r3, #2]
 800f010:	b29a      	uxth	r2, r3
 800f012:	897b      	ldrh	r3, [r7, #10]
 800f014:	429a      	cmp	r2, r3
 800f016:	d8e5      	bhi.n	800efe4 <USBD_GetEpDesc+0x32>
 800f018:	e000      	b.n	800f01c <USBD_GetEpDesc+0x6a>
          break;
 800f01a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f01c:	693b      	ldr	r3, [r7, #16]
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3718      	adds	r7, #24
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}

0800f026 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f026:	b480      	push	{r7}
 800f028:	b085      	sub	sp, #20
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	6078      	str	r0, [r7, #4]
 800f02e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	881a      	ldrh	r2, [r3, #0]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	4413      	add	r3, r2
 800f040:	b29a      	uxth	r2, r3
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	461a      	mov	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	4413      	add	r3, r2
 800f050:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f052:	68fb      	ldr	r3, [r7, #12]
}
 800f054:	4618      	mov	r0, r3
 800f056:	3714      	adds	r7, #20
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr

0800f060 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f060:	b480      	push	{r7}
 800f062:	b087      	sub	sp, #28
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	3301      	adds	r3, #1
 800f076:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f07e:	8a3b      	ldrh	r3, [r7, #16]
 800f080:	021b      	lsls	r3, r3, #8
 800f082:	b21a      	sxth	r2, r3
 800f084:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f088:	4313      	orrs	r3, r2
 800f08a:	b21b      	sxth	r3, r3
 800f08c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f08e:	89fb      	ldrh	r3, [r7, #14]
}
 800f090:	4618      	mov	r0, r3
 800f092:	371c      	adds	r7, #28
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f0b2:	2b40      	cmp	r3, #64	; 0x40
 800f0b4:	d005      	beq.n	800f0c2 <USBD_StdDevReq+0x26>
 800f0b6:	2b40      	cmp	r3, #64	; 0x40
 800f0b8:	d857      	bhi.n	800f16a <USBD_StdDevReq+0xce>
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d00f      	beq.n	800f0de <USBD_StdDevReq+0x42>
 800f0be:	2b20      	cmp	r3, #32
 800f0c0:	d153      	bne.n	800f16a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	32ae      	adds	r2, #174	; 0xae
 800f0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	6839      	ldr	r1, [r7, #0]
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	4798      	blx	r3
 800f0d8:	4603      	mov	r3, r0
 800f0da:	73fb      	strb	r3, [r7, #15]
      break;
 800f0dc:	e04a      	b.n	800f174 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	785b      	ldrb	r3, [r3, #1]
 800f0e2:	2b09      	cmp	r3, #9
 800f0e4:	d83b      	bhi.n	800f15e <USBD_StdDevReq+0xc2>
 800f0e6:	a201      	add	r2, pc, #4	; (adr r2, 800f0ec <USBD_StdDevReq+0x50>)
 800f0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ec:	0800f141 	.word	0x0800f141
 800f0f0:	0800f155 	.word	0x0800f155
 800f0f4:	0800f15f 	.word	0x0800f15f
 800f0f8:	0800f14b 	.word	0x0800f14b
 800f0fc:	0800f15f 	.word	0x0800f15f
 800f100:	0800f11f 	.word	0x0800f11f
 800f104:	0800f115 	.word	0x0800f115
 800f108:	0800f15f 	.word	0x0800f15f
 800f10c:	0800f137 	.word	0x0800f137
 800f110:	0800f129 	.word	0x0800f129
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f114:	6839      	ldr	r1, [r7, #0]
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f000 fa3c 	bl	800f594 <USBD_GetDescriptor>
          break;
 800f11c:	e024      	b.n	800f168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f11e:	6839      	ldr	r1, [r7, #0]
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f000 fba1 	bl	800f868 <USBD_SetAddress>
          break;
 800f126:	e01f      	b.n	800f168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f128:	6839      	ldr	r1, [r7, #0]
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 fbe0 	bl	800f8f0 <USBD_SetConfig>
 800f130:	4603      	mov	r3, r0
 800f132:	73fb      	strb	r3, [r7, #15]
          break;
 800f134:	e018      	b.n	800f168 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f136:	6839      	ldr	r1, [r7, #0]
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 fc83 	bl	800fa44 <USBD_GetConfig>
          break;
 800f13e:	e013      	b.n	800f168 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f140:	6839      	ldr	r1, [r7, #0]
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 fcb4 	bl	800fab0 <USBD_GetStatus>
          break;
 800f148:	e00e      	b.n	800f168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f14a:	6839      	ldr	r1, [r7, #0]
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f000 fce3 	bl	800fb18 <USBD_SetFeature>
          break;
 800f152:	e009      	b.n	800f168 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f154:	6839      	ldr	r1, [r7, #0]
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 fd07 	bl	800fb6a <USBD_ClrFeature>
          break;
 800f15c:	e004      	b.n	800f168 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f15e:	6839      	ldr	r1, [r7, #0]
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 fd5e 	bl	800fc22 <USBD_CtlError>
          break;
 800f166:	bf00      	nop
      }
      break;
 800f168:	e004      	b.n	800f174 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f16a:	6839      	ldr	r1, [r7, #0]
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 fd58 	bl	800fc22 <USBD_CtlError>
      break;
 800f172:	bf00      	nop
  }

  return ret;
 800f174:	7bfb      	ldrb	r3, [r7, #15]
}
 800f176:	4618      	mov	r0, r3
 800f178:	3710      	adds	r7, #16
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop

0800f180 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f18a:	2300      	movs	r3, #0
 800f18c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	781b      	ldrb	r3, [r3, #0]
 800f192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f196:	2b40      	cmp	r3, #64	; 0x40
 800f198:	d005      	beq.n	800f1a6 <USBD_StdItfReq+0x26>
 800f19a:	2b40      	cmp	r3, #64	; 0x40
 800f19c:	d852      	bhi.n	800f244 <USBD_StdItfReq+0xc4>
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d001      	beq.n	800f1a6 <USBD_StdItfReq+0x26>
 800f1a2:	2b20      	cmp	r3, #32
 800f1a4:	d14e      	bne.n	800f244 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	3b01      	subs	r3, #1
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d840      	bhi.n	800f236 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	889b      	ldrh	r3, [r3, #4]
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d836      	bhi.n	800f22c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	889b      	ldrh	r3, [r3, #4]
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f7ff fed9 	bl	800ef7e <USBD_CoreFindIF>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f1d0:	7bbb      	ldrb	r3, [r7, #14]
 800f1d2:	2bff      	cmp	r3, #255	; 0xff
 800f1d4:	d01d      	beq.n	800f212 <USBD_StdItfReq+0x92>
 800f1d6:	7bbb      	ldrb	r3, [r7, #14]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d11a      	bne.n	800f212 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f1dc:	7bba      	ldrb	r2, [r7, #14]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	32ae      	adds	r2, #174	; 0xae
 800f1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1e6:	689b      	ldr	r3, [r3, #8]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d00f      	beq.n	800f20c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f1ec:	7bba      	ldrb	r2, [r7, #14]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f1f4:	7bba      	ldrb	r2, [r7, #14]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	32ae      	adds	r2, #174	; 0xae
 800f1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1fe:	689b      	ldr	r3, [r3, #8]
 800f200:	6839      	ldr	r1, [r7, #0]
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	4798      	blx	r3
 800f206:	4603      	mov	r3, r0
 800f208:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f20a:	e004      	b.n	800f216 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f20c:	2303      	movs	r3, #3
 800f20e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f210:	e001      	b.n	800f216 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f212:	2303      	movs	r3, #3
 800f214:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	88db      	ldrh	r3, [r3, #6]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d110      	bne.n	800f240 <USBD_StdItfReq+0xc0>
 800f21e:	7bfb      	ldrb	r3, [r7, #15]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10d      	bne.n	800f240 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f000 fdc7 	bl	800fdb8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f22a:	e009      	b.n	800f240 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f22c:	6839      	ldr	r1, [r7, #0]
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f000 fcf7 	bl	800fc22 <USBD_CtlError>
          break;
 800f234:	e004      	b.n	800f240 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f236:	6839      	ldr	r1, [r7, #0]
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 fcf2 	bl	800fc22 <USBD_CtlError>
          break;
 800f23e:	e000      	b.n	800f242 <USBD_StdItfReq+0xc2>
          break;
 800f240:	bf00      	nop
      }
      break;
 800f242:	e004      	b.n	800f24e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f244:	6839      	ldr	r1, [r7, #0]
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 fceb 	bl	800fc22 <USBD_CtlError>
      break;
 800f24c:	bf00      	nop
  }

  return ret;
 800f24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f250:	4618      	mov	r0, r3
 800f252:	3710      	adds	r7, #16
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f262:	2300      	movs	r3, #0
 800f264:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	889b      	ldrh	r3, [r3, #4]
 800f26a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f274:	2b40      	cmp	r3, #64	; 0x40
 800f276:	d007      	beq.n	800f288 <USBD_StdEPReq+0x30>
 800f278:	2b40      	cmp	r3, #64	; 0x40
 800f27a:	f200 817f 	bhi.w	800f57c <USBD_StdEPReq+0x324>
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d02a      	beq.n	800f2d8 <USBD_StdEPReq+0x80>
 800f282:	2b20      	cmp	r3, #32
 800f284:	f040 817a 	bne.w	800f57c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f288:	7bbb      	ldrb	r3, [r7, #14]
 800f28a:	4619      	mov	r1, r3
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7ff fe83 	bl	800ef98 <USBD_CoreFindEP>
 800f292:	4603      	mov	r3, r0
 800f294:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f296:	7b7b      	ldrb	r3, [r7, #13]
 800f298:	2bff      	cmp	r3, #255	; 0xff
 800f29a:	f000 8174 	beq.w	800f586 <USBD_StdEPReq+0x32e>
 800f29e:	7b7b      	ldrb	r3, [r7, #13]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	f040 8170 	bne.w	800f586 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f2a6:	7b7a      	ldrb	r2, [r7, #13]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f2ae:	7b7a      	ldrb	r2, [r7, #13]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	32ae      	adds	r2, #174	; 0xae
 800f2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	f000 8163 	beq.w	800f586 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f2c0:	7b7a      	ldrb	r2, [r7, #13]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	32ae      	adds	r2, #174	; 0xae
 800f2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ca:	689b      	ldr	r3, [r3, #8]
 800f2cc:	6839      	ldr	r1, [r7, #0]
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	4798      	blx	r3
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f2d6:	e156      	b.n	800f586 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	785b      	ldrb	r3, [r3, #1]
 800f2dc:	2b03      	cmp	r3, #3
 800f2de:	d008      	beq.n	800f2f2 <USBD_StdEPReq+0x9a>
 800f2e0:	2b03      	cmp	r3, #3
 800f2e2:	f300 8145 	bgt.w	800f570 <USBD_StdEPReq+0x318>
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	f000 809b 	beq.w	800f422 <USBD_StdEPReq+0x1ca>
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d03c      	beq.n	800f36a <USBD_StdEPReq+0x112>
 800f2f0:	e13e      	b.n	800f570 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d002      	beq.n	800f304 <USBD_StdEPReq+0xac>
 800f2fe:	2b03      	cmp	r3, #3
 800f300:	d016      	beq.n	800f330 <USBD_StdEPReq+0xd8>
 800f302:	e02c      	b.n	800f35e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f304:	7bbb      	ldrb	r3, [r7, #14]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00d      	beq.n	800f326 <USBD_StdEPReq+0xce>
 800f30a:	7bbb      	ldrb	r3, [r7, #14]
 800f30c:	2b80      	cmp	r3, #128	; 0x80
 800f30e:	d00a      	beq.n	800f326 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f310:	7bbb      	ldrb	r3, [r7, #14]
 800f312:	4619      	mov	r1, r3
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f011 fb33 	bl	8020980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f31a:	2180      	movs	r1, #128	; 0x80
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f011 fb2f 	bl	8020980 <USBD_LL_StallEP>
 800f322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f324:	e020      	b.n	800f368 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f326:	6839      	ldr	r1, [r7, #0]
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f000 fc7a 	bl	800fc22 <USBD_CtlError>
              break;
 800f32e:	e01b      	b.n	800f368 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	885b      	ldrh	r3, [r3, #2]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d10e      	bne.n	800f356 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f338:	7bbb      	ldrb	r3, [r7, #14]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00b      	beq.n	800f356 <USBD_StdEPReq+0xfe>
 800f33e:	7bbb      	ldrb	r3, [r7, #14]
 800f340:	2b80      	cmp	r3, #128	; 0x80
 800f342:	d008      	beq.n	800f356 <USBD_StdEPReq+0xfe>
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	88db      	ldrh	r3, [r3, #6]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d104      	bne.n	800f356 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f34c:	7bbb      	ldrb	r3, [r7, #14]
 800f34e:	4619      	mov	r1, r3
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f011 fb15 	bl	8020980 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 fd2e 	bl	800fdb8 <USBD_CtlSendStatus>

              break;
 800f35c:	e004      	b.n	800f368 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f35e:	6839      	ldr	r1, [r7, #0]
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 fc5e 	bl	800fc22 <USBD_CtlError>
              break;
 800f366:	bf00      	nop
          }
          break;
 800f368:	e107      	b.n	800f57a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f370:	b2db      	uxtb	r3, r3
 800f372:	2b02      	cmp	r3, #2
 800f374:	d002      	beq.n	800f37c <USBD_StdEPReq+0x124>
 800f376:	2b03      	cmp	r3, #3
 800f378:	d016      	beq.n	800f3a8 <USBD_StdEPReq+0x150>
 800f37a:	e04b      	b.n	800f414 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f37c:	7bbb      	ldrb	r3, [r7, #14]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00d      	beq.n	800f39e <USBD_StdEPReq+0x146>
 800f382:	7bbb      	ldrb	r3, [r7, #14]
 800f384:	2b80      	cmp	r3, #128	; 0x80
 800f386:	d00a      	beq.n	800f39e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f388:	7bbb      	ldrb	r3, [r7, #14]
 800f38a:	4619      	mov	r1, r3
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f011 faf7 	bl	8020980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f392:	2180      	movs	r1, #128	; 0x80
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f011 faf3 	bl	8020980 <USBD_LL_StallEP>
 800f39a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f39c:	e040      	b.n	800f420 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f39e:	6839      	ldr	r1, [r7, #0]
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 fc3e 	bl	800fc22 <USBD_CtlError>
              break;
 800f3a6:	e03b      	b.n	800f420 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	885b      	ldrh	r3, [r3, #2]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d136      	bne.n	800f41e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f3b0:	7bbb      	ldrb	r3, [r7, #14]
 800f3b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d004      	beq.n	800f3c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f3ba:	7bbb      	ldrb	r3, [r7, #14]
 800f3bc:	4619      	mov	r1, r3
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f011 fafd 	bl	80209be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f000 fcf7 	bl	800fdb8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f3ca:	7bbb      	ldrb	r3, [r7, #14]
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7ff fde2 	bl	800ef98 <USBD_CoreFindEP>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f3d8:	7b7b      	ldrb	r3, [r7, #13]
 800f3da:	2bff      	cmp	r3, #255	; 0xff
 800f3dc:	d01f      	beq.n	800f41e <USBD_StdEPReq+0x1c6>
 800f3de:	7b7b      	ldrb	r3, [r7, #13]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d11c      	bne.n	800f41e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f3e4:	7b7a      	ldrb	r2, [r7, #13]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f3ec:	7b7a      	ldrb	r2, [r7, #13]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	32ae      	adds	r2, #174	; 0xae
 800f3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d010      	beq.n	800f41e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f3fc:	7b7a      	ldrb	r2, [r7, #13]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	32ae      	adds	r2, #174	; 0xae
 800f402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f406:	689b      	ldr	r3, [r3, #8]
 800f408:	6839      	ldr	r1, [r7, #0]
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	4798      	blx	r3
 800f40e:	4603      	mov	r3, r0
 800f410:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f412:	e004      	b.n	800f41e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f414:	6839      	ldr	r1, [r7, #0]
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f000 fc03 	bl	800fc22 <USBD_CtlError>
              break;
 800f41c:	e000      	b.n	800f420 <USBD_StdEPReq+0x1c8>
              break;
 800f41e:	bf00      	nop
          }
          break;
 800f420:	e0ab      	b.n	800f57a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	2b02      	cmp	r3, #2
 800f42c:	d002      	beq.n	800f434 <USBD_StdEPReq+0x1dc>
 800f42e:	2b03      	cmp	r3, #3
 800f430:	d032      	beq.n	800f498 <USBD_StdEPReq+0x240>
 800f432:	e097      	b.n	800f564 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f434:	7bbb      	ldrb	r3, [r7, #14]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d007      	beq.n	800f44a <USBD_StdEPReq+0x1f2>
 800f43a:	7bbb      	ldrb	r3, [r7, #14]
 800f43c:	2b80      	cmp	r3, #128	; 0x80
 800f43e:	d004      	beq.n	800f44a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f440:	6839      	ldr	r1, [r7, #0]
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f000 fbed 	bl	800fc22 <USBD_CtlError>
                break;
 800f448:	e091      	b.n	800f56e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f44a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	da0b      	bge.n	800f46a <USBD_StdEPReq+0x212>
 800f452:	7bbb      	ldrb	r3, [r7, #14]
 800f454:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f458:	4613      	mov	r3, r2
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	4413      	add	r3, r2
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	3310      	adds	r3, #16
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	4413      	add	r3, r2
 800f466:	3304      	adds	r3, #4
 800f468:	e00b      	b.n	800f482 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f46a:	7bbb      	ldrb	r3, [r7, #14]
 800f46c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f470:	4613      	mov	r3, r2
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	4413      	add	r3, r2
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f47c:	687a      	ldr	r2, [r7, #4]
 800f47e:	4413      	add	r3, r2
 800f480:	3304      	adds	r3, #4
 800f482:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	2200      	movs	r2, #0
 800f488:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	2202      	movs	r2, #2
 800f48e:	4619      	mov	r1, r3
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 fc37 	bl	800fd04 <USBD_CtlSendData>
              break;
 800f496:	e06a      	b.n	800f56e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	da11      	bge.n	800f4c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f4a0:	7bbb      	ldrb	r3, [r7, #14]
 800f4a2:	f003 020f 	and.w	r2, r3, #15
 800f4a6:	6879      	ldr	r1, [r7, #4]
 800f4a8:	4613      	mov	r3, r2
 800f4aa:	009b      	lsls	r3, r3, #2
 800f4ac:	4413      	add	r3, r2
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	440b      	add	r3, r1
 800f4b2:	3324      	adds	r3, #36	; 0x24
 800f4b4:	881b      	ldrh	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d117      	bne.n	800f4ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f4ba:	6839      	ldr	r1, [r7, #0]
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f000 fbb0 	bl	800fc22 <USBD_CtlError>
                  break;
 800f4c2:	e054      	b.n	800f56e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f4c4:	7bbb      	ldrb	r3, [r7, #14]
 800f4c6:	f003 020f 	and.w	r2, r3, #15
 800f4ca:	6879      	ldr	r1, [r7, #4]
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	4413      	add	r3, r2
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	440b      	add	r3, r1
 800f4d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f4da:	881b      	ldrh	r3, [r3, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d104      	bne.n	800f4ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f4e0:	6839      	ldr	r1, [r7, #0]
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 fb9d 	bl	800fc22 <USBD_CtlError>
                  break;
 800f4e8:	e041      	b.n	800f56e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	da0b      	bge.n	800f50a <USBD_StdEPReq+0x2b2>
 800f4f2:	7bbb      	ldrb	r3, [r7, #14]
 800f4f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	4413      	add	r3, r2
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	3310      	adds	r3, #16
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	4413      	add	r3, r2
 800f506:	3304      	adds	r3, #4
 800f508:	e00b      	b.n	800f522 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f50a:	7bbb      	ldrb	r3, [r7, #14]
 800f50c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f510:	4613      	mov	r3, r2
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	4413      	add	r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	4413      	add	r3, r2
 800f520:	3304      	adds	r3, #4
 800f522:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f524:	7bbb      	ldrb	r3, [r7, #14]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d002      	beq.n	800f530 <USBD_StdEPReq+0x2d8>
 800f52a:	7bbb      	ldrb	r3, [r7, #14]
 800f52c:	2b80      	cmp	r3, #128	; 0x80
 800f52e:	d103      	bne.n	800f538 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	2200      	movs	r2, #0
 800f534:	601a      	str	r2, [r3, #0]
 800f536:	e00e      	b.n	800f556 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f538:	7bbb      	ldrb	r3, [r7, #14]
 800f53a:	4619      	mov	r1, r3
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f011 fa5d 	bl	80209fc <USBD_LL_IsStallEP>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d003      	beq.n	800f550 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	2201      	movs	r2, #1
 800f54c:	601a      	str	r2, [r3, #0]
 800f54e:	e002      	b.n	800f556 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	2200      	movs	r2, #0
 800f554:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	2202      	movs	r2, #2
 800f55a:	4619      	mov	r1, r3
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f000 fbd1 	bl	800fd04 <USBD_CtlSendData>
              break;
 800f562:	e004      	b.n	800f56e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f564:	6839      	ldr	r1, [r7, #0]
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f000 fb5b 	bl	800fc22 <USBD_CtlError>
              break;
 800f56c:	bf00      	nop
          }
          break;
 800f56e:	e004      	b.n	800f57a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f570:	6839      	ldr	r1, [r7, #0]
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f000 fb55 	bl	800fc22 <USBD_CtlError>
          break;
 800f578:	bf00      	nop
      }
      break;
 800f57a:	e005      	b.n	800f588 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f57c:	6839      	ldr	r1, [r7, #0]
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f000 fb4f 	bl	800fc22 <USBD_CtlError>
      break;
 800f584:	e000      	b.n	800f588 <USBD_StdEPReq+0x330>
      break;
 800f586:	bf00      	nop
  }

  return ret;
 800f588:	7bfb      	ldrb	r3, [r7, #15]
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
	...

0800f594 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	885b      	ldrh	r3, [r3, #2]
 800f5ae:	0a1b      	lsrs	r3, r3, #8
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	3b01      	subs	r3, #1
 800f5b4:	2b06      	cmp	r3, #6
 800f5b6:	f200 8128 	bhi.w	800f80a <USBD_GetDescriptor+0x276>
 800f5ba:	a201      	add	r2, pc, #4	; (adr r2, 800f5c0 <USBD_GetDescriptor+0x2c>)
 800f5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c0:	0800f5dd 	.word	0x0800f5dd
 800f5c4:	0800f5f5 	.word	0x0800f5f5
 800f5c8:	0800f635 	.word	0x0800f635
 800f5cc:	0800f80b 	.word	0x0800f80b
 800f5d0:	0800f80b 	.word	0x0800f80b
 800f5d4:	0800f7ab 	.word	0x0800f7ab
 800f5d8:	0800f7d7 	.word	0x0800f7d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	7c12      	ldrb	r2, [r2, #16]
 800f5e8:	f107 0108 	add.w	r1, r7, #8
 800f5ec:	4610      	mov	r0, r2
 800f5ee:	4798      	blx	r3
 800f5f0:	60f8      	str	r0, [r7, #12]
      break;
 800f5f2:	e112      	b.n	800f81a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	7c1b      	ldrb	r3, [r3, #16]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d10d      	bne.n	800f618 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f604:	f107 0208 	add.w	r2, r7, #8
 800f608:	4610      	mov	r0, r2
 800f60a:	4798      	blx	r3
 800f60c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	3301      	adds	r3, #1
 800f612:	2202      	movs	r2, #2
 800f614:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f616:	e100      	b.n	800f81a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f620:	f107 0208 	add.w	r2, r7, #8
 800f624:	4610      	mov	r0, r2
 800f626:	4798      	blx	r3
 800f628:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3301      	adds	r3, #1
 800f62e:	2202      	movs	r2, #2
 800f630:	701a      	strb	r2, [r3, #0]
      break;
 800f632:	e0f2      	b.n	800f81a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	885b      	ldrh	r3, [r3, #2]
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	2b05      	cmp	r3, #5
 800f63c:	f200 80ac 	bhi.w	800f798 <USBD_GetDescriptor+0x204>
 800f640:	a201      	add	r2, pc, #4	; (adr r2, 800f648 <USBD_GetDescriptor+0xb4>)
 800f642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f646:	bf00      	nop
 800f648:	0800f661 	.word	0x0800f661
 800f64c:	0800f695 	.word	0x0800f695
 800f650:	0800f6c9 	.word	0x0800f6c9
 800f654:	0800f6fd 	.word	0x0800f6fd
 800f658:	0800f731 	.word	0x0800f731
 800f65c:	0800f765 	.word	0x0800f765
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d00b      	beq.n	800f684 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	7c12      	ldrb	r2, [r2, #16]
 800f678:	f107 0108 	add.w	r1, r7, #8
 800f67c:	4610      	mov	r0, r2
 800f67e:	4798      	blx	r3
 800f680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f682:	e091      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f684:	6839      	ldr	r1, [r7, #0]
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f000 facb 	bl	800fc22 <USBD_CtlError>
            err++;
 800f68c:	7afb      	ldrb	r3, [r7, #11]
 800f68e:	3301      	adds	r3, #1
 800f690:	72fb      	strb	r3, [r7, #11]
          break;
 800f692:	e089      	b.n	800f7a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f69a:	689b      	ldr	r3, [r3, #8]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d00b      	beq.n	800f6b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6a6:	689b      	ldr	r3, [r3, #8]
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	7c12      	ldrb	r2, [r2, #16]
 800f6ac:	f107 0108 	add.w	r1, r7, #8
 800f6b0:	4610      	mov	r0, r2
 800f6b2:	4798      	blx	r3
 800f6b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6b6:	e077      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6b8:	6839      	ldr	r1, [r7, #0]
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f000 fab1 	bl	800fc22 <USBD_CtlError>
            err++;
 800f6c0:	7afb      	ldrb	r3, [r7, #11]
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	72fb      	strb	r3, [r7, #11]
          break;
 800f6c6:	e06f      	b.n	800f7a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d00b      	beq.n	800f6ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	687a      	ldr	r2, [r7, #4]
 800f6de:	7c12      	ldrb	r2, [r2, #16]
 800f6e0:	f107 0108 	add.w	r1, r7, #8
 800f6e4:	4610      	mov	r0, r2
 800f6e6:	4798      	blx	r3
 800f6e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6ea:	e05d      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6ec:	6839      	ldr	r1, [r7, #0]
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 fa97 	bl	800fc22 <USBD_CtlError>
            err++;
 800f6f4:	7afb      	ldrb	r3, [r7, #11]
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	72fb      	strb	r3, [r7, #11]
          break;
 800f6fa:	e055      	b.n	800f7a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f702:	691b      	ldr	r3, [r3, #16]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00b      	beq.n	800f720 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f70e:	691b      	ldr	r3, [r3, #16]
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	7c12      	ldrb	r2, [r2, #16]
 800f714:	f107 0108 	add.w	r1, r7, #8
 800f718:	4610      	mov	r0, r2
 800f71a:	4798      	blx	r3
 800f71c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f71e:	e043      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f720:	6839      	ldr	r1, [r7, #0]
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 fa7d 	bl	800fc22 <USBD_CtlError>
            err++;
 800f728:	7afb      	ldrb	r3, [r7, #11]
 800f72a:	3301      	adds	r3, #1
 800f72c:	72fb      	strb	r3, [r7, #11]
          break;
 800f72e:	e03b      	b.n	800f7a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f736:	695b      	ldr	r3, [r3, #20]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d00b      	beq.n	800f754 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f742:	695b      	ldr	r3, [r3, #20]
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	7c12      	ldrb	r2, [r2, #16]
 800f748:	f107 0108 	add.w	r1, r7, #8
 800f74c:	4610      	mov	r0, r2
 800f74e:	4798      	blx	r3
 800f750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f752:	e029      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f754:	6839      	ldr	r1, [r7, #0]
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 fa63 	bl	800fc22 <USBD_CtlError>
            err++;
 800f75c:	7afb      	ldrb	r3, [r7, #11]
 800f75e:	3301      	adds	r3, #1
 800f760:	72fb      	strb	r3, [r7, #11]
          break;
 800f762:	e021      	b.n	800f7a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f76a:	699b      	ldr	r3, [r3, #24]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d00b      	beq.n	800f788 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f776:	699b      	ldr	r3, [r3, #24]
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	7c12      	ldrb	r2, [r2, #16]
 800f77c:	f107 0108 	add.w	r1, r7, #8
 800f780:	4610      	mov	r0, r2
 800f782:	4798      	blx	r3
 800f784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f786:	e00f      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f788:	6839      	ldr	r1, [r7, #0]
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f000 fa49 	bl	800fc22 <USBD_CtlError>
            err++;
 800f790:	7afb      	ldrb	r3, [r7, #11]
 800f792:	3301      	adds	r3, #1
 800f794:	72fb      	strb	r3, [r7, #11]
          break;
 800f796:	e007      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f798:	6839      	ldr	r1, [r7, #0]
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f000 fa41 	bl	800fc22 <USBD_CtlError>
          err++;
 800f7a0:	7afb      	ldrb	r3, [r7, #11]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f7a6:	bf00      	nop
      }
      break;
 800f7a8:	e037      	b.n	800f81a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	7c1b      	ldrb	r3, [r3, #16]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d109      	bne.n	800f7c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7ba:	f107 0208 	add.w	r2, r7, #8
 800f7be:	4610      	mov	r0, r2
 800f7c0:	4798      	blx	r3
 800f7c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7c4:	e029      	b.n	800f81a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f7c6:	6839      	ldr	r1, [r7, #0]
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f000 fa2a 	bl	800fc22 <USBD_CtlError>
        err++;
 800f7ce:	7afb      	ldrb	r3, [r7, #11]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	72fb      	strb	r3, [r7, #11]
      break;
 800f7d4:	e021      	b.n	800f81a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	7c1b      	ldrb	r3, [r3, #16]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d10d      	bne.n	800f7fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7e6:	f107 0208 	add.w	r2, r7, #8
 800f7ea:	4610      	mov	r0, r2
 800f7ec:	4798      	blx	r3
 800f7ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	2207      	movs	r2, #7
 800f7f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7f8:	e00f      	b.n	800f81a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f7fa:	6839      	ldr	r1, [r7, #0]
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 fa10 	bl	800fc22 <USBD_CtlError>
        err++;
 800f802:	7afb      	ldrb	r3, [r7, #11]
 800f804:	3301      	adds	r3, #1
 800f806:	72fb      	strb	r3, [r7, #11]
      break;
 800f808:	e007      	b.n	800f81a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f80a:	6839      	ldr	r1, [r7, #0]
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 fa08 	bl	800fc22 <USBD_CtlError>
      err++;
 800f812:	7afb      	ldrb	r3, [r7, #11]
 800f814:	3301      	adds	r3, #1
 800f816:	72fb      	strb	r3, [r7, #11]
      break;
 800f818:	bf00      	nop
  }

  if (err != 0U)
 800f81a:	7afb      	ldrb	r3, [r7, #11]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d11e      	bne.n	800f85e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	88db      	ldrh	r3, [r3, #6]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d016      	beq.n	800f856 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f828:	893b      	ldrh	r3, [r7, #8]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d00e      	beq.n	800f84c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	88da      	ldrh	r2, [r3, #6]
 800f832:	893b      	ldrh	r3, [r7, #8]
 800f834:	4293      	cmp	r3, r2
 800f836:	bf28      	it	cs
 800f838:	4613      	movcs	r3, r2
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f83e:	893b      	ldrh	r3, [r7, #8]
 800f840:	461a      	mov	r2, r3
 800f842:	68f9      	ldr	r1, [r7, #12]
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 fa5d 	bl	800fd04 <USBD_CtlSendData>
 800f84a:	e009      	b.n	800f860 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f84c:	6839      	ldr	r1, [r7, #0]
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 f9e7 	bl	800fc22 <USBD_CtlError>
 800f854:	e004      	b.n	800f860 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 faae 	bl	800fdb8 <USBD_CtlSendStatus>
 800f85c:	e000      	b.n	800f860 <USBD_GetDescriptor+0x2cc>
    return;
 800f85e:	bf00      	nop
  }
}
 800f860:	3710      	adds	r7, #16
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop

0800f868 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	889b      	ldrh	r3, [r3, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d131      	bne.n	800f8de <USBD_SetAddress+0x76>
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	88db      	ldrh	r3, [r3, #6]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d12d      	bne.n	800f8de <USBD_SetAddress+0x76>
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	885b      	ldrh	r3, [r3, #2]
 800f886:	2b7f      	cmp	r3, #127	; 0x7f
 800f888:	d829      	bhi.n	800f8de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	885b      	ldrh	r3, [r3, #2]
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f894:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	2b03      	cmp	r3, #3
 800f8a0:	d104      	bne.n	800f8ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f8a2:	6839      	ldr	r1, [r7, #0]
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f000 f9bc 	bl	800fc22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8aa:	e01d      	b.n	800f8e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	7bfa      	ldrb	r2, [r7, #15]
 800f8b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f8b4:	7bfb      	ldrb	r3, [r7, #15]
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f011 f8cb 	bl	8020a54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 fa7a 	bl	800fdb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f8c4:	7bfb      	ldrb	r3, [r7, #15]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d004      	beq.n	800f8d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2202      	movs	r2, #2
 800f8ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8d2:	e009      	b.n	800f8e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2201      	movs	r2, #1
 800f8d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8dc:	e004      	b.n	800f8e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f8de:	6839      	ldr	r1, [r7, #0]
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f000 f99e 	bl	800fc22 <USBD_CtlError>
  }
}
 800f8e6:	bf00      	nop
 800f8e8:	bf00      	nop
 800f8ea:	3710      	adds	r7, #16
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd80      	pop	{r7, pc}

0800f8f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	885b      	ldrh	r3, [r3, #2]
 800f902:	b2da      	uxtb	r2, r3
 800f904:	4b4e      	ldr	r3, [pc, #312]	; (800fa40 <USBD_SetConfig+0x150>)
 800f906:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f908:	4b4d      	ldr	r3, [pc, #308]	; (800fa40 <USBD_SetConfig+0x150>)
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d905      	bls.n	800f91c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f910:	6839      	ldr	r1, [r7, #0]
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 f985 	bl	800fc22 <USBD_CtlError>
    return USBD_FAIL;
 800f918:	2303      	movs	r3, #3
 800f91a:	e08c      	b.n	800fa36 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f922:	b2db      	uxtb	r3, r3
 800f924:	2b02      	cmp	r3, #2
 800f926:	d002      	beq.n	800f92e <USBD_SetConfig+0x3e>
 800f928:	2b03      	cmp	r3, #3
 800f92a:	d029      	beq.n	800f980 <USBD_SetConfig+0x90>
 800f92c:	e075      	b.n	800fa1a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f92e:	4b44      	ldr	r3, [pc, #272]	; (800fa40 <USBD_SetConfig+0x150>)
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d020      	beq.n	800f978 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f936:	4b42      	ldr	r3, [pc, #264]	; (800fa40 <USBD_SetConfig+0x150>)
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	461a      	mov	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f940:	4b3f      	ldr	r3, [pc, #252]	; (800fa40 <USBD_SetConfig+0x150>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	4619      	mov	r1, r3
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f7fe ffe7 	bl	800e91a <USBD_SetClassConfig>
 800f94c:	4603      	mov	r3, r0
 800f94e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f950:	7bfb      	ldrb	r3, [r7, #15]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d008      	beq.n	800f968 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f956:	6839      	ldr	r1, [r7, #0]
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 f962 	bl	800fc22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2202      	movs	r2, #2
 800f962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f966:	e065      	b.n	800fa34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f000 fa25 	bl	800fdb8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2203      	movs	r2, #3
 800f972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f976:	e05d      	b.n	800fa34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 fa1d 	bl	800fdb8 <USBD_CtlSendStatus>
      break;
 800f97e:	e059      	b.n	800fa34 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f980:	4b2f      	ldr	r3, [pc, #188]	; (800fa40 <USBD_SetConfig+0x150>)
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d112      	bne.n	800f9ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2202      	movs	r2, #2
 800f98c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f990:	4b2b      	ldr	r3, [pc, #172]	; (800fa40 <USBD_SetConfig+0x150>)
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	461a      	mov	r2, r3
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f99a:	4b29      	ldr	r3, [pc, #164]	; (800fa40 <USBD_SetConfig+0x150>)
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	4619      	mov	r1, r3
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f7fe ffd6 	bl	800e952 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 fa06 	bl	800fdb8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f9ac:	e042      	b.n	800fa34 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f9ae:	4b24      	ldr	r3, [pc, #144]	; (800fa40 <USBD_SetConfig+0x150>)
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d02a      	beq.n	800fa12 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	b2db      	uxtb	r3, r3
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f7fe ffc4 	bl	800e952 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f9ca:	4b1d      	ldr	r3, [pc, #116]	; (800fa40 <USBD_SetConfig+0x150>)
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f9d4:	4b1a      	ldr	r3, [pc, #104]	; (800fa40 <USBD_SetConfig+0x150>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	4619      	mov	r1, r3
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f7fe ff9d 	bl	800e91a <USBD_SetClassConfig>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f9e4:	7bfb      	ldrb	r3, [r7, #15]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d00f      	beq.n	800fa0a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f9ea:	6839      	ldr	r1, [r7, #0]
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f000 f918 	bl	800fc22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7fe ffa9 	bl	800e952 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2202      	movs	r2, #2
 800fa04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fa08:	e014      	b.n	800fa34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f000 f9d4 	bl	800fdb8 <USBD_CtlSendStatus>
      break;
 800fa10:	e010      	b.n	800fa34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 f9d0 	bl	800fdb8 <USBD_CtlSendStatus>
      break;
 800fa18:	e00c      	b.n	800fa34 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fa1a:	6839      	ldr	r1, [r7, #0]
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f000 f900 	bl	800fc22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa22:	4b07      	ldr	r3, [pc, #28]	; (800fa40 <USBD_SetConfig+0x150>)
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	4619      	mov	r1, r3
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f7fe ff92 	bl	800e952 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fa2e:	2303      	movs	r3, #3
 800fa30:	73fb      	strb	r3, [r7, #15]
      break;
 800fa32:	bf00      	nop
  }

  return ret;
 800fa34:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3710      	adds	r7, #16
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	20002bf0 	.word	0x20002bf0

0800fa44 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	88db      	ldrh	r3, [r3, #6]
 800fa52:	2b01      	cmp	r3, #1
 800fa54:	d004      	beq.n	800fa60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa56:	6839      	ldr	r1, [r7, #0]
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f000 f8e2 	bl	800fc22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa5e:	e023      	b.n	800faa8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa66:	b2db      	uxtb	r3, r3
 800fa68:	2b02      	cmp	r3, #2
 800fa6a:	dc02      	bgt.n	800fa72 <USBD_GetConfig+0x2e>
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	dc03      	bgt.n	800fa78 <USBD_GetConfig+0x34>
 800fa70:	e015      	b.n	800fa9e <USBD_GetConfig+0x5a>
 800fa72:	2b03      	cmp	r3, #3
 800fa74:	d00b      	beq.n	800fa8e <USBD_GetConfig+0x4a>
 800fa76:	e012      	b.n	800fa9e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	3308      	adds	r3, #8
 800fa82:	2201      	movs	r2, #1
 800fa84:	4619      	mov	r1, r3
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f000 f93c 	bl	800fd04 <USBD_CtlSendData>
        break;
 800fa8c:	e00c      	b.n	800faa8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	3304      	adds	r3, #4
 800fa92:	2201      	movs	r2, #1
 800fa94:	4619      	mov	r1, r3
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 f934 	bl	800fd04 <USBD_CtlSendData>
        break;
 800fa9c:	e004      	b.n	800faa8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fa9e:	6839      	ldr	r1, [r7, #0]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f000 f8be 	bl	800fc22 <USBD_CtlError>
        break;
 800faa6:	bf00      	nop
}
 800faa8:	bf00      	nop
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	3b01      	subs	r3, #1
 800fac4:	2b02      	cmp	r3, #2
 800fac6:	d81e      	bhi.n	800fb06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	88db      	ldrh	r3, [r3, #6]
 800facc:	2b02      	cmp	r3, #2
 800face:	d004      	beq.n	800fada <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fad0:	6839      	ldr	r1, [r7, #0]
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 f8a5 	bl	800fc22 <USBD_CtlError>
        break;
 800fad8:	e01a      	b.n	800fb10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2201      	movs	r2, #1
 800fade:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d005      	beq.n	800faf6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	68db      	ldr	r3, [r3, #12]
 800faee:	f043 0202 	orr.w	r2, r3, #2
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	330c      	adds	r3, #12
 800fafa:	2202      	movs	r2, #2
 800fafc:	4619      	mov	r1, r3
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 f900 	bl	800fd04 <USBD_CtlSendData>
      break;
 800fb04:	e004      	b.n	800fb10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fb06:	6839      	ldr	r1, [r7, #0]
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f000 f88a 	bl	800fc22 <USBD_CtlError>
      break;
 800fb0e:	bf00      	nop
  }
}
 800fb10:	bf00      	nop
 800fb12:	3708      	adds	r7, #8
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	885b      	ldrh	r3, [r3, #2]
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d107      	bne.n	800fb3a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 f940 	bl	800fdb8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fb38:	e013      	b.n	800fb62 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	885b      	ldrh	r3, [r3, #2]
 800fb3e:	2b02      	cmp	r3, #2
 800fb40:	d10b      	bne.n	800fb5a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	889b      	ldrh	r3, [r3, #4]
 800fb46:	0a1b      	lsrs	r3, r3, #8
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	b2da      	uxtb	r2, r3
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f000 f930 	bl	800fdb8 <USBD_CtlSendStatus>
}
 800fb58:	e003      	b.n	800fb62 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fb5a:	6839      	ldr	r1, [r7, #0]
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f000 f860 	bl	800fc22 <USBD_CtlError>
}
 800fb62:	bf00      	nop
 800fb64:	3708      	adds	r7, #8
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b082      	sub	sp, #8
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
 800fb72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	3b01      	subs	r3, #1
 800fb7e:	2b02      	cmp	r3, #2
 800fb80:	d80b      	bhi.n	800fb9a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	885b      	ldrh	r3, [r3, #2]
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d10c      	bne.n	800fba4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 f910 	bl	800fdb8 <USBD_CtlSendStatus>
      }
      break;
 800fb98:	e004      	b.n	800fba4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fb9a:	6839      	ldr	r1, [r7, #0]
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f000 f840 	bl	800fc22 <USBD_CtlError>
      break;
 800fba2:	e000      	b.n	800fba6 <USBD_ClrFeature+0x3c>
      break;
 800fba4:	bf00      	nop
  }
}
 800fba6:	bf00      	nop
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b084      	sub	sp, #16
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
 800fbb6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	781a      	ldrb	r2, [r3, #0]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	781a      	ldrb	r2, [r3, #0]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	3301      	adds	r3, #1
 800fbd6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f7ff fa41 	bl	800f060 <SWAPBYTE>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	3301      	adds	r3, #1
 800fbf0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fbf2:	68f8      	ldr	r0, [r7, #12]
 800fbf4:	f7ff fa34 	bl	800f060 <SWAPBYTE>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	3301      	adds	r3, #1
 800fc04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fc0c:	68f8      	ldr	r0, [r7, #12]
 800fc0e:	f7ff fa27 	bl	800f060 <SWAPBYTE>
 800fc12:	4603      	mov	r3, r0
 800fc14:	461a      	mov	r2, r3
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	80da      	strh	r2, [r3, #6]
}
 800fc1a:	bf00      	nop
 800fc1c:	3710      	adds	r7, #16
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b082      	sub	sp, #8
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
 800fc2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc2c:	2180      	movs	r1, #128	; 0x80
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f010 fea6 	bl	8020980 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc34:	2100      	movs	r1, #0
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f010 fea2 	bl	8020980 <USBD_LL_StallEP>
}
 800fc3c:	bf00      	nop
 800fc3e:	3708      	adds	r7, #8
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b086      	sub	sp, #24
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	60f8      	str	r0, [r7, #12]
 800fc4c:	60b9      	str	r1, [r7, #8]
 800fc4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc50:	2300      	movs	r3, #0
 800fc52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d036      	beq.n	800fcc8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fc5e:	6938      	ldr	r0, [r7, #16]
 800fc60:	f000 f836 	bl	800fcd0 <USBD_GetLen>
 800fc64:	4603      	mov	r3, r0
 800fc66:	3301      	adds	r3, #1
 800fc68:	b29b      	uxth	r3, r3
 800fc6a:	005b      	lsls	r3, r3, #1
 800fc6c:	b29a      	uxth	r2, r3
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fc72:	7dfb      	ldrb	r3, [r7, #23]
 800fc74:	68ba      	ldr	r2, [r7, #8]
 800fc76:	4413      	add	r3, r2
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	7812      	ldrb	r2, [r2, #0]
 800fc7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc7e:	7dfb      	ldrb	r3, [r7, #23]
 800fc80:	3301      	adds	r3, #1
 800fc82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc84:	7dfb      	ldrb	r3, [r7, #23]
 800fc86:	68ba      	ldr	r2, [r7, #8]
 800fc88:	4413      	add	r3, r2
 800fc8a:	2203      	movs	r2, #3
 800fc8c:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc8e:	7dfb      	ldrb	r3, [r7, #23]
 800fc90:	3301      	adds	r3, #1
 800fc92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fc94:	e013      	b.n	800fcbe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fc96:	7dfb      	ldrb	r3, [r7, #23]
 800fc98:	68ba      	ldr	r2, [r7, #8]
 800fc9a:	4413      	add	r3, r2
 800fc9c:	693a      	ldr	r2, [r7, #16]
 800fc9e:	7812      	ldrb	r2, [r2, #0]
 800fca0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	3301      	adds	r3, #1
 800fca6:	613b      	str	r3, [r7, #16]
    idx++;
 800fca8:	7dfb      	ldrb	r3, [r7, #23]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fcae:	7dfb      	ldrb	r3, [r7, #23]
 800fcb0:	68ba      	ldr	r2, [r7, #8]
 800fcb2:	4413      	add	r3, r2
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	701a      	strb	r2, [r3, #0]
    idx++;
 800fcb8:	7dfb      	ldrb	r3, [r7, #23]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d1e7      	bne.n	800fc96 <USBD_GetString+0x52>
 800fcc6:	e000      	b.n	800fcca <USBD_GetString+0x86>
    return;
 800fcc8:	bf00      	nop
  }
}
 800fcca:	3718      	adds	r7, #24
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b085      	sub	sp, #20
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fce0:	e005      	b.n	800fcee <USBD_GetLen+0x1e>
  {
    len++;
 800fce2:	7bfb      	ldrb	r3, [r7, #15]
 800fce4:	3301      	adds	r3, #1
 800fce6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	3301      	adds	r3, #1
 800fcec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d1f5      	bne.n	800fce2 <USBD_GetLen+0x12>
  }

  return len;
 800fcf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3714      	adds	r7, #20
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2202      	movs	r2, #2
 800fd14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	68ba      	ldr	r2, [r7, #8]
 800fd28:	2100      	movs	r1, #0
 800fd2a:	68f8      	ldr	r0, [r7, #12]
 800fd2c:	f010 feb1 	bl	8020a92 <USBD_LL_Transmit>

  return USBD_OK;
 800fd30:	2300      	movs	r3, #0
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3710      	adds	r7, #16
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}

0800fd3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fd3a:	b580      	push	{r7, lr}
 800fd3c:	b084      	sub	sp, #16
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	60f8      	str	r0, [r7, #12]
 800fd42:	60b9      	str	r1, [r7, #8]
 800fd44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	68ba      	ldr	r2, [r7, #8]
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	f010 fea0 	bl	8020a92 <USBD_LL_Transmit>

  return USBD_OK;
 800fd52:	2300      	movs	r3, #0
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3710      	adds	r7, #16
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b084      	sub	sp, #16
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	60f8      	str	r0, [r7, #12]
 800fd64:	60b9      	str	r1, [r7, #8]
 800fd66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2203      	movs	r2, #3
 800fd6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	68ba      	ldr	r2, [r7, #8]
 800fd84:	2100      	movs	r1, #0
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f010 fea4 	bl	8020ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd8c:	2300      	movs	r3, #0
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3710      	adds	r7, #16
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}

0800fd96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b084      	sub	sp, #16
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	60f8      	str	r0, [r7, #12]
 800fd9e:	60b9      	str	r1, [r7, #8]
 800fda0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	68ba      	ldr	r2, [r7, #8]
 800fda6:	2100      	movs	r1, #0
 800fda8:	68f8      	ldr	r0, [r7, #12]
 800fdaa:	f010 fe93 	bl	8020ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdae:	2300      	movs	r3, #0
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3710      	adds	r7, #16
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2204      	movs	r2, #4
 800fdc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fdc8:	2300      	movs	r3, #0
 800fdca:	2200      	movs	r2, #0
 800fdcc:	2100      	movs	r1, #0
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f010 fe5f 	bl	8020a92 <USBD_LL_Transmit>

  return USBD_OK;
 800fdd4:	2300      	movs	r3, #0
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3708      	adds	r7, #8
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}

0800fdde <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fdde:	b580      	push	{r7, lr}
 800fde0:	b082      	sub	sp, #8
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2205      	movs	r2, #5
 800fdea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fdee:	2300      	movs	r3, #0
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	2100      	movs	r1, #0
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f010 fe6d 	bl	8020ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdfa:	2300      	movs	r3, #0
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b08b      	sub	sp, #44	; 0x2c
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	ed87 0a02 	vstr	s0, [r7, #8]
 800fe10:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	881b      	ldrh	r3, [r3, #0]
 800fe22:	461a      	mov	r2, r3
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	885b      	ldrh	r3, [r3, #2]
 800fe28:	fb02 f303 	mul.w	r3, r2, r3
 800fe2c:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800fe2e:	69bb      	ldr	r3, [r7, #24]
 800fe30:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800fe32:	e010      	b.n	800fe56 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800fe34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe36:	1d1a      	adds	r2, r3, #4
 800fe38:	627a      	str	r2, [r7, #36]	; 0x24
 800fe3a:	ed93 7a00 	vldr	s14, [r3]
 800fe3e:	6a3b      	ldr	r3, [r7, #32]
 800fe40:	1d1a      	adds	r2, r3, #4
 800fe42:	623a      	str	r2, [r7, #32]
 800fe44:	edd7 7a02 	vldr	s15, [r7, #8]
 800fe48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe4c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	3b01      	subs	r3, #1
 800fe54:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d1eb      	bne.n	800fe34 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800fe60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	372c      	adds	r7, #44	; 0x2c
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr

0800fe70 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b08b      	sub	sp, #44	; 0x2c
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	685b      	ldr	r3, [r3, #4]
 800fe7e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	881b      	ldrh	r3, [r3, #0]
 800fe8a:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	885b      	ldrh	r3, [r3, #2]
 800fe90:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800fe92:	89fb      	ldrh	r3, [r7, #14]
 800fe94:	61bb      	str	r3, [r7, #24]
 800fe96:	2300      	movs	r3, #0
 800fe98:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	009b      	lsls	r3, r3, #2
 800fe9e:	693a      	ldr	r2, [r7, #16]
 800fea0:	4413      	add	r3, r2
 800fea2:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800fea4:	89bb      	ldrh	r3, [r7, #12]
 800fea6:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800fea8:	e00d      	b.n	800fec6 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800feaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feac:	1d1a      	adds	r2, r3, #4
 800feae:	627a      	str	r2, [r7, #36]	; 0x24
 800feb0:	681a      	ldr	r2, [r3, #0]
 800feb2:	6a3b      	ldr	r3, [r7, #32]
 800feb4:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800feb6:	89fb      	ldrh	r3, [r7, #14]
 800feb8:	009b      	lsls	r3, r3, #2
 800feba:	6a3a      	ldr	r2, [r7, #32]
 800febc:	4413      	add	r3, r2
 800febe:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800fec0:	69fb      	ldr	r3, [r7, #28]
 800fec2:	3b01      	subs	r3, #1
 800fec4:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800fec6:	69fb      	ldr	r3, [r7, #28]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d1ee      	bne.n	800feaa <arm_mat_trans_f32+0x3a>
      }

      i++;
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	3301      	adds	r3, #1
 800fed0:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	3b01      	subs	r3, #1
 800fed6:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d1dd      	bne.n	800fe9a <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800fede:	2300      	movs	r3, #0
 800fee0:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800fee2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	372c      	adds	r7, #44	; 0x2c
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr

0800fef2 <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800fef2:	b480      	push	{r7}
 800fef4:	b087      	sub	sp, #28
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	60f8      	str	r0, [r7, #12]
 800fefa:	60b9      	str	r1, [r7, #8]
 800fefc:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800fefe:	f04f 0300 	mov.w	r3, #0
 800ff02:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800ff08:	e00d      	b.n	800ff26 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	1d1a      	adds	r2, r3, #4
 800ff0e:	60fa      	str	r2, [r7, #12]
 800ff10:	edd3 7a00 	vldr	s15, [r3]
 800ff14:	ed97 7a04 	vldr	s14, [r7, #16]
 800ff18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff1c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	3b01      	subs	r3, #1
 800ff24:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d1ee      	bne.n	800ff0a <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	ee07 3a90 	vmov	s15, r3
 800ff32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ff36:	edd7 6a04 	vldr	s13, [r7, #16]
 800ff3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	edc3 7a00 	vstr	s15, [r3]
}
 800ff44:	bf00      	nop
 800ff46:	371c      	adds	r7, #28
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr

0800ff50 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b08a      	sub	sp, #40	; 0x28
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800ff5c:	f04f 0300 	mov.w	r3, #0
 800ff60:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800ff66:	e011      	b.n	800ff8c <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	1d1a      	adds	r2, r3, #4
 800ff6c:	60fa      	str	r2, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 800ff72:	edd7 7a07 	vldr	s15, [r7, #28]
 800ff76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ff7a:	ed97 7a08 	vldr	s14, [r7, #32]
 800ff7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff82:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 800ff86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 800ff8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d1ea      	bne.n	800ff68 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	ee07 3a90 	vmov	s15, r3
 800ff98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ff9c:	edd7 6a08 	vldr	s13, [r7, #32]
 800ffa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffa4:	edc7 7a06 	vstr	s15, [r7, #24]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800ffac:	edd7 7a06 	vldr	s15, [r7, #24]
 800ffb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ffb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb8:	db09      	blt.n	800ffce <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 800ffba:	ed97 0a06 	vldr	s0, [r7, #24]
 800ffbe:	f011 f94d 	bl	802125c <sqrtf>
 800ffc2:	eef0 7a40 	vmov.f32	s15, s0
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800ffcc:	e004      	b.n	800ffd8 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	f04f 0200 	mov.w	r2, #0
 800ffd4:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800ffd6:	bf00      	nop
}
 800ffd8:	bf00      	nop
 800ffda:	3728      	adds	r7, #40	; 0x28
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b089      	sub	sp, #36	; 0x24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	607a      	str	r2, [r7, #4]
 800ffec:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 800ffee:	2300      	movs	r3, #0
 800fff0:	61fb      	str	r3, [r7, #28]
 800fff2:	e043      	b.n	801007c <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 800fff4:	69fb      	ldr	r3, [r7, #28]
 800fff6:	005b      	lsls	r3, r3, #1
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	4413      	add	r3, r2
 800fffc:	881b      	ldrh	r3, [r3, #0]
 800fffe:	089b      	lsrs	r3, r3, #2
 8010000:	b29b      	uxth	r3, r3
 8010002:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	3301      	adds	r3, #1
 8010008:	005b      	lsls	r3, r3, #1
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	4413      	add	r3, r2
 801000e:	881b      	ldrh	r3, [r3, #0]
 8010010:	089b      	lsrs	r3, r3, #2
 8010012:	b29b      	uxth	r3, r3
 8010014:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8010016:	69bb      	ldr	r3, [r7, #24]
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	68fa      	ldr	r2, [r7, #12]
 801001c:	4413      	add	r3, r2
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	009b      	lsls	r3, r3, #2
 8010026:	68fa      	ldr	r2, [r7, #12]
 8010028:	441a      	add	r2, r3
 801002a:	69bb      	ldr	r3, [r7, #24]
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	68f9      	ldr	r1, [r7, #12]
 8010030:	440b      	add	r3, r1
 8010032:	6812      	ldr	r2, [r2, #0]
 8010034:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	009b      	lsls	r3, r3, #2
 801003a:	68fa      	ldr	r2, [r7, #12]
 801003c:	4413      	add	r3, r2
 801003e:	693a      	ldr	r2, [r7, #16]
 8010040:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8010042:	69bb      	ldr	r3, [r7, #24]
 8010044:	3301      	adds	r3, #1
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	68fa      	ldr	r2, [r7, #12]
 801004a:	4413      	add	r3, r2
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	3301      	adds	r3, #1
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	68fa      	ldr	r2, [r7, #12]
 8010058:	441a      	add	r2, r3
 801005a:	69bb      	ldr	r3, [r7, #24]
 801005c:	3301      	adds	r3, #1
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	68f9      	ldr	r1, [r7, #12]
 8010062:	440b      	add	r3, r1
 8010064:	6812      	ldr	r2, [r2, #0]
 8010066:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	3301      	adds	r3, #1
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	68fa      	ldr	r2, [r7, #12]
 8010070:	4413      	add	r3, r2
 8010072:	693a      	ldr	r2, [r7, #16]
 8010074:	601a      	str	r2, [r3, #0]

    i += 2;
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	3302      	adds	r3, #2
 801007a:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 801007c:	897b      	ldrh	r3, [r7, #10]
 801007e:	69fa      	ldr	r2, [r7, #28]
 8010080:	429a      	cmp	r2, r3
 8010082:	d3b7      	bcc.n	800fff4 <arm_bitreversal_32+0x14>
  }
}
 8010084:	bf00      	nop
 8010086:	bf00      	nop
 8010088:	3724      	adds	r7, #36	; 0x24
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr

08010092 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b0a0      	sub	sp, #128	; 0x80
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
 801009a:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	881b      	ldrh	r3, [r3, #0]
 80100a0:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 80100a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100a4:	009b      	lsls	r3, r3, #2
 80100a6:	683a      	ldr	r2, [r7, #0]
 80100a8:	4413      	add	r3, r2
 80100aa:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 80100b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80100b8:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 80100ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100bc:	085b      	lsrs	r3, r3, #1
 80100be:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 80100c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	683a      	ldr	r2, [r7, #0]
 80100c6:	4413      	add	r3, r2
 80100c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 80100ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100cc:	009b      	lsls	r3, r3, #2
 80100ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80100d0:	4413      	add	r3, r2
 80100d2:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 80100d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100d6:	089b      	lsrs	r3, r3, #2
 80100d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80100da:	e1b6      	b.n	801044a <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	689b      	ldr	r3, [r3, #8]
 80100ec:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 80100f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 80100fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8010100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010102:	689b      	ldr	r3, [r3, #8]
 8010104:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8010106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010108:	68db      	ldr	r3, [r3, #12]
 801010a:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 801010c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8010112:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010114:	685b      	ldr	r3, [r3, #4]
 8010116:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8010118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801011a:	689b      	ldr	r3, [r3, #8]
 801011c:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 801011e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8010124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 801012a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8010130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010132:	689b      	ldr	r3, [r3, #8]
 8010134:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8010136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010138:	68db      	ldr	r3, [r3, #12]
 801013a:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 801013c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8010140:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	1d1a      	adds	r2, r3, #4
 8010148:	603a      	str	r2, [r7, #0]
 801014a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801014e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8010152:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8010156:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	1d1a      	adds	r2, r3, #4
 801015e:	603a      	str	r2, [r7, #0]
 8010160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010164:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8010168:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801016c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	1d1a      	adds	r2, r3, #4
 8010174:	603a      	str	r2, [r7, #0]
 8010176:	ee77 7a27 	vadd.f32	s15, s14, s15
 801017a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 801017e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8010182:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	1d1a      	adds	r2, r3, #4
 801018a:	603a      	str	r2, [r7, #0]
 801018c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010190:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8010194:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8010198:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801019c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80101a0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 80101a4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80101a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80101ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80101b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 80101b4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80101b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80101bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80101c0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80101c4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80101c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80101cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80101d0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 80101d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80101d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80101dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80101de:	1d1a      	adds	r2, r3, #4
 80101e0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80101e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101e6:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80101ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80101ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80101f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80101f4:	1d1a      	adds	r2, r3, #4
 80101f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80101f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101fc:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8010200:	ed97 7a08 	vldr	s14, [r7, #32]
 8010204:	edd7 7a04 	vldr	s15, [r7, #16]
 8010208:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801020a:	1d1a      	adds	r2, r3, #4
 801020c:	67fa      	str	r2, [r7, #124]	; 0x7c
 801020e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010212:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8010216:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801021a:	edd7 7a05 	vldr	s15, [r7, #20]
 801021e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010220:	1d1a      	adds	r2, r3, #4
 8010222:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010228:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 801022c:	ed97 7a02 	vldr	s14, [r7, #8]
 8010230:	edd7 7a06 	vldr	s15, [r7, #24]
 8010234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010238:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 801023c:	ed97 7a03 	vldr	s14, [r7, #12]
 8010240:	edd7 7a07 	vldr	s15, [r7, #28]
 8010244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010248:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 801024c:	ed97 7a04 	vldr	s14, [r7, #16]
 8010250:	edd7 7a08 	vldr	s15, [r7, #32]
 8010254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010258:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 801025c:	ed97 7a05 	vldr	s14, [r7, #20]
 8010260:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010268:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 801026c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801026e:	1d1a      	adds	r2, r3, #4
 8010270:	673a      	str	r2, [r7, #112]	; 0x70
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8010276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010278:	1d1a      	adds	r2, r3, #4
 801027a:	673a      	str	r2, [r7, #112]	; 0x70
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8010280:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010284:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010288:	ee67 7a27 	vmul.f32	s15, s14, s15
 801028c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8010290:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010294:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010298:	ee67 7a27 	vmul.f32	s15, s14, s15
 801029c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 80102a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80102a4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80102a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102ac:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 80102b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80102b4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80102b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102bc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80102c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102c2:	1d1a      	adds	r2, r3, #4
 80102c4:	677a      	str	r2, [r7, #116]	; 0x74
 80102c6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80102ca:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80102ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102d2:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80102d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102d8:	1d1a      	adds	r2, r3, #4
 80102da:	677a      	str	r2, [r7, #116]	; 0x74
 80102dc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80102e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80102e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80102e8:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80102ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80102f0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80102f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102f8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 80102fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8010300:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010308:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 801030c:	edd7 7a03 	vldr	s15, [r7, #12]
 8010310:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010318:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 801031c:	edd7 7a02 	vldr	s15, [r7, #8]
 8010320:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010328:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 801032c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801032e:	1d1a      	adds	r2, r3, #4
 8010330:	67ba      	str	r2, [r7, #120]	; 0x78
 8010332:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010336:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801033a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801033e:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8010342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010344:	1d1a      	adds	r2, r3, #4
 8010346:	67ba      	str	r2, [r7, #120]	; 0x78
 8010348:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801034c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8010350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010354:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8010358:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801035a:	1d1a      	adds	r2, r3, #4
 801035c:	673a      	str	r2, [r7, #112]	; 0x70
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8010362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010364:	1d1a      	adds	r2, r3, #4
 8010366:	673a      	str	r2, [r7, #112]	; 0x70
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 801036c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010370:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010378:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 801037c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010380:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010388:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 801038c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010390:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010398:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 801039c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80103a0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80103a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103a8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 80103ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103ae:	1d1a      	adds	r2, r3, #4
 80103b0:	677a      	str	r2, [r7, #116]	; 0x74
 80103b2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80103b6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80103ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103be:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80103c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103c4:	1d1a      	adds	r2, r3, #4
 80103c6:	677a      	str	r2, [r7, #116]	; 0x74
 80103c8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80103cc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80103d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103d4:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80103d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80103dc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80103e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103e4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 80103e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80103ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80103f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103f4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 80103f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80103fc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010404:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8010408:	edd7 7a04 	vldr	s15, [r7, #16]
 801040c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010414:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8010418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801041a:	1d1a      	adds	r2, r3, #4
 801041c:	67ba      	str	r2, [r7, #120]	; 0x78
 801041e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010422:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8010426:	ee77 7a67 	vsub.f32	s15, s14, s15
 801042a:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 801042e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010430:	1d1a      	adds	r2, r3, #4
 8010432:	67ba      	str	r2, [r7, #120]	; 0x78
 8010434:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010438:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801043c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010440:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8010444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010446:	3b01      	subs	r3, #1
 8010448:	66fb      	str	r3, [r7, #108]	; 0x6c
 801044a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801044c:	2b00      	cmp	r3, #0
 801044e:	f47f ae45 	bne.w	80100dc <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8010452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010454:	b299      	uxth	r1, r3
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	685a      	ldr	r2, [r3, #4]
 801045a:	2302      	movs	r3, #2
 801045c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801045e:	f000 fef1 	bl	8011244 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8010462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010464:	b299      	uxth	r1, r3
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	685a      	ldr	r2, [r3, #4]
 801046a:	2302      	movs	r3, #2
 801046c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801046e:	f000 fee9 	bl	8011244 <arm_radix8_butterfly_f32>
}
 8010472:	bf00      	nop
 8010474:	3780      	adds	r7, #128	; 0x80
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}

0801047a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 801047a:	b580      	push	{r7, lr}
 801047c:	b0ac      	sub	sp, #176	; 0xb0
 801047e:	af00      	add	r7, sp, #0
 8010480:	6078      	str	r0, [r7, #4]
 8010482:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	881b      	ldrh	r3, [r3, #0]
 8010488:	085b      	lsrs	r3, r3, #1
 801048a:	b29b      	uxth	r3, r3
 801048c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8010490:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010494:	009b      	lsls	r3, r3, #2
 8010496:	683a      	ldr	r2, [r7, #0]
 8010498:	4413      	add	r3, r2
 801049a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 801049e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104a2:	009b      	lsls	r3, r3, #2
 80104a4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80104a8:	4413      	add	r3, r2
 80104aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80104ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104b2:	009b      	lsls	r3, r3, #2
 80104b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80104b8:	4413      	add	r3, r2
 80104ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80104c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104c6:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80104c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80104cc:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80104ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80104d2:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80104d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104d8:	3b04      	subs	r3, #4
 80104da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80104de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80104e2:	3b04      	subs	r3, #4
 80104e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80104e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80104ec:	3b04      	subs	r3, #4
 80104ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80104f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104f6:	009b      	lsls	r3, r3, #2
 80104f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80104fc:	4413      	add	r3, r2
 80104fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	685b      	ldr	r3, [r3, #4]
 8010506:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801050a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801050e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010512:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 801051a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801051e:	085b      	lsrs	r3, r3, #1
 8010520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8010524:	2302      	movs	r3, #2
 8010526:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8010528:	2304      	movs	r3, #4
 801052a:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 801052c:	2306      	movs	r3, #6
 801052e:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	ed93 7a00 	vldr	s14, [r3]
 8010536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801053a:	edd3 7a00 	vldr	s15, [r3]
 801053e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010542:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	ed93 7a00 	vldr	s14, [r3]
 801054c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010550:	edd3 7a00 	vldr	s15, [r3]
 8010554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010558:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	3304      	adds	r3, #4
 8010560:	ed93 7a00 	vldr	s14, [r3]
 8010564:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010568:	3304      	adds	r3, #4
 801056a:	edd3 7a00 	vldr	s15, [r3]
 801056e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010572:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	3304      	adds	r3, #4
 801057a:	ed93 7a00 	vldr	s14, [r3]
 801057e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010582:	3304      	adds	r3, #4
 8010584:	edd3 7a00 	vldr	s15, [r3]
 8010588:	ee77 7a67 	vsub.f32	s15, s14, s15
 801058c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8010590:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010594:	3304      	adds	r3, #4
 8010596:	ed93 7a00 	vldr	s14, [r3]
 801059a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801059e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80105a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80105a6:	3304      	adds	r3, #4
 80105a8:	edd3 7a00 	vldr	s15, [r3]
 80105ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80105b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80105b8:	edd3 7a00 	vldr	s15, [r3]
 80105bc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80105c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80105c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80105c8:	edd3 7a00 	vldr	s15, [r3]
 80105cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105d0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80105d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80105d8:	edd3 7a00 	vldr	s15, [r3]
 80105dc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80105e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80105e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80105e8:	edd3 7a00 	vldr	s15, [r3]
 80105ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105f0:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80105f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80105f8:	3304      	adds	r3, #4
 80105fa:	edd3 7a00 	vldr	s15, [r3]
 80105fe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010602:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010606:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801060a:	3304      	adds	r3, #4
 801060c:	edd3 7a00 	vldr	s15, [r3]
 8010610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010614:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8010618:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801061c:	3304      	adds	r3, #4
 801061e:	edd3 7a00 	vldr	s15, [r3]
 8010622:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010626:	ee37 7a67 	vsub.f32	s14, s14, s15
 801062a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801062e:	3304      	adds	r3, #4
 8010630:	edd3 7a00 	vldr	s15, [r3]
 8010634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010638:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 801063c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010640:	ed93 7a00 	vldr	s14, [r3]
 8010644:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010648:	ee37 7a27 	vadd.f32	s14, s14, s15
 801064c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010650:	edd3 7a00 	vldr	s15, [r3]
 8010654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010658:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 801065c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010660:	ed93 7a00 	vldr	s14, [r3]
 8010664:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010668:	ee37 7a27 	vadd.f32	s14, s14, s15
 801066c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010670:	edd3 7a00 	vldr	s15, [r3]
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	1d1a      	adds	r2, r3, #4
 8010678:	603a      	str	r2, [r7, #0]
 801067a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801067e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8010682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010686:	3304      	adds	r3, #4
 8010688:	ed93 7a00 	vldr	s14, [r3]
 801068c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010690:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010694:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010698:	3304      	adds	r3, #4
 801069a:	edd3 7a00 	vldr	s15, [r3]
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	1d1a      	adds	r2, r3, #4
 80106a2:	603a      	str	r2, [r7, #0]
 80106a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106a8:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 80106ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80106b0:	1d1a      	adds	r2, r3, #4
 80106b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80106b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106b8:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80106ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80106be:	1d1a      	adds	r2, r3, #4
 80106c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80106c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106c6:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80106c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80106cc:	1d1a      	adds	r2, r3, #4
 80106ce:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80106d2:	69fa      	ldr	r2, [r7, #28]
 80106d4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80106d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80106da:	1d1a      	adds	r2, r3, #4
 80106dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80106e0:	6a3a      	ldr	r2, [r7, #32]
 80106e2:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80106e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80106e8:	1d1a      	adds	r2, r3, #4
 80106ea:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80106ee:	68fa      	ldr	r2, [r7, #12]
 80106f0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80106f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80106f6:	1d1a      	adds	r2, r3, #4
 80106f8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80106fc:	693a      	ldr	r2, [r7, #16]
 80106fe:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8010700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010702:	009b      	lsls	r3, r3, #2
 8010704:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010708:	4413      	add	r3, r2
 801070a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 801070e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010710:	009b      	lsls	r3, r3, #2
 8010712:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010716:	4413      	add	r3, r2
 8010718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 801071c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801071e:	009b      	lsls	r3, r3, #2
 8010720:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010724:	4413      	add	r3, r2
 8010726:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 801072a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801072e:	3b02      	subs	r3, #2
 8010730:	085b      	lsrs	r3, r3, #1
 8010732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010736:	e31a      	b.n	8010d6e <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	ed93 7a00 	vldr	s14, [r3]
 801073e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010742:	edd3 7a00 	vldr	s15, [r3]
 8010746:	ee77 7a27 	vadd.f32	s15, s14, s15
 801074a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	ed93 7a00 	vldr	s14, [r3]
 8010754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010758:	edd3 7a00 	vldr	s15, [r3]
 801075c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010760:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	3304      	adds	r3, #4
 8010768:	ed93 7a00 	vldr	s14, [r3]
 801076c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010770:	3304      	adds	r3, #4
 8010772:	edd3 7a00 	vldr	s15, [r3]
 8010776:	ee77 7a27 	vadd.f32	s15, s14, s15
 801077a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	3304      	adds	r3, #4
 8010782:	ed93 7a00 	vldr	s14, [r3]
 8010786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801078a:	3304      	adds	r3, #4
 801078c:	edd3 7a00 	vldr	s15, [r3]
 8010790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010794:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8010798:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801079c:	3304      	adds	r3, #4
 801079e:	ed93 7a00 	vldr	s14, [r3]
 80107a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80107a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80107aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80107ae:	3304      	adds	r3, #4
 80107b0:	edd3 7a00 	vldr	s15, [r3]
 80107b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 80107bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107c0:	edd3 7a00 	vldr	s15, [r3]
 80107c4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80107c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80107d0:	edd3 7a00 	vldr	s15, [r3]
 80107d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107d8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 80107dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107e0:	edd3 7a00 	vldr	s15, [r3]
 80107e4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80107e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80107f0:	edd3 7a00 	vldr	s15, [r3]
 80107f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107f8:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 80107fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010800:	3304      	adds	r3, #4
 8010802:	edd3 7a00 	vldr	s15, [r3]
 8010806:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801080a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801080e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010812:	3304      	adds	r3, #4
 8010814:	edd3 7a00 	vldr	s15, [r3]
 8010818:	ee77 7a67 	vsub.f32	s15, s14, s15
 801081c:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8010820:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010824:	3304      	adds	r3, #4
 8010826:	edd3 7a00 	vldr	s15, [r3]
 801082a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801082e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010832:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010836:	3304      	adds	r3, #4
 8010838:	edd3 7a00 	vldr	s15, [r3]
 801083c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010840:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8010844:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010848:	ed93 7a00 	vldr	s14, [r3]
 801084c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010854:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010858:	edd3 7a00 	vldr	s15, [r3]
 801085c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010860:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8010864:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010868:	ed93 7a00 	vldr	s14, [r3]
 801086c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010870:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010878:	edd3 7a00 	vldr	s15, [r3]
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	1d1a      	adds	r2, r3, #4
 8010880:	603a      	str	r2, [r7, #0]
 8010882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010886:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 801088a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801088e:	3304      	adds	r3, #4
 8010890:	ed93 7a00 	vldr	s14, [r3]
 8010894:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010898:	ee37 7a27 	vadd.f32	s14, s14, s15
 801089c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80108a0:	3304      	adds	r3, #4
 80108a2:	edd3 7a00 	vldr	s15, [r3]
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	1d1a      	adds	r2, r3, #4
 80108aa:	603a      	str	r2, [r7, #0]
 80108ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108b0:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80108b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80108b8:	3b04      	subs	r3, #4
 80108ba:	ed93 7a00 	vldr	s14, [r3]
 80108be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80108c2:	3b04      	subs	r3, #4
 80108c4:	edd3 7a00 	vldr	s15, [r3]
 80108c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108cc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80108d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80108d4:	3b04      	subs	r3, #4
 80108d6:	ed93 7a00 	vldr	s14, [r3]
 80108da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80108de:	3b04      	subs	r3, #4
 80108e0:	edd3 7a00 	vldr	s15, [r3]
 80108e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108e8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80108ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80108f0:	ed93 7a00 	vldr	s14, [r3]
 80108f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80108f8:	edd3 7a00 	vldr	s15, [r3]
 80108fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010900:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8010904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010908:	ed93 7a00 	vldr	s14, [r3]
 801090c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010910:	edd3 7a00 	vldr	s15, [r3]
 8010914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010918:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 801091c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010920:	ed93 7a00 	vldr	s14, [r3]
 8010924:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010928:	edd3 7a00 	vldr	s15, [r3]
 801092c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010930:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010938:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 801093c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010940:	ed93 7a00 	vldr	s14, [r3]
 8010944:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010948:	edd3 7a00 	vldr	s15, [r3]
 801094c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010950:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010954:	3b04      	subs	r3, #4
 8010956:	edd3 7a00 	vldr	s15, [r3]
 801095a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801095e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010962:	3b04      	subs	r3, #4
 8010964:	edd3 7a00 	vldr	s15, [r3]
 8010968:	ee77 7a27 	vadd.f32	s15, s14, s15
 801096c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8010970:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010974:	3b04      	subs	r3, #4
 8010976:	edd3 7a00 	vldr	s15, [r3]
 801097a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801097e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010986:	3b04      	subs	r3, #4
 8010988:	edd3 7a00 	vldr	s15, [r3]
 801098c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010990:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8010994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010998:	edd3 7a00 	vldr	s15, [r3]
 801099c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80109a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80109a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80109a8:	edd3 7a00 	vldr	s15, [r3]
 80109ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109b0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 80109b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80109b8:	ed93 7a00 	vldr	s14, [r3]
 80109bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80109c0:	edd3 7a00 	vldr	s15, [r3]
 80109c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80109c8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80109cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109d0:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80109d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80109d8:	3b04      	subs	r3, #4
 80109da:	ed93 7a00 	vldr	s14, [r3]
 80109de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80109e2:	3b04      	subs	r3, #4
 80109e4:	edd3 7a00 	vldr	s15, [r3]
 80109e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80109ec:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80109f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109f4:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80109f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80109fc:	ed93 7a00 	vldr	s14, [r3]
 8010a00:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010a0c:	edd3 7a00 	vldr	s15, [r3]
 8010a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a14:	1f1a      	subs	r2, r3, #4
 8010a16:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a1e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8010a22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010a26:	3b04      	subs	r3, #4
 8010a28:	ed93 7a00 	vldr	s14, [r3]
 8010a2c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010a38:	3b04      	subs	r3, #4
 8010a3a:	edd3 7a00 	vldr	s15, [r3]
 8010a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a42:	1f1a      	subs	r2, r3, #4
 8010a44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a4c:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8010a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010a54:	1d1a      	adds	r2, r3, #4
 8010a56:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 8010a5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010a62:	1d1a      	adds	r2, r3, #4
 8010a64:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8010a6c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010a70:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a78:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8010a7c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010a80:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a88:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8010a8c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010a90:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8010a9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010aa0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010aa8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8010aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ab0:	1d1a      	adds	r2, r3, #4
 8010ab2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010ab6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010aba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ac2:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8010ac6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010aca:	1d1a      	adds	r2, r3, #4
 8010acc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010ad0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010ad4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010adc:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8010ae0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010ae4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010aec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8010af0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010af4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010afc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8010b00:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010b04:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b0c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8010b10:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010b14:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b1c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8010b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010b24:	1f1a      	subs	r2, r3, #4
 8010b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010b2a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010b2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b36:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8010b3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010b3e:	1f1a      	subs	r2, r3, #4
 8010b40:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010b44:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010b48:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b50:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8010b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8010b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8010b64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010b6c:	4413      	add	r3, r2
 8010b6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8010b72:	edd7 7a07 	vldr	s15, [r7, #28]
 8010b76:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b7e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8010b82:	edd7 7a08 	vldr	s15, [r7, #32]
 8010b86:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b8e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8010b92:	edd7 7a08 	vldr	s15, [r7, #32]
 8010b96:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b9e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8010ba2:	edd7 7a07 	vldr	s15, [r7, #28]
 8010ba6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8010bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010bb6:	1d1a      	adds	r2, r3, #4
 8010bb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010bbc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010bc0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010bc8:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8010bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010bd0:	1d1a      	adds	r2, r3, #4
 8010bd2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010bd6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010bda:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010be2:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8010be6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010bea:	eef1 7a67 	vneg.f32	s15, s15
 8010bee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bf6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8010bfa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010bfe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c06:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8010c0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010c0e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c16:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8010c1a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010c1e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c26:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8010c2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010c2e:	1f1a      	subs	r2, r3, #4
 8010c30:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010c34:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010c38:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c40:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8010c44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010c48:	1f1a      	subs	r2, r3, #4
 8010c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010c4e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8010c52:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8010c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c5a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8010c5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8010c66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8010c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c70:	009b      	lsls	r3, r3, #2
 8010c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010c76:	4413      	add	r3, r2
 8010c78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8010c7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8010c80:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c88:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8010c8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010c90:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c98:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8010c9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010ca0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ca8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8010cac:	edd7 7a03 	vldr	s15, [r7, #12]
 8010cb0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cb8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8010cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010cc0:	1d1a      	adds	r2, r3, #4
 8010cc2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010cc6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010cca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cd2:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8010cd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010cda:	1d1a      	adds	r2, r3, #4
 8010cdc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010ce0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010ce4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010cec:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8010cf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8010cf4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cfc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8010d00:	edd7 7a05 	vldr	s15, [r7, #20]
 8010d04:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d0c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8010d10:	edd7 7a05 	vldr	s15, [r7, #20]
 8010d14:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d1c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8010d20:	edd7 7a06 	vldr	s15, [r7, #24]
 8010d24:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d2c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8010d30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d34:	1f1a      	subs	r2, r3, #4
 8010d36:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8010d3a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010d3e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d46:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8010d4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d4e:	1f1a      	subs	r2, r3, #4
 8010d50:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8010d54:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010d58:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d60:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8010d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010d68:	3b01      	subs	r3, #1
 8010d6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	f47f ace0 	bne.w	8010738 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	ed93 7a00 	vldr	s14, [r3]
 8010d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010d82:	edd3 7a00 	vldr	s15, [r3]
 8010d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d8a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	ed93 7a00 	vldr	s14, [r3]
 8010d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010d98:	edd3 7a00 	vldr	s15, [r3]
 8010d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010da0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	3304      	adds	r3, #4
 8010da8:	ed93 7a00 	vldr	s14, [r3]
 8010dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010db0:	3304      	adds	r3, #4
 8010db2:	edd3 7a00 	vldr	s15, [r3]
 8010db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010dba:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	3304      	adds	r3, #4
 8010dc2:	ed93 7a00 	vldr	s14, [r3]
 8010dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010dca:	3304      	adds	r3, #4
 8010dcc:	edd3 7a00 	vldr	s15, [r3]
 8010dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010dd4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8010dd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ddc:	3304      	adds	r3, #4
 8010dde:	ed93 7a00 	vldr	s14, [r3]
 8010de2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8010de6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010dea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010dee:	3304      	adds	r3, #4
 8010df0:	edd3 7a00 	vldr	s15, [r3]
 8010df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010df8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8010dfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e00:	edd3 7a00 	vldr	s15, [r3]
 8010e04:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010e08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e10:	edd3 7a00 	vldr	s15, [r3]
 8010e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e18:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8010e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e20:	edd3 7a00 	vldr	s15, [r3]
 8010e24:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010e28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e30:	edd3 7a00 	vldr	s15, [r3]
 8010e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e38:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8010e3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e40:	3304      	adds	r3, #4
 8010e42:	edd3 7a00 	vldr	s15, [r3]
 8010e46:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010e4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e52:	3304      	adds	r3, #4
 8010e54:	edd3 7a00 	vldr	s15, [r3]
 8010e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e5c:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8010e60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e64:	3304      	adds	r3, #4
 8010e66:	edd3 7a00 	vldr	s15, [r3]
 8010e6a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010e6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e76:	3304      	adds	r3, #4
 8010e78:	edd3 7a00 	vldr	s15, [r3]
 8010e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e80:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8010e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e88:	ed93 7a00 	vldr	s14, [r3]
 8010e8c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010e90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e98:	edd3 7a00 	vldr	s15, [r3]
 8010e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ea0:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8010ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ea8:	ed93 7a00 	vldr	s14, [r3]
 8010eac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010eb8:	edd3 7a00 	vldr	s15, [r3]
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	1d1a      	adds	r2, r3, #4
 8010ec0:	603a      	str	r2, [r7, #0]
 8010ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ec6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8010eca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ece:	3304      	adds	r3, #4
 8010ed0:	ed93 7a00 	vldr	s14, [r3]
 8010ed4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010ee0:	3304      	adds	r3, #4
 8010ee2:	edd3 7a00 	vldr	s15, [r3]
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	1d1a      	adds	r2, r3, #4
 8010eea:	603a      	str	r2, [r7, #0]
 8010eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ef0:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8010ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8010efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8010f04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010f08:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f10:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8010f14:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010f18:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f20:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8010f24:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010f28:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f30:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8010f34:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010f38:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f40:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8010f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010f48:	1d1a      	adds	r2, r3, #4
 8010f4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010f4e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010f52:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f5a:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8010f5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010f62:	1d1a      	adds	r2, r3, #4
 8010f64:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010f68:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010f6c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f74:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8010f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8010f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8010f88:	edd7 7a07 	vldr	s15, [r7, #28]
 8010f8c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f94:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8010f98:	edd7 7a08 	vldr	s15, [r7, #32]
 8010f9c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fa4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8010fa8:	edd7 7a08 	vldr	s15, [r7, #32]
 8010fac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fb4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8010fb8:	edd7 7a07 	vldr	s15, [r7, #28]
 8010fbc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fc4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8010fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010fcc:	1d1a      	adds	r2, r3, #4
 8010fce:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010fd2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010fd6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fde:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8010fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010fe6:	1d1a      	adds	r2, r3, #4
 8010fe8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010fec:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010ff0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ff8:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8010ffc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8011004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011008:	685b      	ldr	r3, [r3, #4]
 801100a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 801100c:	edd7 7a03 	vldr	s15, [r7, #12]
 8011010:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8011014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011018:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 801101c:	edd7 7a04 	vldr	s15, [r7, #16]
 8011020:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8011024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011028:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 801102c:	edd7 7a04 	vldr	s15, [r7, #16]
 8011030:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8011034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011038:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 801103c:	edd7 7a03 	vldr	s15, [r7, #12]
 8011040:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8011044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011048:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 801104c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011050:	1d1a      	adds	r2, r3, #4
 8011052:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8011056:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801105a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801105e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011062:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8011066:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801106a:	1d1a      	adds	r2, r3, #4
 801106c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8011070:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8011074:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8011078:	ee77 7a67 	vsub.f32	s15, s14, s15
 801107c:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8011080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011084:	b299      	uxth	r1, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	685a      	ldr	r2, [r3, #4]
 801108a:	2304      	movs	r3, #4
 801108c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801108e:	f000 f8d9 	bl	8011244 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8011092:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011096:	b299      	uxth	r1, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	685a      	ldr	r2, [r3, #4]
 801109c:	2304      	movs	r3, #4
 801109e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80110a0:	f000 f8d0 	bl	8011244 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80110a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80110a8:	b299      	uxth	r1, r3
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	685a      	ldr	r2, [r3, #4]
 80110ae:	2304      	movs	r3, #4
 80110b0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80110b2:	f000 f8c7 	bl	8011244 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80110b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80110ba:	b299      	uxth	r1, r3
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	685a      	ldr	r2, [r3, #4]
 80110c0:	2304      	movs	r3, #4
 80110c2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80110c4:	f000 f8be 	bl	8011244 <arm_radix8_butterfly_f32>
}
 80110c8:	bf00      	nop
 80110ca:	37b0      	adds	r7, #176	; 0xb0
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}

080110d0 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b088      	sub	sp, #32
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	60f8      	str	r0, [r7, #12]
 80110d8:	60b9      	str	r1, [r7, #8]
 80110da:	4611      	mov	r1, r2
 80110dc:	461a      	mov	r2, r3
 80110de:	460b      	mov	r3, r1
 80110e0:	71fb      	strb	r3, [r7, #7]
 80110e2:	4613      	mov	r3, r2
 80110e4:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	881b      	ldrh	r3, [r3, #0]
 80110ea:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 80110ec:	79fb      	ldrb	r3, [r7, #7]
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	d117      	bne.n	8011122 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	3304      	adds	r3, #4
 80110f6:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80110f8:	2300      	movs	r3, #0
 80110fa:	61fb      	str	r3, [r7, #28]
 80110fc:	e00d      	b.n	801111a <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 80110fe:	69bb      	ldr	r3, [r7, #24]
 8011100:	edd3 7a00 	vldr	s15, [r3]
 8011104:	eef1 7a67 	vneg.f32	s15, s15
 8011108:	69bb      	ldr	r3, [r7, #24]
 801110a:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 801110e:	69bb      	ldr	r3, [r7, #24]
 8011110:	3308      	adds	r3, #8
 8011112:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	3301      	adds	r3, #1
 8011118:	61fb      	str	r3, [r7, #28]
 801111a:	69fa      	ldr	r2, [r7, #28]
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	429a      	cmp	r2, r3
 8011120:	d3ed      	bcc.n	80110fe <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011128:	d040      	beq.n	80111ac <arm_cfft_f32+0xdc>
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011130:	d845      	bhi.n	80111be <arm_cfft_f32+0xee>
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011138:	d033      	beq.n	80111a2 <arm_cfft_f32+0xd2>
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011140:	d83d      	bhi.n	80111be <arm_cfft_f32+0xee>
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011148:	d026      	beq.n	8011198 <arm_cfft_f32+0xc8>
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011150:	d835      	bhi.n	80111be <arm_cfft_f32+0xee>
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011158:	d028      	beq.n	80111ac <arm_cfft_f32+0xdc>
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011160:	d82d      	bhi.n	80111be <arm_cfft_f32+0xee>
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011168:	d01b      	beq.n	80111a2 <arm_cfft_f32+0xd2>
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011170:	d825      	bhi.n	80111be <arm_cfft_f32+0xee>
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	2b80      	cmp	r3, #128	; 0x80
 8011176:	d00f      	beq.n	8011198 <arm_cfft_f32+0xc8>
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	2b80      	cmp	r3, #128	; 0x80
 801117c:	d81f      	bhi.n	80111be <arm_cfft_f32+0xee>
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	2b40      	cmp	r3, #64	; 0x40
 8011182:	d013      	beq.n	80111ac <arm_cfft_f32+0xdc>
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	2b40      	cmp	r3, #64	; 0x40
 8011188:	d819      	bhi.n	80111be <arm_cfft_f32+0xee>
 801118a:	697b      	ldr	r3, [r7, #20]
 801118c:	2b10      	cmp	r3, #16
 801118e:	d003      	beq.n	8011198 <arm_cfft_f32+0xc8>
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	2b20      	cmp	r3, #32
 8011194:	d005      	beq.n	80111a2 <arm_cfft_f32+0xd2>
 8011196:	e012      	b.n	80111be <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8011198:	68b9      	ldr	r1, [r7, #8]
 801119a:	68f8      	ldr	r0, [r7, #12]
 801119c:	f7fe ff79 	bl	8010092 <arm_cfft_radix8by2_f32>
    break;
 80111a0:	e00d      	b.n	80111be <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80111a2:	68b9      	ldr	r1, [r7, #8]
 80111a4:	68f8      	ldr	r0, [r7, #12]
 80111a6:	f7ff f968 	bl	801047a <arm_cfft_radix8by4_f32>
    break;
 80111aa:	e008      	b.n	80111be <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	b299      	uxth	r1, r3
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	685a      	ldr	r2, [r3, #4]
 80111b4:	2301      	movs	r3, #1
 80111b6:	68b8      	ldr	r0, [r7, #8]
 80111b8:	f000 f844 	bl	8011244 <arm_radix8_butterfly_f32>
    break;
 80111bc:	bf00      	nop
  }

  if ( bitReverseFlag )
 80111be:	79bb      	ldrb	r3, [r7, #6]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d007      	beq.n	80111d4 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	8999      	ldrh	r1, [r3, #12]
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	689b      	ldr	r3, [r3, #8]
 80111cc:	461a      	mov	r2, r3
 80111ce:	68b8      	ldr	r0, [r7, #8]
 80111d0:	f7fe ff06 	bl	800ffe0 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80111d4:	79fb      	ldrb	r3, [r7, #7]
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d130      	bne.n	801123c <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	ee07 3a90 	vmov	s15, r3
 80111e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80111e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111ec:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80111f4:	2300      	movs	r3, #0
 80111f6:	61fb      	str	r3, [r7, #28]
 80111f8:	e01c      	b.n	8011234 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 80111fa:	69bb      	ldr	r3, [r7, #24]
 80111fc:	1d1a      	adds	r2, r3, #4
 80111fe:	61ba      	str	r2, [r7, #24]
 8011200:	ed93 7a00 	vldr	s14, [r3]
 8011204:	edd7 7a04 	vldr	s15, [r7, #16]
 8011208:	ee67 7a27 	vmul.f32	s15, s14, s15
 801120c:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	edd3 7a00 	vldr	s15, [r3]
 8011216:	eeb1 7a67 	vneg.f32	s14, s15
 801121a:	edd7 7a04 	vldr	s15, [r7, #16]
 801121e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011222:	69bb      	ldr	r3, [r7, #24]
 8011224:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8011228:	69bb      	ldr	r3, [r7, #24]
 801122a:	3304      	adds	r3, #4
 801122c:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 801122e:	69fb      	ldr	r3, [r7, #28]
 8011230:	3301      	adds	r3, #1
 8011232:	61fb      	str	r3, [r7, #28]
 8011234:	69fa      	ldr	r2, [r7, #28]
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	429a      	cmp	r2, r3
 801123a:	d3de      	bcc.n	80111fa <arm_cfft_f32+0x12a>
    }
  }
}
 801123c:	bf00      	nop
 801123e:	3720      	adds	r7, #32
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}

08011244 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8011244:	b480      	push	{r7}
 8011246:	b0bd      	sub	sp, #244	; 0xf4
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	607a      	str	r2, [r7, #4]
 801124e:	461a      	mov	r2, r3
 8011250:	460b      	mov	r3, r1
 8011252:	817b      	strh	r3, [r7, #10]
 8011254:	4613      	mov	r3, r2
 8011256:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8011258:	4b09      	ldr	r3, [pc, #36]	; (8011280 <arm_radix8_butterfly_f32+0x3c>)
 801125a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 801125e:	897b      	ldrh	r3, [r7, #10]
 8011260:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8011264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 801126c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011270:	08db      	lsrs	r3, r3, #3
 8011272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8011276:	2300      	movs	r3, #0
 8011278:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801127c:	e002      	b.n	8011284 <arm_radix8_butterfly_f32+0x40>
 801127e:	bf00      	nop
 8011280:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8011284:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801128c:	4413      	add	r3, r2
 801128e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8011292:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8011296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801129a:	4413      	add	r3, r2
 801129c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80112a0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80112a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112a8:	4413      	add	r3, r2
 80112aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80112ae:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80112b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112b6:	4413      	add	r3, r2
 80112b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80112bc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80112c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112c4:	4413      	add	r3, r2
 80112c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 80112ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80112ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112d2:	4413      	add	r3, r2
 80112d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80112d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80112dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112e0:	4413      	add	r3, r2
 80112e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80112e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80112ea:	00db      	lsls	r3, r3, #3
 80112ec:	68fa      	ldr	r2, [r7, #12]
 80112ee:	4413      	add	r3, r2
 80112f0:	ed93 7a00 	vldr	s14, [r3]
 80112f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80112f8:	00db      	lsls	r3, r3, #3
 80112fa:	68fa      	ldr	r2, [r7, #12]
 80112fc:	4413      	add	r3, r2
 80112fe:	edd3 7a00 	vldr	s15, [r3]
 8011302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011306:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 801130a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801130e:	00db      	lsls	r3, r3, #3
 8011310:	68fa      	ldr	r2, [r7, #12]
 8011312:	4413      	add	r3, r2
 8011314:	ed93 7a00 	vldr	s14, [r3]
 8011318:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801131c:	00db      	lsls	r3, r3, #3
 801131e:	68fa      	ldr	r2, [r7, #12]
 8011320:	4413      	add	r3, r2
 8011322:	edd3 7a00 	vldr	s15, [r3]
 8011326:	ee77 7a67 	vsub.f32	s15, s14, s15
 801132a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 801132e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011332:	00db      	lsls	r3, r3, #3
 8011334:	68fa      	ldr	r2, [r7, #12]
 8011336:	4413      	add	r3, r2
 8011338:	ed93 7a00 	vldr	s14, [r3]
 801133c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011340:	00db      	lsls	r3, r3, #3
 8011342:	68fa      	ldr	r2, [r7, #12]
 8011344:	4413      	add	r3, r2
 8011346:	edd3 7a00 	vldr	s15, [r3]
 801134a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801134e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8011352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011356:	00db      	lsls	r3, r3, #3
 8011358:	68fa      	ldr	r2, [r7, #12]
 801135a:	4413      	add	r3, r2
 801135c:	ed93 7a00 	vldr	s14, [r3]
 8011360:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011364:	00db      	lsls	r3, r3, #3
 8011366:	68fa      	ldr	r2, [r7, #12]
 8011368:	4413      	add	r3, r2
 801136a:	edd3 7a00 	vldr	s15, [r3]
 801136e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011372:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8011376:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801137a:	00db      	lsls	r3, r3, #3
 801137c:	68fa      	ldr	r2, [r7, #12]
 801137e:	4413      	add	r3, r2
 8011380:	ed93 7a00 	vldr	s14, [r3]
 8011384:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011388:	00db      	lsls	r3, r3, #3
 801138a:	68fa      	ldr	r2, [r7, #12]
 801138c:	4413      	add	r3, r2
 801138e:	edd3 7a00 	vldr	s15, [r3]
 8011392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011396:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 801139a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801139e:	00db      	lsls	r3, r3, #3
 80113a0:	68fa      	ldr	r2, [r7, #12]
 80113a2:	4413      	add	r3, r2
 80113a4:	ed93 7a00 	vldr	s14, [r3]
 80113a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80113ac:	00db      	lsls	r3, r3, #3
 80113ae:	68fa      	ldr	r2, [r7, #12]
 80113b0:	4413      	add	r3, r2
 80113b2:	edd3 7a00 	vldr	s15, [r3]
 80113b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80113ba:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80113be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80113c2:	00db      	lsls	r3, r3, #3
 80113c4:	68fa      	ldr	r2, [r7, #12]
 80113c6:	4413      	add	r3, r2
 80113c8:	ed93 7a00 	vldr	s14, [r3]
 80113cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80113d0:	00db      	lsls	r3, r3, #3
 80113d2:	68fa      	ldr	r2, [r7, #12]
 80113d4:	4413      	add	r3, r2
 80113d6:	edd3 7a00 	vldr	s15, [r3]
 80113da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113de:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80113e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80113e6:	00db      	lsls	r3, r3, #3
 80113e8:	68fa      	ldr	r2, [r7, #12]
 80113ea:	4413      	add	r3, r2
 80113ec:	ed93 7a00 	vldr	s14, [r3]
 80113f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80113f4:	00db      	lsls	r3, r3, #3
 80113f6:	68fa      	ldr	r2, [r7, #12]
 80113f8:	4413      	add	r3, r2
 80113fa:	edd3 7a00 	vldr	s15, [r3]
 80113fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011402:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8011406:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801140a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801140e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011412:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8011416:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801141a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801141e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011422:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8011426:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 801142a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801142e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011432:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8011436:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 801143a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011442:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8011446:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801144a:	00db      	lsls	r3, r3, #3
 801144c:	68fa      	ldr	r2, [r7, #12]
 801144e:	4413      	add	r3, r2
 8011450:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011454:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011458:	ee77 7a27 	vadd.f32	s15, s14, s15
 801145c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8011460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011464:	00db      	lsls	r3, r3, #3
 8011466:	68fa      	ldr	r2, [r7, #12]
 8011468:	4413      	add	r3, r2
 801146a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801146e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011476:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 801147a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801147e:	00db      	lsls	r3, r3, #3
 8011480:	3304      	adds	r3, #4
 8011482:	68fa      	ldr	r2, [r7, #12]
 8011484:	4413      	add	r3, r2
 8011486:	ed93 7a00 	vldr	s14, [r3]
 801148a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801148e:	00db      	lsls	r3, r3, #3
 8011490:	3304      	adds	r3, #4
 8011492:	68fa      	ldr	r2, [r7, #12]
 8011494:	4413      	add	r3, r2
 8011496:	edd3 7a00 	vldr	s15, [r3]
 801149a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801149e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80114a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80114a6:	00db      	lsls	r3, r3, #3
 80114a8:	3304      	adds	r3, #4
 80114aa:	68fa      	ldr	r2, [r7, #12]
 80114ac:	4413      	add	r3, r2
 80114ae:	ed93 7a00 	vldr	s14, [r3]
 80114b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80114b6:	00db      	lsls	r3, r3, #3
 80114b8:	3304      	adds	r3, #4
 80114ba:	68fa      	ldr	r2, [r7, #12]
 80114bc:	4413      	add	r3, r2
 80114be:	edd3 7a00 	vldr	s15, [r3]
 80114c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114c6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80114ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80114ce:	00db      	lsls	r3, r3, #3
 80114d0:	3304      	adds	r3, #4
 80114d2:	68fa      	ldr	r2, [r7, #12]
 80114d4:	4413      	add	r3, r2
 80114d6:	ed93 7a00 	vldr	s14, [r3]
 80114da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80114de:	00db      	lsls	r3, r3, #3
 80114e0:	3304      	adds	r3, #4
 80114e2:	68fa      	ldr	r2, [r7, #12]
 80114e4:	4413      	add	r3, r2
 80114e6:	edd3 7a00 	vldr	s15, [r3]
 80114ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114ee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80114f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80114f6:	00db      	lsls	r3, r3, #3
 80114f8:	3304      	adds	r3, #4
 80114fa:	68fa      	ldr	r2, [r7, #12]
 80114fc:	4413      	add	r3, r2
 80114fe:	ed93 7a00 	vldr	s14, [r3]
 8011502:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011506:	00db      	lsls	r3, r3, #3
 8011508:	3304      	adds	r3, #4
 801150a:	68fa      	ldr	r2, [r7, #12]
 801150c:	4413      	add	r3, r2
 801150e:	edd3 7a00 	vldr	s15, [r3]
 8011512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011516:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 801151a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801151e:	00db      	lsls	r3, r3, #3
 8011520:	3304      	adds	r3, #4
 8011522:	68fa      	ldr	r2, [r7, #12]
 8011524:	4413      	add	r3, r2
 8011526:	ed93 7a00 	vldr	s14, [r3]
 801152a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801152e:	00db      	lsls	r3, r3, #3
 8011530:	3304      	adds	r3, #4
 8011532:	68fa      	ldr	r2, [r7, #12]
 8011534:	4413      	add	r3, r2
 8011536:	edd3 7a00 	vldr	s15, [r3]
 801153a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801153e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8011542:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011546:	00db      	lsls	r3, r3, #3
 8011548:	3304      	adds	r3, #4
 801154a:	68fa      	ldr	r2, [r7, #12]
 801154c:	4413      	add	r3, r2
 801154e:	ed93 7a00 	vldr	s14, [r3]
 8011552:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011556:	00db      	lsls	r3, r3, #3
 8011558:	3304      	adds	r3, #4
 801155a:	68fa      	ldr	r2, [r7, #12]
 801155c:	4413      	add	r3, r2
 801155e:	edd3 7a00 	vldr	s15, [r3]
 8011562:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011566:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 801156a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801156e:	00db      	lsls	r3, r3, #3
 8011570:	3304      	adds	r3, #4
 8011572:	68fa      	ldr	r2, [r7, #12]
 8011574:	4413      	add	r3, r2
 8011576:	ed93 7a00 	vldr	s14, [r3]
 801157a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801157e:	00db      	lsls	r3, r3, #3
 8011580:	3304      	adds	r3, #4
 8011582:	68fa      	ldr	r2, [r7, #12]
 8011584:	4413      	add	r3, r2
 8011586:	edd3 7a00 	vldr	s15, [r3]
 801158a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801158e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8011592:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011596:	00db      	lsls	r3, r3, #3
 8011598:	3304      	adds	r3, #4
 801159a:	68fa      	ldr	r2, [r7, #12]
 801159c:	4413      	add	r3, r2
 801159e:	ed93 7a00 	vldr	s14, [r3]
 80115a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80115a6:	00db      	lsls	r3, r3, #3
 80115a8:	3304      	adds	r3, #4
 80115aa:	68fa      	ldr	r2, [r7, #12]
 80115ac:	4413      	add	r3, r2
 80115ae:	edd3 7a00 	vldr	s15, [r3]
 80115b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115b6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 80115ba:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80115be:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80115c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115c6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 80115ca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80115ce:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80115d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115d6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80115da:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80115de:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80115e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115e6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80115ea:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80115ee:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80115f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115f6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80115fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80115fe:	00db      	lsls	r3, r3, #3
 8011600:	3304      	adds	r3, #4
 8011602:	68fa      	ldr	r2, [r7, #12]
 8011604:	4413      	add	r3, r2
 8011606:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801160a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801160e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011612:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8011616:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801161a:	00db      	lsls	r3, r3, #3
 801161c:	3304      	adds	r3, #4
 801161e:	68fa      	ldr	r2, [r7, #12]
 8011620:	4413      	add	r3, r2
 8011622:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011626:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801162a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801162e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8011632:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011636:	00db      	lsls	r3, r3, #3
 8011638:	68fa      	ldr	r2, [r7, #12]
 801163a:	4413      	add	r3, r2
 801163c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011640:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011648:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 801164c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011650:	00db      	lsls	r3, r3, #3
 8011652:	68fa      	ldr	r2, [r7, #12]
 8011654:	4413      	add	r3, r2
 8011656:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 801165a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801165e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011662:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8011666:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801166a:	00db      	lsls	r3, r3, #3
 801166c:	3304      	adds	r3, #4
 801166e:	68fa      	ldr	r2, [r7, #12]
 8011670:	4413      	add	r3, r2
 8011672:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011676:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801167a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801167e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8011682:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011686:	00db      	lsls	r3, r3, #3
 8011688:	3304      	adds	r3, #4
 801168a:	68fa      	ldr	r2, [r7, #12]
 801168c:	4413      	add	r3, r2
 801168e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011692:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011696:	ee77 7a27 	vadd.f32	s15, s14, s15
 801169a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 801169e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80116a2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80116a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116aa:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80116ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116b2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 80116b6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80116ba:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80116be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116c2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80116c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116ca:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80116ce:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80116d2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80116d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116da:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80116de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116e2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80116e6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80116ea:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80116ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116f2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80116f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116fa:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80116fe:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011702:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011706:	ee77 7a67 	vsub.f32	s15, s14, s15
 801170a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 801170e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011712:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011716:	ee77 7a27 	vadd.f32	s15, s14, s15
 801171a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 801171e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8011722:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8011726:	ee77 7a67 	vsub.f32	s15, s14, s15
 801172a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 801172e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8011732:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8011736:	ee77 7a27 	vadd.f32	s15, s14, s15
 801173a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 801173e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011742:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011746:	ee77 7a67 	vsub.f32	s15, s14, s15
 801174a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 801174e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011752:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011756:	ee77 7a27 	vadd.f32	s15, s14, s15
 801175a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 801175e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8011762:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011766:	ee77 7a67 	vsub.f32	s15, s14, s15
 801176a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 801176e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8011772:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011776:	ee77 7a27 	vadd.f32	s15, s14, s15
 801177a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 801177e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011782:	00db      	lsls	r3, r3, #3
 8011784:	68fa      	ldr	r2, [r7, #12]
 8011786:	4413      	add	r3, r2
 8011788:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801178c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011794:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8011798:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801179c:	00db      	lsls	r3, r3, #3
 801179e:	68fa      	ldr	r2, [r7, #12]
 80117a0:	4413      	add	r3, r2
 80117a2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80117a6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80117aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117ae:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80117b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80117b6:	00db      	lsls	r3, r3, #3
 80117b8:	68fa      	ldr	r2, [r7, #12]
 80117ba:	4413      	add	r3, r2
 80117bc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80117c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80117c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117c8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80117cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80117d0:	00db      	lsls	r3, r3, #3
 80117d2:	68fa      	ldr	r2, [r7, #12]
 80117d4:	4413      	add	r3, r2
 80117d6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80117da:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80117de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117e2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80117e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80117ea:	00db      	lsls	r3, r3, #3
 80117ec:	3304      	adds	r3, #4
 80117ee:	68fa      	ldr	r2, [r7, #12]
 80117f0:	4413      	add	r3, r2
 80117f2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80117f6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80117fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117fe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8011802:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011806:	00db      	lsls	r3, r3, #3
 8011808:	3304      	adds	r3, #4
 801180a:	68fa      	ldr	r2, [r7, #12]
 801180c:	4413      	add	r3, r2
 801180e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011812:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011816:	ee77 7a27 	vadd.f32	s15, s14, s15
 801181a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 801181e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011822:	00db      	lsls	r3, r3, #3
 8011824:	3304      	adds	r3, #4
 8011826:	68fa      	ldr	r2, [r7, #12]
 8011828:	4413      	add	r3, r2
 801182a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801182e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011836:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 801183a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	3304      	adds	r3, #4
 8011842:	68fa      	ldr	r2, [r7, #12]
 8011844:	4413      	add	r3, r2
 8011846:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801184a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801184e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011852:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8011856:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801185a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801185e:	4413      	add	r3, r2
 8011860:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8011864:	897b      	ldrh	r3, [r7, #10]
 8011866:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801186a:	429a      	cmp	r2, r3
 801186c:	f4ff ad0a 	bcc.w	8011284 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8011870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011874:	2b07      	cmp	r3, #7
 8011876:	f240 84e3 	bls.w	8012240 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 801187a:	2300      	movs	r3, #0
 801187c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8011880:	2301      	movs	r3, #1
 8011882:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8011886:	893b      	ldrh	r3, [r7, #8]
 8011888:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801188c:	4413      	add	r3, r2
 801188e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8011890:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011892:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8011896:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801189a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801189c:	4413      	add	r3, r2
 801189e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 80118a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80118a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80118a4:	4413      	add	r3, r2
 80118a6:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 80118a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80118aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80118ac:	4413      	add	r3, r2
 80118ae:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 80118b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80118b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80118b4:	4413      	add	r3, r2
 80118b6:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 80118b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80118ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80118bc:	4413      	add	r3, r2
 80118be:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 80118c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80118c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80118c4:	4413      	add	r3, r2
 80118c6:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 80118c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80118cc:	00db      	lsls	r3, r3, #3
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	4413      	add	r3, r2
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80118d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80118d8:	00db      	lsls	r3, r3, #3
 80118da:	687a      	ldr	r2, [r7, #4]
 80118dc:	4413      	add	r3, r2
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80118e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80118e4:	00db      	lsls	r3, r3, #3
 80118e6:	687a      	ldr	r2, [r7, #4]
 80118e8:	4413      	add	r3, r2
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80118ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80118f0:	00db      	lsls	r3, r3, #3
 80118f2:	687a      	ldr	r2, [r7, #4]
 80118f4:	4413      	add	r3, r2
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80118fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80118fc:	00db      	lsls	r3, r3, #3
 80118fe:	687a      	ldr	r2, [r7, #4]
 8011900:	4413      	add	r3, r2
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8011906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011908:	00db      	lsls	r3, r3, #3
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	4413      	add	r3, r2
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8011912:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011914:	00db      	lsls	r3, r3, #3
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	4413      	add	r3, r2
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 801191e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011922:	00db      	lsls	r3, r3, #3
 8011924:	3304      	adds	r3, #4
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	4413      	add	r3, r2
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 801192e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011930:	00db      	lsls	r3, r3, #3
 8011932:	3304      	adds	r3, #4
 8011934:	687a      	ldr	r2, [r7, #4]
 8011936:	4413      	add	r3, r2
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 801193c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801193e:	00db      	lsls	r3, r3, #3
 8011940:	3304      	adds	r3, #4
 8011942:	687a      	ldr	r2, [r7, #4]
 8011944:	4413      	add	r3, r2
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 801194a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801194c:	00db      	lsls	r3, r3, #3
 801194e:	3304      	adds	r3, #4
 8011950:	687a      	ldr	r2, [r7, #4]
 8011952:	4413      	add	r3, r2
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8011958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801195a:	00db      	lsls	r3, r3, #3
 801195c:	3304      	adds	r3, #4
 801195e:	687a      	ldr	r2, [r7, #4]
 8011960:	4413      	add	r3, r2
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8011966:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011968:	00db      	lsls	r3, r3, #3
 801196a:	3304      	adds	r3, #4
 801196c:	687a      	ldr	r2, [r7, #4]
 801196e:	4413      	add	r3, r2
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8011974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011976:	00db      	lsls	r3, r3, #3
 8011978:	3304      	adds	r3, #4
 801197a:	687a      	ldr	r2, [r7, #4]
 801197c:	4413      	add	r3, r2
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8011982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 801198a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801198e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011992:	4413      	add	r3, r2
 8011994:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8011998:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801199c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119a0:	4413      	add	r3, r2
 80119a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 80119a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80119aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119ae:	4413      	add	r3, r2
 80119b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 80119b4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80119b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119bc:	4413      	add	r3, r2
 80119be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 80119c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80119c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119ca:	4413      	add	r3, r2
 80119cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 80119d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80119d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119d8:	4413      	add	r3, r2
 80119da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 80119de:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80119e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119e6:	4413      	add	r3, r2
 80119e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80119ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80119f0:	00db      	lsls	r3, r3, #3
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	4413      	add	r3, r2
 80119f6:	ed93 7a00 	vldr	s14, [r3]
 80119fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80119fe:	00db      	lsls	r3, r3, #3
 8011a00:	68fa      	ldr	r2, [r7, #12]
 8011a02:	4413      	add	r3, r2
 8011a04:	edd3 7a00 	vldr	s15, [r3]
 8011a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a0c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8011a10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011a14:	00db      	lsls	r3, r3, #3
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	4413      	add	r3, r2
 8011a1a:	ed93 7a00 	vldr	s14, [r3]
 8011a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a22:	00db      	lsls	r3, r3, #3
 8011a24:	68fa      	ldr	r2, [r7, #12]
 8011a26:	4413      	add	r3, r2
 8011a28:	edd3 7a00 	vldr	s15, [r3]
 8011a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a30:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8011a34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011a38:	00db      	lsls	r3, r3, #3
 8011a3a:	68fa      	ldr	r2, [r7, #12]
 8011a3c:	4413      	add	r3, r2
 8011a3e:	ed93 7a00 	vldr	s14, [r3]
 8011a42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011a46:	00db      	lsls	r3, r3, #3
 8011a48:	68fa      	ldr	r2, [r7, #12]
 8011a4a:	4413      	add	r3, r2
 8011a4c:	edd3 7a00 	vldr	s15, [r3]
 8011a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a54:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8011a58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011a5c:	00db      	lsls	r3, r3, #3
 8011a5e:	68fa      	ldr	r2, [r7, #12]
 8011a60:	4413      	add	r3, r2
 8011a62:	ed93 7a00 	vldr	s14, [r3]
 8011a66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011a6a:	00db      	lsls	r3, r3, #3
 8011a6c:	68fa      	ldr	r2, [r7, #12]
 8011a6e:	4413      	add	r3, r2
 8011a70:	edd3 7a00 	vldr	s15, [r3]
 8011a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a78:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8011a7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011a80:	00db      	lsls	r3, r3, #3
 8011a82:	68fa      	ldr	r2, [r7, #12]
 8011a84:	4413      	add	r3, r2
 8011a86:	ed93 7a00 	vldr	s14, [r3]
 8011a8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011a8e:	00db      	lsls	r3, r3, #3
 8011a90:	68fa      	ldr	r2, [r7, #12]
 8011a92:	4413      	add	r3, r2
 8011a94:	edd3 7a00 	vldr	s15, [r3]
 8011a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a9c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8011aa0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011aa4:	00db      	lsls	r3, r3, #3
 8011aa6:	68fa      	ldr	r2, [r7, #12]
 8011aa8:	4413      	add	r3, r2
 8011aaa:	ed93 7a00 	vldr	s14, [r3]
 8011aae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011ab2:	00db      	lsls	r3, r3, #3
 8011ab4:	68fa      	ldr	r2, [r7, #12]
 8011ab6:	4413      	add	r3, r2
 8011ab8:	edd3 7a00 	vldr	s15, [r3]
 8011abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ac0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8011ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011ac8:	00db      	lsls	r3, r3, #3
 8011aca:	68fa      	ldr	r2, [r7, #12]
 8011acc:	4413      	add	r3, r2
 8011ace:	ed93 7a00 	vldr	s14, [r3]
 8011ad2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011ad6:	00db      	lsls	r3, r3, #3
 8011ad8:	68fa      	ldr	r2, [r7, #12]
 8011ada:	4413      	add	r3, r2
 8011adc:	edd3 7a00 	vldr	s15, [r3]
 8011ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ae4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8011ae8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011aec:	00db      	lsls	r3, r3, #3
 8011aee:	68fa      	ldr	r2, [r7, #12]
 8011af0:	4413      	add	r3, r2
 8011af2:	ed93 7a00 	vldr	s14, [r3]
 8011af6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011afa:	00db      	lsls	r3, r3, #3
 8011afc:	68fa      	ldr	r2, [r7, #12]
 8011afe:	4413      	add	r3, r2
 8011b00:	edd3 7a00 	vldr	s15, [r3]
 8011b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b08:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8011b0c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011b10:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b18:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8011b1c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011b20:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b28:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8011b2c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8011b30:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8011b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b38:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8011b3c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8011b40:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8011b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b48:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8011b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011b50:	00db      	lsls	r3, r3, #3
 8011b52:	68fa      	ldr	r2, [r7, #12]
 8011b54:	4413      	add	r3, r2
 8011b56:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011b5a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b62:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8011b66:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011b6a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b72:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8011b76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011b7a:	00db      	lsls	r3, r3, #3
 8011b7c:	3304      	adds	r3, #4
 8011b7e:	68fa      	ldr	r2, [r7, #12]
 8011b80:	4413      	add	r3, r2
 8011b82:	ed93 7a00 	vldr	s14, [r3]
 8011b86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011b8a:	00db      	lsls	r3, r3, #3
 8011b8c:	3304      	adds	r3, #4
 8011b8e:	68fa      	ldr	r2, [r7, #12]
 8011b90:	4413      	add	r3, r2
 8011b92:	edd3 7a00 	vldr	s15, [r3]
 8011b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b9a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8011b9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011ba2:	00db      	lsls	r3, r3, #3
 8011ba4:	3304      	adds	r3, #4
 8011ba6:	68fa      	ldr	r2, [r7, #12]
 8011ba8:	4413      	add	r3, r2
 8011baa:	ed93 7a00 	vldr	s14, [r3]
 8011bae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011bb2:	00db      	lsls	r3, r3, #3
 8011bb4:	3304      	adds	r3, #4
 8011bb6:	68fa      	ldr	r2, [r7, #12]
 8011bb8:	4413      	add	r3, r2
 8011bba:	edd3 7a00 	vldr	s15, [r3]
 8011bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011bc2:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8011bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011bca:	00db      	lsls	r3, r3, #3
 8011bcc:	3304      	adds	r3, #4
 8011bce:	68fa      	ldr	r2, [r7, #12]
 8011bd0:	4413      	add	r3, r2
 8011bd2:	ed93 7a00 	vldr	s14, [r3]
 8011bd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011bda:	00db      	lsls	r3, r3, #3
 8011bdc:	3304      	adds	r3, #4
 8011bde:	68fa      	ldr	r2, [r7, #12]
 8011be0:	4413      	add	r3, r2
 8011be2:	edd3 7a00 	vldr	s15, [r3]
 8011be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011bea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8011bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011bf2:	00db      	lsls	r3, r3, #3
 8011bf4:	3304      	adds	r3, #4
 8011bf6:	68fa      	ldr	r2, [r7, #12]
 8011bf8:	4413      	add	r3, r2
 8011bfa:	ed93 7a00 	vldr	s14, [r3]
 8011bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011c02:	00db      	lsls	r3, r3, #3
 8011c04:	3304      	adds	r3, #4
 8011c06:	68fa      	ldr	r2, [r7, #12]
 8011c08:	4413      	add	r3, r2
 8011c0a:	edd3 7a00 	vldr	s15, [r3]
 8011c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c12:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8011c16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011c1a:	00db      	lsls	r3, r3, #3
 8011c1c:	3304      	adds	r3, #4
 8011c1e:	68fa      	ldr	r2, [r7, #12]
 8011c20:	4413      	add	r3, r2
 8011c22:	ed93 7a00 	vldr	s14, [r3]
 8011c26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011c2a:	00db      	lsls	r3, r3, #3
 8011c2c:	3304      	adds	r3, #4
 8011c2e:	68fa      	ldr	r2, [r7, #12]
 8011c30:	4413      	add	r3, r2
 8011c32:	edd3 7a00 	vldr	s15, [r3]
 8011c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c3a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8011c3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011c42:	00db      	lsls	r3, r3, #3
 8011c44:	3304      	adds	r3, #4
 8011c46:	68fa      	ldr	r2, [r7, #12]
 8011c48:	4413      	add	r3, r2
 8011c4a:	ed93 7a00 	vldr	s14, [r3]
 8011c4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011c52:	00db      	lsls	r3, r3, #3
 8011c54:	3304      	adds	r3, #4
 8011c56:	68fa      	ldr	r2, [r7, #12]
 8011c58:	4413      	add	r3, r2
 8011c5a:	edd3 7a00 	vldr	s15, [r3]
 8011c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c62:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8011c66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011c6a:	00db      	lsls	r3, r3, #3
 8011c6c:	3304      	adds	r3, #4
 8011c6e:	68fa      	ldr	r2, [r7, #12]
 8011c70:	4413      	add	r3, r2
 8011c72:	ed93 7a00 	vldr	s14, [r3]
 8011c76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011c7a:	00db      	lsls	r3, r3, #3
 8011c7c:	3304      	adds	r3, #4
 8011c7e:	68fa      	ldr	r2, [r7, #12]
 8011c80:	4413      	add	r3, r2
 8011c82:	edd3 7a00 	vldr	s15, [r3]
 8011c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c8a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8011c8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011c92:	00db      	lsls	r3, r3, #3
 8011c94:	3304      	adds	r3, #4
 8011c96:	68fa      	ldr	r2, [r7, #12]
 8011c98:	4413      	add	r3, r2
 8011c9a:	ed93 7a00 	vldr	s14, [r3]
 8011c9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011ca2:	00db      	lsls	r3, r3, #3
 8011ca4:	3304      	adds	r3, #4
 8011ca6:	68fa      	ldr	r2, [r7, #12]
 8011ca8:	4413      	add	r3, r2
 8011caa:	edd3 7a00 	vldr	s15, [r3]
 8011cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011cb2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8011cb6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011cba:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011cc2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8011cc6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011cca:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011cd2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8011cd6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011cda:	edd7 7a08 	vldr	s15, [r7, #32]
 8011cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ce2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8011ce6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011cea:	edd7 7a08 	vldr	s15, [r7, #32]
 8011cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011cf2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8011cf6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011cfa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d02:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8011d06:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011d0a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d12:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8011d16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011d1a:	00db      	lsls	r3, r3, #3
 8011d1c:	3304      	adds	r3, #4
 8011d1e:	68fa      	ldr	r2, [r7, #12]
 8011d20:	4413      	add	r3, r2
 8011d22:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011d26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d2e:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8011d32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011d36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8011d42:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011d46:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8011d52:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011d56:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d5e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8011d62:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8011d66:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8011d72:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8011d76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d7e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8011d82:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8011d86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d8e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8011d92:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8011d96:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d9e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8011da2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011da6:	00db      	lsls	r3, r3, #3
 8011da8:	68fa      	ldr	r2, [r7, #12]
 8011daa:	4413      	add	r3, r2
 8011dac:	ed97 7a07 	vldr	s14, [r7, #28]
 8011db0:	edd7 7a06 	vldr	s15, [r7, #24]
 8011db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011db8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8011dbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011dc0:	00db      	lsls	r3, r3, #3
 8011dc2:	3304      	adds	r3, #4
 8011dc4:	68fa      	ldr	r2, [r7, #12]
 8011dc6:	4413      	add	r3, r2
 8011dc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8011dcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8011dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011dd4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8011dd8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8011ddc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011de4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8011de8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8011dec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011df4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8011df8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8011dfc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e04:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8011e08:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8011e0c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e14:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8011e18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011e1c:	00db      	lsls	r3, r3, #3
 8011e1e:	68fa      	ldr	r2, [r7, #12]
 8011e20:	4413      	add	r3, r2
 8011e22:	ed97 7a07 	vldr	s14, [r7, #28]
 8011e26:	edd7 7a06 	vldr	s15, [r7, #24]
 8011e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011e2e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8011e32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011e36:	00db      	lsls	r3, r3, #3
 8011e38:	3304      	adds	r3, #4
 8011e3a:	68fa      	ldr	r2, [r7, #12]
 8011e3c:	4413      	add	r3, r2
 8011e3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8011e42:	edd7 7a04 	vldr	s15, [r7, #16]
 8011e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e4a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8011e4e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8011e52:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8011e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e5a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8011e5e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8011e62:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8011e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e6a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8011e6e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8011e72:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8011e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e7a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8011e7e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8011e82:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8011e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e8a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8011e8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011e92:	00db      	lsls	r3, r3, #3
 8011e94:	68fa      	ldr	r2, [r7, #12]
 8011e96:	4413      	add	r3, r2
 8011e98:	ed97 7a07 	vldr	s14, [r7, #28]
 8011e9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8011ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ea4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8011ea8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011eac:	00db      	lsls	r3, r3, #3
 8011eae:	3304      	adds	r3, #4
 8011eb0:	68fa      	ldr	r2, [r7, #12]
 8011eb2:	4413      	add	r3, r2
 8011eb4:	ed97 7a05 	vldr	s14, [r7, #20]
 8011eb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8011ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ec0:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8011ec4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8011ec8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ed0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ed8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8011edc:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8011ee0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ee8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ef0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8011ef4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8011ef8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f00:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f08:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8011f0c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8011f10:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f18:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f20:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8011f24:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011f28:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f30:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8011f34:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011f38:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f40:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8011f44:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8011f48:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8011f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f50:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8011f54:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8011f58:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8011f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f60:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8011f64:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011f68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f70:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8011f74:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011f78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f80:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8011f84:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8011f88:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011f8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f90:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8011f94:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8011f98:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fa0:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8011fa4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011fa8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fb0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8011fb4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011fb8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fc0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8011fc4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011fc8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fd0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8011fd4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011fd8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fe0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8011fe4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011fe8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ff0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8011ff4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011ff8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012000:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8012004:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8012008:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801200c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012010:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8012014:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8012018:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801201c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012020:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8012024:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8012028:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 801202c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012030:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8012034:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8012038:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801203c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012040:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8012044:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8012048:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801204c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012050:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8012054:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8012058:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 801205c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012060:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8012064:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012068:	00db      	lsls	r3, r3, #3
 801206a:	68fa      	ldr	r2, [r7, #12]
 801206c:	4413      	add	r3, r2
 801206e:	ed97 7a07 	vldr	s14, [r7, #28]
 8012072:	edd7 7a06 	vldr	s15, [r7, #24]
 8012076:	ee77 7a27 	vadd.f32	s15, s14, s15
 801207a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 801207e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012082:	00db      	lsls	r3, r3, #3
 8012084:	3304      	adds	r3, #4
 8012086:	68fa      	ldr	r2, [r7, #12]
 8012088:	4413      	add	r3, r2
 801208a:	ed97 7a05 	vldr	s14, [r7, #20]
 801208e:	edd7 7a04 	vldr	s15, [r7, #16]
 8012092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012096:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 801209a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801209e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80120a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120a6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80120aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80120ae:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80120b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120b6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80120ba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80120be:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80120c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120c6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80120ca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80120ce:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80120d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120d6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80120da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80120de:	00db      	lsls	r3, r3, #3
 80120e0:	68fa      	ldr	r2, [r7, #12]
 80120e2:	4413      	add	r3, r2
 80120e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80120e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80120ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80120f0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80120f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80120f8:	00db      	lsls	r3, r3, #3
 80120fa:	3304      	adds	r3, #4
 80120fc:	68fa      	ldr	r2, [r7, #12]
 80120fe:	4413      	add	r3, r2
 8012100:	ed97 7a05 	vldr	s14, [r7, #20]
 8012104:	edd7 7a04 	vldr	s15, [r7, #16]
 8012108:	ee77 7a67 	vsub.f32	s15, s14, s15
 801210c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8012110:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8012114:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8012118:	ee67 7a27 	vmul.f32	s15, s14, s15
 801211c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8012120:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8012124:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8012128:	ee67 7a27 	vmul.f32	s15, s14, s15
 801212c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8012130:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8012134:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8012138:	ee67 7a27 	vmul.f32	s15, s14, s15
 801213c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8012140:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8012144:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8012148:	ee67 7a27 	vmul.f32	s15, s14, s15
 801214c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8012150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012154:	00db      	lsls	r3, r3, #3
 8012156:	68fa      	ldr	r2, [r7, #12]
 8012158:	4413      	add	r3, r2
 801215a:	ed97 7a07 	vldr	s14, [r7, #28]
 801215e:	edd7 7a06 	vldr	s15, [r7, #24]
 8012162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012166:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 801216a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801216e:	00db      	lsls	r3, r3, #3
 8012170:	3304      	adds	r3, #4
 8012172:	68fa      	ldr	r2, [r7, #12]
 8012174:	4413      	add	r3, r2
 8012176:	ed97 7a05 	vldr	s14, [r7, #20]
 801217a:	edd7 7a04 	vldr	s15, [r7, #16]
 801217e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012182:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8012186:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801218a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012192:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8012196:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801219a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801219e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121a2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80121a6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80121aa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80121ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121b2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80121b6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80121ba:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80121be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121c2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80121c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80121ca:	00db      	lsls	r3, r3, #3
 80121cc:	68fa      	ldr	r2, [r7, #12]
 80121ce:	4413      	add	r3, r2
 80121d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80121d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80121d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121dc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80121e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80121e4:	00db      	lsls	r3, r3, #3
 80121e6:	3304      	adds	r3, #4
 80121e8:	68fa      	ldr	r2, [r7, #12]
 80121ea:	4413      	add	r3, r2
 80121ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80121f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80121f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121f8:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80121fc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8012200:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012204:	4413      	add	r3, r2
 8012206:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 801220a:	897b      	ldrh	r3, [r7, #10]
 801220c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8012210:	429a      	cmp	r2, r3
 8012212:	f4ff abba 	bcc.w	801198a <arm_radix8_butterfly_f32+0x746>

         j++;
 8012216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801221a:	3301      	adds	r3, #1
 801221c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8012220:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8012224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012228:	429a      	cmp	r2, r3
 801222a:	f4ff ab2c 	bcc.w	8011886 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 801222e:	893b      	ldrh	r3, [r7, #8]
 8012230:	00db      	lsls	r3, r3, #3
 8012232:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8012234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012238:	2b07      	cmp	r3, #7
 801223a:	f63f a813 	bhi.w	8011264 <arm_radix8_butterfly_f32+0x20>
}
 801223e:	e000      	b.n	8012242 <arm_radix8_butterfly_f32+0xffe>
         break;
 8012240:	bf00      	nop
}
 8012242:	bf00      	nop
 8012244:	37f4      	adds	r7, #244	; 0xf4
 8012246:	46bd      	mov	sp, r7
 8012248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop

08012250 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8012250:	b480      	push	{r7}
 8012252:	b095      	sub	sp, #84	; 0x54
 8012254:	af00      	add	r7, sp, #0
 8012256:	60f8      	str	r0, [r7, #12]
 8012258:	60b9      	str	r1, [r7, #8]
 801225a:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	695b      	ldr	r3, [r3, #20]
 8012260:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	881b      	ldrh	r3, [r3, #0]
 801226e:	3b01      	subs	r3, #1
 8012270:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8012272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8012278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801227a:	685b      	ldr	r3, [r3, #4]
 801227c:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 801227e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8012284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 801228a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801228c:	1d1a      	adds	r2, r3, #4
 801228e:	64ba      	str	r2, [r7, #72]	; 0x48
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8012294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012296:	1d1a      	adds	r2, r3, #4
 8012298:	64ba      	str	r2, [r7, #72]	; 0x48
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 801229e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80122a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80122a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80122ae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80122b2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80122b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122ba:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80122be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80122c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80122c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	1d1a      	adds	r2, r3, #4
 80122ce:	607a      	str	r2, [r7, #4]
 80122d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80122d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122d8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80122dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80122e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80122e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	1d1a      	adds	r2, r3, #4
 80122ec:	607a      	str	r2, [r7, #4]
 80122ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80122f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122f6:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80122fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122fc:	00db      	lsls	r3, r3, #3
 80122fe:	68ba      	ldr	r2, [r7, #8]
 8012300:	4413      	add	r3, r2
 8012302:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8012304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012306:	3308      	adds	r3, #8
 8012308:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 801230a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801230c:	685b      	ldr	r3, [r3, #4]
 801230e:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8012310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8012316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 801231c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8012322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012324:	1d1a      	adds	r2, r3, #4
 8012326:	64ba      	str	r2, [r7, #72]	; 0x48
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 801232c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801232e:	1d1a      	adds	r2, r3, #4
 8012330:	64ba      	str	r2, [r7, #72]	; 0x48
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8012336:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801233a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801233e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012342:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8012346:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801234a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801234e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012352:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8012356:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801235a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801235e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012362:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8012366:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801236a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801236e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012372:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8012376:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801237a:	edd7 7a08 	vldr	s15, [r7, #32]
 801237e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012382:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8012386:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801238a:	edd7 7a08 	vldr	s15, [r7, #32]
 801238e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012392:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8012396:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801239a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801239e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80123a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80123a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80123aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80123ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	1d1a      	adds	r2, r3, #4
 80123b6:	607a      	str	r2, [r7, #4]
 80123b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80123bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123c0:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80123c4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80123c8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80123cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80123d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80123d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80123d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80123dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	1d1a      	adds	r2, r3, #4
 80123e4:	607a      	str	r2, [r7, #4]
 80123e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80123ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123ee:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 80123f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123f4:	3308      	adds	r3, #8
 80123f6:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80123f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123fa:	3b08      	subs	r3, #8
 80123fc:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80123fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012400:	3b01      	subs	r3, #1
 8012402:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8012404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012406:	2b00      	cmp	r3, #0
 8012408:	f73f af7f 	bgt.w	801230a <stage_rfft_f32+0xba>
}
 801240c:	bf00      	nop
 801240e:	bf00      	nop
 8012410:	3754      	adds	r7, #84	; 0x54
 8012412:	46bd      	mov	sp, r7
 8012414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012418:	4770      	bx	lr

0801241a <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 801241a:	b480      	push	{r7}
 801241c:	b095      	sub	sp, #84	; 0x54
 801241e:	af00      	add	r7, sp, #0
 8012420:	60f8      	str	r0, [r7, #12]
 8012422:	60b9      	str	r1, [r7, #8]
 8012424:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	695b      	ldr	r3, [r3, #20]
 801242a:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	881b      	ldrh	r3, [r3, #0]
 8012438:	3b01      	subs	r3, #1
 801243a:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 801243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8012442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8012448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801244a:	3308      	adds	r3, #8
 801244c:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 801244e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012452:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8012456:	ee77 7a27 	vadd.f32	s15, s14, s15
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	1d1a      	adds	r2, r3, #4
 801245e:	607a      	str	r2, [r7, #4]
 8012460:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012468:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 801246c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012470:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8012474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	1d1a      	adds	r2, r3, #4
 801247c:	607a      	str	r2, [r7, #4]
 801247e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012486:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 801248a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801248c:	00db      	lsls	r3, r3, #3
 801248e:	68ba      	ldr	r2, [r7, #8]
 8012490:	4413      	add	r3, r2
 8012492:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8012494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012496:	3308      	adds	r3, #8
 8012498:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 801249a:	e07c      	b.n	8012596 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 801249c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 80124a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 80124a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 80124ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 80124b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124b6:	1d1a      	adds	r2, r3, #4
 80124b8:	64ba      	str	r2, [r7, #72]	; 0x48
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80124be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124c0:	1d1a      	adds	r2, r3, #4
 80124c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 80124c8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80124cc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80124d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80124d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 80124d8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80124dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80124e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80124e4:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80124e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80124ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80124f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80124f4:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80124f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80124fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8012500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012504:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8012508:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801250c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012514:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8012518:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801251c:	edd7 7a08 	vldr	s15, [r7, #32]
 8012520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012524:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8012528:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801252c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012534:	edd7 7a07 	vldr	s15, [r7, #28]
 8012538:	ee37 7a67 	vsub.f32	s14, s14, s15
 801253c:	edd7 7a06 	vldr	s15, [r7, #24]
 8012540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	1d1a      	adds	r2, r3, #4
 8012548:	607a      	str	r2, [r7, #4]
 801254a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801254e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012552:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8012556:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801255a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801255e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012562:	edd7 7a05 	vldr	s15, [r7, #20]
 8012566:	ee37 7a27 	vadd.f32	s14, s14, s15
 801256a:	edd7 7a04 	vldr	s15, [r7, #16]
 801256e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	1d1a      	adds	r2, r3, #4
 8012576:	607a      	str	r2, [r7, #4]
 8012578:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801257c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012580:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8012584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012586:	3308      	adds	r3, #8
 8012588:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 801258a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801258c:	3b08      	subs	r3, #8
 801258e:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8012590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012592:	3b01      	subs	r3, #1
 8012594:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 8012596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012598:	2b00      	cmp	r3, #0
 801259a:	f73f af7f 	bgt.w	801249c <merge_rfft_f32+0x82>
   }

}
 801259e:	bf00      	nop
 80125a0:	bf00      	nop
 80125a2:	3754      	adds	r7, #84	; 0x54
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr

080125ac <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b086      	sub	sp, #24
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	60f8      	str	r0, [r7, #12]
 80125b4:	60b9      	str	r1, [r7, #8]
 80125b6:	607a      	str	r2, [r7, #4]
 80125b8:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80125be:	78fb      	ldrb	r3, [r7, #3]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d00b      	beq.n	80125dc <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	68b9      	ldr	r1, [r7, #8]
 80125c8:	68f8      	ldr	r0, [r7, #12]
 80125ca:	f7ff ff26 	bl	801241a <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80125ce:	78fa      	ldrb	r2, [r7, #3]
 80125d0:	2301      	movs	r3, #1
 80125d2:	6879      	ldr	r1, [r7, #4]
 80125d4:	6978      	ldr	r0, [r7, #20]
 80125d6:	f7fe fd7b 	bl	80110d0 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 80125da:	e00a      	b.n	80125f2 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80125dc:	78fa      	ldrb	r2, [r7, #3]
 80125de:	2301      	movs	r3, #1
 80125e0:	68b9      	ldr	r1, [r7, #8]
 80125e2:	6978      	ldr	r0, [r7, #20]
 80125e4:	f7fe fd74 	bl	80110d0 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80125e8:	687a      	ldr	r2, [r7, #4]
 80125ea:	68b9      	ldr	r1, [r7, #8]
 80125ec:	68f8      	ldr	r0, [r7, #12]
 80125ee:	f7ff fe2f 	bl	8012250 <stage_rfft_f32>
}
 80125f2:	bf00      	nop
 80125f4:	3718      	adds	r7, #24
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}

080125fa <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 80125fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125fc:	b093      	sub	sp, #76	; 0x4c
 80125fe:	af0a      	add	r7, sp, #40	; 0x28
 8012600:	6178      	str	r0, [r7, #20]
 8012602:	6139      	str	r1, [r7, #16]
 8012604:	60fa      	str	r2, [r7, #12]
 8012606:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 801260e:	e033      	b.n	8012678 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	607b      	str	r3, [r7, #4]
 8012616:	693a      	ldr	r2, [r7, #16]
 8012618:	6852      	ldr	r2, [r2, #4]
 801261a:	6939      	ldr	r1, [r7, #16]
 801261c:	6889      	ldr	r1, [r1, #8]
 801261e:	68f8      	ldr	r0, [r7, #12]
 8012620:	6800      	ldr	r0, [r0, #0]
 8012622:	68fc      	ldr	r4, [r7, #12]
 8012624:	6864      	ldr	r4, [r4, #4]
 8012626:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8012628:	682d      	ldr	r5, [r5, #0]
 801262a:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 801262c:	68f6      	ldr	r6, [r6, #12]
 801262e:	693b      	ldr	r3, [r7, #16]
 8012630:	68db      	ldr	r3, [r3, #12]
 8012632:	603b      	str	r3, [r7, #0]
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	691b      	ldr	r3, [r3, #16]
 8012638:	9308      	str	r3, [sp, #32]
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	9307      	str	r3, [sp, #28]
 801263e:	9606      	str	r6, [sp, #24]
 8012640:	9505      	str	r5, [sp, #20]
 8012642:	9404      	str	r4, [sp, #16]
 8012644:	9003      	str	r0, [sp, #12]
 8012646:	9102      	str	r1, [sp, #8]
 8012648:	9201      	str	r2, [sp, #4]
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	9300      	str	r3, [sp, #0]
 801264e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012652:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012654:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012656:	f000 f822 	bl	801269e <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 801265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	461a      	mov	r2, r3
 8012660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012662:	4413      	add	r3, r2
 8012664:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 8012666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012668:	68db      	ldr	r3, [r3, #12]
 801266a:	461a      	mov	r2, r3
 801266c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801266e:	4413      	add	r3, r2
 8012670:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 8012672:	69fb      	ldr	r3, [r7, #28]
 8012674:	3b01      	subs	r3, #1
 8012676:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 8012678:	69fb      	ldr	r3, [r7, #28]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d1c8      	bne.n	8012610 <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 801267e:	2300      	movs	r3, #0
}
 8012680:	4618      	mov	r0, r3
 8012682:	3724      	adds	r7, #36	; 0x24
 8012684:	46bd      	mov	sp, r7
 8012686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012688 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 8012688:	b480      	push	{r7}
 801268a:	b083      	sub	sp, #12
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 8012690:	2300      	movs	r3, #0
}
 8012692:	4618      	mov	r0, r3
 8012694:	370c      	adds	r7, #12
 8012696:	46bd      	mov	sp, r7
 8012698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269c:	4770      	bx	lr

0801269e <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 801269e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80126a2:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 80126ac:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 80126b0:	6020      	str	r0, [r4, #0]
 80126b2:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 80126b6:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 80126ba:	6001      	str	r1, [r0, #0]
 80126bc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80126c0:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 80126c4:	600a      	str	r2, [r1, #0]
 80126c6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80126ca:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 80126ce:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 80126d0:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80126d4:	3b04      	subs	r3, #4
 80126d6:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 80126da:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80126de:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 80126e2:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80126e6:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 80126ea:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 80126ee:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 80126f2:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 80126f6:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 80126fa:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 80126fe:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8012702:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 8012706:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 801270a:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 801270e:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 8012712:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 8012716:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 801271a:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 801271e:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 8012722:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8012726:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 801272a:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 801272e:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8012732:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8012736:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801273a:	2300      	movs	r3, #0
 801273c:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8012740:	f001 bd13 	b.w	801416a <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8012744:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012748:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 801274c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012750:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 8012758:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801275c:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 8012760:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012764:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 801276c:	2300      	movs	r3, #0
 801276e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 8012772:	2300      	movs	r3, #0
 8012774:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 8012778:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801277c:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d01b      	beq.n	80127be <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 8012786:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801278a:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801278e:	6819      	ldr	r1, [r3, #0]
 8012790:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012794:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 8012798:	1d0b      	adds	r3, r1, #4
 801279a:	6013      	str	r3, [r2, #0]
 801279c:	680b      	ldr	r3, [r1, #0]
 801279e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 80127a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127a6:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80127aa:	6819      	ldr	r1, [r3, #0]
 80127ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127b0:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 80127b4:	1d0b      	adds	r3, r1, #4
 80127b6:	6013      	str	r3, [r2, #0]
 80127b8:	680b      	ldr	r3, [r1, #0]
 80127ba:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 80127be:	2300      	movs	r3, #0
 80127c0:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 80127c4:	f001 b9db 	b.w	8013b7e <arm_nn_vec_mat_mult_t_s8+0x14e0>
 80127c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127cc:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 80127d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80127d4:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 80127d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127da:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	461a      	mov	r2, r3
 80127e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127ea:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80127ee:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80127f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127f4:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	1d1a      	adds	r2, r3, #4
 80127fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012802:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	601a      	str	r2, [r3, #0]

    return (val);
 801280a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801280e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012812:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8012814:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8012818:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801281c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012820:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8012824:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012828:	6013      	str	r3, [r2, #0]
 801282a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801282e:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8012832:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012834:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012838:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801283c:	681a      	ldr	r2, [r3, #0]
 801283e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012842:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	fa22 f283 	sxtab16	r2, r2, r3
 801284c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012850:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8012854:	601a      	str	r2, [r3, #0]
  return(result);
 8012856:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801285a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8012864:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012868:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 801286c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012870:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012872:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012876:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	461a      	mov	r2, r3
 8012882:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012886:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801288a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801288c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012890:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	1d1a      	adds	r2, r3, #4
 801289a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801289e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	601a      	str	r2, [r3, #0]
    return (val);
 80128a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128aa:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80128ae:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80128b0:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80128b4:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 80128b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128bc:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80128c0:	601a      	str	r2, [r3, #0]
 80128c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128c6:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 80128ca:	2308      	movs	r3, #8
 80128cc:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80128ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128d2:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 80128d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128da:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	f003 031f 	and.w	r3, r3, #31
 80128e4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80128e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128ea:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d105      	bne.n	8012900 <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 80128f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128f8:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80128fc:	6819      	ldr	r1, [r3, #0]
 80128fe:	e00b      	b.n	8012918 <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012900:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012904:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8012908:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801290c:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8012910:	6812      	ldr	r2, [r2, #0]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	fa62 f103 	ror.w	r1, r2, r3
 8012918:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801291c:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 8012920:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012924:	6013      	str	r3, [r2, #0]
 8012926:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801292a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801292e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012930:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012934:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8012938:	681a      	ldr	r2, [r3, #0]
 801293a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801293e:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	fa22 f283 	sxtab16	r2, r2, r3
 8012948:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801294c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8012950:	601a      	str	r2, [r3, #0]
  return(result);
 8012952:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012956:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8012960:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012964:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012968:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 801296c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012970:	6013      	str	r3, [r2, #0]
 8012972:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012976:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801297a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801297c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012980:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8012984:	681a      	ldr	r2, [r3, #0]
 8012986:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801298a:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	fa22 f283 	sxtab16	r2, r2, r3
 8012994:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012998:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801299c:	601a      	str	r2, [r3, #0]
  return(result);
 801299e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129a2:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 80129ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129b0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80129b4:	681a      	ldr	r2, [r3, #0]
 80129b6:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 80129ba:	441a      	add	r2, r3
 80129bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129c0:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80129c4:	601a      	str	r2, [r3, #0]
 80129c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129ca:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 80129d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129d8:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 80129dc:	601a      	str	r2, [r3, #0]

    return (val);
 80129de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129e2:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 80129ec:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80129f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129f4:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80129f8:	601a      	str	r2, [r3, #0]
 80129fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129fe:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8012a02:	2308      	movs	r3, #8
 8012a04:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012a06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a0a:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8012a0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a12:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	f003 031f 	and.w	r3, r3, #31
 8012a1c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012a1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a22:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d105      	bne.n	8012a38 <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 8012a2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a30:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8012a34:	6819      	ldr	r1, [r3, #0]
 8012a36:	e00b      	b.n	8012a50 <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012a38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a3c:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8012a40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a44:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8012a48:	6812      	ldr	r2, [r2, #0]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	fa62 f103 	ror.w	r1, r2, r3
 8012a50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a54:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8012a58:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012a5c:	6013      	str	r3, [r2, #0]
 8012a5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a62:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8012a66:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012a68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a6c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8012a70:	681a      	ldr	r2, [r3, #0]
 8012a72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a76:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	fa22 f283 	sxtab16	r2, r2, r3
 8012a80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a84:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8012a88:	601a      	str	r2, [r3, #0]
  return(result);
 8012a8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a8e:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8012a98:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012a9c:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8012aa0:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012aa4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012aa8:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8012aac:	601a      	str	r2, [r3, #0]
 8012aae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ab2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8012ab6:	6019      	str	r1, [r3, #0]
 8012ab8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012abc:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8012ac0:	6018      	str	r0, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012ac2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ac6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8012aca:	6819      	ldr	r1, [r3, #0]
 8012acc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ad0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8012ad4:	681a      	ldr	r2, [r3, #0]
 8012ad6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ada:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	fb21 3202 	smlad	r2, r1, r2, r3
 8012ae4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ae8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8012aec:	601a      	str	r2, [r3, #0]
  return(result);
 8012aee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012af2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8012afc:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8012b00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b04:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8012b08:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012b0c:	6013      	str	r3, [r2, #0]
 8012b0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b12:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8012b16:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012b18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b1c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8012b20:	681a      	ldr	r2, [r3, #0]
 8012b22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b26:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	fa22 f283 	sxtab16	r2, r2, r3
 8012b30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b34:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8012b38:	601a      	str	r2, [r3, #0]
  return(result);
 8012b3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b3e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8012b48:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012b4c:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8012b50:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012b54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b58:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8012b5c:	601a      	str	r2, [r3, #0]
 8012b5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b62:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8012b66:	6019      	str	r1, [r3, #0]
 8012b68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b6c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8012b70:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012b72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b76:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8012b7a:	6819      	ldr	r1, [r3, #0]
 8012b7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b80:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8012b84:	681a      	ldr	r2, [r3, #0]
 8012b86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b8a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	fb21 3202 	smlad	r2, r1, r2, r3
 8012b94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b98:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8012b9c:	601a      	str	r2, [r3, #0]
  return(result);
 8012b9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ba2:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8012bac:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8012bb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bb4:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8012bb8:	601a      	str	r2, [r3, #0]
 8012bba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bbe:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8012bc2:	2308      	movs	r3, #8
 8012bc4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012bc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bca:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8012bce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bd2:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	f003 031f 	and.w	r3, r3, #31
 8012bdc:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012bde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012be2:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d105      	bne.n	8012bf8 <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 8012bec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bf0:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8012bf4:	6819      	ldr	r1, [r3, #0]
 8012bf6:	e00b      	b.n	8012c10 <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012bf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bfc:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8012c00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c04:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8012c08:	6812      	ldr	r2, [r2, #0]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	fa62 f103 	ror.w	r1, r2, r3
 8012c10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c14:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8012c18:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012c1c:	6013      	str	r3, [r2, #0]
 8012c1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c22:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8012c26:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c2c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8012c30:	681a      	ldr	r2, [r3, #0]
 8012c32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c36:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	fa22 f283 	sxtab16	r2, r2, r3
 8012c40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c44:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8012c48:	601a      	str	r2, [r3, #0]
  return(result);
 8012c4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c4e:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8012c58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c5c:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8012c60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012c64:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012c66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c6a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	461a      	mov	r2, r3
 8012c76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c7a:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8012c7e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012c80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c84:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	1d1a      	adds	r2, r3, #4
 8012c8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c92:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	601a      	str	r2, [r3, #0]
    return (val);
 8012c9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c9e:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8012ca2:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8012ca4:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8012ca8:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012cac:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8012cb0:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8012cb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cb8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012cbc:	601a      	str	r2, [r3, #0]
 8012cbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cc2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8012cc6:	6019      	str	r1, [r3, #0]
 8012cc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ccc:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8012cd0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012cd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cd6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012cda:	6819      	ldr	r1, [r3, #0]
 8012cdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ce0:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8012ce4:	681a      	ldr	r2, [r3, #0]
 8012ce6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cea:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	fb21 3202 	smlad	r2, r1, r2, r3
 8012cf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cf8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012cfc:	601a      	str	r2, [r3, #0]
  return(result);
 8012cfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d02:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8012d0c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012d10:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8012d14:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8012d18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d1c:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8012d20:	601a      	str	r2, [r3, #0]
 8012d22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d26:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8012d2a:	6019      	str	r1, [r3, #0]
 8012d2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d30:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8012d34:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012d36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d3a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8012d3e:	6819      	ldr	r1, [r3, #0]
 8012d40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d44:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8012d48:	681a      	ldr	r2, [r3, #0]
 8012d4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d4e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	fb21 3202 	smlad	r2, r1, r2, r3
 8012d58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d5c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8012d60:	601a      	str	r2, [r3, #0]
  return(result);
 8012d62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d66:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8012d70:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8012d74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d78:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8012d7c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012d80:	6013      	str	r3, [r2, #0]
 8012d82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d86:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8012d8a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012d8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d90:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8012d94:	681a      	ldr	r2, [r3, #0]
 8012d96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d9a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	fa22 f283 	sxtab16	r2, r2, r3
 8012da4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012da8:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012dac:	601a      	str	r2, [r3, #0]
  return(result);
 8012dae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012db2:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8012dbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dc0:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8012dc4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012dc8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012dca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dce:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	461a      	mov	r2, r3
 8012dda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dde:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8012de2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012de4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012de8:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	1d1a      	adds	r2, r3, #4
 8012df2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012df6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	601a      	str	r2, [r3, #0]
    return (val);
 8012dfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e02:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8012e06:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8012e08:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8012e0c:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8012e10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e14:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8012e18:	601a      	str	r2, [r3, #0]
 8012e1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e1e:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8012e22:	2308      	movs	r3, #8
 8012e24:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012e26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e2a:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8012e2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e32:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	f003 031f 	and.w	r3, r3, #31
 8012e3c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012e3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e42:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d105      	bne.n	8012e58 <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 8012e4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e50:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8012e54:	6819      	ldr	r1, [r3, #0]
 8012e56:	e00b      	b.n	8012e70 <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012e58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e5c:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8012e60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e64:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8012e68:	6812      	ldr	r2, [r2, #0]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	fa62 f103 	ror.w	r1, r2, r3
 8012e70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e74:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8012e78:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012e7c:	6013      	str	r3, [r2, #0]
 8012e7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e82:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8012e86:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012e88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e8c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012e90:	681a      	ldr	r2, [r3, #0]
 8012e92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e96:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	fa22 f283 	sxtab16	r2, r2, r3
 8012ea0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ea4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012ea8:	601a      	str	r2, [r3, #0]
  return(result);
 8012eaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eae:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8012eb8:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012ebc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ec0:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8012ec4:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012ec8:	6013      	str	r3, [r2, #0]
 8012eca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ece:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8012ed2:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012ed4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ed8:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8012edc:	681a      	ldr	r2, [r3, #0]
 8012ede:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ee2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	fa22 f283 	sxtab16	r2, r2, r3
 8012eec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ef0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8012ef4:	601a      	str	r2, [r3, #0]
  return(result);
 8012ef6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012efa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8012f04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f08:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8012f12:	441a      	add	r2, r3
 8012f14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8012f1c:	601a      	str	r2, [r3, #0]
 8012f1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8012f2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f30:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8012f34:	601a      	str	r2, [r3, #0]
    return (val);
 8012f36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f3a:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8012f44:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012f48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f4c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012f50:	601a      	str	r2, [r3, #0]
 8012f52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f56:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8012f5a:	2308      	movs	r3, #8
 8012f5c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012f5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f62:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8012f66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f6a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	f003 031f 	and.w	r3, r3, #31
 8012f74:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012f76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f7a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d105      	bne.n	8012f90 <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 8012f84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f88:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012f8c:	6819      	ldr	r1, [r3, #0]
 8012f8e:	e00b      	b.n	8012fa8 <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012f90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f94:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8012f98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f9c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8012fa0:	6812      	ldr	r2, [r2, #0]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	fa62 f103 	ror.w	r1, r2, r3
 8012fa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fac:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 8012fb0:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012fb4:	6013      	str	r3, [r2, #0]
 8012fb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fba:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8012fbe:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012fc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fc4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8012fc8:	681a      	ldr	r2, [r3, #0]
 8012fca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fce:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	fa22 f283 	sxtab16	r2, r2, r3
 8012fd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fdc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8012fe0:	601a      	str	r2, [r3, #0]
  return(result);
 8012fe2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fe6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8012ff0:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012ff4:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8012ff8:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012ffc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013000:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8013004:	601a      	str	r2, [r3, #0]
 8013006:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801300a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801300e:	6019      	str	r1, [r3, #0]
 8013010:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013014:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8013018:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801301a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801301e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8013022:	6819      	ldr	r1, [r3, #0]
 8013024:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013028:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801302c:	681a      	ldr	r2, [r3, #0]
 801302e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013032:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	fb21 3202 	smlad	r2, r1, r2, r3
 801303c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013040:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8013044:	601a      	str	r2, [r3, #0]
  return(result);
 8013046:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801304a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8013054:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8013058:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801305c:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8013060:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013064:	6013      	str	r3, [r2, #0]
 8013066:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801306a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801306e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013070:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013074:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8013078:	681a      	ldr	r2, [r3, #0]
 801307a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801307e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	fa22 f283 	sxtab16	r2, r2, r3
 8013088:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801308c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8013090:	601a      	str	r2, [r3, #0]
  return(result);
 8013092:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013096:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 80130a0:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80130a4:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80130a8:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 80130ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130b0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80130b4:	601a      	str	r2, [r3, #0]
 80130b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130ba:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80130be:	6019      	str	r1, [r3, #0]
 80130c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130c4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80130c8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80130ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130ce:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80130d2:	6819      	ldr	r1, [r3, #0]
 80130d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130d8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80130dc:	681a      	ldr	r2, [r3, #0]
 80130de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130e2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	fb21 3202 	smlad	r2, r1, r2, r3
 80130ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130f0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80130f4:	601a      	str	r2, [r3, #0]
  return(result);
 80130f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130fa:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8013104:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8013108:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801310c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8013110:	601a      	str	r2, [r3, #0]
 8013112:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013116:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 801311a:	2308      	movs	r3, #8
 801311c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801311e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013122:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8013126:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801312a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	f003 031f 	and.w	r3, r3, #31
 8013134:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8013136:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801313a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d105      	bne.n	8013150 <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 8013144:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013148:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801314c:	6819      	ldr	r1, [r3, #0]
 801314e:	e00b      	b.n	8013168 <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013150:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013154:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8013158:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801315c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8013160:	6812      	ldr	r2, [r2, #0]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	fa62 f103 	ror.w	r1, r2, r3
 8013168:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801316c:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 8013170:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013174:	6013      	str	r3, [r2, #0]
 8013176:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801317a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801317e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013180:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013184:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801318e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	fa22 f283 	sxtab16	r2, r2, r3
 8013198:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801319c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80131a0:	601a      	str	r2, [r3, #0]
  return(result);
 80131a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131a6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 80131b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131b4:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 80131b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80131bc:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80131be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131c2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	461a      	mov	r2, r3
 80131ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131d2:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 80131d6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80131d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131dc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	1d1a      	adds	r2, r3, #4
 80131e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131ea:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	601a      	str	r2, [r3, #0]
    return (val);
 80131f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131f6:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 80131fa:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80131fc:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8013200:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8013204:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8013208:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801320c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013210:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013214:	601a      	str	r2, [r3, #0]
 8013216:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801321a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801321e:	6019      	str	r1, [r3, #0]
 8013220:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013224:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013228:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801322a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801322e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013232:	6819      	ldr	r1, [r3, #0]
 8013234:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013238:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801323c:	681a      	ldr	r2, [r3, #0]
 801323e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013242:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	fb21 3202 	smlad	r2, r1, r2, r3
 801324c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013250:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8013254:	601a      	str	r2, [r3, #0]
  return(result);
 8013256:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801325a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8013264:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8013268:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801326c:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8013270:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013274:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8013278:	601a      	str	r2, [r3, #0]
 801327a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801327e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8013282:	6019      	str	r1, [r3, #0]
 8013284:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013288:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801328c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801328e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013292:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8013296:	6819      	ldr	r1, [r3, #0]
 8013298:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801329c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80132a0:	681a      	ldr	r2, [r3, #0]
 80132a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132a6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	fb21 3202 	smlad	r2, r1, r2, r3
 80132b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132b4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80132b8:	601a      	str	r2, [r3, #0]
  return(result);
 80132ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 80132c8:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80132cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132d0:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 80132d4:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80132d8:	6013      	str	r3, [r2, #0]
 80132da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132de:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80132e2:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80132e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132e8:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80132ec:	681a      	ldr	r2, [r3, #0]
 80132ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132f2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	fa22 f283 	sxtab16	r2, r2, r3
 80132fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013300:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8013304:	601a      	str	r2, [r3, #0]
  return(result);
 8013306:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801330a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8013314:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013318:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801331c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013320:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8013322:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013326:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	461a      	mov	r2, r3
 8013332:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013336:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801333a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801333c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013340:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	1d1a      	adds	r2, r3, #4
 801334a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801334e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	601a      	str	r2, [r3, #0]
    return (val);
 8013356:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801335a:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801335e:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013360:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8013364:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8013368:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801336c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8013370:	601a      	str	r2, [r3, #0]
 8013372:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013376:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 801337a:	2308      	movs	r3, #8
 801337c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801337e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013382:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 8013386:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801338a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	f003 031f 	and.w	r3, r3, #31
 8013394:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8013396:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801339a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d105      	bne.n	80133b0 <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 80133a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133a8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80133ac:	6819      	ldr	r1, [r3, #0]
 80133ae:	e00b      	b.n	80133c8 <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 80133b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133b4:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 80133b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133bc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80133c0:	6812      	ldr	r2, [r2, #0]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	fa62 f103 	ror.w	r1, r2, r3
 80133c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133cc:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 80133d0:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80133d4:	6013      	str	r3, [r2, #0]
 80133d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133da:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80133de:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80133e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80133e8:	681a      	ldr	r2, [r3, #0]
 80133ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133ee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	fa22 f283 	sxtab16	r2, r2, r3
 80133f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133fc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8013400:	601a      	str	r2, [r3, #0]
  return(result);
 8013402:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013406:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8013410:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8013414:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013418:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 801341c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8013420:	6013      	str	r3, [r2, #0]
 8013422:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013426:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801342a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801342c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013430:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8013434:	681a      	ldr	r2, [r3, #0]
 8013436:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801343a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	fa22 f283 	sxtab16	r2, r2, r3
 8013444:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013448:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801344c:	601a      	str	r2, [r3, #0]
  return(result);
 801344e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013452:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801345c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013460:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8013464:	681a      	ldr	r2, [r3, #0]
 8013466:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 801346a:	441a      	add	r2, r3
 801346c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013470:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8013474:	601a      	str	r2, [r3, #0]
 8013476:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801347a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8013484:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013488:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801348c:	601a      	str	r2, [r3, #0]
    return (val);
 801348e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013492:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801349c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80134a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80134a8:	601a      	str	r2, [r3, #0]
 80134aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134ae:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80134b2:	2308      	movs	r3, #8
 80134b4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80134b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134ba:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80134be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134c2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	f003 031f 	and.w	r3, r3, #31
 80134cc:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80134ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134d2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d105      	bne.n	80134e8 <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 80134dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134e0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80134e4:	6819      	ldr	r1, [r3, #0]
 80134e6:	e00b      	b.n	8013500 <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 80134e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134ec:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 80134f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80134f8:	6812      	ldr	r2, [r2, #0]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	fa62 f103 	ror.w	r1, r2, r3
 8013500:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013504:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8013508:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801350c:	6013      	str	r3, [r2, #0]
 801350e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013512:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8013516:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013518:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801351c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8013520:	681a      	ldr	r2, [r3, #0]
 8013522:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013526:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	fa22 f283 	sxtab16	r2, r2, r3
 8013530:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013534:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8013538:	601a      	str	r2, [r3, #0]
  return(result);
 801353a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801353e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8013548:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801354c:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8013550:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8013554:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013558:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801355c:	601a      	str	r2, [r3, #0]
 801355e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013562:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8013566:	6019      	str	r1, [r3, #0]
 8013568:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801356c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8013570:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013572:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013576:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801357a:	6819      	ldr	r1, [r3, #0]
 801357c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013580:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801358a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	fb21 3202 	smlad	r2, r1, r2, r3
 8013594:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013598:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801359c:	601a      	str	r2, [r3, #0]
  return(result);
 801359e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 80135ac:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80135b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135b4:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80135b8:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80135bc:	6013      	str	r3, [r2, #0]
 80135be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135c2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80135c6:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80135c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135cc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80135d0:	681a      	ldr	r2, [r3, #0]
 80135d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135d6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	fa22 f283 	sxtab16	r2, r2, r3
 80135e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135e4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80135e8:	601a      	str	r2, [r3, #0]
  return(result);
 80135ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135ee:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 80135f8:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80135fc:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8013600:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8013604:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013608:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801360c:	601a      	str	r2, [r3, #0]
 801360e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013612:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8013616:	6019      	str	r1, [r3, #0]
 8013618:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801361c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8013620:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013622:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013626:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801362a:	6819      	ldr	r1, [r3, #0]
 801362c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013630:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8013634:	681a      	ldr	r2, [r3, #0]
 8013636:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801363a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	fb21 3202 	smlad	r2, r1, r2, r3
 8013644:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013648:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801364c:	601a      	str	r2, [r3, #0]
  return(result);
 801364e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013652:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 801365c:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8013660:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013664:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013668:	601a      	str	r2, [r3, #0]
 801366a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801366e:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8013672:	2308      	movs	r3, #8
 8013674:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8013676:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801367a:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 801367e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013682:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	f003 031f 	and.w	r3, r3, #31
 801368c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801368e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013692:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d105      	bne.n	80136a8 <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 801369c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136a0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80136a4:	6819      	ldr	r1, [r3, #0]
 80136a6:	e00b      	b.n	80136c0 <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 80136a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136ac:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 80136b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136b4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80136b8:	6812      	ldr	r2, [r2, #0]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	fa62 f103 	ror.w	r1, r2, r3
 80136c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136c4:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 80136c8:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80136cc:	6013      	str	r3, [r2, #0]
 80136ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136d2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80136d6:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80136d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136dc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80136e0:	681a      	ldr	r2, [r3, #0]
 80136e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136e6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	fa22 f283 	sxtab16	r2, r2, r3
 80136f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136f4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80136f8:	601a      	str	r2, [r3, #0]
  return(result);
 80136fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8013708:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801370c:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8013710:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013714:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8013716:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801371a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	461a      	mov	r2, r3
 8013726:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801372a:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 801372e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013730:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013734:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	1d1a      	adds	r2, r3, #4
 801373e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013742:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	601a      	str	r2, [r3, #0]
    return (val);
 801374a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801374e:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 8013752:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8013754:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8013758:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801375c:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8013760:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8013764:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013768:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801376c:	601a      	str	r2, [r3, #0]
 801376e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013772:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8013776:	6019      	str	r1, [r3, #0]
 8013778:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801377c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013780:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013782:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013786:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801378a:	6819      	ldr	r1, [r3, #0]
 801378c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013790:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8013794:	681a      	ldr	r2, [r3, #0]
 8013796:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801379a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	fb21 3202 	smlad	r2, r1, r2, r3
 80137a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137a8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80137ac:	601a      	str	r2, [r3, #0]
  return(result);
 80137ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 80137bc:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80137c0:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80137c4:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 80137c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80137d0:	601a      	str	r2, [r3, #0]
 80137d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80137da:	6019      	str	r1, [r3, #0]
 80137dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80137e4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80137e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80137ee:	6819      	ldr	r1, [r3, #0]
 80137f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	fb21 3202 	smlad	r2, r1, r2, r3
 8013808:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801380c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8013810:	601a      	str	r2, [r3, #0]
  return(result);
 8013812:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013816:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8013820:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8013824:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013828:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801382c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013830:	6013      	str	r3, [r2, #0]
 8013832:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013836:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801383a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801383c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013840:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013844:	681a      	ldr	r2, [r3, #0]
 8013846:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801384a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	fa22 f283 	sxtab16	r2, r2, r3
 8013854:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013858:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801385c:	601a      	str	r2, [r3, #0]
  return(result);
 801385e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013862:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801386c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013870:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8013874:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013878:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801387a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801387e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	461a      	mov	r2, r3
 801388a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801388e:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8013892:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013894:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013898:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	1d1a      	adds	r2, r3, #4
 80138a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	601a      	str	r2, [r3, #0]
    return (val);
 80138ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138b2:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 80138b6:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80138b8:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80138bc:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 80138c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80138c8:	601a      	str	r2, [r3, #0]
 80138ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138ce:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 80138d2:	2308      	movs	r3, #8
 80138d4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80138d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138da:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 80138de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	f003 031f 	and.w	r3, r3, #31
 80138ec:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80138ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d105      	bne.n	8013908 <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 80138fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013900:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013904:	6819      	ldr	r1, [r3, #0]
 8013906:	e00b      	b.n	8013920 <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013908:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801390c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8013910:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013914:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013918:	6812      	ldr	r2, [r2, #0]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	fa62 f103 	ror.w	r1, r2, r3
 8013920:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013924:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8013928:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801392c:	6013      	str	r3, [r2, #0]
 801392e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013936:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013938:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801393c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013940:	681a      	ldr	r2, [r3, #0]
 8013942:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	fa22 f283 	sxtab16	r2, r2, r3
 8013950:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013954:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013958:	601a      	str	r2, [r3, #0]
  return(result);
 801395a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801395e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8013968:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801396c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8013970:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 8013974:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013978:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 801397c:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8013980:	fa22 f283 	sxtab16	r2, r2, r3
 8013984:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013988:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801398c:	601a      	str	r2, [r3, #0]
  return(result);
 801398e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013992:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801399c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139a0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80139a4:	681a      	ldr	r2, [r3, #0]
 80139a6:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 80139aa:	4413      	add	r3, r2
 80139ac:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 80139b0:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80139b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139bc:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 80139c0:	601a      	str	r2, [r3, #0]
    return (val);
 80139c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139c6:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 80139d0:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 80139d4:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 80139d8:	2308      	movs	r3, #8
 80139da:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 80139de:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80139e2:	f003 031f 	and.w	r3, r3, #31
 80139e6:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 80139ea:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d102      	bne.n	80139f8 <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 80139f2:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80139f6:	e004      	b.n	8013a02 <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 80139f8:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80139fc:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8013a00:	41da      	rors	r2, r3
 8013a02:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8013a06:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 8013a0a:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013a0e:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 8013a12:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8013a16:	fa22 f383 	sxtab16	r3, r2, r3
 8013a1a:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 8013a1e:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8013a22:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8013a26:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8013a2a:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 8013a2e:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8013a32:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 8013a36:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8013a3a:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013a3e:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8013a42:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8013a46:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8013a4a:	fb21 3302 	smlad	r3, r1, r2, r3
 8013a4e:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 8013a52:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8013a56:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8013a5a:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8013a5e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013a62:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8013a66:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013a6a:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013a6e:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8013a72:	fa22 f383 	sxtab16	r3, r2, r3
 8013a76:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 8013a7a:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8013a7e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8013a82:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8013a86:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8013a8a:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8013a8e:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 8013a92:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8013a96:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013a9a:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8013a9e:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8013aa2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8013aa6:	fb21 3302 	smlad	r3, r1, r2, r3
 8013aaa:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 8013aae:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013ab2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8013ab6:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8013aba:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8013abe:	2308      	movs	r3, #8
 8013ac0:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 8013ac4:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8013ac8:	f003 031f 	and.w	r3, r3, #31
 8013acc:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 8013ad0:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d102      	bne.n	8013ade <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 8013ad8:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8013adc:	e004      	b.n	8013ae8 <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013ade:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8013ae2:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8013ae6:	41da      	rors	r2, r3
 8013ae8:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013aec:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 8013af0:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013af4:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 8013af8:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8013afc:	fa22 f383 	sxtab16	r3, r2, r3
 8013b00:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 8013b04:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8013b08:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 8013b0c:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8013b10:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 8013b14:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8013b18:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 8013b1c:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 8013b20:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013b24:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8013b28:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 8013b2c:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 8013b30:	fb21 3302 	smlad	r3, r1, r2, r3
 8013b34:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 8013b38:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8013b3c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8013b40:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8013b44:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8013b48:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8013b4c:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 8013b50:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 8013b54:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013b58:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8013b5c:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 8013b60:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8013b64:	fb21 3302 	smlad	r3, r1, r2, r3
 8013b68:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 8013b6c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8013b70:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8013b74:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8013b78:	3310      	adds	r3, #16
 8013b7a:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8013b7e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8013b82:	f1a3 020f 	sub.w	r2, r3, #15
 8013b86:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	f6fe ae1c 	blt.w	80127c8 <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8013b90:	e05a      	b.n	8013c48 <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8013b92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b96:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	f993 3000 	ldrsb.w	r3, [r3]
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8013ba6:	4413      	add	r3, r2
 8013ba8:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 8013bac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bb0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8013bb4:	681a      	ldr	r2, [r3, #0]
 8013bb6:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8013bba:	4413      	add	r3, r2
 8013bbc:	f993 3000 	ldrsb.w	r3, [r3]
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8013bc6:	4413      	add	r3, r2
 8013bc8:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8013bcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bd0:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	f993 3000 	ldrsb.w	r3, [r3]
 8013bda:	461a      	mov	r2, r3
 8013bdc:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8013be0:	4413      	add	r3, r2
 8013be2:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 8013be6:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8013bea:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8013bee:	fb03 f202 	mul.w	r2, r3, r2
 8013bf2:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8013bf6:	4413      	add	r3, r2
 8013bf8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 8013bfc:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8013c00:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 8013c04:	fb03 f202 	mul.w	r2, r3, r2
 8013c08:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8013c0c:	4413      	add	r3, r2
 8013c0e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 8013c12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c16:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	1c5a      	adds	r2, r3, #1
 8013c1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c22:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8013c26:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 8013c28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c2c:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	1c5a      	adds	r2, r3, #1
 8013c34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c38:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8013c3c:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8013c3e:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8013c42:	3301      	adds	r3, #1
 8013c44:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8013c48:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 8013c4c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8013c50:	429a      	cmp	r2, r3
 8013c52:	db9e      	blt.n	8013b92 <arm_nn_vec_mat_mult_t_s8+0x14f4>
 8013c54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c58:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8013c5c:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8013c60:	6013      	str	r3, [r2, #0]
 8013c62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c66:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 8013c6a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8013c6e:	6013      	str	r3, [r2, #0]
 8013c70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c74:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8013c78:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8013c7c:	6013      	str	r3, [r2, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8013c7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c82:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8013c8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c90:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	fa03 f202 	lsl.w	r2, r3, r2
 8013c9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c9e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8013ca2:	601a      	str	r2, [r3, #0]
 8013ca4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ca8:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8013cac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cb0:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013cb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cbc:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8013cc4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013cc8:	461a      	mov	r2, r3
 8013cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013cce:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8013cd0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013cd4:	461a      	mov	r2, r3
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8013cda:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013ce2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ce6:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	17da      	asrs	r2, r3, #31
 8013cee:	633b      	str	r3, [r7, #48]	; 0x30
 8013cf0:	637a      	str	r2, [r7, #52]	; 0x34
 8013cf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cf6:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	17da      	asrs	r2, r3, #31
 8013cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8013d00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d06:	fb02 f203 	mul.w	r2, r2, r3
 8013d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d0c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8013d0e:	fb04 f303 	mul.w	r3, r4, r3
 8013d12:	4413      	add	r3, r2
 8013d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d16:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8013d18:	fba2 5604 	umull	r5, r6, r2, r4
 8013d1c:	4433      	add	r3, r6
 8013d1e:	461e      	mov	r6, r3
 8013d20:	1943      	adds	r3, r0, r5
 8013d22:	61bb      	str	r3, [r7, #24]
 8013d24:	eb41 0306 	adc.w	r3, r1, r6
 8013d28:	61fb      	str	r3, [r7, #28]
 8013d2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013d2e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8013d32:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8013d36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d3e:	f04f 0000 	mov.w	r0, #0
 8013d42:	f04f 0100 	mov.w	r1, #0
 8013d46:	0fd0      	lsrs	r0, r2, #31
 8013d48:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013d4c:	17d9      	asrs	r1, r3, #31
 8013d4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d52:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8013d56:	4603      	mov	r3, r0
 8013d58:	6013      	str	r3, [r2, #0]
    return result;
 8013d5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d5e:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8013d62:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8013d64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d68:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	dc06      	bgt.n	8013d80 <arm_nn_vec_mat_mult_t_s8+0x16e2>
 8013d72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d76:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	425a      	negs	r2, r3
 8013d7e:	e000      	b.n	8013d82 <arm_nn_vec_mat_mult_t_s8+0x16e4>
 8013d80:	2200      	movs	r2, #0
 8013d82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d86:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8013d8a:	6019      	str	r1, [r3, #0]
 8013d8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d90:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8013d94:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8013d96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d9a:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8013d9e:	2300      	movs	r3, #0
 8013da0:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8013da2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013da6:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8013daa:	2201      	movs	r2, #1
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	fa02 f103 	lsl.w	r1, r2, r3
 8013db2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013db6:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 8013dba:	1e4b      	subs	r3, r1, #1
 8013dbc:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8013dbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dc2:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 8013dc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dca:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8013dce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dd2:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8013dd6:	6812      	ldr	r2, [r2, #0]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	4013      	ands	r3, r2
 8013ddc:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8013dde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013de2:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 8013de6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dea:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8013dee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013df2:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8013df6:	6812      	ldr	r2, [r2, #0]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	fa42 f303 	asr.w	r3, r2, r3
 8013dfe:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8013e00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e04:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8013e08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e0c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	105b      	asrs	r3, r3, #1
 8013e14:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013e16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e1a:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	da0a      	bge.n	8013e3a <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 8013e24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e28:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8013e2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e30:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	3301      	adds	r3, #1
 8013e38:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8013e3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e3e:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 8013e42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e46:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8013e4a:	6812      	ldr	r2, [r2, #0]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	dd0a      	ble.n	8013e68 <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 8013e52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e56:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8013e5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e5e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	3301      	adds	r3, #1
 8013e66:	6013      	str	r3, [r2, #0]
    return result;
 8013e68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e6c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8013e70:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8013e72:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 8013e74:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 8013e78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e7c:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 8013e80:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8013e84:	6013      	str	r3, [r2, #0]
 8013e86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e8a:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8013e8e:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8013e92:	6013      	str	r3, [r2, #0]
 8013e94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e98:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8013e9c:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8013ea0:	6013      	str	r3, [r2, #0]
 8013ea2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ea6:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8013eb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013eb4:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	fa03 f202 	lsl.w	r2, r3, r2
 8013ebe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ec2:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8013ec6:	601a      	str	r2, [r3, #0]
 8013ec8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ecc:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8013ed0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ed4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013edc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ee0:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8013ee8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013eec:	461a      	mov	r2, r3
 8013eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013ef2:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8013ef6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013efa:	461a      	mov	r2, r3
 8013efc:	2300      	movs	r3, #0
 8013efe:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8013f02:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013f06:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013f0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f0e:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	17da      	asrs	r2, r3, #31
 8013f16:	643b      	str	r3, [r7, #64]	; 0x40
 8013f18:	647a      	str	r2, [r7, #68]	; 0x44
 8013f1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f1e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	17da      	asrs	r2, r3, #31
 8013f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8013f28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f2e:	fb02 f203 	mul.w	r2, r2, r3
 8013f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f34:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8013f36:	fb04 f303 	mul.w	r3, r4, r3
 8013f3a:	4413      	add	r3, r2
 8013f3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f3e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8013f40:	fba2 ab04 	umull	sl, fp, r2, r4
 8013f44:	445b      	add	r3, fp
 8013f46:	469b      	mov	fp, r3
 8013f48:	eb10 030a 	adds.w	r3, r0, sl
 8013f4c:	623b      	str	r3, [r7, #32]
 8013f4e:	eb41 030b 	adc.w	r3, r1, fp
 8013f52:	627b      	str	r3, [r7, #36]	; 0x24
 8013f54:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013f58:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8013f5c:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8013f60:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013f64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013f68:	f04f 0000 	mov.w	r0, #0
 8013f6c:	f04f 0100 	mov.w	r1, #0
 8013f70:	0fd0      	lsrs	r0, r2, #31
 8013f72:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013f76:	17d9      	asrs	r1, r3, #31
 8013f78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f7c:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8013f80:	4603      	mov	r3, r0
 8013f82:	6013      	str	r3, [r2, #0]
    return result;
 8013f84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f88:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8013f8c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8013f8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f92:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	dc06      	bgt.n	8013faa <arm_nn_vec_mat_mult_t_s8+0x190c>
 8013f9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fa0:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	425a      	negs	r2, r3
 8013fa8:	e000      	b.n	8013fac <arm_nn_vec_mat_mult_t_s8+0x190e>
 8013faa:	2200      	movs	r2, #0
 8013fac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fb0:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8013fb4:	6019      	str	r1, [r3, #0]
 8013fb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fba:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013fbe:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8013fc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fc4:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8013fc8:	2300      	movs	r3, #0
 8013fca:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8013fcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fd0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013fd4:	2201      	movs	r2, #1
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	fa02 f103 	lsl.w	r1, r2, r3
 8013fdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fe0:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 8013fe4:	1e4b      	subs	r3, r1, #1
 8013fe6:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8013fe8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fec:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 8013ff0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ff4:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8013ff8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ffc:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8014000:	6812      	ldr	r2, [r2, #0]
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	4013      	ands	r3, r2
 8014006:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8014008:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801400c:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 8014010:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014014:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8014018:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801401c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8014020:	6812      	ldr	r2, [r2, #0]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	fa42 f303 	asr.w	r3, r2, r3
 8014028:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801402a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801402e:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8014032:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014036:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	105b      	asrs	r3, r3, #1
 801403e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8014040:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014044:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	2b00      	cmp	r3, #0
 801404c:	da0a      	bge.n	8014064 <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 801404e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014052:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8014056:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801405a:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	3301      	adds	r3, #1
 8014062:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8014064:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014068:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 801406c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014070:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8014074:	6812      	ldr	r2, [r2, #0]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	429a      	cmp	r2, r3
 801407a:	dd0a      	ble.n	8014092 <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 801407c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014080:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8014084:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014088:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	3301      	adds	r3, #1
 8014090:	6013      	str	r3, [r2, #0]
    return result;
 8014092:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014096:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801409a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801409c:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 801409e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 80140a2:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 80140a6:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 80140aa:	4413      	add	r3, r2
 80140ac:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 80140b0:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 80140b4:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 80140b8:	4413      	add	r3, r2
 80140ba:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 80140be:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 80140c2:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 80140c6:	4293      	cmp	r3, r2
 80140c8:	bfb8      	it	lt
 80140ca:	4613      	movlt	r3, r2
 80140cc:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 80140d0:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 80140d4:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 80140d8:	4293      	cmp	r3, r2
 80140da:	bfa8      	it	ge
 80140dc:	4613      	movge	r3, r2
 80140de:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 80140e2:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 80140e6:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 80140ea:	4293      	cmp	r3, r2
 80140ec:	bfb8      	it	lt
 80140ee:	4613      	movlt	r3, r2
 80140f0:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 80140f4:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 80140f8:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 80140fc:	4293      	cmp	r3, r2
 80140fe:	bfa8      	it	ge
 8014100:	4613      	movge	r3, r2
 8014102:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 8014106:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801410a:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 801410e:	6819      	ldr	r1, [r3, #0]
 8014110:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014114:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 8014118:	1c4b      	adds	r3, r1, #1
 801411a:	6013      	str	r3, [r2, #0]
 801411c:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8014120:	b25b      	sxtb	r3, r3
 8014122:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 8014124:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014128:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 801412c:	6819      	ldr	r1, [r3, #0]
 801412e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014132:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 8014136:	1c4b      	adds	r3, r1, #1
 8014138:	6013      	str	r3, [r2, #0]
 801413a:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 801413e:	b25b      	sxtb	r3, r3
 8014140:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 8014142:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8014146:	005b      	lsls	r3, r3, #1
 8014148:	4619      	mov	r1, r3
 801414a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801414e:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 8014152:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014156:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	440b      	add	r3, r1
 801415e:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8014160:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 8014164:	3302      	adds	r3, #2
 8014166:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 801416a:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 801416e:	1e5a      	subs	r2, r3, #1
 8014170:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 8014174:	4293      	cmp	r3, r2
 8014176:	f6fe aae5 	blt.w	8012744 <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 801417a:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 801417e:	f003 0301 	and.w	r3, r3, #1
 8014182:	2b00      	cmp	r3, #0
 8014184:	f001 806e 	beq.w	8015264 <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8014188:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801418c:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8014190:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014194:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 8014198:	6812      	ldr	r2, [r2, #0]
 801419a:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 801419c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141a0:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80141a4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80141a8:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 80141ac:	6812      	ldr	r2, [r2, #0]
 80141ae:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 80141b0:	2300      	movs	r3, #0
 80141b2:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 80141b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141ba:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d00d      	beq.n	80141e0 <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 80141c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141c8:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80141d2:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 80141d6:	1d19      	adds	r1, r3, #4
 80141d8:	6011      	str	r1, [r2, #0]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 80141e0:	2300      	movs	r3, #0
 80141e2:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 80141e6:	f000 beb5 	b.w	8014f54 <arm_nn_vec_mat_mult_t_s8+0x28b6>
 80141ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141ee:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 80141f2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80141f6:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80141f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141fc:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	461a      	mov	r2, r3
 8014208:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801420c:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8014210:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014212:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014216:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	1d1a      	adds	r2, r3, #4
 8014220:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014224:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	601a      	str	r2, [r3, #0]
    return (val);
 801422c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014230:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8014234:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8014236:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 801423a:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801423e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014242:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8014246:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801424a:	6019      	str	r1, [r3, #0]
 801424c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014250:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8014254:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014256:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801425a:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014264:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 8014268:	6812      	ldr	r2, [r2, #0]
 801426a:	fa23 f282 	sxtab16	r2, r3, r2
 801426e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014272:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8014276:	601a      	str	r2, [r3, #0]
  return(result);
 8014278:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801427c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8014286:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801428a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801428e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014292:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014294:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014298:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	461a      	mov	r2, r3
 80142a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142a8:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 80142ac:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80142ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142b2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	1d1a      	adds	r2, r3, #4
 80142bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142c0:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	601a      	str	r2, [r3, #0]
    return (val);
 80142c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142cc:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 80142d0:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80142d2:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80142d6:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80142da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142de:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 80142e2:	601a      	str	r2, [r3, #0]
 80142e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142e8:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80142ec:	2208      	movs	r2, #8
 80142ee:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80142f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142f4:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80142f8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80142fc:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 8014300:	6812      	ldr	r2, [r2, #0]
 8014302:	f002 021f 	and.w	r2, r2, #31
 8014306:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014308:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801430c:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d105      	bne.n	8014322 <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 8014316:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801431a:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	e00b      	b.n	801433a <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014322:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014326:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 801432a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801432e:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8014332:	6812      	ldr	r2, [r2, #0]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	fa62 f303 	ror.w	r3, r2, r3
 801433a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801433e:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 8014342:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8014346:	6011      	str	r1, [r2, #0]
 8014348:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801434c:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8014350:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014352:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014356:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014360:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8014364:	6812      	ldr	r2, [r2, #0]
 8014366:	fa23 f282 	sxtab16	r2, r3, r2
 801436a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801436e:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8014372:	601a      	str	r2, [r3, #0]
  return(result);
 8014374:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014378:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8014382:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8014386:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801438a:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 801438e:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014392:	6019      	str	r1, [r3, #0]
 8014394:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014398:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 801439c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801439e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143a2:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80143ac:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 80143b0:	6812      	ldr	r2, [r2, #0]
 80143b2:	fa23 f282 	sxtab16	r2, r3, r2
 80143b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143ba:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 80143be:	601a      	str	r2, [r3, #0]
  return(result);
 80143c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143c4:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 80143ce:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80143d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143d6:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 80143da:	601a      	str	r2, [r3, #0]
 80143dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143e0:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 80143e4:	2208      	movs	r2, #8
 80143e6:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80143e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143ec:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 80143f0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80143f4:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 80143f8:	6812      	ldr	r2, [r2, #0]
 80143fa:	f002 021f 	and.w	r2, r2, #31
 80143fe:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014400:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014404:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d105      	bne.n	801441a <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 801440e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014412:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	e00b      	b.n	8014432 <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 801441a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801441e:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 8014422:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014426:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801442a:	6812      	ldr	r2, [r2, #0]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	fa62 f303 	ror.w	r3, r2, r3
 8014432:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014436:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 801443a:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801443e:	6011      	str	r1, [r2, #0]
 8014440:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014444:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 8014448:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801444a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801444e:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014458:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 801445c:	6812      	ldr	r2, [r2, #0]
 801445e:	fa23 f282 	sxtab16	r2, r3, r2
 8014462:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014466:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 801446a:	601a      	str	r2, [r3, #0]
  return(result);
 801446c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014470:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 801447a:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 801447e:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8014482:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014486:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801448a:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 801448e:	6018      	str	r0, [r3, #0]
 8014490:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014494:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8014498:	6019      	str	r1, [r3, #0]
 801449a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801449e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80144a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80144a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144a8:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80144b2:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 80144b6:	6812      	ldr	r2, [r2, #0]
 80144b8:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80144bc:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 80144c0:	6809      	ldr	r1, [r1, #0]
 80144c2:	fb23 1202 	smlad	r2, r3, r2, r1
 80144c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144ca:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 80144ce:	601a      	str	r2, [r3, #0]
  return(result);
 80144d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144d4:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 80144de:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 80144e2:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80144e6:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80144ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144ee:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 80144f2:	6018      	str	r0, [r3, #0]
 80144f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144f8:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80144fc:	6019      	str	r1, [r3, #0]
 80144fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014502:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8014506:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014508:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801450c:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014516:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 801451a:	6812      	ldr	r2, [r2, #0]
 801451c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014520:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 8014524:	6809      	ldr	r1, [r1, #0]
 8014526:	fb23 1202 	smlad	r2, r3, r2, r1
 801452a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801452e:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8014532:	601a      	str	r2, [r3, #0]
  return(result);
 8014534:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014538:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8014542:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014546:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 801454a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801454e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014550:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014554:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	461a      	mov	r2, r3
 8014560:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014564:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8014568:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801456a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801456e:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	1d1a      	adds	r2, r3, #4
 8014578:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801457c:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	601a      	str	r2, [r3, #0]
    return (val);
 8014584:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014588:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801458c:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801458e:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8014592:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8014596:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801459a:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801459e:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80145a2:	6019      	str	r1, [r3, #0]
 80145a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145a8:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 80145ac:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80145ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145b2:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80145bc:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 80145c0:	6812      	ldr	r2, [r2, #0]
 80145c2:	fa23 f282 	sxtab16	r2, r3, r2
 80145c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145ca:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80145ce:	601a      	str	r2, [r3, #0]
  return(result);
 80145d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145d4:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 80145de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145e2:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80145e6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80145ea:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80145ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145f0:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	461a      	mov	r2, r3
 80145fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014600:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8014604:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014606:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801460a:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	1d1a      	adds	r2, r3, #4
 8014614:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014618:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	601a      	str	r2, [r3, #0]
    return (val);
 8014620:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014624:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8014628:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801462a:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801462e:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8014632:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014636:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 801463a:	601a      	str	r2, [r3, #0]
 801463c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014640:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8014644:	2208      	movs	r2, #8
 8014646:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014648:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801464c:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8014650:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014654:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 8014658:	6812      	ldr	r2, [r2, #0]
 801465a:	f002 021f 	and.w	r2, r2, #31
 801465e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014660:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014664:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d105      	bne.n	801467a <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 801466e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014672:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	e00b      	b.n	8014692 <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 801467a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801467e:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 8014682:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014686:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 801468a:	6812      	ldr	r2, [r2, #0]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	fa62 f303 	ror.w	r3, r2, r3
 8014692:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014696:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 801469a:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801469e:	6011      	str	r1, [r2, #0]
 80146a0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80146a4:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 80146a8:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80146aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146ae:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80146b8:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 80146bc:	6812      	ldr	r2, [r2, #0]
 80146be:	fa23 f282 	sxtab16	r2, r3, r2
 80146c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146c6:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 80146ca:	601a      	str	r2, [r3, #0]
  return(result);
 80146cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146d0:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 80146da:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80146de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146e2:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80146e6:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80146ea:	6019      	str	r1, [r3, #0]
 80146ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146f0:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 80146f4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80146f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146fa:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014704:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 8014708:	6812      	ldr	r2, [r2, #0]
 801470a:	fa23 f282 	sxtab16	r2, r3, r2
 801470e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014712:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8014716:	601a      	str	r2, [r3, #0]
  return(result);
 8014718:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801471c:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8014726:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801472a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801472e:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8014732:	601a      	str	r2, [r3, #0]
 8014734:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014738:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 801473c:	2208      	movs	r2, #8
 801473e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014740:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014744:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8014748:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801474c:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 8014750:	6812      	ldr	r2, [r2, #0]
 8014752:	f002 021f 	and.w	r2, r2, #31
 8014756:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014758:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801475c:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d105      	bne.n	8014772 <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 8014766:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801476a:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	e00b      	b.n	801478a <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014772:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014776:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 801477a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801477e:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8014782:	6812      	ldr	r2, [r2, #0]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	fa62 f303 	ror.w	r3, r2, r3
 801478a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801478e:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8014792:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014796:	6011      	str	r1, [r2, #0]
 8014798:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801479c:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 80147a0:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80147a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147a6:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80147b0:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 80147b4:	6812      	ldr	r2, [r2, #0]
 80147b6:	fa23 f282 	sxtab16	r2, r3, r2
 80147ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147be:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80147c2:	601a      	str	r2, [r3, #0]
  return(result);
 80147c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147c8:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 80147d2:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 80147d6:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 80147da:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80147de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147e2:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80147e6:	6018      	str	r0, [r3, #0]
 80147e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147ec:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80147f0:	6019      	str	r1, [r3, #0]
 80147f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147f6:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80147fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80147fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014800:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801480a:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 801480e:	6812      	ldr	r2, [r2, #0]
 8014810:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014814:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 8014818:	6809      	ldr	r1, [r1, #0]
 801481a:	fb23 1202 	smlad	r2, r3, r2, r1
 801481e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014822:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8014826:	601a      	str	r2, [r3, #0]
  return(result);
 8014828:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801482c:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8014836:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 801483a:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 801483e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014842:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014846:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 801484a:	6018      	str	r0, [r3, #0]
 801484c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014850:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8014854:	6019      	str	r1, [r3, #0]
 8014856:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801485a:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 801485e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014860:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014864:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801486e:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8014872:	6812      	ldr	r2, [r2, #0]
 8014874:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014878:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 801487c:	6809      	ldr	r1, [r1, #0]
 801487e:	fb23 1202 	smlad	r2, r3, r2, r1
 8014882:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014886:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 801488a:	601a      	str	r2, [r3, #0]
  return(result);
 801488c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014890:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 801489a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801489e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80148a2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80148a6:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80148a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148ac:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	461a      	mov	r2, r3
 80148b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148bc:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 80148c0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80148c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148c6:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	1d1a      	adds	r2, r3, #4
 80148d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148d4:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	601a      	str	r2, [r3, #0]
    return (val);
 80148dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148e0:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 80148e4:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80148e6:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 80148ea:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80148ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148f2:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80148f6:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80148fa:	6019      	str	r1, [r3, #0]
 80148fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014900:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8014904:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014906:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801490a:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014914:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 8014918:	6812      	ldr	r2, [r2, #0]
 801491a:	fa23 f282 	sxtab16	r2, r3, r2
 801491e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014922:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8014926:	601a      	str	r2, [r3, #0]
  return(result);
 8014928:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801492c:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8014936:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801493a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 801493e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014942:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014944:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014948:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	461a      	mov	r2, r3
 8014954:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014958:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 801495c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801495e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014962:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	1d1a      	adds	r2, r3, #4
 801496c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014970:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	601a      	str	r2, [r3, #0]
    return (val);
 8014978:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801497c:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8014980:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8014982:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8014986:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801498a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801498e:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8014992:	601a      	str	r2, [r3, #0]
 8014994:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014998:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 801499c:	2208      	movs	r2, #8
 801499e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80149a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149a4:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80149a8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80149ac:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80149b0:	6812      	ldr	r2, [r2, #0]
 80149b2:	f002 021f 	and.w	r2, r2, #31
 80149b6:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80149b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149bc:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d105      	bne.n	80149d2 <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 80149c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149ca:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	e00b      	b.n	80149ea <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 80149d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149d6:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 80149da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149de:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80149e2:	6812      	ldr	r2, [r2, #0]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	fa62 f303 	ror.w	r3, r2, r3
 80149ea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80149ee:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 80149f2:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80149f6:	6011      	str	r1, [r2, #0]
 80149f8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80149fc:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8014a00:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014a02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a06:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014a10:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8014a14:	6812      	ldr	r2, [r2, #0]
 8014a16:	fa23 f282 	sxtab16	r2, r3, r2
 8014a1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a1e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8014a22:	601a      	str	r2, [r3, #0]
  return(result);
 8014a24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a28:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8014a32:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8014a36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a3a:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8014a3e:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014a42:	6019      	str	r1, [r3, #0]
 8014a44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a48:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8014a4c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014a4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a52:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014a5c:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8014a60:	6812      	ldr	r2, [r2, #0]
 8014a62:	fa23 f282 	sxtab16	r2, r3, r2
 8014a66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a6a:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8014a6e:	601a      	str	r2, [r3, #0]
  return(result);
 8014a70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a74:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8014a7e:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8014a82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a86:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8014a8a:	601a      	str	r2, [r3, #0]
 8014a8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a90:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8014a94:	2208      	movs	r2, #8
 8014a96:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014a98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a9c:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8014aa0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014aa4:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 8014aa8:	6812      	ldr	r2, [r2, #0]
 8014aaa:	f002 021f 	and.w	r2, r2, #31
 8014aae:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014ab0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ab4:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d105      	bne.n	8014aca <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 8014abe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ac2:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	e00b      	b.n	8014ae2 <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014aca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ace:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 8014ad2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ad6:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8014ada:	6812      	ldr	r2, [r2, #0]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	fa62 f303 	ror.w	r3, r2, r3
 8014ae2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014ae6:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8014aea:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014aee:	6011      	str	r1, [r2, #0]
 8014af0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014af4:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8014af8:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014afa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014afe:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014b08:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8014b0c:	6812      	ldr	r2, [r2, #0]
 8014b0e:	fa23 f282 	sxtab16	r2, r3, r2
 8014b12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b16:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8014b1a:	601a      	str	r2, [r3, #0]
  return(result);
 8014b1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b20:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8014b2a:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8014b2e:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8014b32:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014b36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b3a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8014b3e:	6018      	str	r0, [r3, #0]
 8014b40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b44:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8014b48:	6019      	str	r1, [r3, #0]
 8014b4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b4e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8014b52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014b54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b58:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014b62:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8014b66:	6812      	ldr	r2, [r2, #0]
 8014b68:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014b6c:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 8014b70:	6809      	ldr	r1, [r1, #0]
 8014b72:	fb23 1202 	smlad	r2, r3, r2, r1
 8014b76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b7a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8014b7e:	601a      	str	r2, [r3, #0]
  return(result);
 8014b80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b84:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8014b8e:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8014b92:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8014b96:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014b9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b9e:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8014ba2:	6018      	str	r0, [r3, #0]
 8014ba4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ba8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8014bac:	6019      	str	r1, [r3, #0]
 8014bae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bb2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8014bb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014bb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bbc:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014bc6:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8014bca:	6812      	ldr	r2, [r2, #0]
 8014bcc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014bd0:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8014bd4:	6809      	ldr	r1, [r1, #0]
 8014bd6:	fb23 1202 	smlad	r2, r3, r2, r1
 8014bda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bde:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8014be2:	601a      	str	r2, [r3, #0]
  return(result);
 8014be4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014be8:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8014bf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bf6:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8014bfa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8014bfe:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014c00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c04:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	461a      	mov	r2, r3
 8014c10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c14:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8014c18:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014c1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c1e:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	1d1a      	adds	r2, r3, #4
 8014c28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c2c:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	601a      	str	r2, [r3, #0]
    return (val);
 8014c34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c38:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8014c3c:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8014c3e:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8014c42:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8014c46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c4a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8014c4e:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8014c52:	6019      	str	r1, [r3, #0]
 8014c54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c58:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8014c5c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014c5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c62:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014c6c:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 8014c70:	6812      	ldr	r2, [r2, #0]
 8014c72:	fa23 f282 	sxtab16	r2, r3, r2
 8014c76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c7a:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8014c7e:	601a      	str	r2, [r3, #0]
  return(result);
 8014c80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c84:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8014c8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c92:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8014c96:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014c9a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014c9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ca0:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	461a      	mov	r2, r3
 8014cac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cb0:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8014cb4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014cb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cba:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	1d1a      	adds	r2, r3, #4
 8014cc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cc8:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	601a      	str	r2, [r3, #0]
    return (val);
 8014cd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cd4:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8014cd8:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8014cda:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8014cde:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8014ce2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ce6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8014cea:	601a      	str	r2, [r3, #0]
 8014cec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cf0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8014cf4:	2208      	movs	r2, #8
 8014cf6:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014cf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cfc:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8014d00:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014d04:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 8014d08:	6812      	ldr	r2, [r2, #0]
 8014d0a:	f002 021f 	and.w	r2, r2, #31
 8014d0e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014d10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d14:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d105      	bne.n	8014d2a <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 8014d1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d22:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	e00b      	b.n	8014d42 <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014d2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d2e:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 8014d32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d36:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8014d3a:	6812      	ldr	r2, [r2, #0]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	fa62 f303 	ror.w	r3, r2, r3
 8014d42:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014d46:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8014d4a:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8014d4e:	6011      	str	r1, [r2, #0]
 8014d50:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014d54:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8014d58:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014d5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d5e:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014d68:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8014d6c:	6812      	ldr	r2, [r2, #0]
 8014d6e:	fa23 f282 	sxtab16	r2, r3, r2
 8014d72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d76:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8014d7a:	601a      	str	r2, [r3, #0]
  return(result);
 8014d7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d80:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8014d8a:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8014d8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d92:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8014d96:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014d9a:	6019      	str	r1, [r3, #0]
 8014d9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014da0:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8014da4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014da6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014daa:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014db4:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 8014db8:	6812      	ldr	r2, [r2, #0]
 8014dba:	fa23 f282 	sxtab16	r2, r3, r2
 8014dbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014dc2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014dc6:	601a      	str	r2, [r3, #0]
  return(result);
 8014dc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014dcc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8014dd6:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8014dda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014dde:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8014de2:	601a      	str	r2, [r3, #0]
 8014de4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014de8:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8014dec:	2208      	movs	r2, #8
 8014dee:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014df0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014df4:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8014df8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014dfc:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 8014e00:	6812      	ldr	r2, [r2, #0]
 8014e02:	f002 021f 	and.w	r2, r2, #31
 8014e06:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014e08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e0c:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d105      	bne.n	8014e22 <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 8014e16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e1a:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	e00b      	b.n	8014e3a <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014e22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e26:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 8014e2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e2e:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8014e32:	6812      	ldr	r2, [r2, #0]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	fa62 f303 	ror.w	r3, r2, r3
 8014e3a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014e3e:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 8014e42:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014e46:	6011      	str	r1, [r2, #0]
 8014e48:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014e4c:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8014e50:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014e52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e56:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014e60:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8014e64:	6812      	ldr	r2, [r2, #0]
 8014e66:	fa23 f282 	sxtab16	r2, r3, r2
 8014e6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e6e:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8014e72:	601a      	str	r2, [r3, #0]
  return(result);
 8014e74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e78:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8014e82:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8014e86:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8014e8a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014e8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e92:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8014e96:	6018      	str	r0, [r3, #0]
 8014e98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e9c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014ea0:	6019      	str	r1, [r3, #0]
 8014ea2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ea6:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8014eaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014eac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014eb0:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014eba:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 8014ebe:	6812      	ldr	r2, [r2, #0]
 8014ec0:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014ec4:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 8014ec8:	6809      	ldr	r1, [r1, #0]
 8014eca:	fb23 1202 	smlad	r2, r3, r2, r1
 8014ece:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ed2:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8014ed6:	601a      	str	r2, [r3, #0]
  return(result);
 8014ed8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014edc:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8014ee6:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8014eea:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8014eee:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014ef2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ef6:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014efa:	6018      	str	r0, [r3, #0]
 8014efc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f00:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8014f04:	6019      	str	r1, [r3, #0]
 8014f06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f0a:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8014f0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014f10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f14:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014f1e:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 8014f22:	6812      	ldr	r2, [r2, #0]
 8014f24:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014f28:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 8014f2c:	6809      	ldr	r1, [r1, #0]
 8014f2e:	fb23 1202 	smlad	r2, r3, r2, r1
 8014f32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f36:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8014f3a:	601a      	str	r2, [r3, #0]
  return(result);
 8014f3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f40:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8014f4a:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8014f4e:	3310      	adds	r3, #16
 8014f50:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8014f54:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8014f58:	3b0f      	subs	r3, #15
 8014f5a:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 8014f5e:	429a      	cmp	r2, r3
 8014f60:	f6ff a943 	blt.w	80141ea <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8014f64:	e03f      	b.n	8014fe6 <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8014f66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f6a:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	f993 3000 	ldrsb.w	r3, [r3]
 8014f74:	461a      	mov	r2, r3
 8014f76:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8014f7a:	4413      	add	r3, r2
 8014f7c:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8014f80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f84:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	f993 3000 	ldrsb.w	r3, [r3]
 8014f8e:	461a      	mov	r2, r3
 8014f90:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8014f94:	4413      	add	r3, r2
 8014f96:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 8014f9a:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8014f9e:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8014fa2:	fb02 f303 	mul.w	r3, r2, r3
 8014fa6:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014faa:	4413      	add	r3, r2
 8014fac:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 8014fb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014fb4:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	1c5a      	adds	r2, r3, #1
 8014fbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014fc0:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8014fc4:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 8014fc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014fca:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	1c5a      	adds	r2, r3, #1
 8014fd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014fd6:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8014fda:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8014fdc:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8014fe0:	3301      	adds	r3, #1
 8014fe2:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8014fe6:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 8014fea:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	dbb9      	blt.n	8014f66 <arm_nn_vec_mat_mult_t_s8+0x28c8>
 8014ff2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ff6:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 8014ffa:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014ffe:	601a      	str	r2, [r3, #0]
 8015000:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015004:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8015008:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 801500c:	601a      	str	r2, [r3, #0]
 801500e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015012:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8015016:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 801501a:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801501c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015020:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801502a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801502e:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 8015032:	6812      	ldr	r2, [r2, #0]
 8015034:	409a      	lsls	r2, r3
 8015036:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801503a:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 801503e:	601a      	str	r2, [r3, #0]
 8015040:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015044:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8015048:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801504c:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 8015050:	6812      	ldr	r2, [r2, #0]
 8015052:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8015054:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015058:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 801505c:	2200      	movs	r2, #0
 801505e:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8015060:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015064:	461a      	mov	r2, r3
 8015066:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801506a:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 801506e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015072:	461a      	mov	r2, r3
 8015074:	2300      	movs	r3, #0
 8015076:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801507a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801507e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015082:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8015086:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 801508a:	6809      	ldr	r1, [r1, #0]
 801508c:	17c8      	asrs	r0, r1, #31
 801508e:	6139      	str	r1, [r7, #16]
 8015090:	6178      	str	r0, [r7, #20]
 8015092:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8015096:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 801509a:	6809      	ldr	r1, [r1, #0]
 801509c:	17c8      	asrs	r0, r1, #31
 801509e:	60b9      	str	r1, [r7, #8]
 80150a0:	60f8      	str	r0, [r7, #12]
 80150a2:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80150a6:	4631      	mov	r1, r6
 80150a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80150ac:	4650      	mov	r0, sl
 80150ae:	fb00 f001 	mul.w	r0, r0, r1
 80150b2:	4659      	mov	r1, fp
 80150b4:	462c      	mov	r4, r5
 80150b6:	fb04 f101 	mul.w	r1, r4, r1
 80150ba:	4401      	add	r1, r0
 80150bc:	4628      	mov	r0, r5
 80150be:	4654      	mov	r4, sl
 80150c0:	fba0 8904 	umull	r8, r9, r0, r4
 80150c4:	4449      	add	r1, r9
 80150c6:	4689      	mov	r9, r1
 80150c8:	eb12 0108 	adds.w	r1, r2, r8
 80150cc:	6039      	str	r1, [r7, #0]
 80150ce:	eb43 0309 	adc.w	r3, r3, r9
 80150d2:	607b      	str	r3, [r7, #4]
 80150d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80150d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80150dc:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 80150e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80150e4:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80150e8:	f04f 0200 	mov.w	r2, #0
 80150ec:	f04f 0300 	mov.w	r3, #0
 80150f0:	0fc2      	lsrs	r2, r0, #31
 80150f2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80150f6:	17cb      	asrs	r3, r1, #31
 80150f8:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80150fc:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 8015100:	4613      	mov	r3, r2
 8015102:	600b      	str	r3, [r1, #0]
    return result;
 8015104:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015108:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 801510c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801510e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015112:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	2b00      	cmp	r3, #0
 801511a:	dc06      	bgt.n	801512a <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 801511c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015120:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	425b      	negs	r3, r3
 8015128:	e000      	b.n	801512c <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 801512a:	2300      	movs	r3, #0
 801512c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8015130:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 8015134:	6011      	str	r1, [r2, #0]
 8015136:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801513a:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 801513e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015140:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015144:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8015148:	2200      	movs	r2, #0
 801514a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801514c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015150:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 8015154:	2201      	movs	r2, #1
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	409a      	lsls	r2, r3
 801515a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801515e:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8015162:	3a01      	subs	r2, #1
 8015164:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8015166:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801516a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 801516e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8015172:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 8015176:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801517a:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 801517e:	6809      	ldr	r1, [r1, #0]
 8015180:	6812      	ldr	r2, [r2, #0]
 8015182:	400a      	ands	r2, r1
 8015184:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8015186:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801518a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801518e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8015192:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 8015196:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801519a:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 801519e:	6809      	ldr	r1, [r1, #0]
 80151a0:	6812      	ldr	r2, [r2, #0]
 80151a2:	fa41 f202 	asr.w	r2, r1, r2
 80151a6:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80151a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80151ac:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80151b0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80151b4:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 80151b8:	6812      	ldr	r2, [r2, #0]
 80151ba:	1052      	asrs	r2, r2, #1
 80151bc:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80151be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80151c2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	da0a      	bge.n	80151e2 <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 80151cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80151d0:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80151d4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80151d8:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 80151dc:	6812      	ldr	r2, [r2, #0]
 80151de:	3201      	adds	r2, #1
 80151e0:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80151e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80151e6:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 80151ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80151ee:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80151f2:	6812      	ldr	r2, [r2, #0]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	dd0a      	ble.n	8015210 <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 80151fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80151fe:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8015202:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8015206:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 801520a:	6812      	ldr	r2, [r2, #0]
 801520c:	3201      	adds	r2, #1
 801520e:	601a      	str	r2, [r3, #0]
    return result;
 8015210:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015214:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8015218:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801521a:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 801521c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 8015220:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8015224:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8015228:	4413      	add	r3, r2
 801522a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 801522e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8015232:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8015236:	4293      	cmp	r3, r2
 8015238:	bfb8      	it	lt
 801523a:	4613      	movlt	r3, r2
 801523c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 8015240:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8015244:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8015248:	4293      	cmp	r3, r2
 801524a:	bfa8      	it	ge
 801524c:	4613      	movge	r3, r2
 801524e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 8015252:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8015256:	b25a      	sxtb	r2, r3
 8015258:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801525c:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 8015264:	2300      	movs	r3, #0
}
 8015266:	4618      	mov	r0, r3
 8015268:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 801526c:	46bd      	mov	sp, r7
 801526e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015272:	4770      	bx	lr
 8015274:	0000      	movs	r0, r0
	...

08015278 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8015278:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801527c:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 8015280:	af00      	add	r7, sp, #0
 8015282:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 8015286:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 801528a:	6020      	str	r0, [r4, #0]
 801528c:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 8015290:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 8015294:	6001      	str	r1, [r0, #0]
 8015296:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 801529a:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 801529e:	600a      	str	r2, [r1, #0]
 80152a0:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 80152a4:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 80152a8:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 80152aa:	2201      	movs	r2, #1
 80152ac:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 80152b0:	fa02 f303 	lsl.w	r3, r2, r3
 80152b4:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 80152b8:	2300      	movs	r3, #0
 80152ba:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 80152be:	2300      	movs	r3, #0
 80152c0:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 80152c4:	f004 b863 	b.w	801938e <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 80152c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80152cc:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	781b      	ldrb	r3, [r3, #0]
 80152d4:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 80152d8:	2301      	movs	r3, #1
 80152da:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80152de:	e015      	b.n	801530c <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 80152e0:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80152e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80152e8:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	4413      	add	r3, r2
 80152f0:	f993 2000 	ldrsb.w	r2, [r3]
 80152f4:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 80152f8:	4293      	cmp	r3, r2
 80152fa:	bfb8      	it	lt
 80152fc:	4613      	movlt	r3, r2
 80152fe:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 8015302:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8015306:	3301      	adds	r3, #1
 8015308:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801530c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015310:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015314:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	429a      	cmp	r2, r3
 801531c:	dbe0      	blt.n	80152e0 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 801531e:	2300      	movs	r3, #0
 8015320:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 8015324:	2300      	movs	r3, #0
 8015326:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 801532a:	2300      	movs	r3, #0
 801532c:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8015330:	f001 ba24 	b.w	801677c <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 8015334:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8015338:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801533c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	4413      	add	r3, r2
 8015344:	f993 3000 	ldrsb.w	r3, [r3]
 8015348:	461a      	mov	r2, r3
 801534a:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 801534e:	1ad3      	subs	r3, r2, r3
 8015350:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 8015354:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8015358:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 801535c:	429a      	cmp	r2, r3
 801535e:	f2c1 8208 	blt.w	8016772 <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 8015362:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8015366:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 801536a:	fb03 f202 	mul.w	r2, r3, r2
 801536e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015372:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8015376:	601a      	str	r2, [r3, #0]
 8015378:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801537c:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8015380:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015384:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801538c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015390:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8015394:	2300      	movs	r3, #0
 8015396:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801539c:	f04f 0300 	mov.w	r3, #0
 80153a0:	f607 0138 	addw	r1, r7, #2104	; 0x838
 80153a4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80153a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80153ac:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	0fdb      	lsrs	r3, r3, #31
 80153b4:	b2da      	uxtb	r2, r3
 80153b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80153ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	0fdb      	lsrs	r3, r3, #31
 80153c2:	b2db      	uxtb	r3, r3
 80153c4:	4053      	eors	r3, r2
 80153c6:	b2db      	uxtb	r3, r3
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d012      	beq.n	80153f2 <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 80153cc:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80153d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153d4:	2100      	movs	r1, #0
 80153d6:	f1d2 0001 	rsbs	r0, r2, #1
 80153da:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 80153de:	eb61 0303 	sbc.w	r3, r1, r3
 80153e2:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80153e6:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 80153ea:	f607 0238 	addw	r2, r7, #2104	; 0x838
 80153ee:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80153f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80153f6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	17da      	asrs	r2, r3, #31
 80153fe:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8015402:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 8015406:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801540a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	17da      	asrs	r2, r3, #31
 8015412:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8015416:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 801541a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801541e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015422:	460b      	mov	r3, r1
 8015424:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8015428:	fb02 f203 	mul.w	r2, r2, r3
 801542c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8015430:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 8015434:	e9c4 0100 	strd	r0, r1, [r4]
 8015438:	4601      	mov	r1, r0
 801543a:	fb01 f303 	mul.w	r3, r1, r3
 801543e:	4413      	add	r3, r2
 8015440:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8015444:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8015448:	fba2 1201 	umull	r1, r2, r2, r1
 801544c:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 8015450:	460a      	mov	r2, r1
 8015452:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 8015456:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 801545a:	4413      	add	r3, r2
 801545c:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8015460:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8015464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015468:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 801546c:	1851      	adds	r1, r2, r1
 801546e:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 8015472:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 8015476:	414b      	adcs	r3, r1
 8015478:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 801547c:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 8015480:	f607 0238 	addw	r2, r7, #2104	; 0x838
 8015484:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015488:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015490:	2b00      	cmp	r3, #0
 8015492:	da0a      	bge.n	80154aa <arm_softmax_s8+0x232>
 8015494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015498:	1851      	adds	r1, r2, r1
 801549a:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 801549e:	f143 0300 	adc.w	r3, r3, #0
 80154a2:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80154a6:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 80154aa:	f04f 0000 	mov.w	r0, #0
 80154ae:	f04f 0100 	mov.w	r1, #0
 80154b2:	0fd0      	lsrs	r0, r2, #31
 80154b4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80154b8:	17d9      	asrs	r1, r3, #31
 80154ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80154be:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80154c2:	4603      	mov	r3, r0
 80154c4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80154c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80154ca:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80154ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80154d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80154d6:	6812      	ldr	r2, [r2, #0]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	429a      	cmp	r2, r3
 80154dc:	d10e      	bne.n	80154fc <arm_softmax_s8+0x284>
 80154de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80154e2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80154ec:	d106      	bne.n	80154fc <arm_softmax_s8+0x284>
        result = Q31_MAX;
 80154ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80154f2:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80154f6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80154fa:	6013      	str	r3, [r2, #0]
    return result;
 80154fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015500:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968

// @note The following functions are used only for softmax layer, scaled bits = 5 assumed

__STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
{
    int32_t mask = 0;
 801550a:	2300      	movs	r3, #0
 801550c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 8015510:	2318      	movs	r3, #24
 8015512:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960

    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8015516:	2201      	movs	r2, #1
 8015518:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 801551c:	fa02 f303 	lsl.w	r3, r2, r3
 8015520:	1e5a      	subs	r2, r3, #1
 8015522:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8015526:	ea02 0103 	and.w	r1, r2, r3
 801552a:	2201      	movs	r2, #1
 801552c:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8015530:	fa02 f303 	lsl.w	r3, r2, r3
 8015534:	1acb      	subs	r3, r1, r3
 8015536:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 801553a:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 801553e:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8015542:	1ad3      	subs	r3, r2, r3
 8015544:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8015548:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801554c:	015b      	lsls	r3, r3, #5
 801554e:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8015552:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 8015556:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 801555a:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 801555e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8015562:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 8015566:	2300      	movs	r3, #0
 8015568:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 801556c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015570:	f04f 0300 	mov.w	r3, #0
 8015574:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8015578:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801557c:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8015580:	0fdb      	lsrs	r3, r3, #31
 8015582:	b2da      	uxtb	r2, r3
 8015584:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8015588:	0fdb      	lsrs	r3, r3, #31
 801558a:	b2db      	uxtb	r3, r3
 801558c:	4053      	eors	r3, r2
 801558e:	b2db      	uxtb	r3, r3
 8015590:	2b00      	cmp	r3, #0
 8015592:	d012      	beq.n	80155ba <arm_softmax_s8+0x342>
        mult = 1 - mult;
 8015594:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8015598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801559c:	2100      	movs	r1, #0
 801559e:	f1d2 0001 	rsbs	r0, r2, #1
 80155a2:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 80155a6:	eb61 0303 	sbc.w	r3, r1, r3
 80155aa:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 80155ae:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 80155b2:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80155b6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80155ba:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80155be:	17da      	asrs	r2, r3, #31
 80155c0:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 80155c4:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 80155c8:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80155cc:	17da      	asrs	r2, r3, #31
 80155ce:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 80155d2:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 80155d6:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80155da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80155de:	460b      	mov	r3, r1
 80155e0:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 80155e4:	fb02 f203 	mul.w	r2, r2, r3
 80155e8:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80155ec:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 80155f0:	e9c4 0100 	strd	r0, r1, [r4]
 80155f4:	4601      	mov	r1, r0
 80155f6:	fb01 f303 	mul.w	r3, r1, r3
 80155fa:	4413      	add	r3, r2
 80155fc:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8015600:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 8015604:	fba2 8901 	umull	r8, r9, r2, r1
 8015608:	444b      	add	r3, r9
 801560a:	4699      	mov	r9, r3
 801560c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8015610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015614:	eb12 0108 	adds.w	r1, r2, r8
 8015618:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 801561c:	eb43 0309 	adc.w	r3, r3, r9
 8015620:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8015624:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 8015628:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 801562c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015630:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8015634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015638:	2b00      	cmp	r3, #0
 801563a:	da0a      	bge.n	8015652 <arm_softmax_s8+0x3da>
 801563c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015640:	1851      	adds	r1, r2, r1
 8015642:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 8015646:	f143 0300 	adc.w	r3, r3, #0
 801564a:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 801564e:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8015652:	f04f 0000 	mov.w	r0, #0
 8015656:	f04f 0100 	mov.w	r1, #0
 801565a:	0fd0      	lsrs	r0, r2, #31
 801565c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015660:	17d9      	asrs	r1, r3, #31
 8015662:	4602      	mov	r2, r0
 8015664:	460b      	mov	r3, r1
 8015666:	4613      	mov	r3, r2
 8015668:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801566c:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8015670:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8015674:	429a      	cmp	r2, r3
 8015676:	d108      	bne.n	801568a <arm_softmax_s8+0x412>
 8015678:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 801567c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015680:	d103      	bne.n	801568a <arm_softmax_s8+0x412>
        result = Q31_MAX;
 8015682:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015686:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 801568a:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 801568e:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 8015692:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8015696:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 801569a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 801569e:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 80156a2:	2300      	movs	r3, #0
 80156a4:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 80156a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80156ac:	f04f 0300 	mov.w	r3, #0
 80156b0:	f607 1128 	addw	r1, r7, #2344	; 0x928
 80156b4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80156b8:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 80156bc:	0fdb      	lsrs	r3, r3, #31
 80156be:	b2da      	uxtb	r2, r3
 80156c0:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80156c4:	0fdb      	lsrs	r3, r3, #31
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	4053      	eors	r3, r2
 80156ca:	b2db      	uxtb	r3, r3
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d012      	beq.n	80156f6 <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 80156d0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80156d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156d8:	2100      	movs	r1, #0
 80156da:	f1d2 0001 	rsbs	r0, r2, #1
 80156de:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 80156e2:	eb61 0303 	sbc.w	r3, r1, r3
 80156e6:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 80156ea:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 80156ee:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80156f2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80156f6:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 80156fa:	17da      	asrs	r2, r3, #31
 80156fc:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8015700:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 8015704:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8015708:	17da      	asrs	r2, r3, #31
 801570a:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 801570e:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 8015712:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8015716:	e9d3 0100 	ldrd	r0, r1, [r3]
 801571a:	460b      	mov	r3, r1
 801571c:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 8015720:	fb02 f203 	mul.w	r2, r2, r3
 8015724:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8015728:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 801572c:	e9c4 0100 	strd	r0, r1, [r4]
 8015730:	4601      	mov	r1, r0
 8015732:	fb01 f303 	mul.w	r3, r1, r3
 8015736:	4413      	add	r3, r2
 8015738:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 801573c:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 8015740:	fba2 ab01 	umull	sl, fp, r2, r1
 8015744:	445b      	add	r3, fp
 8015746:	469b      	mov	fp, r3
 8015748:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015750:	eb12 010a 	adds.w	r1, r2, sl
 8015754:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 8015758:	eb43 030b 	adc.w	r3, r3, fp
 801575c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8015760:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 8015764:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8015768:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801576c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8015770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015774:	2b00      	cmp	r3, #0
 8015776:	da0a      	bge.n	801578e <arm_softmax_s8+0x516>
 8015778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801577c:	1851      	adds	r1, r2, r1
 801577e:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 8015782:	f143 0300 	adc.w	r3, r3, #0
 8015786:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 801578a:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 801578e:	f04f 0000 	mov.w	r0, #0
 8015792:	f04f 0100 	mov.w	r1, #0
 8015796:	0fd0      	lsrs	r0, r2, #31
 8015798:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801579c:	17d9      	asrs	r1, r3, #31
 801579e:	4602      	mov	r2, r0
 80157a0:	460b      	mov	r3, r1
 80157a2:	4613      	mov	r3, r2
 80157a4:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80157a8:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 80157ac:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d108      	bne.n	80157c6 <arm_softmax_s8+0x54e>
 80157b4:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 80157b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80157bc:	d103      	bne.n	80157c6 <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 80157be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80157c2:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 80157c6:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 80157ca:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 80157ce:	2300      	movs	r3, #0
 80157d0:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 80157d4:	2304      	movs	r3, #4
 80157d6:	3b01      	subs	r3, #1
 80157d8:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 80157dc:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 80157e0:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80157e4:	4013      	ands	r3, r2
 80157e6:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 80157ea:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80157ee:	109b      	asrs	r3, r3, #2
 80157f0:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 80157f4:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80157f8:	105b      	asrs	r3, r3, #1
 80157fa:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 80157fe:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8015802:	2b00      	cmp	r3, #0
 8015804:	da04      	bge.n	8015810 <arm_softmax_s8+0x598>
        threshold++;
 8015806:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 801580a:	3301      	adds	r3, #1
 801580c:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 8015810:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 8015814:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8015818:	429a      	cmp	r2, r3
 801581a:	dd04      	ble.n	8015826 <arm_softmax_s8+0x5ae>
        result++;
 801581c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8015820:	3301      	adds	r3, #1
 8015822:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 8015826:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 801582a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 801582e:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8015832:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8015836:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 801583a:	2300      	movs	r3, #0
 801583c:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 8015840:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015844:	f04f 0300 	mov.w	r3, #0
 8015848:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 801584c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015850:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8015854:	0fdb      	lsrs	r3, r3, #31
 8015856:	b2da      	uxtb	r2, r3
 8015858:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 801585c:	0fdb      	lsrs	r3, r3, #31
 801585e:	b2db      	uxtb	r3, r3
 8015860:	4053      	eors	r3, r2
 8015862:	b2db      	uxtb	r3, r3
 8015864:	2b00      	cmp	r3, #0
 8015866:	d012      	beq.n	801588e <arm_softmax_s8+0x616>
        mult = 1 - mult;
 8015868:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015870:	2100      	movs	r1, #0
 8015872:	f1d2 0001 	rsbs	r0, r2, #1
 8015876:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 801587a:	eb61 0303 	sbc.w	r3, r1, r3
 801587e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8015882:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8015886:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 801588a:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 801588e:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8015892:	17da      	asrs	r2, r3, #31
 8015894:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8015898:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 801589c:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 80158a0:	17da      	asrs	r2, r3, #31
 80158a2:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 80158a6:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 80158aa:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80158ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80158b2:	460b      	mov	r3, r1
 80158b4:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 80158b8:	fb02 f203 	mul.w	r2, r2, r3
 80158bc:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80158c0:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 80158c4:	e9cc 0100 	strd	r0, r1, [ip]
 80158c8:	4601      	mov	r1, r0
 80158ca:	fb01 f303 	mul.w	r3, r1, r3
 80158ce:	4413      	add	r3, r2
 80158d0:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 80158d4:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 80158d8:	fba2 5601 	umull	r5, r6, r2, r1
 80158dc:	4433      	add	r3, r6
 80158de:	461e      	mov	r6, r3
 80158e0:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 80158e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158e8:	1951      	adds	r1, r2, r5
 80158ea:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 80158ee:	4173      	adcs	r3, r6
 80158f0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80158f4:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 80158f8:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 80158fc:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8015900:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8015904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015908:	2b00      	cmp	r3, #0
 801590a:	da0a      	bge.n	8015922 <arm_softmax_s8+0x6aa>
 801590c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015910:	1851      	adds	r1, r2, r1
 8015912:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 8015916:	f143 0300 	adc.w	r3, r3, #0
 801591a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 801591e:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8015922:	f04f 0000 	mov.w	r0, #0
 8015926:	f04f 0100 	mov.w	r1, #0
 801592a:	0fd0      	lsrs	r0, r2, #31
 801592c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015930:	17d9      	asrs	r1, r3, #31
 8015932:	4602      	mov	r2, r0
 8015934:	460b      	mov	r3, r1
 8015936:	4613      	mov	r3, r2
 8015938:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801593c:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8015940:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8015944:	429a      	cmp	r2, r3
 8015946:	d108      	bne.n	801595a <arm_softmax_s8+0x6e2>
 8015948:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 801594c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015950:	d103      	bne.n	801595a <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 8015952:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015956:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 801595a:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908

    int32_t result = 1895147668 +
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 801595e:	4423      	add	r3, r4
 8015960:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 8015964:	2300      	movs	r3, #0
 8015966:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 801596a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801596e:	f04f 0300 	mov.w	r3, #0
 8015972:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 8015976:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801597a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 801597e:	0fdb      	lsrs	r3, r3, #31
 8015980:	b2da      	uxtb	r2, r3
 8015982:	2300      	movs	r3, #0
 8015984:	4053      	eors	r3, r2
 8015986:	b2db      	uxtb	r3, r3
 8015988:	2b00      	cmp	r3, #0
 801598a:	d012      	beq.n	80159b2 <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 801598c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8015990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015994:	2100      	movs	r1, #0
 8015996:	f1d2 0001 	rsbs	r0, r2, #1
 801599a:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 801599e:	eb61 0303 	sbc.w	r3, r1, r3
 80159a2:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 80159a6:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 80159aa:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 80159ae:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80159b2:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 80159b6:	17da      	asrs	r2, r3, #31
 80159b8:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 80159bc:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 80159c0:	a3f0      	add	r3, pc, #960	; (adr r3, 8015d84 <arm_softmax_s8+0xb0c>)
 80159c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159c6:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 80159ca:	fb02 f001 	mul.w	r0, r2, r1
 80159ce:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 80159d2:	fb01 f103 	mul.w	r1, r1, r3
 80159d6:	4401      	add	r1, r0
 80159d8:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 80159dc:	fba0 2302 	umull	r2, r3, r0, r2
 80159e0:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 80159e4:	4613      	mov	r3, r2
 80159e6:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 80159ea:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80159ee:	18cb      	adds	r3, r1, r3
 80159f0:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 80159f4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80159f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159fc:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 8015a00:	1851      	adds	r1, r2, r1
 8015a02:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8015a06:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 8015a0a:	414b      	adcs	r3, r1
 8015a0c:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8015a10:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 8015a14:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8015a18:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015a1c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8015a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	da0a      	bge.n	8015a3e <arm_softmax_s8+0x7c6>
 8015a28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015a2c:	1851      	adds	r1, r2, r1
 8015a2e:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8015a32:	f143 0300 	adc.w	r3, r3, #0
 8015a36:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8015a3a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8015a3e:	f04f 0000 	mov.w	r0, #0
 8015a42:	f04f 0100 	mov.w	r1, #0
 8015a46:	0fd0      	lsrs	r0, r2, #31
 8015a48:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015a4c:	17d9      	asrs	r1, r3, #31
 8015a4e:	4602      	mov	r2, r0
 8015a50:	460b      	mov	r3, r1
 8015a52:	4613      	mov	r3, r2
 8015a54:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015a58:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8015a5c:	4bc6      	ldr	r3, [pc, #792]	; (8015d78 <arm_softmax_s8+0xb00>)
 8015a5e:	429a      	cmp	r2, r3
 8015a60:	d108      	bne.n	8015a74 <arm_softmax_s8+0x7fc>
 8015a62:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8015a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015a6a:	d103      	bne.n	8015a74 <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 8015a6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015a70:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 8015a74:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8015a78:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8015a7c:	4413      	add	r3, r2
 8015a7e:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 8015a82:	2300      	movs	r3, #0
 8015a84:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015a88:	2302      	movs	r3, #2
 8015a8a:	3b01      	subs	r3, #1
 8015a8c:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 8015a90:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 8015a94:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8015a98:	4013      	ands	r3, r2
 8015a9a:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 8015a9e:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 8015aa2:	105b      	asrs	r3, r3, #1
 8015aa4:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 8015aa8:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8015aac:	105b      	asrs	r3, r3, #1
 8015aae:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 8015ab2:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	da04      	bge.n	8015ac4 <arm_softmax_s8+0x84c>
        threshold++;
 8015aba:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8015abe:	3301      	adds	r3, #1
 8015ac0:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 8015ac4:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8015ac8:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8015acc:	429a      	cmp	r2, r3
 8015ace:	dd04      	ble.n	8015ada <arm_softmax_s8+0x862>
        result++;
 8015ad0:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8015ad4:	3301      	adds	r3, #1
 8015ad6:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 8015ada:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8015ade:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8015ae2:	4413      	add	r3, r2
 8015ae4:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 8015ae8:	2300      	movs	r3, #0
 8015aea:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 8015aee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015af2:	f04f 0300 	mov.w	r3, #0
 8015af6:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8015afa:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015afe:	2200      	movs	r2, #0
 8015b00:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8015b04:	0fdb      	lsrs	r3, r3, #31
 8015b06:	b2db      	uxtb	r3, r3
 8015b08:	4053      	eors	r3, r2
 8015b0a:	b2db      	uxtb	r3, r3
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d012      	beq.n	8015b36 <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 8015b10:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8015b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b18:	2100      	movs	r1, #0
 8015b1a:	f1d2 0001 	rsbs	r0, r2, #1
 8015b1e:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 8015b22:	eb61 0303 	sbc.w	r3, r1, r3
 8015b26:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8015b2a:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 8015b2e:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8015b32:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015b36:	a18c      	add	r1, pc, #560	; (adr r1, 8015d68 <arm_softmax_s8+0xaf0>)
 8015b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b3c:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8015b40:	17da      	asrs	r2, r3, #31
 8015b42:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8015b46:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 8015b4a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8015b4e:	fb03 f201 	mul.w	r2, r3, r1
 8015b52:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8015b56:	fb00 f303 	mul.w	r3, r0, r3
 8015b5a:	4413      	add	r3, r2
 8015b5c:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8015b60:	fba0 1202 	umull	r1, r2, r0, r2
 8015b64:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 8015b68:	460a      	mov	r2, r1
 8015b6a:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 8015b6e:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8015b72:	4413      	add	r3, r2
 8015b74:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8015b78:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8015b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b80:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8015b84:	1851      	adds	r1, r2, r1
 8015b86:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8015b8a:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 8015b8e:	414b      	adcs	r3, r1
 8015b90:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8015b94:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 8015b98:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8015b9c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015ba0:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8015ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	da0a      	bge.n	8015bc2 <arm_softmax_s8+0x94a>
 8015bac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015bb0:	1851      	adds	r1, r2, r1
 8015bb2:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 8015bb6:	f143 0300 	adc.w	r3, r3, #0
 8015bba:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8015bbe:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8015bc2:	f04f 0000 	mov.w	r0, #0
 8015bc6:	f04f 0100 	mov.w	r1, #0
 8015bca:	0fd0      	lsrs	r0, r2, #31
 8015bcc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015bd0:	17d9      	asrs	r1, r3, #31
 8015bd2:	4602      	mov	r2, r0
 8015bd4:	460b      	mov	r3, r1
 8015bd6:	4613      	mov	r3, r2
 8015bd8:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 8015bdc:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 8015be0:	4b66      	ldr	r3, [pc, #408]	; (8015d7c <arm_softmax_s8+0xb04>)
 8015be2:	4413      	add	r3, r2
 8015be4:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
 8015be8:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015bec:	1c53      	adds	r3, r2, #1
 8015bee:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	fa03 f202 	lsl.w	r2, r3, r2
 8015bf8:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015bfc:	4013      	ands	r3, r2
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d002      	beq.n	8015c08 <arm_softmax_s8+0x990>
 8015c02:	f04f 33ff 	mov.w	r3, #4294967295
 8015c06:	e000      	b.n	8015c0a <arm_softmax_s8+0x992>
 8015c08:	2300      	movs	r3, #0
 8015c0a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8015c0e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015c12:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 8015c16:	2300      	movs	r3, #0
 8015c18:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 8015c1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015c20:	f04f 0300 	mov.w	r3, #0
 8015c24:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8015c28:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015c2c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8015c30:	0fdb      	lsrs	r3, r3, #31
 8015c32:	b2da      	uxtb	r2, r3
 8015c34:	2300      	movs	r3, #0
 8015c36:	4053      	eors	r3, r2
 8015c38:	b2db      	uxtb	r3, r3
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d012      	beq.n	8015c64 <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 8015c3e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8015c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c46:	2100      	movs	r1, #0
 8015c48:	f1d2 0001 	rsbs	r0, r2, #1
 8015c4c:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 8015c50:	eb61 0303 	sbc.w	r3, r1, r3
 8015c54:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8015c58:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 8015c5c:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8015c60:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015c64:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8015c68:	17da      	asrs	r2, r3, #31
 8015c6a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8015c6e:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 8015c72:	a33f      	add	r3, pc, #252	; (adr r3, 8015d70 <arm_softmax_s8+0xaf8>)
 8015c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c78:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8015c7c:	fb02 f001 	mul.w	r0, r2, r1
 8015c80:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8015c84:	fb01 f103 	mul.w	r1, r1, r3
 8015c88:	4401      	add	r1, r0
 8015c8a:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8015c8e:	fba0 2302 	umull	r2, r3, r0, r2
 8015c92:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8015c96:	4613      	mov	r3, r2
 8015c98:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 8015c9c:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8015ca0:	18cb      	adds	r3, r1, r3
 8015ca2:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8015ca6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8015caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cae:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8015cb2:	1851      	adds	r1, r2, r1
 8015cb4:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8015cb8:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8015cbc:	414b      	adcs	r3, r1
 8015cbe:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8015cc2:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 8015cc6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8015cca:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015cce:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8015cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	da0a      	bge.n	8015cf0 <arm_softmax_s8+0xa78>
 8015cda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015cde:	1851      	adds	r1, r2, r1
 8015ce0:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8015ce4:	f143 0300 	adc.w	r3, r3, #0
 8015ce8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8015cec:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8015cf0:	f04f 0000 	mov.w	r0, #0
 8015cf4:	f04f 0100 	mov.w	r1, #0
 8015cf8:	0fd0      	lsrs	r0, r2, #31
 8015cfa:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015cfe:	17d9      	asrs	r1, r3, #31
 8015d00:	4602      	mov	r2, r0
 8015d02:	460b      	mov	r3, r1
 8015d04:	4613      	mov	r3, r2
 8015d06:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015d0a:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8015d0e:	4b1c      	ldr	r3, [pc, #112]	; (8015d80 <arm_softmax_s8+0xb08>)
 8015d10:	429a      	cmp	r2, r3
 8015d12:	d108      	bne.n	8015d26 <arm_softmax_s8+0xaae>
 8015d14:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8015d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015d1c:	d103      	bne.n	8015d26 <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 8015d1e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015d22:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 8015d26:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 8015d2a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015d2e:	ea02 0103 	and.w	r1, r2, r3
 8015d32:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015d36:	43da      	mvns	r2, r3
 8015d38:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015d3c:	4013      	ands	r3, r2
 8015d3e:	404b      	eors	r3, r1
 8015d40:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 8015d44:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015d48:	1c53      	adds	r3, r2, #1
 8015d4a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015d4e:	2301      	movs	r3, #1
 8015d50:	fa03 f202 	lsl.w	r2, r3, r2
 8015d54:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015d58:	4013      	ands	r3, r2
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d016      	beq.n	8015d8c <arm_softmax_s8+0xb14>
 8015d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d62:	e014      	b.n	8015d8e <arm_softmax_s8+0xb16>
 8015d64:	f3af 8000 	nop.w
 8015d68:	70f5a894 	.word	0x70f5a894
 8015d6c:	00000000 	.word	0x00000000
 8015d70:	63afbe7b 	.word	0x63afbe7b
 8015d74:	00000000 	.word	0x00000000
 8015d78:	2aaaaaab 	.word	0x2aaaaaab
 8015d7c:	70f5a894 	.word	0x70f5a894
 8015d80:	63afbe7b 	.word	0x63afbe7b
 8015d84:	2aaaaaab 	.word	0x2aaaaaab
 8015d88:	00000000 	.word	0x00000000
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8015d92:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015d96:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 8015d9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d9e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8015da2:	2300      	movs	r3, #0
 8015da4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015da6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015daa:	f04f 0300 	mov.w	r3, #0
 8015dae:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 8015db2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015db6:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8015dba:	0fdb      	lsrs	r3, r3, #31
 8015dbc:	b2da      	uxtb	r2, r3
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	4053      	eors	r3, r2
 8015dc2:	b2db      	uxtb	r3, r3
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d012      	beq.n	8015dee <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 8015dc8:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8015dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dd0:	2100      	movs	r1, #0
 8015dd2:	f1d2 0001 	rsbs	r0, r2, #1
 8015dd6:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 8015dda:	eb61 0303 	sbc.w	r3, r1, r3
 8015dde:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8015de2:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 8015de6:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8015dea:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015dee:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8015df2:	17da      	asrs	r2, r3, #31
 8015df4:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8015df8:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 8015dfc:	a3a8      	add	r3, pc, #672	; (adr r3, 80160a0 <arm_softmax_s8+0xe28>)
 8015dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e02:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 8015e06:	fb02 f001 	mul.w	r0, r2, r1
 8015e0a:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 8015e0e:	fb01 f103 	mul.w	r1, r1, r3
 8015e12:	4401      	add	r1, r0
 8015e14:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 8015e18:	fba0 2302 	umull	r2, r3, r0, r2
 8015e1c:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8015e20:	4613      	mov	r3, r2
 8015e22:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8015e26:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8015e2a:	18cb      	adds	r3, r1, r3
 8015e2c:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8015e30:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8015e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e38:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8015e3c:	1851      	adds	r1, r2, r1
 8015e3e:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8015e42:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8015e46:	414b      	adcs	r3, r1
 8015e48:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8015e4c:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 8015e50:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8015e54:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015e58:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8015e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	da0a      	bge.n	8015e7a <arm_softmax_s8+0xc02>
 8015e64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015e68:	1851      	adds	r1, r2, r1
 8015e6a:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8015e6e:	f143 0300 	adc.w	r3, r3, #0
 8015e72:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8015e76:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8015e7a:	f04f 0000 	mov.w	r0, #0
 8015e7e:	f04f 0100 	mov.w	r1, #0
 8015e82:	0fd0      	lsrs	r0, r2, #31
 8015e84:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015e88:	17d9      	asrs	r1, r3, #31
 8015e8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e8e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8015e92:	4603      	mov	r3, r0
 8015e94:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015e96:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 8015e9a:	4b7f      	ldr	r3, [pc, #508]	; (8016098 <arm_softmax_s8+0xe20>)
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	d10b      	bne.n	8015eb8 <arm_softmax_s8+0xc40>
 8015ea0:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8015ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015ea8:	d106      	bne.n	8015eb8 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 8015eaa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015eae:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8015eb2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015eb6:	6013      	str	r3, [r2, #0]
    return result;
 8015eb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ebc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8015ec0:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8015ec2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015ec6:	ea02 0103 	and.w	r1, r2, r3
 8015eca:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015ece:	43da      	mvns	r2, r3
 8015ed0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015ed4:	4013      	ands	r3, r2
 8015ed6:	404b      	eors	r3, r1
 8015ed8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 8015edc:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015ee0:	1c53      	adds	r3, r2, #1
 8015ee2:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	fa03 f202 	lsl.w	r2, r3, r2
 8015eec:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015ef0:	4013      	ands	r3, r2
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d002      	beq.n	8015efc <arm_softmax_s8+0xc84>
 8015ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8015efa:	e000      	b.n	8015efe <arm_softmax_s8+0xc86>
 8015efc:	2300      	movs	r3, #0
 8015efe:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8015f02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f06:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8015f0a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015f0e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015f10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f14:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015f18:	2300      	movs	r3, #0
 8015f1a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015f20:	f04f 0300 	mov.w	r3, #0
 8015f24:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 8015f28:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015f2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	0fdb      	lsrs	r3, r3, #31
 8015f38:	b2da      	uxtb	r2, r3
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	4053      	eors	r3, r2
 8015f3e:	b2db      	uxtb	r3, r3
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d012      	beq.n	8015f6a <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 8015f44:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8015f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f4c:	2100      	movs	r1, #0
 8015f4e:	f1d2 0001 	rsbs	r0, r2, #1
 8015f52:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 8015f56:	eb61 0303 	sbc.w	r3, r1, r3
 8015f5a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8015f5e:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 8015f62:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8015f66:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015f6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	17da      	asrs	r2, r3, #31
 8015f76:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8015f7a:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 8015f7e:	a344      	add	r3, pc, #272	; (adr r3, 8016090 <arm_softmax_s8+0xe18>)
 8015f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f84:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8015f88:	fb02 f001 	mul.w	r0, r2, r1
 8015f8c:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 8015f90:	fb01 f103 	mul.w	r1, r1, r3
 8015f94:	4401      	add	r1, r0
 8015f96:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 8015f9a:	fba0 2302 	umull	r2, r3, r0, r2
 8015f9e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8015fa2:	4613      	mov	r3, r2
 8015fa4:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8015fa8:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8015fac:	18cb      	adds	r3, r1, r3
 8015fae:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8015fb2:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8015fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fba:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8015fbe:	1851      	adds	r1, r2, r1
 8015fc0:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8015fc4:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8015fc8:	414b      	adcs	r3, r1
 8015fca:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8015fce:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 8015fd2:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8015fd6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015fda:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8015fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	da0a      	bge.n	8015ffc <arm_softmax_s8+0xd84>
 8015fe6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015fea:	1851      	adds	r1, r2, r1
 8015fec:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8015ff0:	f143 0300 	adc.w	r3, r3, #0
 8015ff4:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8015ff8:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8015ffc:	f04f 0000 	mov.w	r0, #0
 8016000:	f04f 0100 	mov.w	r1, #0
 8016004:	0fd0      	lsrs	r0, r2, #31
 8016006:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801600a:	17d9      	asrs	r1, r3, #31
 801600c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016010:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8016014:	4603      	mov	r3, r0
 8016016:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016018:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801601c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8016020:	681a      	ldr	r2, [r3, #0]
 8016022:	4b1e      	ldr	r3, [pc, #120]	; (801609c <arm_softmax_s8+0xe24>)
 8016024:	429a      	cmp	r2, r3
 8016026:	d10e      	bne.n	8016046 <arm_softmax_s8+0xdce>
 8016028:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801602c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016036:	d106      	bne.n	8016046 <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 8016038:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801603c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8016040:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016044:	6013      	str	r3, [r2, #0]
    return result;
 8016046:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801604a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801604e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8016050:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8016054:	ea02 0103 	and.w	r1, r2, r3
 8016058:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801605c:	43da      	mvns	r2, r3
 801605e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8016062:	4013      	ands	r3, r2
 8016064:	404b      	eors	r3, r1
 8016066:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 801606a:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 801606e:	1c53      	adds	r3, r2, #1
 8016070:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8016074:	2301      	movs	r3, #1
 8016076:	fa03 f202 	lsl.w	r2, r3, r2
 801607a:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801607e:	4013      	ands	r3, r2
 8016080:	2b00      	cmp	r3, #0
 8016082:	d011      	beq.n	80160a8 <arm_softmax_s8+0xe30>
 8016084:	f04f 33ff 	mov.w	r3, #4294967295
 8016088:	e00f      	b.n	80160aa <arm_softmax_s8+0xe32>
 801608a:	bf00      	nop
 801608c:	f3af 8000 	nop.w
 8016090:	2f16ac6c 	.word	0x2f16ac6c
 8016094:	00000000 	.word	0x00000000
 8016098:	4da2cbf2 	.word	0x4da2cbf2
 801609c:	2f16ac6c 	.word	0x2f16ac6c
 80160a0:	4da2cbf2 	.word	0x4da2cbf2
 80160a4:	00000000 	.word	0x00000000
 80160a8:	2300      	movs	r3, #0
 80160aa:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80160ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160b2:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80160b6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80160ba:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80160bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160c0:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 80160c4:	2300      	movs	r3, #0
 80160c6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80160c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80160cc:	f04f 0300 	mov.w	r3, #0
 80160d0:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 80160d4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80160d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	0fdb      	lsrs	r3, r3, #31
 80160e4:	b2da      	uxtb	r2, r3
 80160e6:	2300      	movs	r3, #0
 80160e8:	4053      	eors	r3, r2
 80160ea:	b2db      	uxtb	r3, r3
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d012      	beq.n	8016116 <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 80160f0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80160f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160f8:	2100      	movs	r1, #0
 80160fa:	f1d2 0001 	rsbs	r0, r2, #1
 80160fe:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 8016102:	eb61 0303 	sbc.w	r3, r1, r3
 8016106:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801610a:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 801610e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8016112:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016116:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801611a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	17da      	asrs	r2, r3, #31
 8016122:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8016126:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 801612a:	a3ab      	add	r3, pc, #684	; (adr r3, 80163d8 <arm_softmax_s8+0x1160>)
 801612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016130:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 8016134:	fb02 f001 	mul.w	r0, r2, r1
 8016138:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 801613c:	fb01 f103 	mul.w	r1, r1, r3
 8016140:	4401      	add	r1, r0
 8016142:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 8016146:	fba0 2302 	umull	r2, r3, r0, r2
 801614a:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 801614e:	4613      	mov	r3, r2
 8016150:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 8016154:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8016158:	18cb      	adds	r3, r1, r3
 801615a:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 801615e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8016162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016166:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 801616a:	1851      	adds	r1, r2, r1
 801616c:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 8016170:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 8016174:	414b      	adcs	r3, r1
 8016176:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 801617a:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 801617e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8016182:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016186:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801618e:	2b00      	cmp	r3, #0
 8016190:	da0a      	bge.n	80161a8 <arm_softmax_s8+0xf30>
 8016192:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016196:	1851      	adds	r1, r2, r1
 8016198:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 801619c:	f143 0300 	adc.w	r3, r3, #0
 80161a0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80161a4:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80161a8:	f04f 0000 	mov.w	r0, #0
 80161ac:	f04f 0100 	mov.w	r1, #0
 80161b0:	0fd0      	lsrs	r0, r2, #31
 80161b2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80161b6:	17d9      	asrs	r1, r3, #31
 80161b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161bc:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 80161c0:	4603      	mov	r3, r0
 80161c2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80161c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80161cc:	681a      	ldr	r2, [r3, #0]
 80161ce:	4b80      	ldr	r3, [pc, #512]	; (80163d0 <arm_softmax_s8+0x1158>)
 80161d0:	429a      	cmp	r2, r3
 80161d2:	d10e      	bne.n	80161f2 <arm_softmax_s8+0xf7a>
 80161d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80161e2:	d106      	bne.n	80161f2 <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 80161e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161e8:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 80161ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80161f0:	6013      	str	r3, [r2, #0]
    return result;
 80161f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80161fa:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 80161fc:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8016200:	ea02 0103 	and.w	r1, r2, r3
 8016204:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8016208:	43da      	mvns	r2, r3
 801620a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801620e:	4013      	ands	r3, r2
 8016210:	404b      	eors	r3, r1
 8016212:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 8016216:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 801621a:	1c53      	adds	r3, r2, #1
 801621c:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8016220:	2301      	movs	r3, #1
 8016222:	fa03 f202 	lsl.w	r2, r3, r2
 8016226:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801622a:	4013      	ands	r3, r2
 801622c:	2b00      	cmp	r3, #0
 801622e:	d002      	beq.n	8016236 <arm_softmax_s8+0xfbe>
 8016230:	f04f 33ff 	mov.w	r3, #4294967295
 8016234:	e000      	b.n	8016238 <arm_softmax_s8+0xfc0>
 8016236:	2300      	movs	r3, #0
 8016238:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801623c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016240:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8016244:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8016248:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801624a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801624e:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8016252:	2300      	movs	r3, #0
 8016254:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801625a:	f04f 0300 	mov.w	r3, #0
 801625e:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 8016262:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016266:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801626a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	0fdb      	lsrs	r3, r3, #31
 8016272:	b2da      	uxtb	r2, r3
 8016274:	2300      	movs	r3, #0
 8016276:	4053      	eors	r3, r2
 8016278:	b2db      	uxtb	r3, r3
 801627a:	2b00      	cmp	r3, #0
 801627c:	d012      	beq.n	80162a4 <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 801627e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8016282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016286:	2100      	movs	r1, #0
 8016288:	f1d2 0001 	rsbs	r0, r2, #1
 801628c:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 8016290:	eb61 0303 	sbc.w	r3, r1, r3
 8016294:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8016298:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 801629c:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 80162a0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80162a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	17da      	asrs	r2, r3, #31
 80162b0:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 80162b4:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 80162b8:	a343      	add	r3, pc, #268	; (adr r3, 80163c8 <arm_softmax_s8+0x1150>)
 80162ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162be:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 80162c2:	fb02 f001 	mul.w	r0, r2, r1
 80162c6:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 80162ca:	fb01 f103 	mul.w	r1, r1, r3
 80162ce:	4401      	add	r1, r0
 80162d0:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 80162d4:	fba0 2302 	umull	r2, r3, r0, r2
 80162d8:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80162dc:	4613      	mov	r3, r2
 80162de:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 80162e2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80162e6:	18cb      	adds	r3, r1, r3
 80162e8:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80162ec:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80162f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162f4:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 80162f8:	1851      	adds	r1, r2, r1
 80162fa:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 80162fe:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 8016302:	414b      	adcs	r3, r1
 8016304:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8016308:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 801630c:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8016310:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016314:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8016318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801631c:	2b00      	cmp	r3, #0
 801631e:	da0a      	bge.n	8016336 <arm_softmax_s8+0x10be>
 8016320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016324:	1851      	adds	r1, r2, r1
 8016326:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 801632a:	f143 0300 	adc.w	r3, r3, #0
 801632e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8016332:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8016336:	f04f 0000 	mov.w	r0, #0
 801633a:	f04f 0100 	mov.w	r1, #0
 801633e:	0fd0      	lsrs	r0, r2, #31
 8016340:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016344:	17d9      	asrs	r1, r3, #31
 8016346:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801634a:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 801634e:	4603      	mov	r3, r0
 8016350:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016352:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016356:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801635a:	681a      	ldr	r2, [r3, #0]
 801635c:	4b1d      	ldr	r3, [pc, #116]	; (80163d4 <arm_softmax_s8+0x115c>)
 801635e:	429a      	cmp	r2, r3
 8016360:	d10e      	bne.n	8016380 <arm_softmax_s8+0x1108>
 8016362:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016366:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016370:	d106      	bne.n	8016380 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 8016372:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016376:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 801637a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801637e:	6013      	str	r3, [r2, #0]
    return result;
 8016380:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016388:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 801638a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801638e:	ea02 0103 	and.w	r1, r2, r3
 8016392:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8016396:	43da      	mvns	r2, r3
 8016398:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801639c:	4013      	ands	r3, r2
 801639e:	404b      	eors	r3, r1
 80163a0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 80163a4:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 80163a8:	1c53      	adds	r3, r2, #1
 80163aa:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80163ae:	2301      	movs	r3, #1
 80163b0:	fa03 f202 	lsl.w	r2, r3, r2
 80163b4:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80163b8:	4013      	ands	r3, r2
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d010      	beq.n	80163e0 <arm_softmax_s8+0x1168>
 80163be:	f04f 33ff 	mov.w	r3, #4294967295
 80163c2:	e00e      	b.n	80163e2 <arm_softmax_s8+0x116a>
 80163c4:	f3af 8000 	nop.w
 80163c8:	02582ab7 	.word	0x02582ab7
 80163cc:	00000000 	.word	0x00000000
 80163d0:	1152aaa4 	.word	0x1152aaa4
 80163d4:	02582ab7 	.word	0x02582ab7
 80163d8:	1152aaa4 	.word	0x1152aaa4
 80163dc:	00000000 	.word	0x00000000
 80163e0:	2300      	movs	r3, #0
 80163e2:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80163e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163ea:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 80163ee:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80163f2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80163f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163f8:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80163fc:	2300      	movs	r3, #0
 80163fe:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016400:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016404:	f04f 0300 	mov.w	r3, #0
 8016408:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 801640c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016410:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016414:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	0fdb      	lsrs	r3, r3, #31
 801641c:	b2da      	uxtb	r2, r3
 801641e:	2300      	movs	r3, #0
 8016420:	4053      	eors	r3, r2
 8016422:	b2db      	uxtb	r3, r3
 8016424:	2b00      	cmp	r3, #0
 8016426:	d012      	beq.n	801644e <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 8016428:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016430:	2100      	movs	r1, #0
 8016432:	f1d2 0001 	rsbs	r0, r2, #1
 8016436:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 801643a:	eb61 0303 	sbc.w	r3, r1, r3
 801643e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8016442:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 8016446:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 801644a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801644e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016452:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	17da      	asrs	r2, r3, #31
 801645a:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 801645e:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 8016462:	4ad3      	ldr	r2, [pc, #844]	; (80167b0 <arm_softmax_s8+0x1538>)
 8016464:	f04f 0300 	mov.w	r3, #0
 8016468:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 801646c:	fb02 f001 	mul.w	r0, r2, r1
 8016470:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8016474:	fb01 f103 	mul.w	r1, r1, r3
 8016478:	4401      	add	r1, r0
 801647a:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 801647e:	fba0 2302 	umull	r2, r3, r0, r2
 8016482:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8016486:	4613      	mov	r3, r2
 8016488:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 801648c:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8016490:	18cb      	adds	r3, r1, r3
 8016492:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8016496:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801649e:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 80164a2:	1851      	adds	r1, r2, r1
 80164a4:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 80164a8:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 80164ac:	414b      	adcs	r3, r1
 80164ae:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80164b2:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 80164b6:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80164ba:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80164be:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80164c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	da0a      	bge.n	80164e0 <arm_softmax_s8+0x1268>
 80164ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80164ce:	1851      	adds	r1, r2, r1
 80164d0:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 80164d4:	f143 0300 	adc.w	r3, r3, #0
 80164d8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80164dc:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 80164e0:	f04f 0000 	mov.w	r0, #0
 80164e4:	f04f 0100 	mov.w	r1, #0
 80164e8:	0fd0      	lsrs	r0, r2, #31
 80164ea:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80164ee:	17d9      	asrs	r1, r3, #31
 80164f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80164f4:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80164f8:	4603      	mov	r3, r0
 80164fa:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80164fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016500:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8016504:	681a      	ldr	r2, [r3, #0]
 8016506:	4baa      	ldr	r3, [pc, #680]	; (80167b0 <arm_softmax_s8+0x1538>)
 8016508:	429a      	cmp	r2, r3
 801650a:	d10e      	bne.n	801652a <arm_softmax_s8+0x12b2>
 801650c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016510:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801651a:	d106      	bne.n	801652a <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 801651c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016520:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8016524:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016528:	6013      	str	r3, [r2, #0]
    return result;
 801652a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801652e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016532:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8016534:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8016538:	ea02 0103 	and.w	r1, r2, r3
 801653c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8016540:	43da      	mvns	r2, r3
 8016542:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8016546:	4013      	ands	r3, r2
 8016548:	404b      	eors	r3, r1
 801654a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 801654e:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8016552:	1c53      	adds	r3, r2, #1
 8016554:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8016558:	2301      	movs	r3, #1
 801655a:	fa03 f202 	lsl.w	r2, r3, r2
 801655e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8016562:	4013      	ands	r3, r2
 8016564:	2b00      	cmp	r3, #0
 8016566:	d002      	beq.n	801656e <arm_softmax_s8+0x12f6>
 8016568:	f04f 33ff 	mov.w	r3, #4294967295
 801656c:	e000      	b.n	8016570 <arm_softmax_s8+0x12f8>
 801656e:	2300      	movs	r3, #0
 8016570:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8016574:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016578:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 801657c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8016580:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016582:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016586:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 801658a:	2300      	movs	r3, #0
 801658c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801658e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016592:	f04f 0300 	mov.w	r3, #0
 8016596:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 801659a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801659e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165a2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	0fdb      	lsrs	r3, r3, #31
 80165aa:	b2da      	uxtb	r2, r3
 80165ac:	2300      	movs	r3, #0
 80165ae:	4053      	eors	r3, r2
 80165b0:	b2db      	uxtb	r3, r3
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d012      	beq.n	80165dc <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 80165b6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80165ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165be:	2100      	movs	r1, #0
 80165c0:	f1d2 0001 	rsbs	r0, r2, #1
 80165c4:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 80165c8:	eb61 0303 	sbc.w	r3, r1, r3
 80165cc:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80165d0:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 80165d4:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 80165d8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80165dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	17da      	asrs	r2, r3, #31
 80165e8:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80165ec:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 80165f0:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 80165f4:	f04f 0300 	mov.w	r3, #0
 80165f8:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 80165fc:	fb02 f001 	mul.w	r0, r2, r1
 8016600:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 8016604:	fb01 f103 	mul.w	r1, r1, r3
 8016608:	4401      	add	r1, r0
 801660a:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 801660e:	fba0 2302 	umull	r2, r3, r0, r2
 8016612:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8016616:	4613      	mov	r3, r2
 8016618:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 801661c:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8016620:	18cb      	adds	r3, r1, r3
 8016622:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8016626:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801662e:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 8016632:	1851      	adds	r1, r2, r1
 8016634:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8016638:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 801663c:	414b      	adcs	r3, r1
 801663e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8016642:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8016646:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 801664a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801664e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8016652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016656:	2b00      	cmp	r3, #0
 8016658:	da0a      	bge.n	8016670 <arm_softmax_s8+0x13f8>
 801665a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801665e:	1851      	adds	r1, r2, r1
 8016660:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 8016664:	f143 0300 	adc.w	r3, r3, #0
 8016668:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 801666c:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8016670:	f04f 0000 	mov.w	r0, #0
 8016674:	f04f 0100 	mov.w	r1, #0
 8016678:	0fd0      	lsrs	r0, r2, #31
 801667a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801667e:	17d9      	asrs	r1, r3, #31
 8016680:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016684:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8016688:	4603      	mov	r3, r0
 801668a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801668c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016690:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	2bf2      	cmp	r3, #242	; 0xf2
 8016698:	d10e      	bne.n	80166b8 <arm_softmax_s8+0x1440>
 801669a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801669e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80166a8:	d106      	bne.n	80166b8 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 80166aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166ae:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80166b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80166b6:	6013      	str	r3, [r2, #0]
    return result;
 80166b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80166c0:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 80166c2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80166c6:	ea02 0103 	and.w	r1, r2, r3
 80166ca:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80166ce:	43da      	mvns	r2, r3
 80166d0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80166d4:	4013      	ands	r3, r2
 80166d6:	404b      	eors	r3, r1
 80166d8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 80166dc:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d102      	bne.n	80166ea <arm_softmax_s8+0x1472>
 80166e4:	f04f 33ff 	mov.w	r3, #4294967295
 80166e8:	e000      	b.n	80166ec <arm_softmax_s8+0x1474>
 80166ea:	2300      	movs	r3, #0
 80166ec:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80166f0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80166f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80166f8:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80166fc:	43da      	mvns	r2, r3
 80166fe:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8016702:	4013      	ands	r3, r2
 8016704:	404b      	eors	r3, r1
 8016706:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 801670a:	2300      	movs	r3, #0
 801670c:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 8016710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016714:	3b01      	subs	r3, #1
 8016716:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 801671a:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 801671e:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8016722:	4013      	ands	r3, r2
 8016724:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 8016728:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 801672c:	131b      	asrs	r3, r3, #12
 801672e:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 8016732:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8016736:	105b      	asrs	r3, r3, #1
 8016738:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 801673c:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8016740:	2b00      	cmp	r3, #0
 8016742:	da04      	bge.n	801674e <arm_softmax_s8+0x14d6>
        threshold++;
 8016744:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8016748:	3301      	adds	r3, #1
 801674a:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 801674e:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 8016752:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8016756:	429a      	cmp	r2, r3
 8016758:	dd04      	ble.n	8016764 <arm_softmax_s8+0x14ec>
        result++;
 801675a:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 801675e:	3301      	adds	r3, #1
 8016760:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 8016764:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 8016768:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 801676c:	4413      	add	r3, r2
 801676e:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 8016772:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8016776:	3301      	adds	r3, #1
 8016778:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801677c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016780:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016784:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	429a      	cmp	r2, r3
 801678c:	f6fe add2 	blt.w	8015334 <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 8016790:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8016794:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016798:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801679c:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 801679e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167a2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d103      	bne.n	80167b4 <arm_softmax_s8+0x153c>
    return 32U;
 80167ac:	2320      	movs	r3, #32
 80167ae:	e009      	b.n	80167c4 <arm_softmax_s8+0x154c>
 80167b0:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 80167b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167b8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	fab3 f383 	clz	r3, r3
 80167c2:	b2db      	uxtb	r3, r3
 80167c4:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 80167c8:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 80167cc:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 80167d0:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 80167d4:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 80167d8:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 80167dc:	fa02 f303 	lsl.w	r3, r2, r3
 80167e0:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 80167e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80167ec:	601a      	str	r2, [r3, #0]
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 80167ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167f2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	17da      	asrs	r2, r3, #31
 80167fa:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 80167fe:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8016802:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016806:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 801680a:	4602      	mov	r2, r0
 801680c:	18d3      	adds	r3, r2, r3
 801680e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8016812:	460b      	mov	r3, r1
 8016814:	f143 0300 	adc.w	r3, r3, #0
 8016818:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801681c:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8016820:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8016824:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8016828:	f607 0328 	addw	r3, r7, #2088	; 0x828
 801682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016830:	2b00      	cmp	r3, #0
 8016832:	db04      	blt.n	801683e <arm_softmax_s8+0x15c6>
 8016834:	f04f 0001 	mov.w	r0, #1
 8016838:	f04f 0100 	mov.w	r1, #0
 801683c:	e003      	b.n	8016846 <arm_softmax_s8+0x15ce>
 801683e:	f04f 30ff 	mov.w	r0, #4294967295
 8016842:	f04f 31ff 	mov.w	r1, #4294967295
 8016846:	f607 0328 	addw	r3, r7, #2088	; 0x828
 801684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801684e:	1884      	adds	r4, r0, r2
 8016850:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 8016854:	eb41 0303 	adc.w	r3, r1, r3
 8016858:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 801685c:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8016860:	460b      	mov	r3, r1
 8016862:	0fdb      	lsrs	r3, r3, #31
 8016864:	2200      	movs	r2, #0
 8016866:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 801686a:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 801686e:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8016872:	4602      	mov	r2, r0
 8016874:	189b      	adds	r3, r3, r2
 8016876:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 801687a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801687e:	460a      	mov	r2, r1
 8016880:	4153      	adcs	r3, r2
 8016882:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8016886:	f04f 0200 	mov.w	r2, #0
 801688a:	f04f 0300 	mov.w	r3, #0
 801688e:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 8016892:	084a      	lsrs	r2, r1, #1
 8016894:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8016898:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801689c:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 80168a0:	104b      	asrs	r3, r1, #1
 80168a2:	4610      	mov	r0, r2
 80168a4:	4619      	mov	r1, r3
 80168a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168aa:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80168ae:	4603      	mov	r3, r0
 80168b0:	6013      	str	r3, [r2, #0]
 80168b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168b6:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 80168ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168be:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80168c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168ca:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80168ce:	2300      	movs	r3, #0
 80168d0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80168d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80168d6:	f04f 0300 	mov.w	r3, #0
 80168da:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 80168de:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80168e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	0fdb      	lsrs	r3, r3, #31
 80168ee:	b2da      	uxtb	r2, r3
 80168f0:	2301      	movs	r3, #1
 80168f2:	4053      	eors	r3, r2
 80168f4:	b2db      	uxtb	r3, r3
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d012      	beq.n	8016920 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 80168fa:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80168fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016902:	2100      	movs	r1, #0
 8016904:	f1d2 0001 	rsbs	r0, r2, #1
 8016908:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 801690c:	eb61 0303 	sbc.w	r3, r1, r3
 8016910:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8016914:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8016918:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 801691c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016920:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016924:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	17da      	asrs	r2, r3, #31
 801692c:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8016930:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 8016934:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 8016938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801693c:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8016940:	fb02 f001 	mul.w	r0, r2, r1
 8016944:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8016948:	fb01 f103 	mul.w	r1, r1, r3
 801694c:	4401      	add	r1, r0
 801694e:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 8016952:	fba0 2302 	umull	r2, r3, r0, r2
 8016956:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 801695a:	4613      	mov	r3, r2
 801695c:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 8016960:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8016964:	18cb      	adds	r3, r1, r3
 8016966:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 801696a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016972:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 8016976:	1851      	adds	r1, r2, r1
 8016978:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 801697c:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8016980:	414b      	adcs	r3, r1
 8016982:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8016986:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 801698a:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 801698e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016992:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8016996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801699a:	2b00      	cmp	r3, #0
 801699c:	da0a      	bge.n	80169b4 <arm_softmax_s8+0x173c>
 801699e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80169a2:	1851      	adds	r1, r2, r1
 80169a4:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 80169a8:	f143 0300 	adc.w	r3, r3, #0
 80169ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80169b0:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80169b4:	f04f 0000 	mov.w	r0, #0
 80169b8:	f04f 0100 	mov.w	r1, #0
 80169bc:	0fd0      	lsrs	r0, r2, #31
 80169be:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80169c2:	17d9      	asrs	r1, r3, #31
 80169c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169c8:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80169cc:	4603      	mov	r3, r0
 80169ce:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80169d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 80169de:	d10e      	bne.n	80169fe <arm_softmax_s8+0x1786>
 80169e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169e4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80169ee:	d106      	bne.n	80169fe <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 80169f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169f4:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80169f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80169fc:	6013      	str	r3, [r2, #0]
    return result;
 80169fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a02:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8016a06:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8016a08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a0c:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8016a10:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 8016a14:	6013      	str	r3, [r2, #0]

    const int32_t shift = (1 << 29);
 8016a16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a1a:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8016a1e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8016a22:	6013      	str	r3, [r2, #0]
 8016a24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a28:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8016a2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	6013      	str	r3, [r2, #0]
 8016a38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a3c:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8016a40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a44:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016a4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a50:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8016a54:	2300      	movs	r3, #0
 8016a56:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016a58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016a5c:	f04f 0300 	mov.w	r3, #0
 8016a60:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 8016a64:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016a68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a6c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	0fdb      	lsrs	r3, r3, #31
 8016a74:	b2da      	uxtb	r2, r3
 8016a76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a7a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	0fdb      	lsrs	r3, r3, #31
 8016a82:	b2db      	uxtb	r3, r3
 8016a84:	4053      	eors	r3, r2
 8016a86:	b2db      	uxtb	r3, r3
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d012      	beq.n	8016ab2 <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 8016a8c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8016a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a94:	2100      	movs	r1, #0
 8016a96:	f1d2 0001 	rsbs	r0, r2, #1
 8016a9a:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 8016a9e:	eb61 0303 	sbc.w	r3, r1, r3
 8016aa2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8016aa6:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8016aaa:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8016aae:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016ab2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ab6:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	17da      	asrs	r2, r3, #31
 8016abe:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8016ac2:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 8016ac6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016aca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	17da      	asrs	r2, r3, #31
 8016ad2:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8016ad6:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 8016ada:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8016ade:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016ae2:	460b      	mov	r3, r1
 8016ae4:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8016ae8:	fb02 f203 	mul.w	r2, r2, r3
 8016aec:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8016af0:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8016af4:	e9c4 0100 	strd	r0, r1, [r4]
 8016af8:	4601      	mov	r1, r0
 8016afa:	fb01 f303 	mul.w	r3, r1, r3
 8016afe:	4413      	add	r3, r2
 8016b00:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8016b04:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8016b08:	fba2 1201 	umull	r1, r2, r2, r1
 8016b0c:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 8016b10:	460a      	mov	r2, r1
 8016b12:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8016b16:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016b1a:	4413      	add	r3, r2
 8016b1c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8016b20:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8016b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b28:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8016b2c:	1851      	adds	r1, r2, r1
 8016b2e:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 8016b32:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8016b36:	414b      	adcs	r3, r1
 8016b38:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8016b3c:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8016b40:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8016b44:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016b48:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8016b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	da0a      	bge.n	8016b6a <arm_softmax_s8+0x18f2>
 8016b54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016b58:	1851      	adds	r1, r2, r1
 8016b5a:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8016b5e:	f143 0300 	adc.w	r3, r3, #0
 8016b62:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8016b66:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8016b6a:	f04f 0000 	mov.w	r0, #0
 8016b6e:	f04f 0100 	mov.w	r1, #0
 8016b72:	0fd0      	lsrs	r0, r2, #31
 8016b74:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016b78:	17d9      	asrs	r1, r3, #31
 8016b7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b7e:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8016b82:	4603      	mov	r3, r0
 8016b84:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016b86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b8a:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8016b8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b92:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8016b96:	6812      	ldr	r2, [r2, #0]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	429a      	cmp	r2, r3
 8016b9c:	d10e      	bne.n	8016bbc <arm_softmax_s8+0x1944>
 8016b9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ba2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016bac:	d106      	bne.n	8016bbc <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 8016bae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bb2:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8016bb6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016bba:	6013      	str	r3, [r2, #0]
    return result;
 8016bbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bc0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8016bc4:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016bc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bca:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	1a99      	subs	r1, r3, r2
 8016bd2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bd6:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8016bda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bde:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	6013      	str	r3, [r2, #0]
 8016be6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8016bee:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8016bf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bf4:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016bfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016c00:	f04f 0300 	mov.w	r3, #0
 8016c04:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8016c08:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016c0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	0fdb      	lsrs	r3, r3, #31
 8016c18:	b2da      	uxtb	r2, r3
 8016c1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c1e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	0fdb      	lsrs	r3, r3, #31
 8016c26:	b2db      	uxtb	r3, r3
 8016c28:	4053      	eors	r3, r2
 8016c2a:	b2db      	uxtb	r3, r3
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d012      	beq.n	8016c56 <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 8016c30:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8016c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c38:	2100      	movs	r1, #0
 8016c3a:	f1d2 0001 	rsbs	r0, r2, #1
 8016c3e:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 8016c42:	eb61 0303 	sbc.w	r3, r1, r3
 8016c46:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8016c4a:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 8016c4e:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8016c52:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016c56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c5a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	17da      	asrs	r2, r3, #31
 8016c62:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8016c66:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 8016c6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c6e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	17da      	asrs	r2, r3, #31
 8016c76:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8016c7a:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 8016c7e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8016c82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016c86:	460b      	mov	r3, r1
 8016c88:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8016c8c:	fb02 f203 	mul.w	r2, r2, r3
 8016c90:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8016c94:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 8016c98:	e9c4 0100 	strd	r0, r1, [r4]
 8016c9c:	4601      	mov	r1, r0
 8016c9e:	fb01 f303 	mul.w	r3, r1, r3
 8016ca2:	4413      	add	r3, r2
 8016ca4:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8016ca8:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 8016cac:	fba2 1201 	umull	r1, r2, r2, r1
 8016cb0:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 8016cb4:	460a      	mov	r2, r1
 8016cb6:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 8016cba:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8016cbe:	4413      	add	r3, r2
 8016cc0:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8016cc4:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8016cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ccc:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8016cd0:	1851      	adds	r1, r2, r1
 8016cd2:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8016cd6:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8016cda:	414b      	adcs	r3, r1
 8016cdc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8016ce0:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8016ce4:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8016ce8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016cec:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8016cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	da0a      	bge.n	8016d0e <arm_softmax_s8+0x1a96>
 8016cf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016cfc:	1851      	adds	r1, r2, r1
 8016cfe:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8016d02:	f143 0300 	adc.w	r3, r3, #0
 8016d06:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8016d0a:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8016d0e:	f04f 0000 	mov.w	r0, #0
 8016d12:	f04f 0100 	mov.w	r1, #0
 8016d16:	0fd0      	lsrs	r0, r2, #31
 8016d18:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016d1c:	17d9      	asrs	r1, r3, #31
 8016d1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d22:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8016d26:	4603      	mov	r3, r0
 8016d28:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016d2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d2e:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8016d32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d36:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8016d3a:	6812      	ldr	r2, [r2, #0]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	429a      	cmp	r2, r3
 8016d40:	d10e      	bne.n	8016d60 <arm_softmax_s8+0x1ae8>
 8016d42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d46:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016d50:	d106      	bne.n	8016d60 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 8016d52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d56:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8016d5a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016d5e:	6013      	str	r3, [r2, #0]
    return result;
 8016d60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d64:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8016d68:	681a      	ldr	r2, [r3, #0]
 8016d6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d6e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8016d72:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8016d74:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8016d78:	4619      	mov	r1, r3
 8016d7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d7e:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 8016d82:	1e4b      	subs	r3, r1, #1
 8016d84:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8016d86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d8a:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8016d8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d92:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	009b      	lsls	r3, r3, #2
 8016d9a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016d9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016da0:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8016da4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016da8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8016dac:	6812      	ldr	r2, [r2, #0]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	429a      	cmp	r2, r3
 8016db2:	dd02      	ble.n	8016dba <arm_softmax_s8+0x1b42>
 8016db4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016db8:	e000      	b.n	8016dbc <arm_softmax_s8+0x1b44>
 8016dba:	2000      	movs	r0, #0
 8016dbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016dc0:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8016dc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016dc8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8016dcc:	6812      	ldr	r2, [r2, #0]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	dd01      	ble.n	8016dd8 <arm_softmax_s8+0x1b60>
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	e001      	b.n	8016ddc <arm_softmax_s8+0x1b64>
 8016dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8016ddc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016de0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	ea02 0103 	and.w	r1, r2, r3
 8016dea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016dee:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8016df2:	ea81 0300 	eor.w	r3, r1, r0
 8016df6:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8016df8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016dfc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	425a      	negs	r2, r3
 8016e04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e08:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	4293      	cmp	r3, r2
 8016e10:	da02      	bge.n	8016e18 <arm_softmax_s8+0x1ba0>
 8016e12:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8016e16:	e000      	b.n	8016e1a <arm_softmax_s8+0x1ba2>
 8016e18:	2000      	movs	r0, #0
 8016e1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e1e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	425a      	negs	r2, r3
 8016e26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e2a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	4293      	cmp	r3, r2
 8016e32:	da01      	bge.n	8016e38 <arm_softmax_s8+0x1bc0>
 8016e34:	2200      	movs	r2, #0
 8016e36:	e001      	b.n	8016e3c <arm_softmax_s8+0x1bc4>
 8016e38:	f04f 32ff 	mov.w	r2, #4294967295
 8016e3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e40:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	ea02 0103 	and.w	r1, r2, r3
 8016e4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e4e:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8016e52:	ea81 0300 	eor.w	r3, r1, r0
 8016e56:	6013      	str	r3, [r2, #0]
    return result;
 8016e58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e5c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8016e60:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016e62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e66:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8016e6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e6e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	440b      	add	r3, r1
 8016e76:	6013      	str	r3, [r2, #0]
 8016e78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e7c:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8016e80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e84:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	6013      	str	r3, [r2, #0]
 8016e8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e90:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 8016e94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e98:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016ea0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ea4:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016eac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016eb0:	f04f 0300 	mov.w	r3, #0
 8016eb4:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8016eb8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016ebc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ec0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	0fdb      	lsrs	r3, r3, #31
 8016ec8:	b2da      	uxtb	r2, r3
 8016eca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ece:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	0fdb      	lsrs	r3, r3, #31
 8016ed6:	b2db      	uxtb	r3, r3
 8016ed8:	4053      	eors	r3, r2
 8016eda:	b2db      	uxtb	r3, r3
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d012      	beq.n	8016f06 <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 8016ee0:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8016ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee8:	2100      	movs	r1, #0
 8016eea:	f1d2 0001 	rsbs	r0, r2, #1
 8016eee:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 8016ef2:	eb61 0303 	sbc.w	r3, r1, r3
 8016ef6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8016efa:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8016efe:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8016f02:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016f06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f0a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	17da      	asrs	r2, r3, #31
 8016f12:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8016f16:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8016f1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f1e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	17da      	asrs	r2, r3, #31
 8016f26:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8016f2a:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 8016f2e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8016f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016f36:	460b      	mov	r3, r1
 8016f38:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8016f3c:	fb02 f203 	mul.w	r2, r2, r3
 8016f40:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8016f44:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8016f48:	e9c4 0100 	strd	r0, r1, [r4]
 8016f4c:	4601      	mov	r1, r0
 8016f4e:	fb01 f303 	mul.w	r3, r1, r3
 8016f52:	4413      	add	r3, r2
 8016f54:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8016f58:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8016f5c:	fba2 1201 	umull	r1, r2, r2, r1
 8016f60:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 8016f64:	460a      	mov	r2, r1
 8016f66:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 8016f6a:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016f6e:	4413      	add	r3, r2
 8016f70:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8016f74:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8016f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f7c:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 8016f80:	1851      	adds	r1, r2, r1
 8016f82:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 8016f86:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8016f8a:	414b      	adcs	r3, r1
 8016f8c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8016f90:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 8016f94:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8016f98:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016f9c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8016fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	da0a      	bge.n	8016fbe <arm_softmax_s8+0x1d46>
 8016fa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016fac:	1851      	adds	r1, r2, r1
 8016fae:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8016fb2:	f143 0300 	adc.w	r3, r3, #0
 8016fb6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8016fba:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8016fbe:	f04f 0000 	mov.w	r0, #0
 8016fc2:	f04f 0100 	mov.w	r1, #0
 8016fc6:	0fd0      	lsrs	r0, r2, #31
 8016fc8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016fcc:	17d9      	asrs	r1, r3, #31
 8016fce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fd2:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016fda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fde:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8016fe2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fe6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8016fea:	6812      	ldr	r2, [r2, #0]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	429a      	cmp	r2, r3
 8016ff0:	d10e      	bne.n	8017010 <arm_softmax_s8+0x1d98>
 8016ff2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ff6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017000:	d106      	bne.n	8017010 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 8017002:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017006:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 801700a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801700e:	6013      	str	r3, [r2, #0]
    return result;
 8017010:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017014:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8017018:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801701a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801701e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	1a99      	subs	r1, r3, r2
 8017026:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801702a:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801702e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017032:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	6013      	str	r3, [r2, #0]
 801703a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801703e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8017042:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8017044:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017048:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 801704c:	2300      	movs	r3, #0
 801704e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017054:	f04f 0300 	mov.w	r3, #0
 8017058:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 801705c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017060:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017064:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	0fdb      	lsrs	r3, r3, #31
 801706c:	b2da      	uxtb	r2, r3
 801706e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017072:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	0fdb      	lsrs	r3, r3, #31
 801707a:	b2db      	uxtb	r3, r3
 801707c:	4053      	eors	r3, r2
 801707e:	b2db      	uxtb	r3, r3
 8017080:	2b00      	cmp	r3, #0
 8017082:	d012      	beq.n	80170aa <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 8017084:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8017088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801708c:	2100      	movs	r1, #0
 801708e:	f1d2 0001 	rsbs	r0, r2, #1
 8017092:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8017096:	eb61 0303 	sbc.w	r3, r1, r3
 801709a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 801709e:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 80170a2:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 80170a6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80170aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170ae:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	17da      	asrs	r2, r3, #31
 80170b6:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 80170ba:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 80170be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170c2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	17da      	asrs	r2, r3, #31
 80170ca:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 80170ce:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 80170d2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80170d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80170da:	460b      	mov	r3, r1
 80170dc:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 80170e0:	fb02 f203 	mul.w	r2, r2, r3
 80170e4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80170e8:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 80170ec:	e9c4 0100 	strd	r0, r1, [r4]
 80170f0:	4601      	mov	r1, r0
 80170f2:	fb01 f303 	mul.w	r3, r1, r3
 80170f6:	4413      	add	r3, r2
 80170f8:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 80170fc:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 8017100:	fba2 1201 	umull	r1, r2, r2, r1
 8017104:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 8017108:	460a      	mov	r2, r1
 801710a:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 801710e:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8017112:	4413      	add	r3, r2
 8017114:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8017118:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017120:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8017124:	1851      	adds	r1, r2, r1
 8017126:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 801712a:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 801712e:	414b      	adcs	r3, r1
 8017130:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8017134:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8017138:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 801713c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017140:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8017144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017148:	2b00      	cmp	r3, #0
 801714a:	da0a      	bge.n	8017162 <arm_softmax_s8+0x1eea>
 801714c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017150:	1851      	adds	r1, r2, r1
 8017152:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8017156:	f143 0300 	adc.w	r3, r3, #0
 801715a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 801715e:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8017162:	f04f 0000 	mov.w	r0, #0
 8017166:	f04f 0100 	mov.w	r1, #0
 801716a:	0fd0      	lsrs	r0, r2, #31
 801716c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017170:	17d9      	asrs	r1, r3, #31
 8017172:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017176:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 801717a:	4603      	mov	r3, r0
 801717c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801717e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017182:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8017186:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801718a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801718e:	6812      	ldr	r2, [r2, #0]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	429a      	cmp	r2, r3
 8017194:	d10e      	bne.n	80171b4 <arm_softmax_s8+0x1f3c>
 8017196:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801719a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80171a4:	d106      	bne.n	80171b4 <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 80171a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171aa:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80171ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80171b2:	6013      	str	r3, [r2, #0]
    return result;
 80171b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80171bc:	681a      	ldr	r2, [r3, #0]
 80171be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171c2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80171c6:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80171c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80171cc:	4619      	mov	r1, r3
 80171ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171d2:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 80171d6:	1e4b      	subs	r3, r1, #1
 80171d8:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80171da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171de:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80171e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171e6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	009b      	lsls	r3, r3, #2
 80171ee:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80171f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171f4:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 80171f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171fc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8017200:	6812      	ldr	r2, [r2, #0]
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	429a      	cmp	r2, r3
 8017206:	dd02      	ble.n	801720e <arm_softmax_s8+0x1f96>
 8017208:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801720c:	e000      	b.n	8017210 <arm_softmax_s8+0x1f98>
 801720e:	2000      	movs	r0, #0
 8017210:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017214:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8017218:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801721c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8017220:	6812      	ldr	r2, [r2, #0]
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	429a      	cmp	r2, r3
 8017226:	dd01      	ble.n	801722c <arm_softmax_s8+0x1fb4>
 8017228:	2200      	movs	r2, #0
 801722a:	e001      	b.n	8017230 <arm_softmax_s8+0x1fb8>
 801722c:	f04f 32ff 	mov.w	r2, #4294967295
 8017230:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017234:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	ea02 0103 	and.w	r1, r2, r3
 801723e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017242:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8017246:	ea81 0300 	eor.w	r3, r1, r0
 801724a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 801724c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017250:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	425a      	negs	r2, r3
 8017258:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801725c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	4293      	cmp	r3, r2
 8017264:	da02      	bge.n	801726c <arm_softmax_s8+0x1ff4>
 8017266:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801726a:	e000      	b.n	801726e <arm_softmax_s8+0x1ff6>
 801726c:	2000      	movs	r0, #0
 801726e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017272:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	425a      	negs	r2, r3
 801727a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801727e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	4293      	cmp	r3, r2
 8017286:	da01      	bge.n	801728c <arm_softmax_s8+0x2014>
 8017288:	2200      	movs	r2, #0
 801728a:	e001      	b.n	8017290 <arm_softmax_s8+0x2018>
 801728c:	f04f 32ff 	mov.w	r2, #4294967295
 8017290:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017294:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	ea02 0103 	and.w	r1, r2, r3
 801729e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172a2:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80172a6:	ea81 0300 	eor.w	r3, r1, r0
 80172aa:	6013      	str	r3, [r2, #0]
    return result;
 80172ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172b0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80172b4:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80172b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172ba:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80172be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172c2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	440b      	add	r3, r1
 80172ca:	6013      	str	r3, [r2, #0]
 80172cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172d0:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80172d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172d8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	6013      	str	r3, [r2, #0]
 80172e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172e4:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 80172e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80172f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172f8:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 80172fc:	2300      	movs	r3, #0
 80172fe:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017304:	f04f 0300 	mov.w	r3, #0
 8017308:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 801730c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017310:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017314:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	0fdb      	lsrs	r3, r3, #31
 801731c:	b2da      	uxtb	r2, r3
 801731e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017322:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	0fdb      	lsrs	r3, r3, #31
 801732a:	b2db      	uxtb	r3, r3
 801732c:	4053      	eors	r3, r2
 801732e:	b2db      	uxtb	r3, r3
 8017330:	2b00      	cmp	r3, #0
 8017332:	d012      	beq.n	801735a <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 8017334:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8017338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801733c:	2100      	movs	r1, #0
 801733e:	f1d2 0001 	rsbs	r0, r2, #1
 8017342:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8017346:	eb61 0303 	sbc.w	r3, r1, r3
 801734a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 801734e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8017352:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8017356:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801735a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801735e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	17da      	asrs	r2, r3, #31
 8017366:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 801736a:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 801736e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017372:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	17da      	asrs	r2, r3, #31
 801737a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 801737e:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 8017382:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8017386:	e9d3 0100 	ldrd	r0, r1, [r3]
 801738a:	460b      	mov	r3, r1
 801738c:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8017390:	fb02 f203 	mul.w	r2, r2, r3
 8017394:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8017398:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 801739c:	e9c4 0100 	strd	r0, r1, [r4]
 80173a0:	4601      	mov	r1, r0
 80173a2:	fb01 f303 	mul.w	r3, r1, r3
 80173a6:	4413      	add	r3, r2
 80173a8:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80173ac:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 80173b0:	fba2 1201 	umull	r1, r2, r2, r1
 80173b4:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 80173b8:	460a      	mov	r2, r1
 80173ba:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 80173be:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 80173c2:	4413      	add	r3, r2
 80173c4:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 80173c8:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80173cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d0:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 80173d4:	1851      	adds	r1, r2, r1
 80173d6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 80173da:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 80173de:	414b      	adcs	r3, r1
 80173e0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80173e4:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 80173e8:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 80173ec:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80173f0:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80173f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	da0a      	bge.n	8017412 <arm_softmax_s8+0x219a>
 80173fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017400:	1851      	adds	r1, r2, r1
 8017402:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8017406:	f143 0300 	adc.w	r3, r3, #0
 801740a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 801740e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8017412:	f04f 0000 	mov.w	r0, #0
 8017416:	f04f 0100 	mov.w	r1, #0
 801741a:	0fd0      	lsrs	r0, r2, #31
 801741c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017420:	17d9      	asrs	r1, r3, #31
 8017422:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017426:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 801742a:	4603      	mov	r3, r0
 801742c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801742e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017432:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8017436:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801743a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801743e:	6812      	ldr	r2, [r2, #0]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	429a      	cmp	r2, r3
 8017444:	d10e      	bne.n	8017464 <arm_softmax_s8+0x21ec>
 8017446:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801744a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017454:	d106      	bne.n	8017464 <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 8017456:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801745a:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 801745e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017462:	6013      	str	r3, [r2, #0]
    return result;
 8017464:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017468:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801746c:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801746e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017472:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	1a99      	subs	r1, r3, r2
 801747a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801747e:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8017482:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017486:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	6013      	str	r3, [r2, #0]
 801748e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017492:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8017496:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8017498:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801749c:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 80174a0:	2300      	movs	r3, #0
 80174a2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80174a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80174a8:	f04f 0300 	mov.w	r3, #0
 80174ac:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 80174b0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80174b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174b8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	0fdb      	lsrs	r3, r3, #31
 80174c0:	b2da      	uxtb	r2, r3
 80174c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174c6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	0fdb      	lsrs	r3, r3, #31
 80174ce:	b2db      	uxtb	r3, r3
 80174d0:	4053      	eors	r3, r2
 80174d2:	b2db      	uxtb	r3, r3
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d012      	beq.n	80174fe <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 80174d8:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80174dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174e0:	2100      	movs	r1, #0
 80174e2:	f1d2 0001 	rsbs	r0, r2, #1
 80174e6:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 80174ea:	eb61 0303 	sbc.w	r3, r1, r3
 80174ee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80174f2:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 80174f6:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 80174fa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80174fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017502:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	17da      	asrs	r2, r3, #31
 801750a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 801750e:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 8017512:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017516:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	17da      	asrs	r2, r3, #31
 801751e:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8017522:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 8017526:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 801752a:	460b      	mov	r3, r1
 801752c:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8017530:	fb02 f203 	mul.w	r2, r2, r3
 8017534:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8017538:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 801753c:	4601      	mov	r1, r0
 801753e:	fb01 f303 	mul.w	r3, r1, r3
 8017542:	4413      	add	r3, r2
 8017544:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8017548:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 801754c:	fba2 1201 	umull	r1, r2, r2, r1
 8017550:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 8017554:	460a      	mov	r2, r1
 8017556:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 801755a:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 801755e:	4413      	add	r3, r2
 8017560:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8017564:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8017568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801756c:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 8017570:	1851      	adds	r1, r2, r1
 8017572:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8017576:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 801757a:	414b      	adcs	r3, r1
 801757c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8017580:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8017584:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8017588:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801758c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8017590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017594:	2b00      	cmp	r3, #0
 8017596:	da0a      	bge.n	80175ae <arm_softmax_s8+0x2336>
 8017598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801759c:	1851      	adds	r1, r2, r1
 801759e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 80175a2:	f143 0300 	adc.w	r3, r3, #0
 80175a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80175aa:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80175ae:	f04f 0000 	mov.w	r0, #0
 80175b2:	f04f 0100 	mov.w	r1, #0
 80175b6:	0fd0      	lsrs	r0, r2, #31
 80175b8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80175bc:	17d9      	asrs	r1, r3, #31
 80175be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175c2:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 80175c6:	4603      	mov	r3, r0
 80175c8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80175ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175ce:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 80175d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175d6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80175da:	6812      	ldr	r2, [r2, #0]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	429a      	cmp	r2, r3
 80175e0:	d10e      	bne.n	8017600 <arm_softmax_s8+0x2388>
 80175e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175e6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80175f0:	d106      	bne.n	8017600 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 80175f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175f6:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 80175fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80175fe:	6013      	str	r3, [r2, #0]
    return result;
 8017600:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017604:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8017608:	681a      	ldr	r2, [r3, #0]
 801760a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801760e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8017612:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8017614:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8017618:	4619      	mov	r1, r3
 801761a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801761e:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8017622:	1e4b      	subs	r3, r1, #1
 8017624:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8017626:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801762a:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801762e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017632:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	009b      	lsls	r3, r3, #2
 801763a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 801763c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017640:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8017644:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017648:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801764c:	6812      	ldr	r2, [r2, #0]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	429a      	cmp	r2, r3
 8017652:	dd02      	ble.n	801765a <arm_softmax_s8+0x23e2>
 8017654:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017658:	e000      	b.n	801765c <arm_softmax_s8+0x23e4>
 801765a:	2000      	movs	r0, #0
 801765c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017660:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8017664:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017668:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801766c:	6812      	ldr	r2, [r2, #0]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	429a      	cmp	r2, r3
 8017672:	dd01      	ble.n	8017678 <arm_softmax_s8+0x2400>
 8017674:	2200      	movs	r2, #0
 8017676:	e001      	b.n	801767c <arm_softmax_s8+0x2404>
 8017678:	f04f 32ff 	mov.w	r2, #4294967295
 801767c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	ea02 0103 	and.w	r1, r2, r3
 801768a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801768e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8017692:	ea81 0300 	eor.w	r3, r1, r0
 8017696:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8017698:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801769c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	425a      	negs	r2, r3
 80176a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176a8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	4293      	cmp	r3, r2
 80176b0:	da02      	bge.n	80176b8 <arm_softmax_s8+0x2440>
 80176b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80176b6:	e000      	b.n	80176ba <arm_softmax_s8+0x2442>
 80176b8:	2000      	movs	r0, #0
 80176ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176be:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	425a      	negs	r2, r3
 80176c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176ca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	4293      	cmp	r3, r2
 80176d2:	da05      	bge.n	80176e0 <arm_softmax_s8+0x2468>
 80176d4:	2200      	movs	r2, #0
 80176d6:	e005      	b.n	80176e4 <arm_softmax_s8+0x246c>
 80176d8:	c3c3c3c4 	.word	0xc3c3c3c4
 80176dc:	ffffffff 	.word	0xffffffff
 80176e0:	f04f 32ff 	mov.w	r2, #4294967295
 80176e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	ea02 0103 	and.w	r1, r2, r3
 80176f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176f6:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 80176fa:	ea81 0300 	eor.w	r3, r1, r0
 80176fe:	6013      	str	r3, [r2, #0]
    return result;
 8017700:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017704:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8017708:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801770a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801770e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8017712:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017716:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	440b      	add	r3, r1
 801771e:	6013      	str	r3, [r2, #0]
 8017720:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017724:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8017728:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801772c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8017734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017738:	4619      	mov	r1, r3
 801773a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801773e:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8017742:	1e4b      	subs	r3, r1, #1
 8017744:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8017746:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801774a:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801774e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017752:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	005b      	lsls	r3, r3, #1
 801775a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 801775c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017760:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8017764:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017768:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801776c:	6812      	ldr	r2, [r2, #0]
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	429a      	cmp	r2, r3
 8017772:	dd02      	ble.n	801777a <arm_softmax_s8+0x2502>
 8017774:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017778:	e000      	b.n	801777c <arm_softmax_s8+0x2504>
 801777a:	2000      	movs	r0, #0
 801777c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017780:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8017784:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017788:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801778c:	6812      	ldr	r2, [r2, #0]
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	429a      	cmp	r2, r3
 8017792:	dd01      	ble.n	8017798 <arm_softmax_s8+0x2520>
 8017794:	2200      	movs	r2, #0
 8017796:	e001      	b.n	801779c <arm_softmax_s8+0x2524>
 8017798:	f04f 32ff 	mov.w	r2, #4294967295
 801779c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	ea02 0103 	and.w	r1, r2, r3
 80177aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177ae:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80177b2:	ea81 0300 	eor.w	r3, r1, r0
 80177b6:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80177b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177bc:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	425a      	negs	r2, r3
 80177c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177c8:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	4293      	cmp	r3, r2
 80177d0:	da02      	bge.n	80177d8 <arm_softmax_s8+0x2560>
 80177d2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80177d6:	e000      	b.n	80177da <arm_softmax_s8+0x2562>
 80177d8:	2000      	movs	r0, #0
 80177da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177de:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	425a      	negs	r2, r3
 80177e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177ea:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	4293      	cmp	r3, r2
 80177f2:	da01      	bge.n	80177f8 <arm_softmax_s8+0x2580>
 80177f4:	2200      	movs	r2, #0
 80177f6:	e001      	b.n	80177fc <arm_softmax_s8+0x2584>
 80177f8:	f04f 32ff 	mov.w	r2, #4294967295
 80177fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017800:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	ea02 0103 	and.w	r1, r2, r3
 801780a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801780e:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8017812:	ea81 0300 	eor.w	r3, r1, r0
 8017816:	6013      	str	r3, [r2, #0]
    return result;
 8017818:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801781c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8017820:	681b      	ldr	r3, [r3, #0]

    return MUL_POW2(x, 1);
 8017822:	bf00      	nop
 8017824:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 8017828:	2300      	movs	r3, #0
 801782a:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801782e:	f001 bd85 	b.w	801933c <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 8017832:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8017836:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801783a:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	4413      	add	r3, r2
 8017842:	f993 3000 	ldrsb.w	r3, [r3]
 8017846:	461a      	mov	r2, r3
 8017848:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 801784c:	1ad3      	subs	r3, r2, r3
 801784e:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 8017852:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8017856:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 801785a:	429a      	cmp	r2, r3
 801785c:	f2c1 8562 	blt.w	8019324 <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 8017860:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8017864:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8017868:	fb03 f202 	mul.w	r2, r3, r2
 801786c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017870:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8017874:	601a      	str	r2, [r3, #0]
 8017876:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801787a:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 801787e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017882:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801788a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801788e:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8017892:	2300      	movs	r3, #0
 8017894:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017896:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801789a:	f04f 0300 	mov.w	r3, #0
 801789e:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 80178a2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80178a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178aa:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	0fdb      	lsrs	r3, r3, #31
 80178b2:	b2da      	uxtb	r2, r3
 80178b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178b8:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	0fdb      	lsrs	r3, r3, #31
 80178c0:	b2db      	uxtb	r3, r3
 80178c2:	4053      	eors	r3, r2
 80178c4:	b2db      	uxtb	r3, r3
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d012      	beq.n	80178f0 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 80178ca:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80178ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178d2:	2100      	movs	r1, #0
 80178d4:	f1d2 0001 	rsbs	r0, r2, #1
 80178d8:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 80178dc:	eb61 0303 	sbc.w	r3, r1, r3
 80178e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80178e4:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 80178e8:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80178ec:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80178f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178f4:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	17da      	asrs	r2, r3, #31
 80178fc:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8017900:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 8017904:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017908:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	17da      	asrs	r2, r3, #31
 8017910:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8017914:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 8017918:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 801791c:	460b      	mov	r3, r1
 801791e:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8017922:	fb02 f203 	mul.w	r2, r2, r3
 8017926:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801792a:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 801792e:	4601      	mov	r1, r0
 8017930:	fb01 f303 	mul.w	r3, r1, r3
 8017934:	4413      	add	r3, r2
 8017936:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 801793a:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 801793e:	fba2 1201 	umull	r1, r2, r2, r1
 8017942:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 8017946:	460a      	mov	r2, r1
 8017948:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 801794c:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8017950:	4413      	add	r3, r2
 8017952:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8017956:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801795e:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8017962:	1851      	adds	r1, r2, r1
 8017964:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8017968:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 801796c:	414b      	adcs	r3, r1
 801796e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8017972:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8017976:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 801797a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801797e:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8017982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017986:	2b00      	cmp	r3, #0
 8017988:	da0a      	bge.n	80179a0 <arm_softmax_s8+0x2728>
 801798a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801798e:	1851      	adds	r1, r2, r1
 8017990:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8017994:	f143 0300 	adc.w	r3, r3, #0
 8017998:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801799c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80179a0:	f04f 0000 	mov.w	r0, #0
 80179a4:	f04f 0100 	mov.w	r1, #0
 80179a8:	0fd0      	lsrs	r0, r2, #31
 80179aa:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80179ae:	17d9      	asrs	r1, r3, #31
 80179b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179b4:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 80179b8:	4603      	mov	r3, r0
 80179ba:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80179bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179c0:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 80179c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179c8:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80179cc:	6812      	ldr	r2, [r2, #0]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	429a      	cmp	r2, r3
 80179d2:	d10e      	bne.n	80179f2 <arm_softmax_s8+0x277a>
 80179d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179d8:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80179e2:	d106      	bne.n	80179f2 <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 80179e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179e8:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 80179ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80179f0:	6013      	str	r3, [r2, #0]
    return result;
 80179f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179f6:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80179fa:	681a      	ldr	r2, [r3, #0]
 80179fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a00:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8017a04:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 8017a06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a0a:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8017a0e:	2300      	movs	r3, #0
 8017a10:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 8017a12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a16:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017a1a:	2318      	movs	r3, #24
 8017a1c:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8017a1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a22:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017a26:	2201      	movs	r2, #1
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8017a2e:	1e5a      	subs	r2, r3, #1
 8017a30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a34:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	ea02 0003 	and.w	r0, r2, r3
 8017a3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a42:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017a46:	2201      	movs	r2, #1
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	fa02 f103 	lsl.w	r1, r2, r3
 8017a4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a52:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8017a56:	1a43      	subs	r3, r0, r1
 8017a58:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 8017a5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a5e:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 8017a62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a66:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8017a6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a6e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8017a72:	6812      	ldr	r2, [r2, #0]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	1ad3      	subs	r3, r2, r3
 8017a78:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8017a7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a7e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	0159      	lsls	r1, r3, #5
 8017a86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a8a:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8017a8e:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 8017a92:	6013      	str	r3, [r2, #0]
 8017a94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a98:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8017a9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017aa0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	6013      	str	r3, [r2, #0]
 8017aa8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017aac:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8017ab0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ab4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017abc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ac0:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017ac8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017acc:	f04f 0300 	mov.w	r3, #0
 8017ad0:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8017ad4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017ad8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017adc:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	0fdb      	lsrs	r3, r3, #31
 8017ae4:	b2da      	uxtb	r2, r3
 8017ae6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017aea:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	0fdb      	lsrs	r3, r3, #31
 8017af2:	b2db      	uxtb	r3, r3
 8017af4:	4053      	eors	r3, r2
 8017af6:	b2db      	uxtb	r3, r3
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d012      	beq.n	8017b22 <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 8017afc:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8017b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b04:	2100      	movs	r1, #0
 8017b06:	f1d2 0001 	rsbs	r0, r2, #1
 8017b0a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8017b0e:	eb61 0303 	sbc.w	r3, r1, r3
 8017b12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8017b16:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8017b1a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8017b1e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017b22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b26:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	17da      	asrs	r2, r3, #31
 8017b2e:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8017b32:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 8017b36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b3a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	17da      	asrs	r2, r3, #31
 8017b42:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8017b46:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 8017b4a:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8017b4e:	460b      	mov	r3, r1
 8017b50:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8017b54:	fb02 f203 	mul.w	r2, r2, r3
 8017b58:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8017b5c:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 8017b60:	4601      	mov	r1, r0
 8017b62:	fb01 f303 	mul.w	r3, r1, r3
 8017b66:	4413      	add	r3, r2
 8017b68:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8017b6c:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8017b70:	fba2 1201 	umull	r1, r2, r2, r1
 8017b74:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 8017b78:	460a      	mov	r2, r1
 8017b7a:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 8017b7e:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8017b82:	4413      	add	r3, r2
 8017b84:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8017b88:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8017b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b90:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 8017b94:	1851      	adds	r1, r2, r1
 8017b96:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8017b9a:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 8017b9e:	414b      	adcs	r3, r1
 8017ba0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8017ba4:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8017ba8:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8017bac:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017bb0:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8017bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	da0a      	bge.n	8017bd2 <arm_softmax_s8+0x295a>
 8017bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017bc0:	1851      	adds	r1, r2, r1
 8017bc2:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8017bc6:	f143 0300 	adc.w	r3, r3, #0
 8017bca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8017bce:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8017bd2:	f04f 0000 	mov.w	r0, #0
 8017bd6:	f04f 0100 	mov.w	r1, #0
 8017bda:	0fd0      	lsrs	r0, r2, #31
 8017bdc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017be0:	17d9      	asrs	r1, r3, #31
 8017be2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017be6:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8017bea:	4603      	mov	r3, r0
 8017bec:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017bee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bf2:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8017bf6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bfa:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8017bfe:	6812      	ldr	r2, [r2, #0]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	429a      	cmp	r2, r3
 8017c04:	d10e      	bne.n	8017c24 <arm_softmax_s8+0x29ac>
 8017c06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c0a:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017c14:	d106      	bne.n	8017c24 <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 8017c16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c1a:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8017c1e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017c22:	6013      	str	r3, [r2, #0]
    return result;
 8017c24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c28:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8017c2c:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 8017c2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c32:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017c36:	601a      	str	r2, [r3, #0]
 8017c38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c3c:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8017c40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c44:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	6013      	str	r3, [r2, #0]
 8017c4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c50:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8017c54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c58:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017c60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c64:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8017c68:	2300      	movs	r3, #0
 8017c6a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017c6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017c70:	f04f 0300 	mov.w	r3, #0
 8017c74:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8017c78:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017c7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c80:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	0fdb      	lsrs	r3, r3, #31
 8017c88:	b2da      	uxtb	r2, r3
 8017c8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c8e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	0fdb      	lsrs	r3, r3, #31
 8017c96:	b2db      	uxtb	r3, r3
 8017c98:	4053      	eors	r3, r2
 8017c9a:	b2db      	uxtb	r3, r3
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d012      	beq.n	8017cc6 <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 8017ca0:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8017ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ca8:	2100      	movs	r1, #0
 8017caa:	f1d2 0001 	rsbs	r0, r2, #1
 8017cae:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8017cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8017cb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8017cba:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8017cbe:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8017cc2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017cc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cca:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	17da      	asrs	r2, r3, #31
 8017cd2:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8017cd6:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8017cda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cde:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	17da      	asrs	r2, r3, #31
 8017ce6:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8017cea:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8017cee:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 8017cf2:	460b      	mov	r3, r1
 8017cf4:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8017cf8:	fb02 f203 	mul.w	r2, r2, r3
 8017cfc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8017d00:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 8017d04:	4601      	mov	r1, r0
 8017d06:	fb01 f303 	mul.w	r3, r1, r3
 8017d0a:	4413      	add	r3, r2
 8017d0c:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8017d10:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 8017d14:	fba2 1201 	umull	r1, r2, r2, r1
 8017d18:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 8017d1c:	460a      	mov	r2, r1
 8017d1e:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 8017d22:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8017d26:	4413      	add	r3, r2
 8017d28:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8017d2c:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8017d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d34:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 8017d38:	1851      	adds	r1, r2, r1
 8017d3a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8017d3e:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 8017d42:	414b      	adcs	r3, r1
 8017d44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8017d48:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8017d4c:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8017d50:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017d54:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8017d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	da0a      	bge.n	8017d76 <arm_softmax_s8+0x2afe>
 8017d60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017d64:	1851      	adds	r1, r2, r1
 8017d66:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8017d6a:	f143 0300 	adc.w	r3, r3, #0
 8017d6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8017d72:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8017d76:	f04f 0000 	mov.w	r0, #0
 8017d7a:	f04f 0100 	mov.w	r1, #0
 8017d7e:	0fd0      	lsrs	r0, r2, #31
 8017d80:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017d84:	17d9      	asrs	r1, r3, #31
 8017d86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d8a:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8017d8e:	4603      	mov	r3, r0
 8017d90:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017d92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d96:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8017d9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d9e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8017da2:	6812      	ldr	r2, [r2, #0]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	429a      	cmp	r2, r3
 8017da8:	d10e      	bne.n	8017dc8 <arm_softmax_s8+0x2b50>
 8017daa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dae:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017db8:	d106      	bne.n	8017dc8 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 8017dba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dbe:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8017dc2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017dc6:	6013      	str	r3, [r2, #0]
    return result;
 8017dc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dcc:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8017dd0:	681a      	ldr	r2, [r3, #0]
 8017dd2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dd6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8017dda:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8017ddc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017de0:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017de4:	2300      	movs	r3, #0
 8017de6:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8017de8:	2104      	movs	r1, #4
 8017dea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dee:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 8017df2:	1e4b      	subs	r3, r1, #1
 8017df4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8017df6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dfa:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 8017dfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e02:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 8017e06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e0a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8017e0e:	6812      	ldr	r2, [r2, #0]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	4013      	ands	r3, r2
 8017e14:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8017e16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e1a:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017e1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e22:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	109b      	asrs	r3, r3, #2
 8017e2a:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8017e2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e30:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8017e34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e38:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	105b      	asrs	r3, r3, #1
 8017e40:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8017e42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e46:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	da0a      	bge.n	8017e66 <arm_softmax_s8+0x2bee>
        threshold++;
 8017e50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e54:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8017e58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e5c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	3301      	adds	r3, #1
 8017e64:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8017e66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e6a:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8017e6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e72:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8017e76:	6812      	ldr	r2, [r2, #0]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	429a      	cmp	r2, r3
 8017e7c:	dd0a      	ble.n	8017e94 <arm_softmax_s8+0x2c1c>
        result++;
 8017e7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e82:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017e86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e8a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	3301      	adds	r3, #1
 8017e92:	6013      	str	r3, [r2, #0]
    return result;
 8017e94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e98:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017e9c:	681c      	ldr	r4, [r3, #0]
 8017e9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ea2:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8017ea6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017eaa:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	6013      	str	r3, [r2, #0]
 8017eb2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017eb6:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8017eba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ebe:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017ec6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017eca:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8017ece:	2300      	movs	r3, #0
 8017ed0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017ed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017ed6:	f04f 0300 	mov.w	r3, #0
 8017eda:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8017ede:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017ee2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ee6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	0fdb      	lsrs	r3, r3, #31
 8017eee:	b2da      	uxtb	r2, r3
 8017ef0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ef4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	0fdb      	lsrs	r3, r3, #31
 8017efc:	b2db      	uxtb	r3, r3
 8017efe:	4053      	eors	r3, r2
 8017f00:	b2db      	uxtb	r3, r3
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d012      	beq.n	8017f2c <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 8017f06:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8017f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f0e:	2100      	movs	r1, #0
 8017f10:	f1d2 0001 	rsbs	r0, r2, #1
 8017f14:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8017f18:	eb61 0303 	sbc.w	r3, r1, r3
 8017f1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8017f20:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8017f24:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8017f28:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 8017f2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f30:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	17da      	asrs	r2, r3, #31
 8017f38:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8017f3c:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 8017f40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f44:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	17da      	asrs	r2, r3, #31
 8017f4c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8017f50:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 8017f54:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8017f58:	460b      	mov	r3, r1
 8017f5a:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8017f5e:	fb02 f203 	mul.w	r2, r2, r3
 8017f62:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8017f66:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 8017f6a:	4601      	mov	r1, r0
 8017f6c:	fb01 f303 	mul.w	r3, r1, r3
 8017f70:	4413      	add	r3, r2
 8017f72:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 8017f76:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 8017f7a:	fba2 1201 	umull	r1, r2, r2, r1
 8017f7e:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 8017f82:	460a      	mov	r2, r1
 8017f84:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 8017f88:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 8017f8c:	4413      	add	r3, r2
 8017f8e:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8017f92:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8017f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f9a:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 8017f9e:	1851      	adds	r1, r2, r1
 8017fa0:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8017fa4:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 8017fa8:	414b      	adcs	r3, r1
 8017faa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8017fae:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8017fb2:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8017fb6:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8017fba:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8017fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	da0a      	bge.n	8017fdc <arm_softmax_s8+0x2d64>
 8017fc6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017fca:	1851      	adds	r1, r2, r1
 8017fcc:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8017fd0:	f143 0300 	adc.w	r3, r3, #0
 8017fd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8017fd8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8017fdc:	f04f 0000 	mov.w	r0, #0
 8017fe0:	f04f 0100 	mov.w	r1, #0
 8017fe4:	0fd0      	lsrs	r0, r2, #31
 8017fe6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017fea:	17d9      	asrs	r1, r3, #31
 8017fec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ff0:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017ff8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ffc:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8018000:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018004:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8018008:	6812      	ldr	r2, [r2, #0]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	429a      	cmp	r2, r3
 801800e:	d10e      	bne.n	801802e <arm_softmax_s8+0x2db6>
 8018010:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018014:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801801e:	d106      	bne.n	801802e <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 8018020:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018024:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8018028:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801802c:	6013      	str	r3, [r2, #0]
    return result;
 801802e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018032:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8018036:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8018038:	18e2      	adds	r2, r4, r3
 801803a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801803e:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8018042:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8018044:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018048:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 801804c:	2300      	movs	r3, #0
 801804e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018054:	f04f 0300 	mov.w	r3, #0
 8018058:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 801805c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018060:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018064:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	0fdb      	lsrs	r3, r3, #31
 801806c:	b2da      	uxtb	r2, r3
 801806e:	2300      	movs	r3, #0
 8018070:	4053      	eors	r3, r2
 8018072:	b2db      	uxtb	r3, r3
 8018074:	2b00      	cmp	r3, #0
 8018076:	d012      	beq.n	801809e <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 8018078:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018080:	2100      	movs	r1, #0
 8018082:	f1d2 0001 	rsbs	r0, r2, #1
 8018086:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 801808a:	eb61 0303 	sbc.w	r3, r1, r3
 801808e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8018092:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8018096:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 801809a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801809e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180a2:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	17da      	asrs	r2, r3, #31
 80180aa:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 80180ae:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 80180b2:	a3c9      	add	r3, pc, #804	; (adr r3, 80183d8 <arm_softmax_s8+0x3160>)
 80180b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b8:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 80180bc:	fb02 f001 	mul.w	r0, r2, r1
 80180c0:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 80180c4:	fb01 f103 	mul.w	r1, r1, r3
 80180c8:	4401      	add	r1, r0
 80180ca:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 80180ce:	fba0 2302 	umull	r2, r3, r0, r2
 80180d2:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 80180d6:	4613      	mov	r3, r2
 80180d8:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 80180dc:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80180e0:	18cb      	adds	r3, r1, r3
 80180e2:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 80180e6:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80180ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ee:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 80180f2:	1851      	adds	r1, r2, r1
 80180f4:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80180f8:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 80180fc:	414b      	adcs	r3, r1
 80180fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8018102:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8018106:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 801810a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801810e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8018112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018116:	2b00      	cmp	r3, #0
 8018118:	da0a      	bge.n	8018130 <arm_softmax_s8+0x2eb8>
 801811a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801811e:	1851      	adds	r1, r2, r1
 8018120:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8018124:	f143 0300 	adc.w	r3, r3, #0
 8018128:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801812c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8018130:	f04f 0000 	mov.w	r0, #0
 8018134:	f04f 0100 	mov.w	r1, #0
 8018138:	0fd0      	lsrs	r0, r2, #31
 801813a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801813e:	17d9      	asrs	r1, r3, #31
 8018140:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018144:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8018148:	4603      	mov	r3, r0
 801814a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801814c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018150:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8018154:	681a      	ldr	r2, [r3, #0]
 8018156:	4b9e      	ldr	r3, [pc, #632]	; (80183d0 <arm_softmax_s8+0x3158>)
 8018158:	429a      	cmp	r2, r3
 801815a:	d10e      	bne.n	801817a <arm_softmax_s8+0x2f02>
 801815c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018160:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801816a:	d106      	bne.n	801817a <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 801816c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018170:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8018174:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018178:	6013      	str	r3, [r2, #0]
    return result;
 801817a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801817e:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8018182:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8018184:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018188:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	441a      	add	r2, r3
 8018190:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018194:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8018198:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801819a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801819e:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 80181a2:	2300      	movs	r3, #0
 80181a4:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80181a6:	2102      	movs	r1, #2
 80181a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181ac:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 80181b0:	1e4b      	subs	r3, r1, #1
 80181b2:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80181b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181b8:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 80181bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181c0:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 80181c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181c8:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80181cc:	6812      	ldr	r2, [r2, #0]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	4013      	ands	r3, r2
 80181d2:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80181d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181d8:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 80181dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181e0:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	105b      	asrs	r3, r3, #1
 80181e8:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 80181ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181ee:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 80181f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181f6:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	105b      	asrs	r3, r3, #1
 80181fe:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8018200:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018204:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	2b00      	cmp	r3, #0
 801820c:	da0a      	bge.n	8018224 <arm_softmax_s8+0x2fac>
        threshold++;
 801820e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018212:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8018216:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801821a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	3301      	adds	r3, #1
 8018222:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8018224:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018228:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 801822c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018230:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8018234:	6812      	ldr	r2, [r2, #0]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	429a      	cmp	r2, r3
 801823a:	dd0a      	ble.n	8018252 <arm_softmax_s8+0x2fda>
        result++;
 801823c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018240:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8018244:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018248:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	3301      	adds	r3, #1
 8018250:	6013      	str	r3, [r2, #0]
    return result;
 8018252:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018256:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801825a:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 801825c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018260:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	441a      	add	r2, r3
 8018268:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801826c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8018270:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8018272:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018276:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 801827a:	2300      	movs	r3, #0
 801827c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801827e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018282:	f04f 0300 	mov.w	r3, #0
 8018286:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 801828a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801828e:	2200      	movs	r2, #0
 8018290:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018294:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	0fdb      	lsrs	r3, r3, #31
 801829c:	b2db      	uxtb	r3, r3
 801829e:	4053      	eors	r3, r2
 80182a0:	b2db      	uxtb	r3, r3
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d012      	beq.n	80182cc <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 80182a6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80182aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ae:	2100      	movs	r1, #0
 80182b0:	f1d2 0001 	rsbs	r0, r2, #1
 80182b4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80182b8:	eb61 0303 	sbc.w	r3, r1, r3
 80182bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80182c0:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80182c4:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 80182c8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80182cc:	a13e      	add	r1, pc, #248	; (adr r1, 80183c8 <arm_softmax_s8+0x3150>)
 80182ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182d6:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	17da      	asrs	r2, r3, #31
 80182de:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 80182e2:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 80182e6:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80182ea:	fb03 f201 	mul.w	r2, r3, r1
 80182ee:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80182f2:	fb00 f303 	mul.w	r3, r0, r3
 80182f6:	4413      	add	r3, r2
 80182f8:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 80182fc:	fba0 1202 	umull	r1, r2, r0, r2
 8018300:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 8018304:	460a      	mov	r2, r1
 8018306:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 801830a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 801830e:	4413      	add	r3, r2
 8018310:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8018314:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801831c:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 8018320:	1851      	adds	r1, r2, r1
 8018322:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8018326:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 801832a:	414b      	adcs	r3, r1
 801832c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8018330:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8018334:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018338:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801833c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018344:	2b00      	cmp	r3, #0
 8018346:	da0a      	bge.n	801835e <arm_softmax_s8+0x30e6>
 8018348:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801834c:	1851      	adds	r1, r2, r1
 801834e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8018352:	f143 0300 	adc.w	r3, r3, #0
 8018356:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801835a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801835e:	f04f 0000 	mov.w	r0, #0
 8018362:	f04f 0100 	mov.w	r1, #0
 8018366:	0fd0      	lsrs	r0, r2, #31
 8018368:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801836c:	17d9      	asrs	r1, r3, #31
 801836e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018372:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8018376:	4603      	mov	r3, r0
 8018378:	6013      	str	r3, [r2, #0]
    return result;
 801837a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801837e:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8018382:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 8018384:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018388:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801838c:	4b11      	ldr	r3, [pc, #68]	; (80183d4 <arm_softmax_s8+0x315c>)
 801838e:	440b      	add	r3, r1
 8018390:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8018392:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018396:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801839a:	6819      	ldr	r1, [r3, #0]
 801839c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183a0:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80183a4:	1c4b      	adds	r3, r1, #1
 80183a6:	6013      	str	r3, [r2, #0]
 80183a8:	2301      	movs	r3, #1
 80183aa:	fa03 f201 	lsl.w	r2, r3, r1
 80183ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183b2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	4013      	ands	r3, r2
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d010      	beq.n	80183e0 <arm_softmax_s8+0x3168>
 80183be:	f04f 32ff 	mov.w	r2, #4294967295
 80183c2:	e00e      	b.n	80183e2 <arm_softmax_s8+0x316a>
 80183c4:	f3af 8000 	nop.w
 80183c8:	70f5a894 	.word	0x70f5a894
 80183cc:	00000000 	.word	0x00000000
 80183d0:	2aaaaaab 	.word	0x2aaaaaab
 80183d4:	70f5a894 	.word	0x70f5a894
 80183d8:	2aaaaaab 	.word	0x2aaaaaab
 80183dc:	00000000 	.word	0x00000000
 80183e0:	2200      	movs	r2, #0
 80183e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183e6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80183ea:	601a      	str	r2, [r3, #0]
 80183ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183f0:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 80183f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183f8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018400:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018404:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8018408:	2300      	movs	r3, #0
 801840a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801840c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018410:	f04f 0300 	mov.w	r3, #0
 8018414:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8018418:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801841c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018420:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	0fdb      	lsrs	r3, r3, #31
 8018428:	b2da      	uxtb	r2, r3
 801842a:	2300      	movs	r3, #0
 801842c:	4053      	eors	r3, r2
 801842e:	b2db      	uxtb	r3, r3
 8018430:	2b00      	cmp	r3, #0
 8018432:	d012      	beq.n	801845a <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 8018434:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8018438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801843c:	2100      	movs	r1, #0
 801843e:	f1d2 0001 	rsbs	r0, r2, #1
 8018442:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8018446:	eb61 0303 	sbc.w	r3, r1, r3
 801844a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801844e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8018452:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8018456:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801845a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801845e:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	17da      	asrs	r2, r3, #31
 8018466:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 801846a:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 801846e:	a3c4      	add	r3, pc, #784	; (adr r3, 8018780 <arm_softmax_s8+0x3508>)
 8018470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018474:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8018478:	fb02 f001 	mul.w	r0, r2, r1
 801847c:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8018480:	fb01 f103 	mul.w	r1, r1, r3
 8018484:	4401      	add	r1, r0
 8018486:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 801848a:	fba0 2302 	umull	r2, r3, r0, r2
 801848e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8018492:	4613      	mov	r3, r2
 8018494:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8018498:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 801849c:	18cb      	adds	r3, r1, r3
 801849e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 80184a2:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80184a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184aa:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 80184ae:	1851      	adds	r1, r2, r1
 80184b0:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80184b4:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 80184b8:	414b      	adcs	r3, r1
 80184ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80184be:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 80184c2:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 80184c6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80184ca:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80184ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	da0a      	bge.n	80184ec <arm_softmax_s8+0x3274>
 80184d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80184da:	1851      	adds	r1, r2, r1
 80184dc:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 80184e0:	f143 0300 	adc.w	r3, r3, #0
 80184e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80184e8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80184ec:	f04f 0000 	mov.w	r0, #0
 80184f0:	f04f 0100 	mov.w	r1, #0
 80184f4:	0fd0      	lsrs	r0, r2, #31
 80184f6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80184fa:	17d9      	asrs	r1, r3, #31
 80184fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018500:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8018504:	4603      	mov	r3, r0
 8018506:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018508:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801850c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8018510:	681a      	ldr	r2, [r3, #0]
 8018512:	4b99      	ldr	r3, [pc, #612]	; (8018778 <arm_softmax_s8+0x3500>)
 8018514:	429a      	cmp	r2, r3
 8018516:	d10e      	bne.n	8018536 <arm_softmax_s8+0x32be>
 8018518:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801851c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018526:	d106      	bne.n	8018536 <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 8018528:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801852c:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8018530:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018534:	6013      	str	r3, [r2, #0]
    return result;
 8018536:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801853a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801853e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8018540:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018544:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	ea02 0003 	and.w	r0, r2, r3
 801854e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018552:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	43da      	mvns	r2, r3
 801855a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801855e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	ea02 0103 	and.w	r1, r2, r3
 8018568:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801856c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018570:	ea80 0301 	eor.w	r3, r0, r1
 8018574:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8018576:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801857a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801857e:	6819      	ldr	r1, [r3, #0]
 8018580:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018584:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018588:	1c4b      	adds	r3, r1, #1
 801858a:	6013      	str	r3, [r2, #0]
 801858c:	2301      	movs	r3, #1
 801858e:	fa03 f201 	lsl.w	r2, r3, r1
 8018592:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018596:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	4013      	ands	r3, r2
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d002      	beq.n	80185a8 <arm_softmax_s8+0x3330>
 80185a2:	f04f 32ff 	mov.w	r2, #4294967295
 80185a6:	e000      	b.n	80185aa <arm_softmax_s8+0x3332>
 80185a8:	2200      	movs	r2, #0
 80185aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80185ae:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80185b2:	601a      	str	r2, [r3, #0]
 80185b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80185b8:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 80185bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80185c0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80185c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80185cc:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 80185d0:	2300      	movs	r3, #0
 80185d2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80185d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80185d8:	f04f 0300 	mov.w	r3, #0
 80185dc:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 80185e0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80185e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80185e8:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	0fdb      	lsrs	r3, r3, #31
 80185f0:	b2da      	uxtb	r2, r3
 80185f2:	2300      	movs	r3, #0
 80185f4:	4053      	eors	r3, r2
 80185f6:	b2db      	uxtb	r3, r3
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d012      	beq.n	8018622 <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 80185fc:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8018600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018604:	2100      	movs	r1, #0
 8018606:	f1d2 0001 	rsbs	r0, r2, #1
 801860a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 801860e:	eb61 0303 	sbc.w	r3, r1, r3
 8018612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8018616:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 801861a:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 801861e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018622:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018626:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	17da      	asrs	r2, r3, #31
 801862e:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8018632:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 8018636:	a34e      	add	r3, pc, #312	; (adr r3, 8018770 <arm_softmax_s8+0x34f8>)
 8018638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801863c:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 8018640:	fb02 f001 	mul.w	r0, r2, r1
 8018644:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 8018648:	fb01 f103 	mul.w	r1, r1, r3
 801864c:	4401      	add	r1, r0
 801864e:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 8018652:	fba0 2302 	umull	r2, r3, r0, r2
 8018656:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 801865a:	4613      	mov	r3, r2
 801865c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8018660:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8018664:	18cb      	adds	r3, r1, r3
 8018666:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 801866a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018672:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 8018676:	1851      	adds	r1, r2, r1
 8018678:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 801867c:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 8018680:	414b      	adcs	r3, r1
 8018682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018686:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 801868a:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 801868e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018692:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8018696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801869a:	2b00      	cmp	r3, #0
 801869c:	da0a      	bge.n	80186b4 <arm_softmax_s8+0x343c>
 801869e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80186a2:	1851      	adds	r1, r2, r1
 80186a4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80186a8:	f143 0300 	adc.w	r3, r3, #0
 80186ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80186b0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80186b4:	f04f 0000 	mov.w	r0, #0
 80186b8:	f04f 0100 	mov.w	r1, #0
 80186bc:	0fd0      	lsrs	r0, r2, #31
 80186be:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80186c2:	17d9      	asrs	r1, r3, #31
 80186c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186c8:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 80186cc:	4603      	mov	r3, r0
 80186ce:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80186d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186d4:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80186d8:	681a      	ldr	r2, [r3, #0]
 80186da:	4b28      	ldr	r3, [pc, #160]	; (801877c <arm_softmax_s8+0x3504>)
 80186dc:	429a      	cmp	r2, r3
 80186de:	d10e      	bne.n	80186fe <arm_softmax_s8+0x3486>
 80186e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186e4:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80186ee:	d106      	bne.n	80186fe <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 80186f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186f4:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 80186f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80186fc:	6013      	str	r3, [r2, #0]
    return result;
 80186fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018702:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8018706:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8018708:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801870c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	ea02 0003 	and.w	r0, r2, r3
 8018716:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801871a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	43da      	mvns	r2, r3
 8018722:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018726:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	ea02 0103 	and.w	r1, r2, r3
 8018730:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018734:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018738:	ea80 0301 	eor.w	r3, r0, r1
 801873c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 801873e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018742:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018746:	6819      	ldr	r1, [r3, #0]
 8018748:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801874c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018750:	1c4b      	adds	r3, r1, #1
 8018752:	6013      	str	r3, [r2, #0]
 8018754:	2301      	movs	r3, #1
 8018756:	fa03 f201 	lsl.w	r2, r3, r1
 801875a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801875e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	4013      	ands	r3, r2
 8018766:	2b00      	cmp	r3, #0
 8018768:	d00e      	beq.n	8018788 <arm_softmax_s8+0x3510>
 801876a:	f04f 32ff 	mov.w	r2, #4294967295
 801876e:	e00c      	b.n	801878a <arm_softmax_s8+0x3512>
 8018770:	4da2cbf2 	.word	0x4da2cbf2
 8018774:	00000000 	.word	0x00000000
 8018778:	63afbe7b 	.word	0x63afbe7b
 801877c:	4da2cbf2 	.word	0x4da2cbf2
 8018780:	63afbe7b 	.word	0x63afbe7b
 8018784:	00000000 	.word	0x00000000
 8018788:	2200      	movs	r2, #0
 801878a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801878e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018792:	601a      	str	r2, [r3, #0]
 8018794:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018798:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 801879c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80187a0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80187a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80187ac:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 80187b0:	2300      	movs	r3, #0
 80187b2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80187b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80187b8:	f04f 0300 	mov.w	r3, #0
 80187bc:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 80187c0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80187c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80187c8:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	0fdb      	lsrs	r3, r3, #31
 80187d0:	b2da      	uxtb	r2, r3
 80187d2:	2300      	movs	r3, #0
 80187d4:	4053      	eors	r3, r2
 80187d6:	b2db      	uxtb	r3, r3
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d012      	beq.n	8018802 <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 80187dc:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80187e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187e4:	2100      	movs	r1, #0
 80187e6:	f1d2 0001 	rsbs	r0, r2, #1
 80187ea:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 80187ee:	eb61 0303 	sbc.w	r3, r1, r3
 80187f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80187f6:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80187fa:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80187fe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018802:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018806:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	17da      	asrs	r2, r3, #31
 801880e:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8018812:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 8018816:	a3c0      	add	r3, pc, #768	; (adr r3, 8018b18 <arm_softmax_s8+0x38a0>)
 8018818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801881c:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8018820:	fb02 f001 	mul.w	r0, r2, r1
 8018824:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8018828:	fb01 f103 	mul.w	r1, r1, r3
 801882c:	4401      	add	r1, r0
 801882e:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 8018832:	fba0 2302 	umull	r2, r3, r0, r2
 8018836:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 801883a:	4613      	mov	r3, r2
 801883c:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8018840:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8018844:	18cb      	adds	r3, r1, r3
 8018846:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 801884a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018852:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 8018856:	1851      	adds	r1, r2, r1
 8018858:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801885c:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 8018860:	414b      	adcs	r3, r1
 8018862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018866:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 801886a:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 801886e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018872:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8018876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801887a:	2b00      	cmp	r3, #0
 801887c:	da08      	bge.n	8018890 <arm_softmax_s8+0x3618>
 801887e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018882:	1851      	adds	r1, r2, r1
 8018884:	67b9      	str	r1, [r7, #120]	; 0x78
 8018886:	f143 0300 	adc.w	r3, r3, #0
 801888a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801888c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8018890:	f04f 0000 	mov.w	r0, #0
 8018894:	f04f 0100 	mov.w	r1, #0
 8018898:	0fd0      	lsrs	r0, r2, #31
 801889a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801889e:	17d9      	asrs	r1, r3, #31
 80188a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80188a4:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 80188a8:	4603      	mov	r3, r0
 80188aa:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80188ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80188b0:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80188b4:	681a      	ldr	r2, [r3, #0]
 80188b6:	4b96      	ldr	r3, [pc, #600]	; (8018b10 <arm_softmax_s8+0x3898>)
 80188b8:	429a      	cmp	r2, r3
 80188ba:	d10e      	bne.n	80188da <arm_softmax_s8+0x3662>
 80188bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80188c0:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80188ca:	d106      	bne.n	80188da <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 80188cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80188d0:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 80188d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80188d8:	6013      	str	r3, [r2, #0]
    return result;
 80188da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80188de:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80188e2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 80188e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80188e8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	ea02 0003 	and.w	r0, r2, r3
 80188f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80188f6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	43da      	mvns	r2, r3
 80188fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018902:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	ea02 0103 	and.w	r1, r2, r3
 801890c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018910:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018914:	ea80 0301 	eor.w	r3, r0, r1
 8018918:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 801891a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801891e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018922:	6819      	ldr	r1, [r3, #0]
 8018924:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018928:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801892c:	1c4b      	adds	r3, r1, #1
 801892e:	6013      	str	r3, [r2, #0]
 8018930:	2301      	movs	r3, #1
 8018932:	fa03 f201 	lsl.w	r2, r3, r1
 8018936:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801893a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	4013      	ands	r3, r2
 8018942:	2b00      	cmp	r3, #0
 8018944:	d002      	beq.n	801894c <arm_softmax_s8+0x36d4>
 8018946:	f04f 32ff 	mov.w	r2, #4294967295
 801894a:	e000      	b.n	801894e <arm_softmax_s8+0x36d6>
 801894c:	2200      	movs	r2, #0
 801894e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018952:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018956:	601a      	str	r2, [r3, #0]
 8018958:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801895c:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8018960:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018964:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801896c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018970:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8018974:	2300      	movs	r3, #0
 8018976:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018978:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801897c:	f04f 0300 	mov.w	r3, #0
 8018980:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8018984:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018988:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801898c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	0fdb      	lsrs	r3, r3, #31
 8018994:	b2da      	uxtb	r2, r3
 8018996:	2300      	movs	r3, #0
 8018998:	4053      	eors	r3, r2
 801899a:	b2db      	uxtb	r3, r3
 801899c:	2b00      	cmp	r3, #0
 801899e:	d010      	beq.n	80189c2 <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 80189a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80189a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189a8:	2100      	movs	r1, #0
 80189aa:	f1d2 0001 	rsbs	r0, r2, #1
 80189ae:	6738      	str	r0, [r7, #112]	; 0x70
 80189b0:	eb61 0303 	sbc.w	r3, r1, r3
 80189b4:	677b      	str	r3, [r7, #116]	; 0x74
 80189b6:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80189ba:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80189be:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80189c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80189c6:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	17da      	asrs	r2, r3, #31
 80189ce:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 80189d2:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 80189d6:	a34c      	add	r3, pc, #304	; (adr r3, 8018b08 <arm_softmax_s8+0x3890>)
 80189d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189dc:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 80189e0:	fb02 f001 	mul.w	r0, r2, r1
 80189e4:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 80189e8:	fb01 f103 	mul.w	r1, r1, r3
 80189ec:	4401      	add	r1, r0
 80189ee:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 80189f2:	fba0 2302 	umull	r2, r3, r0, r2
 80189f6:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 80189fa:	4613      	mov	r3, r2
 80189fc:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8018a00:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8018a04:	18cb      	adds	r3, r1, r3
 8018a06:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8018a0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8018a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a12:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 8018a16:	1851      	adds	r1, r2, r1
 8018a18:	66b9      	str	r1, [r7, #104]	; 0x68
 8018a1a:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 8018a1e:	414b      	adcs	r3, r1
 8018a20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018a22:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8018a26:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8018a2a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018a2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8018a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	da08      	bge.n	8018a4c <arm_softmax_s8+0x37d4>
 8018a3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018a3e:	1851      	adds	r1, r2, r1
 8018a40:	6639      	str	r1, [r7, #96]	; 0x60
 8018a42:	f143 0300 	adc.w	r3, r3, #0
 8018a46:	667b      	str	r3, [r7, #100]	; 0x64
 8018a48:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8018a4c:	f04f 0000 	mov.w	r0, #0
 8018a50:	f04f 0100 	mov.w	r1, #0
 8018a54:	0fd0      	lsrs	r0, r2, #31
 8018a56:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018a5a:	17d9      	asrs	r1, r3, #31
 8018a5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a60:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8018a64:	4603      	mov	r3, r0
 8018a66:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018a68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a6c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8018a70:	681a      	ldr	r2, [r3, #0]
 8018a72:	4b28      	ldr	r3, [pc, #160]	; (8018b14 <arm_softmax_s8+0x389c>)
 8018a74:	429a      	cmp	r2, r3
 8018a76:	d10e      	bne.n	8018a96 <arm_softmax_s8+0x381e>
 8018a78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a7c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018a86:	d106      	bne.n	8018a96 <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 8018a88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a8c:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8018a90:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018a94:	6013      	str	r3, [r2, #0]
    return result;
 8018a96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a9a:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8018a9e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8018aa0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018aa4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	ea02 0003 	and.w	r0, r2, r3
 8018aae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ab2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	43da      	mvns	r2, r3
 8018aba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018abe:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	ea02 0103 	and.w	r1, r2, r3
 8018ac8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018acc:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018ad0:	ea80 0301 	eor.w	r3, r0, r1
 8018ad4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 8018ad6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ada:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018ade:	6819      	ldr	r1, [r3, #0]
 8018ae0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ae4:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018ae8:	1c4b      	adds	r3, r1, #1
 8018aea:	6013      	str	r3, [r2, #0]
 8018aec:	2301      	movs	r3, #1
 8018aee:	fa03 f201 	lsl.w	r2, r3, r1
 8018af2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018af6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	4013      	ands	r3, r2
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d00e      	beq.n	8018b20 <arm_softmax_s8+0x38a8>
 8018b02:	f04f 32ff 	mov.w	r2, #4294967295
 8018b06:	e00c      	b.n	8018b22 <arm_softmax_s8+0x38aa>
 8018b08:	1152aaa4 	.word	0x1152aaa4
 8018b0c:	00000000 	.word	0x00000000
 8018b10:	2f16ac6c 	.word	0x2f16ac6c
 8018b14:	1152aaa4 	.word	0x1152aaa4
 8018b18:	2f16ac6c 	.word	0x2f16ac6c
 8018b1c:	00000000 	.word	0x00000000
 8018b20:	2200      	movs	r2, #0
 8018b22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b26:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018b2a:	601a      	str	r2, [r3, #0]
 8018b2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b30:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 8018b34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b38:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018b40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b44:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8018b48:	2300      	movs	r3, #0
 8018b4a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018b4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018b50:	f04f 0300 	mov.w	r3, #0
 8018b54:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8018b58:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018b5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b60:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	0fdb      	lsrs	r3, r3, #31
 8018b68:	b2da      	uxtb	r2, r3
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	4053      	eors	r3, r2
 8018b6e:	b2db      	uxtb	r3, r3
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d010      	beq.n	8018b96 <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 8018b74:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8018b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b7c:	2100      	movs	r1, #0
 8018b7e:	f1d2 0001 	rsbs	r0, r2, #1
 8018b82:	65b8      	str	r0, [r7, #88]	; 0x58
 8018b84:	eb61 0303 	sbc.w	r3, r1, r3
 8018b88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018b8a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8018b8e:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8018b92:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018b96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b9a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	17da      	asrs	r2, r3, #31
 8018ba2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8018ba6:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8018baa:	a3bd      	add	r3, pc, #756	; (adr r3, 8018ea0 <arm_softmax_s8+0x3c28>)
 8018bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bb0:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8018bb4:	fb02 f001 	mul.w	r0, r2, r1
 8018bb8:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8018bbc:	fb01 f103 	mul.w	r1, r1, r3
 8018bc0:	4401      	add	r1, r0
 8018bc2:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8018bc6:	fba0 2302 	umull	r2, r3, r0, r2
 8018bca:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8018bce:	4613      	mov	r3, r2
 8018bd0:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8018bd4:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8018bd8:	18cb      	adds	r3, r1, r3
 8018bda:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8018bde:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8018be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018be6:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 8018bea:	1851      	adds	r1, r2, r1
 8018bec:	6539      	str	r1, [r7, #80]	; 0x50
 8018bee:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 8018bf2:	414b      	adcs	r3, r1
 8018bf4:	657b      	str	r3, [r7, #84]	; 0x54
 8018bf6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8018bfa:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8018bfe:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018c02:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8018c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	da08      	bge.n	8018c20 <arm_softmax_s8+0x39a8>
 8018c0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018c12:	1851      	adds	r1, r2, r1
 8018c14:	64b9      	str	r1, [r7, #72]	; 0x48
 8018c16:	f143 0300 	adc.w	r3, r3, #0
 8018c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018c1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8018c20:	f04f 0000 	mov.w	r0, #0
 8018c24:	f04f 0100 	mov.w	r1, #0
 8018c28:	0fd0      	lsrs	r0, r2, #31
 8018c2a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018c2e:	17d9      	asrs	r1, r3, #31
 8018c30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c34:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8018c38:	4603      	mov	r3, r0
 8018c3a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018c3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c40:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8018c44:	681a      	ldr	r2, [r3, #0]
 8018c46:	4b94      	ldr	r3, [pc, #592]	; (8018e98 <arm_softmax_s8+0x3c20>)
 8018c48:	429a      	cmp	r2, r3
 8018c4a:	d10e      	bne.n	8018c6a <arm_softmax_s8+0x39f2>
 8018c4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c50:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018c5a:	d106      	bne.n	8018c6a <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 8018c5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c60:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8018c64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018c68:	6013      	str	r3, [r2, #0]
    return result;
 8018c6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c6e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8018c72:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8018c74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c78:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	ea02 0003 	and.w	r0, r2, r3
 8018c82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c86:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	43da      	mvns	r2, r3
 8018c8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c92:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	ea02 0103 	and.w	r1, r2, r3
 8018c9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ca0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018ca4:	ea80 0301 	eor.w	r3, r0, r1
 8018ca8:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 8018caa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018cae:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018cb2:	6819      	ldr	r1, [r3, #0]
 8018cb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018cb8:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018cbc:	1c4b      	adds	r3, r1, #1
 8018cbe:	6013      	str	r3, [r2, #0]
 8018cc0:	2301      	movs	r3, #1
 8018cc2:	fa03 f201 	lsl.w	r2, r3, r1
 8018cc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018cca:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	4013      	ands	r3, r2
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d002      	beq.n	8018cdc <arm_softmax_s8+0x3a64>
 8018cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8018cda:	e000      	b.n	8018cde <arm_softmax_s8+0x3a66>
 8018cdc:	2200      	movs	r2, #0
 8018cde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ce2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018ce6:	601a      	str	r2, [r3, #0]
 8018ce8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018cec:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8018cf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018cf4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018cfc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d00:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8018d04:	2300      	movs	r3, #0
 8018d06:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018d08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018d0c:	f04f 0300 	mov.w	r3, #0
 8018d10:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8018d14:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018d18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d1c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	0fdb      	lsrs	r3, r3, #31
 8018d24:	b2da      	uxtb	r2, r3
 8018d26:	2300      	movs	r3, #0
 8018d28:	4053      	eors	r3, r2
 8018d2a:	b2db      	uxtb	r3, r3
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d010      	beq.n	8018d52 <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 8018d30:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8018d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d38:	2100      	movs	r1, #0
 8018d3a:	f1d2 0001 	rsbs	r0, r2, #1
 8018d3e:	6438      	str	r0, [r7, #64]	; 0x40
 8018d40:	eb61 0303 	sbc.w	r3, r1, r3
 8018d44:	647b      	str	r3, [r7, #68]	; 0x44
 8018d46:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8018d4a:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8018d4e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018d52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d56:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	17da      	asrs	r2, r3, #31
 8018d5e:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8018d62:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 8018d66:	4a4d      	ldr	r2, [pc, #308]	; (8018e9c <arm_softmax_s8+0x3c24>)
 8018d68:	f04f 0300 	mov.w	r3, #0
 8018d6c:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8018d70:	fb02 f001 	mul.w	r0, r2, r1
 8018d74:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8018d78:	fb01 f103 	mul.w	r1, r1, r3
 8018d7c:	4401      	add	r1, r0
 8018d7e:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8018d82:	fba0 2302 	umull	r2, r3, r0, r2
 8018d86:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8018d8a:	4613      	mov	r3, r2
 8018d8c:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8018d90:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8018d94:	18cb      	adds	r3, r1, r3
 8018d96:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8018d9a:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8018d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da2:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 8018da6:	1851      	adds	r1, r2, r1
 8018da8:	63b9      	str	r1, [r7, #56]	; 0x38
 8018daa:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 8018dae:	414b      	adcs	r3, r1
 8018db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018db2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8018db6:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8018dba:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018dbe:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8018dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	da08      	bge.n	8018ddc <arm_softmax_s8+0x3b64>
 8018dca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018dce:	1851      	adds	r1, r2, r1
 8018dd0:	6339      	str	r1, [r7, #48]	; 0x30
 8018dd2:	f143 0300 	adc.w	r3, r3, #0
 8018dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8018dd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8018ddc:	f04f 0000 	mov.w	r0, #0
 8018de0:	f04f 0100 	mov.w	r1, #0
 8018de4:	0fd0      	lsrs	r0, r2, #31
 8018de6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018dea:	17d9      	asrs	r1, r3, #31
 8018dec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018df0:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8018df4:	4603      	mov	r3, r0
 8018df6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018df8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018dfc:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8018e00:	681a      	ldr	r2, [r3, #0]
 8018e02:	4b26      	ldr	r3, [pc, #152]	; (8018e9c <arm_softmax_s8+0x3c24>)
 8018e04:	429a      	cmp	r2, r3
 8018e06:	d10e      	bne.n	8018e26 <arm_softmax_s8+0x3bae>
 8018e08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e0c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018e16:	d106      	bne.n	8018e26 <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 8018e18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e1c:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8018e20:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018e24:	6013      	str	r3, [r2, #0]
    return result;
 8018e26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e2a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8018e2e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8018e30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e34:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	ea02 0003 	and.w	r0, r2, r3
 8018e3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e42:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	43da      	mvns	r2, r3
 8018e4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e4e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	ea02 0103 	and.w	r1, r2, r3
 8018e58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e5c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018e60:	ea80 0301 	eor.w	r3, r0, r1
 8018e64:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 8018e66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e6a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018e6e:	6819      	ldr	r1, [r3, #0]
 8018e70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e74:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018e78:	1c4b      	adds	r3, r1, #1
 8018e7a:	6013      	str	r3, [r2, #0]
 8018e7c:	2301      	movs	r3, #1
 8018e7e:	fa03 f201 	lsl.w	r2, r3, r1
 8018e82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e86:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	4013      	ands	r3, r2
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d00a      	beq.n	8018ea8 <arm_softmax_s8+0x3c30>
 8018e92:	f04f 32ff 	mov.w	r2, #4294967295
 8018e96:	e008      	b.n	8018eaa <arm_softmax_s8+0x3c32>
 8018e98:	02582ab7 	.word	0x02582ab7
 8018e9c:	000afe11 	.word	0x000afe11
 8018ea0:	02582ab7 	.word	0x02582ab7
 8018ea4:	00000000 	.word	0x00000000
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018eae:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018eb2:	601a      	str	r2, [r3, #0]
 8018eb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018eb8:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8018ebc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ec0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018ec8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ecc:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018ed4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018ed8:	f04f 0300 	mov.w	r3, #0
 8018edc:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8018ee0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018ee4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ee8:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	0fdb      	lsrs	r3, r3, #31
 8018ef0:	b2da      	uxtb	r2, r3
 8018ef2:	2300      	movs	r3, #0
 8018ef4:	4053      	eors	r3, r2
 8018ef6:	b2db      	uxtb	r3, r3
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d010      	beq.n	8018f1e <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 8018efc:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8018f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f04:	2100      	movs	r1, #0
 8018f06:	f1d2 0001 	rsbs	r0, r2, #1
 8018f0a:	62b8      	str	r0, [r7, #40]	; 0x28
 8018f0c:	eb61 0303 	sbc.w	r3, r1, r3
 8018f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f12:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8018f16:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8018f1a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018f1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f22:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	17da      	asrs	r2, r3, #31
 8018f2a:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8018f2e:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8018f32:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8018f36:	f04f 0300 	mov.w	r3, #0
 8018f3a:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 8018f3e:	fb02 f001 	mul.w	r0, r2, r1
 8018f42:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 8018f46:	fb01 f103 	mul.w	r1, r1, r3
 8018f4a:	4401      	add	r1, r0
 8018f4c:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 8018f50:	fba0 2302 	umull	r2, r3, r0, r2
 8018f54:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8018f58:	4613      	mov	r3, r2
 8018f5a:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8018f5e:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8018f62:	18cb      	adds	r3, r1, r3
 8018f64:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8018f68:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8018f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f70:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 8018f74:	1851      	adds	r1, r2, r1
 8018f76:	6239      	str	r1, [r7, #32]
 8018f78:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 8018f7c:	414b      	adcs	r3, r1
 8018f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8018f80:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8018f84:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8018f88:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018f8c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8018f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	da08      	bge.n	8018faa <arm_softmax_s8+0x3d32>
 8018f98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018f9c:	1851      	adds	r1, r2, r1
 8018f9e:	61b9      	str	r1, [r7, #24]
 8018fa0:	f143 0300 	adc.w	r3, r3, #0
 8018fa4:	61fb      	str	r3, [r7, #28]
 8018fa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018faa:	f04f 0000 	mov.w	r0, #0
 8018fae:	f04f 0100 	mov.w	r1, #0
 8018fb2:	0fd0      	lsrs	r0, r2, #31
 8018fb4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018fb8:	17d9      	asrs	r1, r3, #31
 8018fba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fbe:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8018fc2:	4603      	mov	r3, r0
 8018fc4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018fc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fca:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	2bf2      	cmp	r3, #242	; 0xf2
 8018fd2:	d10e      	bne.n	8018ff2 <arm_softmax_s8+0x3d7a>
 8018fd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fd8:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018fe2:	d106      	bne.n	8018ff2 <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 8018fe4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fe8:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8018fec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018ff0:	6013      	str	r3, [r2, #0]
    return result;
 8018ff2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ff6:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8018ffa:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8018ffc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019000:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	ea02 0003 	and.w	r0, r2, r3
 801900a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801900e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	43da      	mvns	r2, r3
 8019016:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801901a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	ea02 0103 	and.w	r1, r2, r3
 8019024:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019028:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801902c:	ea80 0301 	eor.w	r3, r0, r1
 8019030:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 8019032:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019036:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d102      	bne.n	8019046 <arm_softmax_s8+0x3dce>
 8019040:	f04f 32ff 	mov.w	r2, #4294967295
 8019044:	e000      	b.n	8019048 <arm_softmax_s8+0x3dd0>
 8019046:	2200      	movs	r2, #0
 8019048:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801904c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8019050:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8019052:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019056:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019060:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019064:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	43da      	mvns	r2, r3
 801906c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019070:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	4013      	ands	r3, r2
 8019078:	4059      	eors	r1, r3
 801907a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801907e:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8019082:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8019086:	6013      	str	r3, [r2, #0]
 8019088:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801908c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8019090:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8019092:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019096:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 801909a:	2300      	movs	r3, #0
 801909c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801909e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80190a2:	f04f 0300 	mov.w	r3, #0
 80190a6:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 80190aa:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80190ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80190b2:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	0fdb      	lsrs	r3, r3, #31
 80190ba:	b2da      	uxtb	r2, r3
 80190bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80190c0:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	0fdb      	lsrs	r3, r3, #31
 80190c8:	b2db      	uxtb	r3, r3
 80190ca:	4053      	eors	r3, r2
 80190cc:	b2db      	uxtb	r3, r3
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d010      	beq.n	80190f4 <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 80190d2:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80190d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190da:	2100      	movs	r1, #0
 80190dc:	f1d2 0001 	rsbs	r0, r2, #1
 80190e0:	6138      	str	r0, [r7, #16]
 80190e2:	eb61 0303 	sbc.w	r3, r1, r3
 80190e6:	617b      	str	r3, [r7, #20]
 80190e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80190ec:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 80190f0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80190f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80190f8:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	17da      	asrs	r2, r3, #31
 8019100:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8019104:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 8019108:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801910c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	17da      	asrs	r2, r3, #31
 8019114:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8019118:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 801911c:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 8019120:	460b      	mov	r3, r1
 8019122:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8019126:	fb02 f203 	mul.w	r2, r2, r3
 801912a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 801912e:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 8019132:	4601      	mov	r1, r0
 8019134:	fb01 f303 	mul.w	r3, r1, r3
 8019138:	4413      	add	r3, r2
 801913a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801913e:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 8019142:	fba2 1201 	umull	r1, r2, r2, r1
 8019146:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 801914a:	460a      	mov	r2, r1
 801914c:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 8019150:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8019154:	4413      	add	r3, r2
 8019156:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 801915a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019162:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 8019166:	1851      	adds	r1, r2, r1
 8019168:	60b9      	str	r1, [r7, #8]
 801916a:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 801916e:	414b      	adcs	r3, r1
 8019170:	60fb      	str	r3, [r7, #12]
 8019172:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8019176:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801917a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801917e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8019182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019186:	2b00      	cmp	r3, #0
 8019188:	da08      	bge.n	801919c <arm_softmax_s8+0x3f24>
 801918a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801918e:	1851      	adds	r1, r2, r1
 8019190:	6039      	str	r1, [r7, #0]
 8019192:	f143 0300 	adc.w	r3, r3, #0
 8019196:	607b      	str	r3, [r7, #4]
 8019198:	e9d7 2300 	ldrd	r2, r3, [r7]
 801919c:	f04f 0000 	mov.w	r0, #0
 80191a0:	f04f 0100 	mov.w	r1, #0
 80191a4:	0fd0      	lsrs	r0, r2, #31
 80191a6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80191aa:	17d9      	asrs	r1, r3, #31
 80191ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80191b0:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 80191b4:	4603      	mov	r3, r0
 80191b6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80191b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80191bc:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 80191c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80191c4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80191c8:	6812      	ldr	r2, [r2, #0]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	429a      	cmp	r2, r3
 80191ce:	d10e      	bne.n	80191ee <arm_softmax_s8+0x3f76>
 80191d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80191d4:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80191de:	d106      	bne.n	80191ee <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 80191e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80191e4:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 80191e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80191ec:	6013      	str	r3, [r2, #0]
    return result;
 80191ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80191f2:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80191f6:	681a      	ldr	r2, [r3, #0]
 80191f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80191fc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8019200:	601a      	str	r2, [r3, #0]
 8019202:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019206:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 801920a:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 801920e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019210:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019214:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8019218:	2300      	movs	r3, #0
 801921a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801921c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019220:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8019224:	2201      	movs	r2, #1
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	fa02 f103 	lsl.w	r1, r2, r3
 801922c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019230:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8019234:	1e4b      	subs	r3, r1, #1
 8019236:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8019238:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801923c:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8019240:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019244:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8019248:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801924c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8019250:	6812      	ldr	r2, [r2, #0]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	4013      	ands	r3, r2
 8019256:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8019258:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801925c:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8019260:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019264:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8019268:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801926c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8019270:	6812      	ldr	r2, [r2, #0]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	fa42 f303 	asr.w	r3, r2, r3
 8019278:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801927a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801927e:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8019282:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019286:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	105b      	asrs	r3, r3, #1
 801928e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8019290:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019294:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	2b00      	cmp	r3, #0
 801929c:	da0a      	bge.n	80192b4 <arm_softmax_s8+0x403c>
        threshold++;
 801929e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192a2:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 80192a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192aa:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	3301      	adds	r3, #1
 80192b2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80192b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192b8:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 80192bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192c0:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80192c4:	6812      	ldr	r2, [r2, #0]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	429a      	cmp	r2, r3
 80192ca:	dd0a      	ble.n	80192e2 <arm_softmax_s8+0x406a>
        result++;
 80192cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192d0:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 80192d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192d8:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	3301      	adds	r3, #1
 80192e0:	6013      	str	r3, [r2, #0]
    return result;
 80192e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192e6:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80192ea:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 80192ec:	3b80      	subs	r3, #128	; 0x80
 80192ee:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 80192f2:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80192f6:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80192fa:	db09      	blt.n	8019310 <arm_softmax_s8+0x4098>
 80192fc:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8019300:	2b7e      	cmp	r3, #126	; 0x7e
 8019302:	dc03      	bgt.n	801930c <arm_softmax_s8+0x4094>
 8019304:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8019308:	b259      	sxtb	r1, r3
 801930a:	e003      	b.n	8019314 <arm_softmax_s8+0x409c>
 801930c:	217f      	movs	r1, #127	; 0x7f
 801930e:	e001      	b.n	8019314 <arm_softmax_s8+0x409c>
 8019310:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8019314:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8019318:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 801931c:	441a      	add	r2, r3
 801931e:	460b      	mov	r3, r1
 8019320:	7013      	strb	r3, [r2, #0]
 8019322:	e006      	b.n	8019332 <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 8019324:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8019328:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 801932c:	441a      	add	r2, r3
 801932e:	2380      	movs	r3, #128	; 0x80
 8019330:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 8019332:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8019336:	3301      	adds	r3, #1
 8019338:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801933c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019340:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8019344:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	429a      	cmp	r2, r3
 801934c:	f6fe aa71 	blt.w	8017832 <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 8019350:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019354:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8019358:	6819      	ldr	r1, [r3, #0]
 801935a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801935e:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8019362:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019366:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	440b      	add	r3, r1
 801936e:	6013      	str	r3, [r2, #0]
        output += row_size;
 8019370:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019374:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8019378:	681a      	ldr	r2, [r3, #0]
 801937a:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 801937e:	4413      	add	r3, r2
 8019380:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8019384:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8019388:	3301      	adds	r3, #1
 801938a:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 801938e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019392:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8019396:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	429a      	cmp	r2, r3
 801939e:	f6fb af93 	blt.w	80152c8 <arm_softmax_s8+0x50>
    }

#endif
}
 80193a2:	bf00      	nop
 80193a4:	bf00      	nop
 80193a6:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 80193aa:	46bd      	mov	sp, r7
 80193ac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80193b0:	4770      	bx	lr
 80193b2:	bf00      	nop

080193b4 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 80193b4:	b480      	push	{r7}
 80193b6:	b089      	sub	sp, #36	; 0x24
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	60f8      	str	r0, [r7, #12]
 80193bc:	60b9      	str	r1, [r7, #8]
 80193be:	607a      	str	r2, [r7, #4]
 80193c0:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80193c8:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 80193ca:	683b      	ldr	r3, [r7, #0]
 80193cc:	00db      	lsls	r3, r3, #3
 80193ce:	68fa      	ldr	r2, [r7, #12]
 80193d0:	4413      	add	r3, r2
 80193d2:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 80193d4:	69fb      	ldr	r3, [r7, #28]
 80193d6:	ed93 7a00 	vldr	s14, [r3]
 80193da:	69bb      	ldr	r3, [r7, #24]
 80193dc:	edd3 7a00 	vldr	s15, [r3]
 80193e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80193e4:	69fb      	ldr	r3, [r7, #28]
 80193e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80193ea:	69bb      	ldr	r3, [r7, #24]
 80193ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80193f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80193f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80193f8:	edc7 7a04 	vstr	s15, [r7, #16]
 80193fc:	69fb      	ldr	r3, [r7, #28]
 80193fe:	ed93 7a00 	vldr	s14, [r3]
 8019402:	69bb      	ldr	r3, [r7, #24]
 8019404:	edd3 7a01 	vldr	s15, [r3, #4]
 8019408:	ee27 7a27 	vmul.f32	s14, s14, s15
 801940c:	69fb      	ldr	r3, [r7, #28]
 801940e:	edd3 6a01 	vldr	s13, [r3, #4]
 8019412:	69bb      	ldr	r3, [r7, #24]
 8019414:	edd3 7a00 	vldr	s15, [r3]
 8019418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801941c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019420:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 8019424:	68bb      	ldr	r3, [r7, #8]
 8019426:	00db      	lsls	r3, r3, #3
 8019428:	69ba      	ldr	r2, [r7, #24]
 801942a:	4413      	add	r3, r2
 801942c:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	ed93 7a00 	vldr	s14, [r3]
 8019434:	edd7 7a04 	vldr	s15, [r7, #16]
 8019438:	ee77 7a67 	vsub.f32	s15, s14, s15
 801943c:	69fb      	ldr	r3, [r7, #28]
 801943e:	edc3 7a00 	vstr	s15, [r3]
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	ed93 7a01 	vldr	s14, [r3, #4]
 8019448:	edd7 7a05 	vldr	s15, [r7, #20]
 801944c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019450:	69fb      	ldr	r3, [r7, #28]
 8019452:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	ed93 7a00 	vldr	s14, [r3]
 801945c:	edd7 7a04 	vldr	s15, [r7, #16]
 8019460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	edc3 7a00 	vstr	s15, [r3]
 801946a:	68fb      	ldr	r3, [r7, #12]
 801946c:	ed93 7a01 	vldr	s14, [r3, #4]
 8019470:	edd7 7a05 	vldr	s15, [r7, #20]
 8019474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 801947e:	69fb      	ldr	r3, [r7, #28]
 8019480:	3308      	adds	r3, #8
 8019482:	61fb      	str	r3, [r7, #28]
        ++Fout;
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	3308      	adds	r3, #8
 8019488:	60fb      	str	r3, [r7, #12]
    }while (--m);
 801948a:	683b      	ldr	r3, [r7, #0]
 801948c:	3b01      	subs	r3, #1
 801948e:	603b      	str	r3, [r7, #0]
 8019490:	683b      	ldr	r3, [r7, #0]
 8019492:	2b00      	cmp	r3, #0
 8019494:	bf14      	ite	ne
 8019496:	2301      	movne	r3, #1
 8019498:	2300      	moveq	r3, #0
 801949a:	b2db      	uxtb	r3, r3
 801949c:	2b00      	cmp	r3, #0
 801949e:	d000      	beq.n	80194a2 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 80194a0:	e798      	b.n	80193d4 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 80194a2:	bf00      	nop
 80194a4:	3724      	adds	r7, #36	; 0x24
 80194a6:	46bd      	mov	sp, r7
 80194a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ac:	4770      	bx	lr

080194ae <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 80194ae:	b480      	push	{r7}
 80194b0:	b097      	sub	sp, #92	; 0x5c
 80194b2:	af00      	add	r7, sp, #0
 80194b4:	60f8      	str	r0, [r7, #12]
 80194b6:	60b9      	str	r1, [r7, #8]
 80194b8:	607a      	str	r2, [r7, #4]
 80194ba:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 80194bc:	683b      	ldr	r3, [r7, #0]
 80194be:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 80194c0:	683b      	ldr	r3, [r7, #0]
 80194c2:	005b      	lsls	r3, r3, #1
 80194c4:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 80194c6:	683a      	ldr	r2, [r7, #0]
 80194c8:	4613      	mov	r3, r2
 80194ca:	005b      	lsls	r3, r3, #1
 80194cc:	4413      	add	r3, r2
 80194ce:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80194d6:	657b      	str	r3, [r7, #84]	; 0x54
 80194d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194da:	653b      	str	r3, [r7, #80]	; 0x50
 80194dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194de:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 80194e0:	683b      	ldr	r3, [r7, #0]
 80194e2:	00db      	lsls	r3, r3, #3
 80194e4:	68fa      	ldr	r2, [r7, #12]
 80194e6:	4413      	add	r3, r2
 80194e8:	ed93 7a00 	vldr	s14, [r3]
 80194ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194ee:	edd3 7a00 	vldr	s15, [r3]
 80194f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80194f6:	683b      	ldr	r3, [r7, #0]
 80194f8:	00db      	lsls	r3, r3, #3
 80194fa:	68fa      	ldr	r2, [r7, #12]
 80194fc:	4413      	add	r3, r2
 80194fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8019502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019504:	edd3 7a01 	vldr	s15, [r3, #4]
 8019508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801950c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019510:	edc7 7a04 	vstr	s15, [r7, #16]
 8019514:	683b      	ldr	r3, [r7, #0]
 8019516:	00db      	lsls	r3, r3, #3
 8019518:	68fa      	ldr	r2, [r7, #12]
 801951a:	4413      	add	r3, r2
 801951c:	ed93 7a00 	vldr	s14, [r3]
 8019520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019522:	edd3 7a01 	vldr	s15, [r3, #4]
 8019526:	ee27 7a27 	vmul.f32	s14, s14, s15
 801952a:	683b      	ldr	r3, [r7, #0]
 801952c:	00db      	lsls	r3, r3, #3
 801952e:	68fa      	ldr	r2, [r7, #12]
 8019530:	4413      	add	r3, r2
 8019532:	edd3 6a01 	vldr	s13, [r3, #4]
 8019536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019538:	edd3 7a00 	vldr	s15, [r3]
 801953c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019544:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 8019548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801954a:	00db      	lsls	r3, r3, #3
 801954c:	68fa      	ldr	r2, [r7, #12]
 801954e:	4413      	add	r3, r2
 8019550:	ed93 7a00 	vldr	s14, [r3]
 8019554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019556:	edd3 7a00 	vldr	s15, [r3]
 801955a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801955e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019560:	00db      	lsls	r3, r3, #3
 8019562:	68fa      	ldr	r2, [r7, #12]
 8019564:	4413      	add	r3, r2
 8019566:	edd3 6a01 	vldr	s13, [r3, #4]
 801956a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801956c:	edd3 7a01 	vldr	s15, [r3, #4]
 8019570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019578:	edc7 7a06 	vstr	s15, [r7, #24]
 801957c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801957e:	00db      	lsls	r3, r3, #3
 8019580:	68fa      	ldr	r2, [r7, #12]
 8019582:	4413      	add	r3, r2
 8019584:	ed93 7a00 	vldr	s14, [r3]
 8019588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801958a:	edd3 7a01 	vldr	s15, [r3, #4]
 801958e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019594:	00db      	lsls	r3, r3, #3
 8019596:	68fa      	ldr	r2, [r7, #12]
 8019598:	4413      	add	r3, r2
 801959a:	edd3 6a01 	vldr	s13, [r3, #4]
 801959e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195a0:	edd3 7a00 	vldr	s15, [r3]
 80195a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80195a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80195ac:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 80195b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195b2:	00db      	lsls	r3, r3, #3
 80195b4:	68fa      	ldr	r2, [r7, #12]
 80195b6:	4413      	add	r3, r2
 80195b8:	ed93 7a00 	vldr	s14, [r3]
 80195bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195be:	edd3 7a00 	vldr	s15, [r3]
 80195c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80195c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195c8:	00db      	lsls	r3, r3, #3
 80195ca:	68fa      	ldr	r2, [r7, #12]
 80195cc:	4413      	add	r3, r2
 80195ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80195d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80195d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80195dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80195e0:	edc7 7a08 	vstr	s15, [r7, #32]
 80195e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195e6:	00db      	lsls	r3, r3, #3
 80195e8:	68fa      	ldr	r2, [r7, #12]
 80195ea:	4413      	add	r3, r2
 80195ec:	ed93 7a00 	vldr	s14, [r3]
 80195f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80195f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80195fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195fc:	00db      	lsls	r3, r3, #3
 80195fe:	68fa      	ldr	r2, [r7, #12]
 8019600:	4413      	add	r3, r2
 8019602:	edd3 6a01 	vldr	s13, [r3, #4]
 8019606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019608:	edd3 7a00 	vldr	s15, [r3]
 801960c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019614:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	ed93 7a00 	vldr	s14, [r3]
 801961e:	edd7 7a06 	vldr	s15, [r7, #24]
 8019622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019626:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	ed93 7a01 	vldr	s14, [r3, #4]
 8019630:	edd7 7a07 	vldr	s15, [r7, #28]
 8019634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019638:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	ed93 7a00 	vldr	s14, [r3]
 8019642:	edd7 7a06 	vldr	s15, [r7, #24]
 8019646:	ee77 7a27 	vadd.f32	s15, s14, s15
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	edc3 7a00 	vstr	s15, [r3]
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	ed93 7a01 	vldr	s14, [r3, #4]
 8019656:	edd7 7a07 	vldr	s15, [r7, #28]
 801965a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 8019664:	ed97 7a04 	vldr	s14, [r7, #16]
 8019668:	edd7 7a08 	vldr	s15, [r7, #32]
 801966c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019670:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8019674:	ed97 7a05 	vldr	s14, [r7, #20]
 8019678:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801967c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019680:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 8019684:	ed97 7a04 	vldr	s14, [r7, #16]
 8019688:	edd7 7a08 	vldr	s15, [r7, #32]
 801968c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019690:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8019694:	ed97 7a05 	vldr	s14, [r7, #20]
 8019698:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801969c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80196a0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	ed93 7a00 	vldr	s14, [r3]
 80196aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80196ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80196b0:	00db      	lsls	r3, r3, #3
 80196b2:	68fa      	ldr	r2, [r7, #12]
 80196b4:	4413      	add	r3, r2
 80196b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80196ba:	edc3 7a00 	vstr	s15, [r3]
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80196c4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80196c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80196ca:	00db      	lsls	r3, r3, #3
 80196cc:	68fa      	ldr	r2, [r7, #12]
 80196ce:	4413      	add	r3, r2
 80196d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80196d4:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 80196d8:	68bb      	ldr	r3, [r7, #8]
 80196da:	00db      	lsls	r3, r3, #3
 80196dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80196de:	4413      	add	r3, r2
 80196e0:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 80196e2:	68bb      	ldr	r3, [r7, #8]
 80196e4:	011b      	lsls	r3, r3, #4
 80196e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80196e8:	4413      	add	r3, r2
 80196ea:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 80196ec:	68ba      	ldr	r2, [r7, #8]
 80196ee:	4613      	mov	r3, r2
 80196f0:	005b      	lsls	r3, r3, #1
 80196f2:	4413      	add	r3, r2
 80196f4:	00db      	lsls	r3, r3, #3
 80196f6:	461a      	mov	r2, r3
 80196f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196fa:	4413      	add	r3, r2
 80196fc:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	ed93 7a00 	vldr	s14, [r3]
 8019704:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8019708:	ee77 7a27 	vadd.f32	s15, s14, s15
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	edc3 7a00 	vstr	s15, [r3]
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	ed93 7a01 	vldr	s14, [r3, #4]
 8019718:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801971c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	685b      	ldr	r3, [r3, #4]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d030      	beq.n	8019790 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 801972e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8019732:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019736:	683b      	ldr	r3, [r7, #0]
 8019738:	00db      	lsls	r3, r3, #3
 801973a:	68fa      	ldr	r2, [r7, #12]
 801973c:	4413      	add	r3, r2
 801973e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019742:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 8019746:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801974a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801974e:	683b      	ldr	r3, [r7, #0]
 8019750:	00db      	lsls	r3, r3, #3
 8019752:	68fa      	ldr	r2, [r7, #12]
 8019754:	4413      	add	r3, r2
 8019756:	ee77 7a27 	vadd.f32	s15, s14, s15
 801975a:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 801975e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8019762:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019768:	00db      	lsls	r3, r3, #3
 801976a:	68fa      	ldr	r2, [r7, #12]
 801976c:	4413      	add	r3, r2
 801976e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019772:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 8019776:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801977a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801977e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019780:	00db      	lsls	r3, r3, #3
 8019782:	68fa      	ldr	r2, [r7, #12]
 8019784:	4413      	add	r3, r2
 8019786:	ee77 7a67 	vsub.f32	s15, s14, s15
 801978a:	edc3 7a01 	vstr	s15, [r3, #4]
 801978e:	e02f      	b.n	80197f0 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 8019790:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8019794:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019798:	683b      	ldr	r3, [r7, #0]
 801979a:	00db      	lsls	r3, r3, #3
 801979c:	68fa      	ldr	r2, [r7, #12]
 801979e:	4413      	add	r3, r2
 80197a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197a4:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 80197a8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80197ac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80197b0:	683b      	ldr	r3, [r7, #0]
 80197b2:	00db      	lsls	r3, r3, #3
 80197b4:	68fa      	ldr	r2, [r7, #12]
 80197b6:	4413      	add	r3, r2
 80197b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80197bc:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 80197c0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80197c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80197c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197ca:	00db      	lsls	r3, r3, #3
 80197cc:	68fa      	ldr	r2, [r7, #12]
 80197ce:	4413      	add	r3, r2
 80197d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80197d4:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 80197d8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80197dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80197e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197e2:	00db      	lsls	r3, r3, #3
 80197e4:	68fa      	ldr	r2, [r7, #12]
 80197e6:	4413      	add	r3, r2
 80197e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197ec:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	3308      	adds	r3, #8
 80197f4:	60fb      	str	r3, [r7, #12]
    }while(--k);
 80197f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80197f8:	3b01      	subs	r3, #1
 80197fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80197fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80197fe:	2b00      	cmp	r3, #0
 8019800:	bf14      	ite	ne
 8019802:	2301      	movne	r3, #1
 8019804:	2300      	moveq	r3, #0
 8019806:	b2db      	uxtb	r3, r3
 8019808:	2b00      	cmp	r3, #0
 801980a:	d000      	beq.n	801980e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 801980c:	e668      	b.n	80194e0 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 801980e:	bf00      	nop
 8019810:	375c      	adds	r7, #92	; 0x5c
 8019812:	46bd      	mov	sp, r7
 8019814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019818:	4770      	bx	lr
	...

0801981c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 801981c:	b5b0      	push	{r4, r5, r7, lr}
 801981e:	b094      	sub	sp, #80	; 0x50
 8019820:	af00      	add	r7, sp, #0
 8019822:	60f8      	str	r0, [r7, #12]
 8019824:	60b9      	str	r1, [r7, #8]
 8019826:	607a      	str	r2, [r7, #4]
 8019828:	603b      	str	r3, [r7, #0]
     size_t k=m;
 801982a:	683b      	ldr	r3, [r7, #0]
 801982c:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 801982e:	683b      	ldr	r3, [r7, #0]
 8019830:	005b      	lsls	r3, r3, #1
 8019832:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 8019834:	68bb      	ldr	r3, [r7, #8]
 8019836:	683a      	ldr	r2, [r7, #0]
 8019838:	fb02 f303 	mul.w	r3, r2, r3
 801983c:	6879      	ldr	r1, [r7, #4]
 801983e:	3321      	adds	r3, #33	; 0x21
 8019840:	f107 0210 	add.w	r2, r7, #16
 8019844:	00db      	lsls	r3, r3, #3
 8019846:	440b      	add	r3, r1
 8019848:	e893 0003 	ldmia.w	r3, {r0, r1}
 801984c:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019856:	647b      	str	r3, [r7, #68]	; 0x44
 8019858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801985a:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 801985c:	683b      	ldr	r3, [r7, #0]
 801985e:	00db      	lsls	r3, r3, #3
 8019860:	68fa      	ldr	r2, [r7, #12]
 8019862:	4413      	add	r3, r2
 8019864:	ed93 7a00 	vldr	s14, [r3]
 8019868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801986a:	edd3 7a00 	vldr	s15, [r3]
 801986e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019872:	683b      	ldr	r3, [r7, #0]
 8019874:	00db      	lsls	r3, r3, #3
 8019876:	68fa      	ldr	r2, [r7, #12]
 8019878:	4413      	add	r3, r2
 801987a:	edd3 6a01 	vldr	s13, [r3, #4]
 801987e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019880:	edd3 7a01 	vldr	s15, [r3, #4]
 8019884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019888:	ee77 7a67 	vsub.f32	s15, s14, s15
 801988c:	edc7 7a08 	vstr	s15, [r7, #32]
 8019890:	683b      	ldr	r3, [r7, #0]
 8019892:	00db      	lsls	r3, r3, #3
 8019894:	68fa      	ldr	r2, [r7, #12]
 8019896:	4413      	add	r3, r2
 8019898:	ed93 7a00 	vldr	s14, [r3]
 801989c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801989e:	edd3 7a01 	vldr	s15, [r3, #4]
 80198a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80198a6:	683b      	ldr	r3, [r7, #0]
 80198a8:	00db      	lsls	r3, r3, #3
 80198aa:	68fa      	ldr	r2, [r7, #12]
 80198ac:	4413      	add	r3, r2
 80198ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80198b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80198b4:	edd3 7a00 	vldr	s15, [r3]
 80198b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80198bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80198c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 80198c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80198c6:	00db      	lsls	r3, r3, #3
 80198c8:	68fa      	ldr	r2, [r7, #12]
 80198ca:	4413      	add	r3, r2
 80198cc:	ed93 7a00 	vldr	s14, [r3]
 80198d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80198d2:	edd3 7a00 	vldr	s15, [r3]
 80198d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80198da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80198dc:	00db      	lsls	r3, r3, #3
 80198de:	68fa      	ldr	r2, [r7, #12]
 80198e0:	4413      	add	r3, r2
 80198e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80198e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80198e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80198ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80198f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80198f4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80198f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80198fa:	00db      	lsls	r3, r3, #3
 80198fc:	68fa      	ldr	r2, [r7, #12]
 80198fe:	4413      	add	r3, r2
 8019900:	ed93 7a00 	vldr	s14, [r3]
 8019904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019906:	edd3 7a01 	vldr	s15, [r3, #4]
 801990a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801990e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019910:	00db      	lsls	r3, r3, #3
 8019912:	68fa      	ldr	r2, [r7, #12]
 8019914:	4413      	add	r3, r2
 8019916:	edd3 6a01 	vldr	s13, [r3, #4]
 801991a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801991c:	edd3 7a00 	vldr	s15, [r3]
 8019920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019928:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 801992c:	ed97 7a08 	vldr	s14, [r7, #32]
 8019930:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8019934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019938:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 801993c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019940:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019948:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 801994c:	ed97 7a08 	vldr	s14, [r7, #32]
 8019950:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8019954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019958:	edc7 7a06 	vstr	s15, [r7, #24]
 801995c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019960:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019968:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 801996c:	68bb      	ldr	r3, [r7, #8]
 801996e:	00db      	lsls	r3, r3, #3
 8019970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019972:	4413      	add	r3, r2
 8019974:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 8019976:	68bb      	ldr	r3, [r7, #8]
 8019978:	011b      	lsls	r3, r3, #4
 801997a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801997c:	4413      	add	r3, r2
 801997e:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	4618      	mov	r0, r3
 8019986:	f7e6 fde9 	bl	800055c <__aeabi_f2d>
 801998a:	4604      	mov	r4, r0
 801998c:	460d      	mov	r5, r1
 801998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019990:	4618      	mov	r0, r3
 8019992:	f7e6 fde3 	bl	800055c <__aeabi_f2d>
 8019996:	f04f 0200 	mov.w	r2, #0
 801999a:	4b57      	ldr	r3, [pc, #348]	; (8019af8 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 801999c:	f7e6 fe36 	bl	800060c <__aeabi_dmul>
 80199a0:	4602      	mov	r2, r0
 80199a2:	460b      	mov	r3, r1
 80199a4:	4620      	mov	r0, r4
 80199a6:	4629      	mov	r1, r5
 80199a8:	f7e6 fc78 	bl	800029c <__aeabi_dsub>
 80199ac:	4602      	mov	r2, r0
 80199ae:	460b      	mov	r3, r1
 80199b0:	4610      	mov	r0, r2
 80199b2:	4619      	mov	r1, r3
 80199b4:	683b      	ldr	r3, [r7, #0]
 80199b6:	00db      	lsls	r3, r3, #3
 80199b8:	68fa      	ldr	r2, [r7, #12]
 80199ba:	18d4      	adds	r4, r2, r3
 80199bc:	f7e7 f91e 	bl	8000bfc <__aeabi_d2f>
 80199c0:	4603      	mov	r3, r0
 80199c2:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	685b      	ldr	r3, [r3, #4]
 80199c8:	4618      	mov	r0, r3
 80199ca:	f7e6 fdc7 	bl	800055c <__aeabi_f2d>
 80199ce:	4604      	mov	r4, r0
 80199d0:	460d      	mov	r5, r1
 80199d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199d4:	4618      	mov	r0, r3
 80199d6:	f7e6 fdc1 	bl	800055c <__aeabi_f2d>
 80199da:	f04f 0200 	mov.w	r2, #0
 80199de:	4b46      	ldr	r3, [pc, #280]	; (8019af8 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 80199e0:	f7e6 fe14 	bl	800060c <__aeabi_dmul>
 80199e4:	4602      	mov	r2, r0
 80199e6:	460b      	mov	r3, r1
 80199e8:	4620      	mov	r0, r4
 80199ea:	4629      	mov	r1, r5
 80199ec:	f7e6 fc56 	bl	800029c <__aeabi_dsub>
 80199f0:	4602      	mov	r2, r0
 80199f2:	460b      	mov	r3, r1
 80199f4:	4610      	mov	r0, r2
 80199f6:	4619      	mov	r1, r3
 80199f8:	683b      	ldr	r3, [r7, #0]
 80199fa:	00db      	lsls	r3, r3, #3
 80199fc:	68fa      	ldr	r2, [r7, #12]
 80199fe:	18d4      	adds	r4, r2, r3
 8019a00:	f7e7 f8fc 	bl	8000bfc <__aeabi_d2f>
 8019a04:	4603      	mov	r3, r0
 8019a06:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 8019a08:	ed97 7a06 	vldr	s14, [r7, #24]
 8019a0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8019a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019a14:	edc7 7a06 	vstr	s15, [r7, #24]
 8019a18:	ed97 7a07 	vldr	s14, [r7, #28]
 8019a1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8019a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019a24:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	ed93 7a00 	vldr	s14, [r3]
 8019a2e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a36:	68fb      	ldr	r3, [r7, #12]
 8019a38:	edc3 7a00 	vstr	s15, [r3]
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8019a42:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8019a50:	683b      	ldr	r3, [r7, #0]
 8019a52:	00db      	lsls	r3, r3, #3
 8019a54:	68fa      	ldr	r2, [r7, #12]
 8019a56:	4413      	add	r3, r2
 8019a58:	ed93 7a00 	vldr	s14, [r3]
 8019a5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8019a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a62:	00db      	lsls	r3, r3, #3
 8019a64:	68fa      	ldr	r2, [r7, #12]
 8019a66:	4413      	add	r3, r2
 8019a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a6c:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8019a70:	683b      	ldr	r3, [r7, #0]
 8019a72:	00db      	lsls	r3, r3, #3
 8019a74:	68fa      	ldr	r2, [r7, #12]
 8019a76:	4413      	add	r3, r2
 8019a78:	ed93 7a01 	vldr	s14, [r3, #4]
 8019a7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8019a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a82:	00db      	lsls	r3, r3, #3
 8019a84:	68fa      	ldr	r2, [r7, #12]
 8019a86:	4413      	add	r3, r2
 8019a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019a8c:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 8019a90:	683b      	ldr	r3, [r7, #0]
 8019a92:	00db      	lsls	r3, r3, #3
 8019a94:	68fa      	ldr	r2, [r7, #12]
 8019a96:	4413      	add	r3, r2
 8019a98:	ed93 7a00 	vldr	s14, [r3]
 8019a9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8019aa0:	683b      	ldr	r3, [r7, #0]
 8019aa2:	00db      	lsls	r3, r3, #3
 8019aa4:	68fa      	ldr	r2, [r7, #12]
 8019aa6:	4413      	add	r3, r2
 8019aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019aac:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 8019ab0:	683b      	ldr	r3, [r7, #0]
 8019ab2:	00db      	lsls	r3, r3, #3
 8019ab4:	68fa      	ldr	r2, [r7, #12]
 8019ab6:	4413      	add	r3, r2
 8019ab8:	ed93 7a01 	vldr	s14, [r3, #4]
 8019abc:	edd7 7a06 	vldr	s15, [r7, #24]
 8019ac0:	683b      	ldr	r3, [r7, #0]
 8019ac2:	00db      	lsls	r3, r3, #3
 8019ac4:	68fa      	ldr	r2, [r7, #12]
 8019ac6:	4413      	add	r3, r2
 8019ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019acc:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	3308      	adds	r3, #8
 8019ad4:	60fb      	str	r3, [r7, #12]
     }while(--k);
 8019ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ad8:	3b01      	subs	r3, #1
 8019ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	bf14      	ite	ne
 8019ae2:	2301      	movne	r3, #1
 8019ae4:	2300      	moveq	r3, #0
 8019ae6:	b2db      	uxtb	r3, r3
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d000      	beq.n	8019aee <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 8019aec:	e6b6      	b.n	801985c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 8019aee:	bf00      	nop
 8019af0:	3750      	adds	r7, #80	; 0x50
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bdb0      	pop	{r4, r5, r7, pc}
 8019af6:	bf00      	nop
 8019af8:	3fe00000 	.word	0x3fe00000

08019afc <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8019afc:	b480      	push	{r7}
 8019afe:	b0ab      	sub	sp, #172	; 0xac
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	60f8      	str	r0, [r7, #12]
 8019b04:	60b9      	str	r1, [r7, #8]
 8019b06:	607a      	str	r2, [r7, #4]
 8019b08:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019b10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 8019b14:	683b      	ldr	r3, [r7, #0]
 8019b16:	68ba      	ldr	r2, [r7, #8]
 8019b18:	fb02 f303 	mul.w	r3, r2, r3
 8019b1c:	00db      	lsls	r3, r3, #3
 8019b1e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019b22:	441a      	add	r2, r3
 8019b24:	f107 0318 	add.w	r3, r7, #24
 8019b28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019b2c:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8019b30:	683b      	ldr	r3, [r7, #0]
 8019b32:	68ba      	ldr	r2, [r7, #8]
 8019b34:	fb02 f303 	mul.w	r3, r2, r3
 8019b38:	011b      	lsls	r3, r3, #4
 8019b3a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019b3e:	441a      	add	r2, r3
 8019b40:	f107 0310 	add.w	r3, r7, #16
 8019b44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019b48:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 8019b52:	683b      	ldr	r3, [r7, #0]
 8019b54:	00db      	lsls	r3, r3, #3
 8019b56:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019b5a:	4413      	add	r3, r2
 8019b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 8019b60:	683b      	ldr	r3, [r7, #0]
 8019b62:	011b      	lsls	r3, r3, #4
 8019b64:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019b68:	4413      	add	r3, r2
 8019b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 8019b6e:	683a      	ldr	r2, [r7, #0]
 8019b70:	4613      	mov	r3, r2
 8019b72:	005b      	lsls	r3, r3, #1
 8019b74:	4413      	add	r3, r2
 8019b76:	00db      	lsls	r3, r3, #3
 8019b78:	461a      	mov	r2, r3
 8019b7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019b7e:	4413      	add	r3, r2
 8019b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 8019b84:	683b      	ldr	r3, [r7, #0]
 8019b86:	015b      	lsls	r3, r3, #5
 8019b88:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019b8c:	4413      	add	r3, r2
 8019b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019ba2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019ba6:	683b      	ldr	r3, [r7, #0]
 8019ba8:	429a      	cmp	r2, r3
 8019baa:	f280 82a9 	bge.w	801a100 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 8019bae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019bb2:	f107 0320 	add.w	r3, r7, #32
 8019bb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019bba:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 8019bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019bc2:	ed93 7a00 	vldr	s14, [r3]
 8019bc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019bca:	68ba      	ldr	r2, [r7, #8]
 8019bcc:	fb02 f303 	mul.w	r3, r2, r3
 8019bd0:	00db      	lsls	r3, r3, #3
 8019bd2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019bd6:	4413      	add	r3, r2
 8019bd8:	edd3 7a00 	vldr	s15, [r3]
 8019bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019be0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019be4:	edd3 6a01 	vldr	s13, [r3, #4]
 8019be8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019bec:	68ba      	ldr	r2, [r7, #8]
 8019bee:	fb02 f303 	mul.w	r3, r2, r3
 8019bf2:	00db      	lsls	r3, r3, #3
 8019bf4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019bf8:	4413      	add	r3, r2
 8019bfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8019bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c06:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8019c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019c0e:	ed93 7a00 	vldr	s14, [r3]
 8019c12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019c16:	68ba      	ldr	r2, [r7, #8]
 8019c18:	fb02 f303 	mul.w	r3, r2, r3
 8019c1c:	00db      	lsls	r3, r3, #3
 8019c1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019c22:	4413      	add	r3, r2
 8019c24:	edd3 7a01 	vldr	s15, [r3, #4]
 8019c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019c2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019c30:	edd3 6a01 	vldr	s13, [r3, #4]
 8019c34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019c38:	68ba      	ldr	r2, [r7, #8]
 8019c3a:	fb02 f303 	mul.w	r3, r2, r3
 8019c3e:	00db      	lsls	r3, r3, #3
 8019c40:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019c44:	4413      	add	r3, r2
 8019c46:	edd3 7a00 	vldr	s15, [r3]
 8019c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c52:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 8019c56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019c5a:	ed93 7a00 	vldr	s14, [r3]
 8019c5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019c62:	68ba      	ldr	r2, [r7, #8]
 8019c64:	fb02 f303 	mul.w	r3, r2, r3
 8019c68:	011b      	lsls	r3, r3, #4
 8019c6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019c6e:	4413      	add	r3, r2
 8019c70:	edd3 7a00 	vldr	s15, [r3]
 8019c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019c7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8019c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019c84:	68ba      	ldr	r2, [r7, #8]
 8019c86:	fb02 f303 	mul.w	r3, r2, r3
 8019c8a:	011b      	lsls	r3, r3, #4
 8019c8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019c90:	4413      	add	r3, r2
 8019c92:	edd3 7a01 	vldr	s15, [r3, #4]
 8019c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c9e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8019ca2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019ca6:	ed93 7a00 	vldr	s14, [r3]
 8019caa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019cae:	68ba      	ldr	r2, [r7, #8]
 8019cb0:	fb02 f303 	mul.w	r3, r2, r3
 8019cb4:	011b      	lsls	r3, r3, #4
 8019cb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019cba:	4413      	add	r3, r2
 8019cbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8019cc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019cc8:	edd3 6a01 	vldr	s13, [r3, #4]
 8019ccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019cd0:	68ba      	ldr	r2, [r7, #8]
 8019cd2:	fb02 f303 	mul.w	r3, r2, r3
 8019cd6:	011b      	lsls	r3, r3, #4
 8019cd8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019cdc:	4413      	add	r3, r2
 8019cde:	edd3 7a00 	vldr	s15, [r3]
 8019ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019cea:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 8019cee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019cf2:	ed93 7a00 	vldr	s14, [r3]
 8019cf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019cfa:	68ba      	ldr	r2, [r7, #8]
 8019cfc:	fb03 f202 	mul.w	r2, r3, r2
 8019d00:	4613      	mov	r3, r2
 8019d02:	005b      	lsls	r3, r3, #1
 8019d04:	4413      	add	r3, r2
 8019d06:	00db      	lsls	r3, r3, #3
 8019d08:	461a      	mov	r2, r3
 8019d0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019d0e:	4413      	add	r3, r2
 8019d10:	edd3 7a00 	vldr	s15, [r3]
 8019d14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019d1c:	edd3 6a01 	vldr	s13, [r3, #4]
 8019d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019d24:	68ba      	ldr	r2, [r7, #8]
 8019d26:	fb03 f202 	mul.w	r2, r3, r2
 8019d2a:	4613      	mov	r3, r2
 8019d2c:	005b      	lsls	r3, r3, #1
 8019d2e:	4413      	add	r3, r2
 8019d30:	00db      	lsls	r3, r3, #3
 8019d32:	461a      	mov	r2, r3
 8019d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019d38:	4413      	add	r3, r2
 8019d3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8019d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d46:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8019d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019d4e:	ed93 7a00 	vldr	s14, [r3]
 8019d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019d56:	68ba      	ldr	r2, [r7, #8]
 8019d58:	fb03 f202 	mul.w	r2, r3, r2
 8019d5c:	4613      	mov	r3, r2
 8019d5e:	005b      	lsls	r3, r3, #1
 8019d60:	4413      	add	r3, r2
 8019d62:	00db      	lsls	r3, r3, #3
 8019d64:	461a      	mov	r2, r3
 8019d66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019d6a:	4413      	add	r3, r2
 8019d6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8019d70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019d78:	edd3 6a01 	vldr	s13, [r3, #4]
 8019d7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019d80:	68ba      	ldr	r2, [r7, #8]
 8019d82:	fb03 f202 	mul.w	r2, r3, r2
 8019d86:	4613      	mov	r3, r2
 8019d88:	005b      	lsls	r3, r3, #1
 8019d8a:	4413      	add	r3, r2
 8019d8c:	00db      	lsls	r3, r3, #3
 8019d8e:	461a      	mov	r2, r3
 8019d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019d94:	4413      	add	r3, r2
 8019d96:	edd3 7a00 	vldr	s15, [r3]
 8019d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019da2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 8019da6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019daa:	ed93 7a00 	vldr	s14, [r3]
 8019dae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019db2:	68ba      	ldr	r2, [r7, #8]
 8019db4:	fb02 f303 	mul.w	r3, r2, r3
 8019db8:	015b      	lsls	r3, r3, #5
 8019dba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019dbe:	4413      	add	r3, r2
 8019dc0:	edd3 7a00 	vldr	s15, [r3]
 8019dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019dc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019dcc:	edd3 6a01 	vldr	s13, [r3, #4]
 8019dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019dd4:	68ba      	ldr	r2, [r7, #8]
 8019dd6:	fb02 f303 	mul.w	r3, r2, r3
 8019dda:	015b      	lsls	r3, r3, #5
 8019ddc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019de0:	4413      	add	r3, r2
 8019de2:	edd3 7a01 	vldr	s15, [r3, #4]
 8019de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019dee:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8019df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019df6:	ed93 7a00 	vldr	s14, [r3]
 8019dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019dfe:	68ba      	ldr	r2, [r7, #8]
 8019e00:	fb02 f303 	mul.w	r3, r2, r3
 8019e04:	015b      	lsls	r3, r3, #5
 8019e06:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019e0a:	4413      	add	r3, r2
 8019e0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8019e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019e14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019e18:	edd3 6a01 	vldr	s13, [r3, #4]
 8019e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019e20:	68ba      	ldr	r2, [r7, #8]
 8019e22:	fb02 f303 	mul.w	r3, r2, r3
 8019e26:	015b      	lsls	r3, r3, #5
 8019e28:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019e2c:	4413      	add	r3, r2
 8019e2e:	edd3 7a00 	vldr	s15, [r3]
 8019e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019e3a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 8019e3e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019e42:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8019e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019e4a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8019e4e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8019e52:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8019e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019e5a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 8019e5e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019e62:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8019e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019e6a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8019e6e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8019e72:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8019e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019e7a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 8019e7e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019e82:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019e8a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8019e8e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019e92:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8019e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019e9a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 8019e9e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019ea2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019eaa:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8019eae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019eb2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8019eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019eba:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 8019ebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019ec2:	ed93 7a00 	vldr	s14, [r3]
 8019ec6:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8019eca:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8019ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ed6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019eda:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 8019ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019ee2:	ed93 7a01 	vldr	s14, [r3, #4]
 8019ee6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8019eea:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8019eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019efa:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 8019efe:	ed97 7a08 	vldr	s14, [r7, #32]
 8019f02:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8019f06:	edd7 7a06 	vldr	s15, [r7, #24]
 8019f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019f12:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8019f16:	edd7 7a04 	vldr	s15, [r7, #16]
 8019f1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f22:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 8019f26:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019f2a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8019f2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8019f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019f3a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8019f3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8019f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f4a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 8019f4e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8019f52:	edd7 7a07 	vldr	s15, [r7, #28]
 8019f56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019f5a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8019f5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8019f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f6a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 8019f6e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8019f72:	edd7 7a07 	vldr	s15, [r7, #28]
 8019f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019f7a:	eeb1 7a67 	vneg.f32	s14, s15
 8019f7e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8019f82:	edd7 7a05 	vldr	s15, [r7, #20]
 8019f86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f8e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 8019f92:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8019f96:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8019f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019fa2:	edc3 7a00 	vstr	s15, [r3]
 8019fa6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8019faa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8019fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019fb6:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 8019fba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8019fbe:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8019fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019fc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019fca:	edc3 7a00 	vstr	s15, [r3]
 8019fce:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8019fd2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8019fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019fda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019fde:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 8019fe2:	ed97 7a08 	vldr	s14, [r7, #32]
 8019fe6:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8019fea:	edd7 7a04 	vldr	s15, [r7, #16]
 8019fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019ff2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019ff6:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8019ffa:	edd7 7a06 	vldr	s15, [r7, #24]
 8019ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a002:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a006:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 801a00a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801a00e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801a012:	edd7 7a04 	vldr	s15, [r7, #16]
 801a016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a01a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a01e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801a022:	edd7 7a06 	vldr	s15, [r7, #24]
 801a026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a02a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a02e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 801a032:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801a036:	edd7 7a07 	vldr	s15, [r7, #28]
 801a03a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a03e:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 801a042:	edd7 7a05 	vldr	s15, [r7, #20]
 801a046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a04a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a04e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 801a052:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 801a056:	edd7 7a05 	vldr	s15, [r7, #20]
 801a05a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a05e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 801a062:	edd7 7a07 	vldr	s15, [r7, #28]
 801a066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a06a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a06e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 801a072:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801a076:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801a07a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a07e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a082:	edc3 7a00 	vstr	s15, [r3]
 801a086:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801a08a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801a08e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a092:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a096:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 801a09a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801a09e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801a0a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a0a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a0aa:	edc3 7a00 	vstr	s15, [r3]
 801a0ae:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801a0b2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801a0b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a0ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a0be:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 801a0c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a0c6:	3308      	adds	r3, #8
 801a0c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801a0cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a0d0:	3308      	adds	r3, #8
 801a0d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801a0d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a0da:	3308      	adds	r3, #8
 801a0dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801a0e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a0e4:	3308      	adds	r3, #8
 801a0e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801a0ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a0ee:	3308      	adds	r3, #8
 801a0f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 801a0f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a0f8:	3301      	adds	r3, #1
 801a0fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801a0fe:	e550      	b.n	8019ba2 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 801a100:	bf00      	nop
 801a102:	37ac      	adds	r7, #172	; 0xac
 801a104:	46bd      	mov	sp, r7
 801a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a10a:	4770      	bx	lr

0801a10c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 801a10c:	b580      	push	{r7, lr}
 801a10e:	b08e      	sub	sp, #56	; 0x38
 801a110:	af00      	add	r7, sp, #0
 801a112:	60f8      	str	r0, [r7, #12]
 801a114:	60b9      	str	r1, [r7, #8]
 801a116:	607a      	str	r2, [r7, #4]
 801a118:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801a120:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 801a128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a12a:	00db      	lsls	r3, r3, #3
 801a12c:	4618      	mov	r0, r3
 801a12e:	f000 fe8b 	bl	801ae48 <_Z9ei_mallocj>
 801a132:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 801a134:	2300      	movs	r3, #0
 801a136:	637b      	str	r3, [r7, #52]	; 0x34
 801a138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a13a:	683b      	ldr	r3, [r7, #0]
 801a13c:	429a      	cmp	r2, r3
 801a13e:	f280 80b6 	bge.w	801a2ae <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a2>
        k=u;
 801a142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a144:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801a146:	2300      	movs	r3, #0
 801a148:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a14a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a14e:	429a      	cmp	r2, r3
 801a150:	da14      	bge.n	801a17c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x70>
            scratch[q1] = Fout[ k  ];
 801a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a154:	00db      	lsls	r3, r3, #3
 801a156:	68fa      	ldr	r2, [r7, #12]
 801a158:	18d1      	adds	r1, r2, r3
 801a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a15c:	00db      	lsls	r3, r3, #3
 801a15e:	69ba      	ldr	r2, [r7, #24]
 801a160:	4413      	add	r3, r2
 801a162:	460a      	mov	r2, r1
 801a164:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a168:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 801a16c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a16e:	683b      	ldr	r3, [r7, #0]
 801a170:	4413      	add	r3, r2
 801a172:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801a174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a176:	3301      	adds	r3, #1
 801a178:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a17a:	e7e6      	b.n	801a14a <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x3e>
        }

        k=u;
 801a17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a17e:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801a180:	2300      	movs	r3, #0
 801a182:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a188:	429a      	cmp	r2, r3
 801a18a:	f280 808c 	bge.w	801a2a6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19a>
            int twidx=0;
 801a18e:	2300      	movs	r3, #0
 801a190:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 801a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a194:	00db      	lsls	r3, r3, #3
 801a196:	68fa      	ldr	r2, [r7, #12]
 801a198:	4413      	add	r3, r2
 801a19a:	69ba      	ldr	r2, [r7, #24]
 801a19c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a1a0:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 801a1a4:	2301      	movs	r3, #1
 801a1a6:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a1ac:	429a      	cmp	r2, r3
 801a1ae:	da72      	bge.n	801a296 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                twidx += fstride * k;
 801a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1b2:	68ba      	ldr	r2, [r7, #8]
 801a1b4:	fb03 f202 	mul.w	r2, r3, r2
 801a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1ba:	4413      	add	r3, r2
 801a1bc:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 801a1be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1c0:	69fb      	ldr	r3, [r7, #28]
 801a1c2:	429a      	cmp	r2, r3
 801a1c4:	db03      	blt.n	801a1ce <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc2>
 801a1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1c8:	69fb      	ldr	r3, [r7, #28]
 801a1ca:	1ad3      	subs	r3, r2, r3
 801a1cc:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 801a1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1d0:	00db      	lsls	r3, r3, #3
 801a1d2:	69ba      	ldr	r2, [r7, #24]
 801a1d4:	4413      	add	r3, r2
 801a1d6:	ed93 7a00 	vldr	s14, [r3]
 801a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1dc:	00db      	lsls	r3, r3, #3
 801a1de:	6a3a      	ldr	r2, [r7, #32]
 801a1e0:	4413      	add	r3, r2
 801a1e2:	edd3 7a00 	vldr	s15, [r3]
 801a1e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1ec:	00db      	lsls	r3, r3, #3
 801a1ee:	69ba      	ldr	r2, [r7, #24]
 801a1f0:	4413      	add	r3, r2
 801a1f2:	edd3 6a01 	vldr	s13, [r3, #4]
 801a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1f8:	00db      	lsls	r3, r3, #3
 801a1fa:	6a3a      	ldr	r2, [r7, #32]
 801a1fc:	4413      	add	r3, r2
 801a1fe:	edd3 7a01 	vldr	s15, [r3, #4]
 801a202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a206:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a20a:	edc7 7a04 	vstr	s15, [r7, #16]
 801a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a210:	00db      	lsls	r3, r3, #3
 801a212:	69ba      	ldr	r2, [r7, #24]
 801a214:	4413      	add	r3, r2
 801a216:	ed93 7a00 	vldr	s14, [r3]
 801a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a21c:	00db      	lsls	r3, r3, #3
 801a21e:	6a3a      	ldr	r2, [r7, #32]
 801a220:	4413      	add	r3, r2
 801a222:	edd3 7a01 	vldr	s15, [r3, #4]
 801a226:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a22c:	00db      	lsls	r3, r3, #3
 801a22e:	69ba      	ldr	r2, [r7, #24]
 801a230:	4413      	add	r3, r2
 801a232:	edd3 6a01 	vldr	s13, [r3, #4]
 801a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a238:	00db      	lsls	r3, r3, #3
 801a23a:	6a3a      	ldr	r2, [r7, #32]
 801a23c:	4413      	add	r3, r2
 801a23e:	edd3 7a00 	vldr	s15, [r3]
 801a242:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a246:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a24a:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 801a24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a250:	00db      	lsls	r3, r3, #3
 801a252:	68fa      	ldr	r2, [r7, #12]
 801a254:	4413      	add	r3, r2
 801a256:	ed93 7a00 	vldr	s14, [r3]
 801a25a:	edd7 7a04 	vldr	s15, [r7, #16]
 801a25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a260:	00db      	lsls	r3, r3, #3
 801a262:	68fa      	ldr	r2, [r7, #12]
 801a264:	4413      	add	r3, r2
 801a266:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a26a:	edc3 7a00 	vstr	s15, [r3]
 801a26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a270:	00db      	lsls	r3, r3, #3
 801a272:	68fa      	ldr	r2, [r7, #12]
 801a274:	4413      	add	r3, r2
 801a276:	ed93 7a01 	vldr	s14, [r3, #4]
 801a27a:	edd7 7a05 	vldr	s15, [r7, #20]
 801a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a280:	00db      	lsls	r3, r3, #3
 801a282:	68fa      	ldr	r2, [r7, #12]
 801a284:	4413      	add	r3, r2
 801a286:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a28a:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 801a28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a290:	3301      	adds	r3, #1
 801a292:	62bb      	str	r3, [r7, #40]	; 0x28
 801a294:	e788      	b.n	801a1a8 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9c>
            }
            k += m;
 801a296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a298:	683b      	ldr	r3, [r7, #0]
 801a29a:	4413      	add	r3, r2
 801a29c:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2a0:	3301      	adds	r3, #1
 801a2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a2a4:	e76e      	b.n	801a184 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
    for ( u=0; u<m; ++u ) {
 801a2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2a8:	3301      	adds	r3, #1
 801a2aa:	637b      	str	r3, [r7, #52]	; 0x34
 801a2ac:	e744      	b.n	801a138 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2c>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 801a2ae:	69b8      	ldr	r0, [r7, #24]
 801a2b0:	f000 fde4 	bl	801ae7c <_Z7ei_freePv>
}
 801a2b4:	bf00      	nop
 801a2b6:	3738      	adds	r7, #56	; 0x38
 801a2b8:	46bd      	mov	sp, r7
 801a2ba:	bd80      	pop	{r7, pc}

0801a2bc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 801a2bc:	b580      	push	{r7, lr}
 801a2be:	b08a      	sub	sp, #40	; 0x28
 801a2c0:	af02      	add	r7, sp, #8
 801a2c2:	60f8      	str	r0, [r7, #12]
 801a2c4:	60b9      	str	r1, [r7, #8]
 801a2c6:	607a      	str	r2, [r7, #4]
 801a2c8:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 801a2ca:	68fb      	ldr	r3, [r7, #12]
 801a2cc:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 801a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2d0:	1d1a      	adds	r2, r3, #4
 801a2d2:	62ba      	str	r2, [r7, #40]	; 0x28
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 801a2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2da:	1d1a      	adds	r2, r3, #4
 801a2dc:	62ba      	str	r2, [r7, #40]	; 0x28
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 801a2e2:	69bb      	ldr	r3, [r7, #24]
 801a2e4:	697a      	ldr	r2, [r7, #20]
 801a2e6:	fb02 f303 	mul.w	r3, r2, r3
 801a2ea:	00db      	lsls	r3, r3, #3
 801a2ec:	68fa      	ldr	r2, [r7, #12]
 801a2ee:	4413      	add	r3, r2
 801a2f0:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 801a2f2:	697b      	ldr	r3, [r7, #20]
 801a2f4:	2b01      	cmp	r3, #1
 801a2f6:	d11a      	bne.n	801a32e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	68ba      	ldr	r2, [r7, #8]
 801a2fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a300:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 801a304:	683b      	ldr	r3, [r7, #0]
 801a306:	687a      	ldr	r2, [r7, #4]
 801a308:	fb02 f303 	mul.w	r3, r2, r3
 801a30c:	00db      	lsls	r3, r3, #3
 801a30e:	68ba      	ldr	r2, [r7, #8]
 801a310:	4413      	add	r3, r2
 801a312:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	3308      	adds	r3, #8
 801a318:	60fb      	str	r3, [r7, #12]
 801a31a:	68fa      	ldr	r2, [r7, #12]
 801a31c:	693b      	ldr	r3, [r7, #16]
 801a31e:	429a      	cmp	r2, r3
 801a320:	bf14      	ite	ne
 801a322:	2301      	movne	r3, #1
 801a324:	2300      	moveq	r3, #0
 801a326:	b2db      	uxtb	r3, r3
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d024      	beq.n	801a376 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 801a32c:	e7e4      	b.n	801a2f8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 801a32e:	69bb      	ldr	r3, [r7, #24]
 801a330:	687a      	ldr	r2, [r7, #4]
 801a332:	fb03 f202 	mul.w	r2, r3, r2
 801a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a338:	9301      	str	r3, [sp, #4]
 801a33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a33c:	9300      	str	r3, [sp, #0]
 801a33e:	683b      	ldr	r3, [r7, #0]
 801a340:	68b9      	ldr	r1, [r7, #8]
 801a342:	68f8      	ldr	r0, [r7, #12]
 801a344:	f7ff ffba 	bl	801a2bc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 801a348:	683b      	ldr	r3, [r7, #0]
 801a34a:	687a      	ldr	r2, [r7, #4]
 801a34c:	fb02 f303 	mul.w	r3, r2, r3
 801a350:	00db      	lsls	r3, r3, #3
 801a352:	68ba      	ldr	r2, [r7, #8]
 801a354:	4413      	add	r3, r2
 801a356:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 801a358:	697b      	ldr	r3, [r7, #20]
 801a35a:	00db      	lsls	r3, r3, #3
 801a35c:	68fa      	ldr	r2, [r7, #12]
 801a35e:	4413      	add	r3, r2
 801a360:	60fb      	str	r3, [r7, #12]
 801a362:	68fa      	ldr	r2, [r7, #12]
 801a364:	693b      	ldr	r3, [r7, #16]
 801a366:	429a      	cmp	r2, r3
 801a368:	bf14      	ite	ne
 801a36a:	2301      	movne	r3, #1
 801a36c:	2300      	moveq	r3, #0
 801a36e:	b2db      	uxtb	r3, r3
 801a370:	2b00      	cmp	r3, #0
 801a372:	d000      	beq.n	801a376 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 801a374:	e7db      	b.n	801a32e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 801a376:	69fb      	ldr	r3, [r7, #28]
 801a378:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 801a37a:	69bb      	ldr	r3, [r7, #24]
 801a37c:	3b02      	subs	r3, #2
 801a37e:	2b03      	cmp	r3, #3
 801a380:	d826      	bhi.n	801a3d0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 801a382:	a201      	add	r2, pc, #4	; (adr r2, 801a388 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 801a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a388:	0801a399 	.word	0x0801a399
 801a38c:	0801a3a7 	.word	0x0801a3a7
 801a390:	0801a3b5 	.word	0x0801a3b5
 801a394:	0801a3c3 	.word	0x0801a3c3
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 801a398:	697b      	ldr	r3, [r7, #20]
 801a39a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a39c:	6879      	ldr	r1, [r7, #4]
 801a39e:	68f8      	ldr	r0, [r7, #12]
 801a3a0:	f7ff f808 	bl	80193b4 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 801a3a4:	e01d      	b.n	801a3e2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 801a3a6:	697b      	ldr	r3, [r7, #20]
 801a3a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3aa:	6879      	ldr	r1, [r7, #4]
 801a3ac:	68f8      	ldr	r0, [r7, #12]
 801a3ae:	f7ff fa35 	bl	801981c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 801a3b2:	e016      	b.n	801a3e2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 801a3b4:	697b      	ldr	r3, [r7, #20]
 801a3b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3b8:	6879      	ldr	r1, [r7, #4]
 801a3ba:	68f8      	ldr	r0, [r7, #12]
 801a3bc:	f7ff f877 	bl	80194ae <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 801a3c0:	e00f      	b.n	801a3e2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 801a3c2:	697b      	ldr	r3, [r7, #20]
 801a3c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3c6:	6879      	ldr	r1, [r7, #4]
 801a3c8:	68f8      	ldr	r0, [r7, #12]
 801a3ca:	f7ff fb97 	bl	8019afc <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 801a3ce:	e008      	b.n	801a3e2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 801a3d0:	69bb      	ldr	r3, [r7, #24]
 801a3d2:	9300      	str	r3, [sp, #0]
 801a3d4:	697b      	ldr	r3, [r7, #20]
 801a3d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3d8:	6879      	ldr	r1, [r7, #4]
 801a3da:	68f8      	ldr	r0, [r7, #12]
 801a3dc:	f7ff fe96 	bl	801a10c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 801a3e0:	bf00      	nop
    }
}
 801a3e2:	bf00      	nop
 801a3e4:	3720      	adds	r7, #32
 801a3e6:	46bd      	mov	sp, r7
 801a3e8:	bd80      	pop	{r7, pc}
 801a3ea:	bf00      	nop

0801a3ec <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b086      	sub	sp, #24
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
 801a3f4:	6039      	str	r1, [r7, #0]
    int p=4;
 801a3f6:	2304      	movs	r3, #4
 801a3f8:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 801a3fa:	6878      	ldr	r0, [r7, #4]
 801a3fc:	f7e6 f89c 	bl	8000538 <__aeabi_i2d>
 801a400:	4602      	mov	r2, r0
 801a402:	460b      	mov	r3, r1
 801a404:	ec43 2b10 	vmov	d0, r2, r3
 801a408:	f006 fe98 	bl	802113c <sqrt>
 801a40c:	eeb0 7a40 	vmov.f32	s14, s0
 801a410:	eef0 7a60 	vmov.f32	s15, s1
 801a414:	eeb0 0a47 	vmov.f32	s0, s14
 801a418:	eef0 0a67 	vmov.f32	s1, s15
 801a41c:	f006 fc48 	bl	8020cb0 <floor>
 801a420:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	697a      	ldr	r2, [r7, #20]
 801a428:	fb93 f2f2 	sdiv	r2, r3, r2
 801a42c:	6979      	ldr	r1, [r7, #20]
 801a42e:	fb01 f202 	mul.w	r2, r1, r2
 801a432:	1a9b      	subs	r3, r3, r2
 801a434:	2b00      	cmp	r3, #0
 801a436:	d01e      	beq.n	801a476 <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 801a438:	697b      	ldr	r3, [r7, #20]
 801a43a:	2b02      	cmp	r3, #2
 801a43c:	d005      	beq.n	801a44a <_ZL9kf_factoriPi+0x5e>
 801a43e:	697b      	ldr	r3, [r7, #20]
 801a440:	2b04      	cmp	r3, #4
 801a442:	d105      	bne.n	801a450 <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 801a444:	2302      	movs	r3, #2
 801a446:	617b      	str	r3, [r7, #20]
 801a448:	e006      	b.n	801a458 <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 801a44a:	2303      	movs	r3, #3
 801a44c:	617b      	str	r3, [r7, #20]
 801a44e:	e003      	b.n	801a458 <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 801a450:	697b      	ldr	r3, [r7, #20]
 801a452:	3302      	adds	r3, #2
 801a454:	617b      	str	r3, [r7, #20]
 801a456:	bf00      	nop
            }
            if (p > floor_sqrt)
 801a458:	6978      	ldr	r0, [r7, #20]
 801a45a:	f7e6 f86d 	bl	8000538 <__aeabi_i2d>
 801a45e:	4602      	mov	r2, r0
 801a460:	460b      	mov	r3, r1
 801a462:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a466:	f7e6 fb43 	bl	8000af0 <__aeabi_dcmplt>
 801a46a:	4603      	mov	r3, r0
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d001      	beq.n	801a474 <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	617b      	str	r3, [r7, #20]
        while (n % p) {
 801a474:	e7d6      	b.n	801a424 <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 801a476:	687a      	ldr	r2, [r7, #4]
 801a478:	697b      	ldr	r3, [r7, #20]
 801a47a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a47e:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 801a480:	683b      	ldr	r3, [r7, #0]
 801a482:	1d1a      	adds	r2, r3, #4
 801a484:	603a      	str	r2, [r7, #0]
 801a486:	697a      	ldr	r2, [r7, #20]
 801a488:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 801a48a:	683b      	ldr	r3, [r7, #0]
 801a48c:	1d1a      	adds	r2, r3, #4
 801a48e:	603a      	str	r2, [r7, #0]
 801a490:	687a      	ldr	r2, [r7, #4]
 801a492:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	2b01      	cmp	r3, #1
 801a498:	dd00      	ble.n	801a49c <_ZL9kf_factoriPi+0xb0>
    do {
 801a49a:	e7c3      	b.n	801a424 <_ZL9kf_factoriPi+0x38>
}
 801a49c:	bf00      	nop
 801a49e:	3718      	adds	r7, #24
 801a4a0:	46bd      	mov	sp, r7
 801a4a2:	bd80      	pop	{r7, pc}
 801a4a4:	0000      	movs	r0, r0
	...

0801a4a8 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 801a4a8:	b5b0      	push	{r4, r5, r7, lr}
 801a4aa:	b090      	sub	sp, #64	; 0x40
 801a4ac:	af00      	add	r7, sp, #0
 801a4ae:	60f8      	str	r0, [r7, #12]
 801a4b0:	60b9      	str	r1, [r7, #8]
 801a4b2:	607a      	str	r2, [r7, #4]
 801a4b4:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 801a4be:	00db      	lsls	r3, r3, #3
 801a4c0:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 801a4c2:	683b      	ldr	r3, [r7, #0]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d104      	bne.n	801a4d2 <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 801a4c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a4ca:	f000 fcbd 	bl	801ae48 <_Z9ei_mallocj>
 801a4ce:	63f8      	str	r0, [r7, #60]	; 0x3c
 801a4d0:	e00c      	b.n	801a4ec <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d006      	beq.n	801a4e6 <kiss_fft_alloc+0x3e>
 801a4d8:	683b      	ldr	r3, [r7, #0]
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a4de:	429a      	cmp	r2, r3
 801a4e0:	d801      	bhi.n	801a4e6 <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 801a4e6:	683b      	ldr	r3, [r7, #0]
 801a4e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a4ea:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 801a4ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	f000 80a0 	beq.w	801a634 <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 801a4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a4f6:	68fa      	ldr	r2, [r7, #12]
 801a4f8:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 801a4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a4fc:	68ba      	ldr	r2, [r7, #8]
 801a4fe:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 801a500:	68bb      	ldr	r3, [r7, #8]
 801a502:	2b00      	cmp	r3, #0
 801a504:	d048      	beq.n	801a598 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 801a506:	2300      	movs	r3, #0
 801a508:	63bb      	str	r3, [r7, #56]	; 0x38
 801a50a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	429a      	cmp	r2, r3
 801a510:	f280 808a 	bge.w	801a628 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 801a514:	a34e      	add	r3, pc, #312	; (adr r3, 801a650 <kiss_fft_alloc+0x1a8>)
 801a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a51a:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 801a51e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a520:	f7e6 f80a 	bl	8000538 <__aeabi_i2d>
 801a524:	a34c      	add	r3, pc, #304	; (adr r3, 801a658 <kiss_fft_alloc+0x1b0>)
 801a526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a52a:	f7e6 f86f 	bl	800060c <__aeabi_dmul>
 801a52e:	4602      	mov	r2, r0
 801a530:	460b      	mov	r3, r1
 801a532:	4614      	mov	r4, r2
 801a534:	461d      	mov	r5, r3
 801a536:	68f8      	ldr	r0, [r7, #12]
 801a538:	f7e5 fffe 	bl	8000538 <__aeabi_i2d>
 801a53c:	4602      	mov	r2, r0
 801a53e:	460b      	mov	r3, r1
 801a540:	4620      	mov	r0, r4
 801a542:	4629      	mov	r1, r5
 801a544:	f7e6 f98c 	bl	8000860 <__aeabi_ddiv>
 801a548:	4602      	mov	r2, r0
 801a54a:	460b      	mov	r3, r1
 801a54c:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 801a550:	ed97 0b04 	vldr	d0, [r7, #16]
 801a554:	f006 fb58 	bl	8020c08 <cos>
 801a558:	ec51 0b10 	vmov	r0, r1, d0
 801a55c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a55e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801a562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a564:	00db      	lsls	r3, r3, #3
 801a566:	18d4      	adds	r4, r2, r3
 801a568:	f7e6 fb48 	bl	8000bfc <__aeabi_d2f>
 801a56c:	4603      	mov	r3, r0
 801a56e:	6023      	str	r3, [r4, #0]
 801a570:	ed97 0b04 	vldr	d0, [r7, #16]
 801a574:	f006 fc9c 	bl	8020eb0 <sin>
 801a578:	ec51 0b10 	vmov	r0, r1, d0
 801a57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a57e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801a582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a584:	00db      	lsls	r3, r3, #3
 801a586:	18d4      	adds	r4, r2, r3
 801a588:	f7e6 fb38 	bl	8000bfc <__aeabi_d2f>
 801a58c:	4603      	mov	r3, r0
 801a58e:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 801a590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a592:	3301      	adds	r3, #1
 801a594:	63bb      	str	r3, [r7, #56]	; 0x38
 801a596:	e7b8      	b.n	801a50a <kiss_fft_alloc+0x62>
            }
        } else {
            for (i=0;i<nfft;++i) {
 801a598:	2300      	movs	r3, #0
 801a59a:	63bb      	str	r3, [r7, #56]	; 0x38
 801a59c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	429a      	cmp	r2, r3
 801a5a2:	da41      	bge.n	801a628 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 801a5a4:	a32a      	add	r3, pc, #168	; (adr r3, 801a650 <kiss_fft_alloc+0x1a8>)
 801a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 801a5ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a5b0:	f7e5 ffc2 	bl	8000538 <__aeabi_i2d>
 801a5b4:	a32a      	add	r3, pc, #168	; (adr r3, 801a660 <kiss_fft_alloc+0x1b8>)
 801a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5ba:	f7e6 f827 	bl	800060c <__aeabi_dmul>
 801a5be:	4602      	mov	r2, r0
 801a5c0:	460b      	mov	r3, r1
 801a5c2:	4614      	mov	r4, r2
 801a5c4:	461d      	mov	r5, r3
 801a5c6:	68f8      	ldr	r0, [r7, #12]
 801a5c8:	f7e5 ffb6 	bl	8000538 <__aeabi_i2d>
 801a5cc:	4602      	mov	r2, r0
 801a5ce:	460b      	mov	r3, r1
 801a5d0:	4620      	mov	r0, r4
 801a5d2:	4629      	mov	r1, r5
 801a5d4:	f7e6 f944 	bl	8000860 <__aeabi_ddiv>
 801a5d8:	4602      	mov	r2, r0
 801a5da:	460b      	mov	r3, r1
 801a5dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 801a5e0:	ed97 0b08 	vldr	d0, [r7, #32]
 801a5e4:	f006 fb10 	bl	8020c08 <cos>
 801a5e8:	ec51 0b10 	vmov	r0, r1, d0
 801a5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a5ee:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5f4:	00db      	lsls	r3, r3, #3
 801a5f6:	18d4      	adds	r4, r2, r3
 801a5f8:	f7e6 fb00 	bl	8000bfc <__aeabi_d2f>
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	6023      	str	r3, [r4, #0]
 801a600:	ed97 0b08 	vldr	d0, [r7, #32]
 801a604:	f006 fc54 	bl	8020eb0 <sin>
 801a608:	ec51 0b10 	vmov	r0, r1, d0
 801a60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a60e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801a612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a614:	00db      	lsls	r3, r3, #3
 801a616:	18d4      	adds	r4, r2, r3
 801a618:	f7e6 faf0 	bl	8000bfc <__aeabi_d2f>
 801a61c:	4603      	mov	r3, r0
 801a61e:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 801a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a622:	3301      	adds	r3, #1
 801a624:	63bb      	str	r3, [r7, #56]	; 0x38
 801a626:	e7b9      	b.n	801a59c <kiss_fft_alloc+0xf4>
            }
        }

        kf_factor(nfft,st->factors);
 801a628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a62a:	3308      	adds	r3, #8
 801a62c:	4619      	mov	r1, r3
 801a62e:	68f8      	ldr	r0, [r7, #12]
 801a630:	f7ff fedc 	bl	801a3ec <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 801a634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a636:	2b00      	cmp	r3, #0
 801a638:	d002      	beq.n	801a640 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 801a63a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a63c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a63e:	601a      	str	r2, [r3, #0]
    }

    return st;
 801a640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801a642:	4618      	mov	r0, r3
 801a644:	3740      	adds	r7, #64	; 0x40
 801a646:	46bd      	mov	sp, r7
 801a648:	bdb0      	pop	{r4, r5, r7, pc}
 801a64a:	bf00      	nop
 801a64c:	f3af 8000 	nop.w
 801a650:	54442d18 	.word	0x54442d18
 801a654:	400921fb 	.word	0x400921fb
 801a658:	54442d18 	.word	0x54442d18
 801a65c:	401921fb 	.word	0x401921fb
 801a660:	54442d18 	.word	0x54442d18
 801a664:	c01921fb 	.word	0xc01921fb

0801a668 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 801a668:	b580      	push	{r7, lr}
 801a66a:	b088      	sub	sp, #32
 801a66c:	af02      	add	r7, sp, #8
 801a66e:	60f8      	str	r0, [r7, #12]
 801a670:	60b9      	str	r1, [r7, #8]
 801a672:	607a      	str	r2, [r7, #4]
 801a674:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 801a676:	68ba      	ldr	r2, [r7, #8]
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	429a      	cmp	r2, r3
 801a67c:	d11d      	bne.n	801a6ba <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 801a67e:	68fb      	ldr	r3, [r7, #12]
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	00db      	lsls	r3, r3, #3
 801a684:	4618      	mov	r0, r3
 801a686:	f000 fbdf 	bl	801ae48 <_Z9ei_mallocj>
 801a68a:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 801a68c:	68fb      	ldr	r3, [r7, #12]
 801a68e:	3308      	adds	r3, #8
 801a690:	68fa      	ldr	r2, [r7, #12]
 801a692:	9201      	str	r2, [sp, #4]
 801a694:	9300      	str	r3, [sp, #0]
 801a696:	683b      	ldr	r3, [r7, #0]
 801a698:	2201      	movs	r2, #1
 801a69a:	68b9      	ldr	r1, [r7, #8]
 801a69c:	6978      	ldr	r0, [r7, #20]
 801a69e:	f7ff fe0d 	bl	801a2bc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	00db      	lsls	r3, r3, #3
 801a6a8:	461a      	mov	r2, r3
 801a6aa:	6979      	ldr	r1, [r7, #20]
 801a6ac:	6878      	ldr	r0, [r7, #4]
 801a6ae:	f009 f867 	bl	8023780 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 801a6b2:	6978      	ldr	r0, [r7, #20]
 801a6b4:	f000 fbe2 	bl	801ae7c <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 801a6b8:	e00a      	b.n	801a6d0 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	3308      	adds	r3, #8
 801a6be:	68fa      	ldr	r2, [r7, #12]
 801a6c0:	9201      	str	r2, [sp, #4]
 801a6c2:	9300      	str	r3, [sp, #0]
 801a6c4:	683b      	ldr	r3, [r7, #0]
 801a6c6:	2201      	movs	r2, #1
 801a6c8:	68b9      	ldr	r1, [r7, #8]
 801a6ca:	6878      	ldr	r0, [r7, #4]
 801a6cc:	f7ff fdf6 	bl	801a2bc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 801a6d0:	bf00      	nop
 801a6d2:	3718      	adds	r7, #24
 801a6d4:	46bd      	mov	sp, r7
 801a6d6:	bd80      	pop	{r7, pc}

0801a6d8 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 801a6d8:	b580      	push	{r7, lr}
 801a6da:	b084      	sub	sp, #16
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	60f8      	str	r0, [r7, #12]
 801a6e0:	60b9      	str	r1, [r7, #8]
 801a6e2:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 801a6e4:	2301      	movs	r3, #1
 801a6e6:	687a      	ldr	r2, [r7, #4]
 801a6e8:	68b9      	ldr	r1, [r7, #8]
 801a6ea:	68f8      	ldr	r0, [r7, #12]
 801a6ec:	f7ff ffbc 	bl	801a668 <kiss_fft_stride>
}
 801a6f0:	bf00      	nop
 801a6f2:	3710      	adds	r7, #16
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	bd80      	pop	{r7, pc}

0801a6f8 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 801a6f8:	b5b0      	push	{r4, r5, r7, lr}
 801a6fa:	b090      	sub	sp, #64	; 0x40
 801a6fc:	af02      	add	r7, sp, #8
 801a6fe:	60f8      	str	r0, [r7, #12]
 801a700:	60b9      	str	r1, [r7, #8]
 801a702:	607a      	str	r2, [r7, #4]
 801a704:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 801a706:	2300      	movs	r3, #0
 801a708:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 801a70a:	2300      	movs	r3, #0
 801a70c:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	f003 0301 	and.w	r3, r3, #1
 801a714:	2b00      	cmp	r3, #0
 801a716:	d004      	beq.n	801a722 <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 801a718:	4885      	ldr	r0, [pc, #532]	; (801a930 <kiss_fftr_alloc+0x238>)
 801a71a:	f7eb fbff 	bl	8005f1c <_Z9ei_printfPKcz>
        return NULL;
 801a71e:	2300      	movs	r3, #0
 801a720:	e0f9      	b.n	801a916 <kiss_fftr_alloc+0x21e>
    }
    nfft >>= 1;
 801a722:	68fb      	ldr	r3, [r7, #12]
 801a724:	105b      	asrs	r3, r3, #1
 801a726:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 801a728:	f107 0314 	add.w	r3, r7, #20
 801a72c:	2200      	movs	r2, #0
 801a72e:	9200      	str	r2, [sp, #0]
 801a730:	2200      	movs	r2, #0
 801a732:	68b9      	ldr	r1, [r7, #8]
 801a734:	68f8      	ldr	r0, [r7, #12]
 801a736:	f7ff feb7 	bl	801a4a8 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 801a73a:	68fa      	ldr	r2, [r7, #12]
 801a73c:	4613      	mov	r3, r2
 801a73e:	005b      	lsls	r3, r3, #1
 801a740:	4413      	add	r3, r2
 801a742:	0fda      	lsrs	r2, r3, #31
 801a744:	4413      	add	r3, r2
 801a746:	105b      	asrs	r3, r3, #1
 801a748:	00da      	lsls	r2, r3, #3
 801a74a:	697b      	ldr	r3, [r7, #20]
 801a74c:	4413      	add	r3, r2
 801a74e:	330c      	adds	r3, #12
 801a750:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 801a752:	683b      	ldr	r3, [r7, #0]
 801a754:	2b00      	cmp	r3, #0
 801a756:	d104      	bne.n	801a762 <kiss_fftr_alloc+0x6a>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 801a758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a75a:	f000 fb75 	bl	801ae48 <_Z9ei_mallocj>
 801a75e:	6338      	str	r0, [r7, #48]	; 0x30
 801a760:	e009      	b.n	801a776 <kiss_fftr_alloc+0x7e>
    } else {
        if (*lenmem >= memneeded)
 801a762:	683b      	ldr	r3, [r7, #0]
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a768:	429a      	cmp	r2, r3
 801a76a:	d801      	bhi.n	801a770 <kiss_fftr_alloc+0x78>
            st = (kiss_fftr_cfg) mem;
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 801a770:	683b      	ldr	r3, [r7, #0]
 801a772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a774:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 801a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d101      	bne.n	801a780 <kiss_fftr_alloc+0x88>
        return NULL;
 801a77c:	2300      	movs	r3, #0
 801a77e:	e0ca      	b.n	801a916 <kiss_fftr_alloc+0x21e>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 801a780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a782:	f103 020c 	add.w	r2, r3, #12
 801a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a788:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 801a78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a78c:	681a      	ldr	r2, [r3, #0]
 801a78e:	697b      	ldr	r3, [r7, #20]
 801a790:	441a      	add	r2, r3
 801a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a794:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 801a796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a798:	685a      	ldr	r2, [r3, #4]
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	00db      	lsls	r3, r3, #3
 801a79e:	441a      	add	r2, r3
 801a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7a2:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 801a7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7a6:	681a      	ldr	r2, [r3, #0]
 801a7a8:	f107 0314 	add.w	r3, r7, #20
 801a7ac:	2100      	movs	r1, #0
 801a7ae:	9100      	str	r1, [sp, #0]
 801a7b0:	68b9      	ldr	r1, [r7, #8]
 801a7b2:	68f8      	ldr	r0, [r7, #12]
 801a7b4:	f7ff fe78 	bl	801a4a8 <kiss_fft_alloc>

    if (inverse_fft) {
 801a7b8:	68bb      	ldr	r3, [r7, #8]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d052      	beq.n	801a864 <kiss_fftr_alloc+0x16c>
        for (i = 0; i < nfft/2; ++i) {
 801a7be:	2300      	movs	r3, #0
 801a7c0:	637b      	str	r3, [r7, #52]	; 0x34
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	0fda      	lsrs	r2, r3, #31
 801a7c6:	4413      	add	r3, r2
 801a7c8:	105b      	asrs	r3, r3, #1
 801a7ca:	461a      	mov	r2, r3
 801a7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7ce:	4293      	cmp	r3, r2
 801a7d0:	f280 809a 	bge.w	801a908 <kiss_fftr_alloc+0x210>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 801a7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7d6:	3301      	adds	r3, #1
 801a7d8:	4618      	mov	r0, r3
 801a7da:	f7e5 fead 	bl	8000538 <__aeabi_i2d>
 801a7de:	4604      	mov	r4, r0
 801a7e0:	460d      	mov	r5, r1
 801a7e2:	68f8      	ldr	r0, [r7, #12]
 801a7e4:	f7e5 fea8 	bl	8000538 <__aeabi_i2d>
 801a7e8:	4602      	mov	r2, r0
 801a7ea:	460b      	mov	r3, r1
 801a7ec:	4620      	mov	r0, r4
 801a7ee:	4629      	mov	r1, r5
 801a7f0:	f7e6 f836 	bl	8000860 <__aeabi_ddiv>
 801a7f4:	4602      	mov	r2, r0
 801a7f6:	460b      	mov	r3, r1
 801a7f8:	4610      	mov	r0, r2
 801a7fa:	4619      	mov	r1, r3
 801a7fc:	f04f 0200 	mov.w	r2, #0
 801a800:	4b4c      	ldr	r3, [pc, #304]	; (801a934 <kiss_fftr_alloc+0x23c>)
 801a802:	f7e5 fd4d 	bl	80002a0 <__adddf3>
 801a806:	4602      	mov	r2, r0
 801a808:	460b      	mov	r3, r1
 801a80a:	4610      	mov	r0, r2
 801a80c:	4619      	mov	r1, r3
            double phase =
 801a80e:	a344      	add	r3, pc, #272	; (adr r3, 801a920 <kiss_fftr_alloc+0x228>)
 801a810:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a814:	f7e5 fefa 	bl	800060c <__aeabi_dmul>
 801a818:	4602      	mov	r2, r0
 801a81a:	460b      	mov	r3, r1
 801a81c:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 801a820:	ed97 0b06 	vldr	d0, [r7, #24]
 801a824:	f006 f9f0 	bl	8020c08 <cos>
 801a828:	ec51 0b10 	vmov	r0, r1, d0
 801a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a82e:	689a      	ldr	r2, [r3, #8]
 801a830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a832:	00db      	lsls	r3, r3, #3
 801a834:	18d4      	adds	r4, r2, r3
 801a836:	f7e6 f9e1 	bl	8000bfc <__aeabi_d2f>
 801a83a:	4603      	mov	r3, r0
 801a83c:	6023      	str	r3, [r4, #0]
 801a83e:	ed97 0b06 	vldr	d0, [r7, #24]
 801a842:	f006 fb35 	bl	8020eb0 <sin>
 801a846:	ec51 0b10 	vmov	r0, r1, d0
 801a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a84c:	689a      	ldr	r2, [r3, #8]
 801a84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a850:	00db      	lsls	r3, r3, #3
 801a852:	18d4      	adds	r4, r2, r3
 801a854:	f7e6 f9d2 	bl	8000bfc <__aeabi_d2f>
 801a858:	4603      	mov	r3, r0
 801a85a:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 801a85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a85e:	3301      	adds	r3, #1
 801a860:	637b      	str	r3, [r7, #52]	; 0x34
 801a862:	e7ae      	b.n	801a7c2 <kiss_fftr_alloc+0xca>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 801a864:	2300      	movs	r3, #0
 801a866:	637b      	str	r3, [r7, #52]	; 0x34
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	0fda      	lsrs	r2, r3, #31
 801a86c:	4413      	add	r3, r2
 801a86e:	105b      	asrs	r3, r3, #1
 801a870:	461a      	mov	r2, r3
 801a872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a874:	4293      	cmp	r3, r2
 801a876:	da47      	bge.n	801a908 <kiss_fftr_alloc+0x210>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 801a878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a87a:	3301      	adds	r3, #1
 801a87c:	4618      	mov	r0, r3
 801a87e:	f7e5 fe5b 	bl	8000538 <__aeabi_i2d>
 801a882:	4604      	mov	r4, r0
 801a884:	460d      	mov	r5, r1
 801a886:	68f8      	ldr	r0, [r7, #12]
 801a888:	f7e5 fe56 	bl	8000538 <__aeabi_i2d>
 801a88c:	4602      	mov	r2, r0
 801a88e:	460b      	mov	r3, r1
 801a890:	4620      	mov	r0, r4
 801a892:	4629      	mov	r1, r5
 801a894:	f7e5 ffe4 	bl	8000860 <__aeabi_ddiv>
 801a898:	4602      	mov	r2, r0
 801a89a:	460b      	mov	r3, r1
 801a89c:	4610      	mov	r0, r2
 801a89e:	4619      	mov	r1, r3
 801a8a0:	f04f 0200 	mov.w	r2, #0
 801a8a4:	4b23      	ldr	r3, [pc, #140]	; (801a934 <kiss_fftr_alloc+0x23c>)
 801a8a6:	f7e5 fcfb 	bl	80002a0 <__adddf3>
 801a8aa:	4602      	mov	r2, r0
 801a8ac:	460b      	mov	r3, r1
 801a8ae:	4610      	mov	r0, r2
 801a8b0:	4619      	mov	r1, r3
            double phase =
 801a8b2:	a31d      	add	r3, pc, #116	; (adr r3, 801a928 <kiss_fftr_alloc+0x230>)
 801a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8b8:	f7e5 fea8 	bl	800060c <__aeabi_dmul>
 801a8bc:	4602      	mov	r2, r0
 801a8be:	460b      	mov	r3, r1
 801a8c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 801a8c4:	ed97 0b08 	vldr	d0, [r7, #32]
 801a8c8:	f006 f99e 	bl	8020c08 <cos>
 801a8cc:	ec51 0b10 	vmov	r0, r1, d0
 801a8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8d2:	689a      	ldr	r2, [r3, #8]
 801a8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8d6:	00db      	lsls	r3, r3, #3
 801a8d8:	18d4      	adds	r4, r2, r3
 801a8da:	f7e6 f98f 	bl	8000bfc <__aeabi_d2f>
 801a8de:	4603      	mov	r3, r0
 801a8e0:	6023      	str	r3, [r4, #0]
 801a8e2:	ed97 0b08 	vldr	d0, [r7, #32]
 801a8e6:	f006 fae3 	bl	8020eb0 <sin>
 801a8ea:	ec51 0b10 	vmov	r0, r1, d0
 801a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8f0:	689a      	ldr	r2, [r3, #8]
 801a8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8f4:	00db      	lsls	r3, r3, #3
 801a8f6:	18d4      	adds	r4, r2, r3
 801a8f8:	f7e6 f980 	bl	8000bfc <__aeabi_d2f>
 801a8fc:	4603      	mov	r3, r0
 801a8fe:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 801a900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a902:	3301      	adds	r3, #1
 801a904:	637b      	str	r3, [r7, #52]	; 0x34
 801a906:	e7af      	b.n	801a868 <kiss_fftr_alloc+0x170>
        }
    }

    if (memallocated != NULL) {
 801a908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d002      	beq.n	801a914 <kiss_fftr_alloc+0x21c>
        *memallocated = memneeded;
 801a90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a912:	601a      	str	r2, [r3, #0]
    }

    return st;
 801a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801a916:	4618      	mov	r0, r3
 801a918:	3738      	adds	r7, #56	; 0x38
 801a91a:	46bd      	mov	sp, r7
 801a91c:	bdb0      	pop	{r4, r5, r7, pc}
 801a91e:	bf00      	nop
 801a920:	54442d18 	.word	0x54442d18
 801a924:	400921fb 	.word	0x400921fb
 801a928:	54442d18 	.word	0x54442d18
 801a92c:	c00921fb 	.word	0xc00921fb
 801a930:	08028614 	.word	0x08028614
 801a934:	3fe00000 	.word	0x3fe00000

0801a938 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 801a938:	b580      	push	{r7, lr}
 801a93a:	b092      	sub	sp, #72	; 0x48
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	60f8      	str	r0, [r7, #12]
 801a940:	60b9      	str	r1, [r7, #8]
 801a942:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	685b      	ldr	r3, [r3, #4]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d002      	beq.n	801a954 <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 801a94e:	4887      	ldr	r0, [pc, #540]	; (801ab6c <kiss_fftr+0x234>)
 801a950:	f7eb fae4 	bl	8005f1c <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	6818      	ldr	r0, [r3, #0]
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	685b      	ldr	r3, [r3, #4]
 801a964:	461a      	mov	r2, r3
 801a966:	68b9      	ldr	r1, [r7, #8]
 801a968:	f7ff feb6 	bl	801a6d8 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	685b      	ldr	r3, [r3, #4]
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	685b      	ldr	r3, [r3, #4]
 801a978:	685b      	ldr	r3, [r3, #4]
 801a97a:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 801a97c:	ed97 7a04 	vldr	s14, [r7, #16]
 801a980:	edd7 7a05 	vldr	s15, [r7, #20]
 801a984:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 801a98e:	ed97 7a04 	vldr	s14, [r7, #16]
 801a992:	edd7 7a05 	vldr	s15, [r7, #20]
 801a996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a998:	00db      	lsls	r3, r3, #3
 801a99a:	687a      	ldr	r2, [r7, #4]
 801a99c:	4413      	add	r3, r2
 801a99e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a9a2:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	f04f 0200 	mov.w	r2, #0
 801a9ac:	605a      	str	r2, [r3, #4]
 801a9ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a9b0:	00db      	lsls	r3, r3, #3
 801a9b2:	687a      	ldr	r2, [r7, #4]
 801a9b4:	4413      	add	r3, r2
 801a9b6:	687a      	ldr	r2, [r7, #4]
 801a9b8:	6852      	ldr	r2, [r2, #4]
 801a9ba:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 801a9bc:	2301      	movs	r3, #1
 801a9be:	647b      	str	r3, [r7, #68]	; 0x44
 801a9c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a9c2:	0fda      	lsrs	r2, r3, #31
 801a9c4:	4413      	add	r3, r2
 801a9c6:	105b      	asrs	r3, r3, #1
 801a9c8:	461a      	mov	r2, r3
 801a9ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9cc:	4293      	cmp	r3, r2
 801a9ce:	f300 80c9 	bgt.w	801ab64 <kiss_fftr+0x22c>
        fpk    = st->tmpbuf[k];
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	685a      	ldr	r2, [r3, #4]
 801a9d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9d8:	00db      	lsls	r3, r3, #3
 801a9da:	441a      	add	r2, r3
 801a9dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a9e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a9e4:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	685a      	ldr	r2, [r3, #4]
 801a9ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a9ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9f0:	1acb      	subs	r3, r1, r3
 801a9f2:	00db      	lsls	r3, r3, #3
 801a9f4:	4413      	add	r3, r2
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	685a      	ldr	r2, [r3, #4]
 801a9fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801aa00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa02:	1acb      	subs	r3, r1, r3
 801aa04:	00db      	lsls	r3, r3, #3
 801aa06:	4413      	add	r3, r2
 801aa08:	edd3 7a01 	vldr	s15, [r3, #4]
 801aa0c:	eef1 7a67 	vneg.f32	s15, s15
 801aa10:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 801aa14:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801aa18:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801aa1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aa20:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801aa24:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801aa28:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801aa2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aa30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 801aa34:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801aa38:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801aa3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801aa40:	edc7 7a08 	vstr	s15, [r7, #32]
 801aa44:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801aa48:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801aa4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801aa50:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 801aa54:	ed97 7a08 	vldr	s14, [r7, #32]
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	689a      	ldr	r2, [r3, #8]
 801aa5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa5e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801aa62:	3b01      	subs	r3, #1
 801aa64:	00db      	lsls	r3, r3, #3
 801aa66:	4413      	add	r3, r2
 801aa68:	edd3 7a00 	vldr	s15, [r3]
 801aa6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801aa70:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	689a      	ldr	r2, [r3, #8]
 801aa78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa7a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801aa7e:	3b01      	subs	r3, #1
 801aa80:	00db      	lsls	r3, r3, #3
 801aa82:	4413      	add	r3, r2
 801aa84:	edd3 7a01 	vldr	s15, [r3, #4]
 801aa88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801aa8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801aa90:	edc7 7a06 	vstr	s15, [r7, #24]
 801aa94:	ed97 7a08 	vldr	s14, [r7, #32]
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	689a      	ldr	r2, [r3, #8]
 801aa9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801aaa2:	3b01      	subs	r3, #1
 801aaa4:	00db      	lsls	r3, r3, #3
 801aaa6:	4413      	add	r3, r2
 801aaa8:	edd3 7a01 	vldr	s15, [r3, #4]
 801aaac:	ee27 7a27 	vmul.f32	s14, s14, s15
 801aab0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	689a      	ldr	r2, [r3, #8]
 801aab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aaba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801aabe:	3b01      	subs	r3, #1
 801aac0:	00db      	lsls	r3, r3, #3
 801aac2:	4413      	add	r3, r2
 801aac4:	edd3 7a00 	vldr	s15, [r3]
 801aac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801aacc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aad0:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 801aad4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801aad8:	edd7 7a06 	vldr	s15, [r7, #24]
 801aadc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aae2:	00db      	lsls	r3, r3, #3
 801aae4:	687a      	ldr	r2, [r7, #4]
 801aae6:	4413      	add	r3, r2
 801aae8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801aaec:	ee67 7a87 	vmul.f32	s15, s15, s14
 801aaf0:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 801aaf4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801aaf8:	edd7 7a07 	vldr	s15, [r7, #28]
 801aafc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ab00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ab02:	00db      	lsls	r3, r3, #3
 801ab04:	687a      	ldr	r2, [r7, #4]
 801ab06:	4413      	add	r3, r2
 801ab08:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ab0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ab10:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 801ab14:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801ab18:	edd7 7a06 	vldr	s15, [r7, #24]
 801ab1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ab20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ab22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ab24:	1ad3      	subs	r3, r2, r3
 801ab26:	00db      	lsls	r3, r3, #3
 801ab28:	687a      	ldr	r2, [r7, #4]
 801ab2a:	4413      	add	r3, r2
 801ab2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ab30:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ab34:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 801ab38:	ed97 7a07 	vldr	s14, [r7, #28]
 801ab3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801ab40:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ab44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ab46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ab48:	1ad3      	subs	r3, r2, r3
 801ab4a:	00db      	lsls	r3, r3, #3
 801ab4c:	687a      	ldr	r2, [r7, #4]
 801ab4e:	4413      	add	r3, r2
 801ab50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ab54:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ab58:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 801ab5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ab5e:	3301      	adds	r3, #1
 801ab60:	647b      	str	r3, [r7, #68]	; 0x44
 801ab62:	e72d      	b.n	801a9c0 <kiss_fftr+0x88>
    }
}
 801ab64:	bf00      	nop
 801ab66:	3748      	adds	r7, #72	; 0x48
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	bd80      	pop	{r7, pc}
 801ab6c:	08028630 	.word	0x08028630

0801ab70 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 801ab70:	b580      	push	{r7, lr}
 801ab72:	b082      	sub	sp, #8
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	ed87 0a01 	vstr	s0, [r7, #4]
 801ab7a:	ed97 0a01 	vldr	s0, [r7, #4]
 801ab7e:	f006 fb3f 	bl	8021200 <log10f>
 801ab82:	eef0 7a40 	vmov.f32	s15, s0
 801ab86:	eeb0 0a67 	vmov.f32	s0, s15
 801ab8a:	3708      	adds	r7, #8
 801ab8c:	46bd      	mov	sp, r7
 801ab8e:	bd80      	pop	{r7, pc}

0801ab90 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 801ab90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab92:	b083      	sub	sp, #12
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	ed87 0b00 	vstr	d0, [r7]
 801ab9a:	683c      	ldr	r4, [r7, #0]
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801aba2:	2301      	movs	r3, #1
 801aba4:	461e      	mov	r6, r3
 801aba6:	f04f 32ff 	mov.w	r2, #4294967295
 801abaa:	4b10      	ldr	r3, [pc, #64]	; (801abec <_ZSt5isinfd+0x5c>)
 801abac:	4620      	mov	r0, r4
 801abae:	4629      	mov	r1, r5
 801abb0:	f7e5 ffc6 	bl	8000b40 <__aeabi_dcmpun>
 801abb4:	4603      	mov	r3, r0
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d10b      	bne.n	801abd2 <_ZSt5isinfd+0x42>
 801abba:	f04f 32ff 	mov.w	r2, #4294967295
 801abbe:	4b0b      	ldr	r3, [pc, #44]	; (801abec <_ZSt5isinfd+0x5c>)
 801abc0:	4620      	mov	r0, r4
 801abc2:	4629      	mov	r1, r5
 801abc4:	f7e5 ff9e 	bl	8000b04 <__aeabi_dcmple>
 801abc8:	4603      	mov	r3, r0
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d101      	bne.n	801abd2 <_ZSt5isinfd+0x42>
 801abce:	2300      	movs	r3, #0
 801abd0:	461e      	mov	r6, r3
 801abd2:	b2f3      	uxtb	r3, r6
 801abd4:	f083 0301 	eor.w	r3, r3, #1
 801abd8:	b2db      	uxtb	r3, r3
 801abda:	2b00      	cmp	r3, #0
 801abdc:	bf14      	ite	ne
 801abde:	2301      	movne	r3, #1
 801abe0:	2300      	moveq	r3, #0
 801abe2:	b2db      	uxtb	r3, r3
 801abe4:	4618      	mov	r0, r3
 801abe6:	370c      	adds	r7, #12
 801abe8:	46bd      	mov	sp, r7
 801abea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abec:	7fefffff 	.word	0x7fefffff

0801abf0 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 801abf0:	b480      	push	{r7}
 801abf2:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 801abf4:	2300      	movs	r3, #0
}
 801abf6:	4618      	mov	r0, r3
 801abf8:	46bd      	mov	sp, r7
 801abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abfe:	4770      	bx	lr

0801ac00 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 801ac00:	b5b0      	push	{r4, r5, r7, lr}
 801ac02:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 801ac04:	f7ee fba0 	bl	8009348 <HAL_GetTick>
 801ac08:	4603      	mov	r3, r0
 801ac0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ac0e:	fb02 f303 	mul.w	r3, r2, r3
 801ac12:	2200      	movs	r2, #0
 801ac14:	461c      	mov	r4, r3
 801ac16:	4615      	mov	r5, r2
 801ac18:	4622      	mov	r2, r4
 801ac1a:	462b      	mov	r3, r5
}
 801ac1c:	4610      	mov	r0, r2
 801ac1e:	4619      	mov	r1, r3
 801ac20:	bdb0      	pop	{r4, r5, r7, pc}
 801ac22:	0000      	movs	r0, r0
 801ac24:	0000      	movs	r0, r0
	...

0801ac28 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 801ac28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac2c:	b08c      	sub	sp, #48	; 0x30
 801ac2e:	af00      	add	r7, sp, #0
 801ac30:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 801ac34:	466b      	mov	r3, sp
 801ac36:	4698      	mov	r8, r3
    float n = f;
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 801ac3c:	4b7e      	ldr	r3, [pc, #504]	; (801ae38 <_Z15ei_printf_floatf+0x210>)
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	1e5e      	subs	r6, r3, #1
 801ac42:	623e      	str	r6, [r7, #32]
 801ac44:	4633      	mov	r3, r6
 801ac46:	3301      	adds	r3, #1
 801ac48:	2200      	movs	r2, #0
 801ac4a:	461c      	mov	r4, r3
 801ac4c:	4615      	mov	r5, r2
 801ac4e:	f04f 0200 	mov.w	r2, #0
 801ac52:	f04f 0300 	mov.w	r3, #0
 801ac56:	00eb      	lsls	r3, r5, #3
 801ac58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801ac5c:	00e2      	lsls	r2, r4, #3
 801ac5e:	4633      	mov	r3, r6
 801ac60:	3301      	adds	r3, #1
 801ac62:	2200      	movs	r2, #0
 801ac64:	4618      	mov	r0, r3
 801ac66:	4611      	mov	r1, r2
 801ac68:	f04f 0200 	mov.w	r2, #0
 801ac6c:	f04f 0300 	mov.w	r3, #0
 801ac70:	00cb      	lsls	r3, r1, #3
 801ac72:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801ac76:	00c2      	lsls	r2, r0, #3
 801ac78:	4633      	mov	r3, r6
 801ac7a:	3301      	adds	r3, #1
 801ac7c:	3307      	adds	r3, #7
 801ac7e:	08db      	lsrs	r3, r3, #3
 801ac80:	00db      	lsls	r3, r3, #3
 801ac82:	ebad 0d03 	sub.w	sp, sp, r3
 801ac86:	466b      	mov	r3, sp
 801ac88:	3300      	adds	r3, #0
 801ac8a:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 801ac8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801ac90:	eef5 7a40 	vcmp.f32	s15, #0.0
 801ac94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac98:	d106      	bne.n	801aca8 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 801ac9a:	69fb      	ldr	r3, [r7, #28]
 801ac9c:	4967      	ldr	r1, [pc, #412]	; (801ae3c <_Z15ei_printf_floatf+0x214>)
 801ac9e:	461a      	mov	r2, r3
 801aca0:	460b      	mov	r3, r1
 801aca2:	881b      	ldrh	r3, [r3, #0]
 801aca4:	8013      	strh	r3, [r2, #0]
 801aca6:	e0b6      	b.n	801ae16 <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 801aca8:	69fb      	ldr	r3, [r7, #28]
 801acaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 801acac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801acb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801acb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acb8:	bf4c      	ite	mi
 801acba:	2301      	movmi	r3, #1
 801acbc:	2300      	movpl	r3, #0
 801acbe:	b2db      	uxtb	r3, r3
 801acc0:	61bb      	str	r3, [r7, #24]
        if (neg) {
 801acc2:	69bb      	ldr	r3, [r7, #24]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d005      	beq.n	801acd4 <_Z15ei_printf_floatf+0xac>
            n = -n;
 801acc8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801accc:	eef1 7a67 	vneg.f32	s15, s15
 801acd0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 801acd4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 801acd8:	f7ff ff4a 	bl	801ab70 <_ZSt5log10f>
 801acdc:	eef0 7a40 	vmov.f32	s15, s0
 801ace0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ace4:	ee17 3a90 	vmov	r3, s15
 801ace8:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 801acea:	69bb      	ldr	r3, [r7, #24]
 801acec:	2b00      	cmp	r3, #0
 801acee:	d004      	beq.n	801acfa <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 801acf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acf2:	1c5a      	adds	r2, r3, #1
 801acf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801acf6:	222d      	movs	r2, #45	; 0x2d
 801acf8:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 801acfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	dc01      	bgt.n	801ad04 <_Z15ei_printf_floatf+0xdc>
            m = 0;
 801ad00:	2300      	movs	r3, #0
 801ad02:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 801ad04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad06:	f7e5 fc29 	bl	800055c <__aeabi_f2d>
 801ad0a:	4b4d      	ldr	r3, [pc, #308]	; (801ae40 <_Z15ei_printf_floatf+0x218>)
 801ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad10:	2401      	movs	r4, #1
 801ad12:	f7e5 ff0b 	bl	8000b2c <__aeabi_dcmpgt>
 801ad16:	4603      	mov	r3, r0
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d101      	bne.n	801ad20 <_Z15ei_printf_floatf+0xf8>
 801ad1c:	2300      	movs	r3, #0
 801ad1e:	461c      	mov	r4, r3
 801ad20:	b2e3      	uxtb	r3, r4
 801ad22:	f083 0301 	eor.w	r3, r3, #1
 801ad26:	b2db      	uxtb	r3, r3
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d002      	beq.n	801ad32 <_Z15ei_printf_floatf+0x10a>
 801ad2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	db6e      	blt.n	801ae10 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 801ad32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ad34:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 801ae30 <_Z15ei_printf_floatf+0x208>
 801ad38:	f000 f8ab 	bl	801ae92 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 801ad3c:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 801ad40:	f04f 0200 	mov.w	r2, #0
 801ad44:	f04f 0300 	mov.w	r3, #0
 801ad48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801ad4c:	f7e5 feee 	bl	8000b2c <__aeabi_dcmpgt>
 801ad50:	4603      	mov	r3, r0
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d00b      	beq.n	801ad6e <_Z15ei_printf_floatf+0x146>
 801ad56:	ed97 0b04 	vldr	d0, [r7, #16]
 801ad5a:	f7ff ff19 	bl	801ab90 <_ZSt5isinfd>
 801ad5e:	4603      	mov	r3, r0
 801ad60:	f083 0301 	eor.w	r3, r3, #1
 801ad64:	b2db      	uxtb	r3, r3
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d001      	beq.n	801ad6e <_Z15ei_printf_floatf+0x146>
 801ad6a:	2301      	movs	r3, #1
 801ad6c:	e000      	b.n	801ad70 <_Z15ei_printf_floatf+0x148>
 801ad6e:	2300      	movs	r3, #0
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d03a      	beq.n	801adea <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 801ad74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad76:	f7e5 fbf1 	bl	800055c <__aeabi_f2d>
 801ad7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ad7e:	f7e5 fd6f 	bl	8000860 <__aeabi_ddiv>
 801ad82:	4602      	mov	r2, r0
 801ad84:	460b      	mov	r3, r1
 801ad86:	ec43 2b17 	vmov	d7, r2, r3
 801ad8a:	eeb0 0a47 	vmov.f32	s0, s14
 801ad8e:	eef0 0a67 	vmov.f32	s1, s15
 801ad92:	f005 ff8d 	bl	8020cb0 <floor>
 801ad96:	ec53 2b10 	vmov	r2, r3, d0
 801ad9a:	4610      	mov	r0, r2
 801ad9c:	4619      	mov	r1, r3
 801ad9e:	f7e5 fee5 	bl	8000b6c <__aeabi_d2iz>
 801ada2:	4603      	mov	r3, r0
 801ada4:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 801ada6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ada8:	f7e5 fbd8 	bl	800055c <__aeabi_f2d>
 801adac:	4604      	mov	r4, r0
 801adae:	460d      	mov	r5, r1
 801adb0:	68f8      	ldr	r0, [r7, #12]
 801adb2:	f7e5 fbc1 	bl	8000538 <__aeabi_i2d>
 801adb6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801adba:	f7e5 fc27 	bl	800060c <__aeabi_dmul>
 801adbe:	4602      	mov	r2, r0
 801adc0:	460b      	mov	r3, r1
 801adc2:	4620      	mov	r0, r4
 801adc4:	4629      	mov	r1, r5
 801adc6:	f7e5 fa69 	bl	800029c <__aeabi_dsub>
 801adca:	4602      	mov	r2, r0
 801adcc:	460b      	mov	r3, r1
 801adce:	4610      	mov	r0, r2
 801add0:	4619      	mov	r1, r3
 801add2:	f7e5 ff13 	bl	8000bfc <__aeabi_d2f>
 801add6:	4603      	mov	r3, r0
 801add8:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 801adda:	68fb      	ldr	r3, [r7, #12]
 801addc:	b2da      	uxtb	r2, r3
 801adde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ade0:	1c59      	adds	r1, r3, #1
 801ade2:	62f9      	str	r1, [r7, #44]	; 0x2c
 801ade4:	3230      	adds	r2, #48	; 0x30
 801ade6:	b2d2      	uxtb	r2, r2
 801ade8:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 801adea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adec:	2b00      	cmp	r3, #0
 801adee:	d10b      	bne.n	801ae08 <_Z15ei_printf_floatf+0x1e0>
 801adf0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801adf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801adf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adfc:	dd04      	ble.n	801ae08 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 801adfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae00:	1c5a      	adds	r2, r3, #1
 801ae02:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ae04:	222e      	movs	r2, #46	; 0x2e
 801ae06:	701a      	strb	r2, [r3, #0]
            m--;
 801ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae0a:	3b01      	subs	r3, #1
 801ae0c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 801ae0e:	e779      	b.n	801ad04 <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 801ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae12:	2200      	movs	r2, #0
 801ae14:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 801ae16:	69f9      	ldr	r1, [r7, #28]
 801ae18:	480a      	ldr	r0, [pc, #40]	; (801ae44 <_Z15ei_printf_floatf+0x21c>)
 801ae1a:	f7eb f87f 	bl	8005f1c <_Z9ei_printfPKcz>
 801ae1e:	46c5      	mov	sp, r8
}
 801ae20:	bf00      	nop
 801ae22:	3730      	adds	r7, #48	; 0x30
 801ae24:	46bd      	mov	sp, r7
 801ae26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae2a:	bf00      	nop
 801ae2c:	f3af 8000 	nop.w
 801ae30:	00000000 	.word	0x00000000
 801ae34:	40240000 	.word	0x40240000
 801ae38:	20000110 	.word	0x20000110
 801ae3c:	08028658 	.word	0x08028658
 801ae40:	20000108 	.word	0x20000108
 801ae44:	0802865c 	.word	0x0802865c

0801ae48 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 801ae48:	b580      	push	{r7, lr}
 801ae4a:	b082      	sub	sp, #8
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
    return malloc(size);
 801ae50:	6878      	ldr	r0, [r7, #4]
 801ae52:	f008 fc85 	bl	8023760 <malloc>
 801ae56:	4603      	mov	r3, r0
}
 801ae58:	4618      	mov	r0, r3
 801ae5a:	3708      	adds	r7, #8
 801ae5c:	46bd      	mov	sp, r7
 801ae5e:	bd80      	pop	{r7, pc}

0801ae60 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 801ae60:	b580      	push	{r7, lr}
 801ae62:	b082      	sub	sp, #8
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	6078      	str	r0, [r7, #4]
 801ae68:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 801ae6a:	6839      	ldr	r1, [r7, #0]
 801ae6c:	6878      	ldr	r0, [r7, #4]
 801ae6e:	f008 fc2f 	bl	80236d0 <calloc>
 801ae72:	4603      	mov	r3, r0
}
 801ae74:	4618      	mov	r0, r3
 801ae76:	3708      	adds	r7, #8
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	bd80      	pop	{r7, pc}

0801ae7c <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 801ae7c:	b580      	push	{r7, lr}
 801ae7e:	b082      	sub	sp, #8
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	6078      	str	r0, [r7, #4]
    free(ptr);
 801ae84:	6878      	ldr	r0, [r7, #4]
 801ae86:	f008 fc73 	bl	8023770 <free>
}
 801ae8a:	bf00      	nop
 801ae8c:	3708      	adds	r7, #8
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	bd80      	pop	{r7, pc}

0801ae92 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 801ae92:	b580      	push	{r7, lr}
 801ae94:	b084      	sub	sp, #16
 801ae96:	af00      	add	r7, sp, #0
 801ae98:	ed87 0b02 	vstr	d0, [r7, #8]
 801ae9c:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 801ae9e:	6878      	ldr	r0, [r7, #4]
 801aea0:	f7e5 fb4a 	bl	8000538 <__aeabi_i2d>
 801aea4:	4602      	mov	r2, r0
 801aea6:	460b      	mov	r3, r1
 801aea8:	ec43 2b11 	vmov	d1, r2, r3
 801aeac:	ed97 0b02 	vldr	d0, [r7, #8]
 801aeb0:	f006 f8d4 	bl	802105c <pow>
 801aeb4:	eeb0 7a40 	vmov.f32	s14, s0
 801aeb8:	eef0 7a60 	vmov.f32	s15, s1
    }
 801aebc:	eeb0 0a47 	vmov.f32	s0, s14
 801aec0:	eef0 0a67 	vmov.f32	s1, s15
 801aec4:	3710      	adds	r7, #16
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd80      	pop	{r7, pc}
	...

0801aecc <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801aecc:	b480      	push	{r7}
 801aece:	b083      	sub	sp, #12
 801aed0:	af00      	add	r7, sp, #0
 801aed2:	4603      	mov	r3, r0
 801aed4:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 801aed6:	79fb      	ldrb	r3, [r7, #7]
 801aed8:	2b10      	cmp	r3, #16
 801aeda:	d847      	bhi.n	801af6c <TfLiteTypeGetName+0xa0>
 801aedc:	a201      	add	r2, pc, #4	; (adr r2, 801aee4 <TfLiteTypeGetName+0x18>)
 801aede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aee2:	bf00      	nop
 801aee4:	0801af29 	.word	0x0801af29
 801aee8:	0801af2d 	.word	0x0801af2d
 801aeec:	0801af35 	.word	0x0801af35
 801aef0:	0801af3d 	.word	0x0801af3d
 801aef4:	0801af45 	.word	0x0801af45
 801aef8:	0801af59 	.word	0x0801af59
 801aefc:	0801af4d 	.word	0x0801af4d
 801af00:	0801af31 	.word	0x0801af31
 801af04:	0801af51 	.word	0x0801af51
 801af08:	0801af41 	.word	0x0801af41
 801af0c:	0801af5d 	.word	0x0801af5d
 801af10:	0801af61 	.word	0x0801af61
 801af14:	0801af55 	.word	0x0801af55
 801af18:	0801af49 	.word	0x0801af49
 801af1c:	0801af65 	.word	0x0801af65
 801af20:	0801af69 	.word	0x0801af69
 801af24:	0801af39 	.word	0x0801af39
    case kTfLiteNoType:
      return "NOTYPE";
 801af28:	4b14      	ldr	r3, [pc, #80]	; (801af7c <TfLiteTypeGetName+0xb0>)
 801af2a:	e020      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 801af2c:	4b14      	ldr	r3, [pc, #80]	; (801af80 <TfLiteTypeGetName+0xb4>)
 801af2e:	e01e      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 801af30:	4b14      	ldr	r3, [pc, #80]	; (801af84 <TfLiteTypeGetName+0xb8>)
 801af32:	e01c      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 801af34:	4b14      	ldr	r3, [pc, #80]	; (801af88 <TfLiteTypeGetName+0xbc>)
 801af36:	e01a      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 801af38:	4b14      	ldr	r3, [pc, #80]	; (801af8c <TfLiteTypeGetName+0xc0>)
 801af3a:	e018      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 801af3c:	4b14      	ldr	r3, [pc, #80]	; (801af90 <TfLiteTypeGetName+0xc4>)
 801af3e:	e016      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 801af40:	4b14      	ldr	r3, [pc, #80]	; (801af94 <TfLiteTypeGetName+0xc8>)
 801af42:	e014      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 801af44:	4b14      	ldr	r3, [pc, #80]	; (801af98 <TfLiteTypeGetName+0xcc>)
 801af46:	e012      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 801af48:	4b14      	ldr	r3, [pc, #80]	; (801af9c <TfLiteTypeGetName+0xd0>)
 801af4a:	e010      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 801af4c:	4b14      	ldr	r3, [pc, #80]	; (801afa0 <TfLiteTypeGetName+0xd4>)
 801af4e:	e00e      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 801af50:	4b14      	ldr	r3, [pc, #80]	; (801afa4 <TfLiteTypeGetName+0xd8>)
 801af52:	e00c      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 801af54:	4b14      	ldr	r3, [pc, #80]	; (801afa8 <TfLiteTypeGetName+0xdc>)
 801af56:	e00a      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 801af58:	4b14      	ldr	r3, [pc, #80]	; (801afac <TfLiteTypeGetName+0xe0>)
 801af5a:	e008      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 801af5c:	4b14      	ldr	r3, [pc, #80]	; (801afb0 <TfLiteTypeGetName+0xe4>)
 801af5e:	e006      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 801af60:	4b14      	ldr	r3, [pc, #80]	; (801afb4 <TfLiteTypeGetName+0xe8>)
 801af62:	e004      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 801af64:	4b14      	ldr	r3, [pc, #80]	; (801afb8 <TfLiteTypeGetName+0xec>)
 801af66:	e002      	b.n	801af6e <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 801af68:	4b14      	ldr	r3, [pc, #80]	; (801afbc <TfLiteTypeGetName+0xf0>)
 801af6a:	e000      	b.n	801af6e <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 801af6c:	4b14      	ldr	r3, [pc, #80]	; (801afc0 <TfLiteTypeGetName+0xf4>)
}
 801af6e:	4618      	mov	r0, r3
 801af70:	370c      	adds	r7, #12
 801af72:	46bd      	mov	sp, r7
 801af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af78:	4770      	bx	lr
 801af7a:	bf00      	nop
 801af7c:	08028660 	.word	0x08028660
 801af80:	08028668 	.word	0x08028668
 801af84:	08028670 	.word	0x08028670
 801af88:	08028678 	.word	0x08028678
 801af8c:	08028680 	.word	0x08028680
 801af90:	08028688 	.word	0x08028688
 801af94:	08028690 	.word	0x08028690
 801af98:	08028698 	.word	0x08028698
 801af9c:	080286a0 	.word	0x080286a0
 801afa0:	080286a8 	.word	0x080286a8
 801afa4:	080286b0 	.word	0x080286b0
 801afa8:	080286bc 	.word	0x080286bc
 801afac:	080286c8 	.word	0x080286c8
 801afb0:	080286d0 	.word	0x080286d0
 801afb4:	080286d8 	.word	0x080286d8
 801afb8:	080286e0 	.word	0x080286e0
 801afbc:	080286ec 	.word	0x080286ec
 801afc0:	080286f4 	.word	0x080286f4

0801afc4 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 801afc4:	b480      	push	{r7}
 801afc6:	af00      	add	r7, sp, #0
 801afc8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801afcc:	4618      	mov	r0, r3
 801afce:	46bd      	mov	sp, r7
 801afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afd4:	4770      	bx	lr
	...

0801afd8 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 801afd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801afdc:	b088      	sub	sp, #32
 801afde:	af00      	add	r7, sp, #0
 801afe0:	ed87 0b02 	vstr	d0, [r7, #8]
 801afe4:	6078      	str	r0, [r7, #4]
 801afe6:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 801afe8:	f04f 0200 	mov.w	r2, #0
 801afec:	f04f 0300 	mov.w	r3, #0
 801aff0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801aff4:	f7e5 fd72 	bl	8000adc <__aeabi_dcmpeq>
 801aff8:	4603      	mov	r3, r0
 801affa:	2b00      	cmp	r3, #0
 801affc:	d006      	beq.n	801b00c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	2200      	movs	r2, #0
 801b002:	601a      	str	r2, [r3, #0]
    *shift = 0;
 801b004:	683b      	ldr	r3, [r7, #0]
 801b006:	2200      	movs	r2, #0
 801b008:	601a      	str	r2, [r3, #0]
    return;
 801b00a:	e068      	b.n	801b0de <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 801b00c:	6838      	ldr	r0, [r7, #0]
 801b00e:	ed97 0b02 	vldr	d0, [r7, #8]
 801b012:	f005 fecd 	bl	8020db0 <frexp>
 801b016:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 801b01a:	f04f 0200 	mov.w	r2, #0
 801b01e:	4b32      	ldr	r3, [pc, #200]	; (801b0e8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 801b020:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b024:	f7e5 faf2 	bl	800060c <__aeabi_dmul>
 801b028:	4602      	mov	r2, r0
 801b02a:	460b      	mov	r3, r1
 801b02c:	ec43 2b17 	vmov	d7, r2, r3
 801b030:	eeb0 0a47 	vmov.f32	s0, s14
 801b034:	eef0 0a67 	vmov.f32	s1, s15
 801b038:	f000 f962 	bl	801b300 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 801b03c:	ec53 2b10 	vmov	r2, r3, d0
 801b040:	4610      	mov	r0, r2
 801b042:	4619      	mov	r1, r3
 801b044:	f7e5 fe92 	bl	8000d6c <__aeabi_d2lz>
 801b048:	4602      	mov	r2, r0
 801b04a:	460b      	mov	r3, r1
 801b04c:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 801b050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b054:	4925      	ldr	r1, [pc, #148]	; (801b0ec <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 801b056:	428a      	cmp	r2, r1
 801b058:	f173 0300 	sbcs.w	r3, r3, #0
 801b05c:	db01      	blt.n	801b062 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 801b05e:	f008 fb0d 	bl	802367c <abort>
  if (q_fixed == (1ll << 31)) {
 801b062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b066:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 801b06a:	430b      	orrs	r3, r1
 801b06c:	d118      	bne.n	801b0a0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 801b06e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b072:	0fd9      	lsrs	r1, r3, #31
 801b074:	2000      	movs	r0, #0
 801b076:	468a      	mov	sl, r1
 801b078:	4683      	mov	fp, r0
 801b07a:	eb1a 0402 	adds.w	r4, sl, r2
 801b07e:	eb4b 0503 	adc.w	r5, fp, r3
 801b082:	f04f 0200 	mov.w	r2, #0
 801b086:	f04f 0300 	mov.w	r3, #0
 801b08a:	0862      	lsrs	r2, r4, #1
 801b08c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801b090:	106b      	asrs	r3, r5, #1
 801b092:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	1c5a      	adds	r2, r3, #1
 801b09c:	683b      	ldr	r3, [r7, #0]
 801b09e:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 801b0a0:	f7ff ff90 	bl	801afc4 <_ZNSt14numeric_limitsIlE3maxEv>
 801b0a4:	4603      	mov	r3, r0
 801b0a6:	17da      	asrs	r2, r3, #31
 801b0a8:	4698      	mov	r8, r3
 801b0aa:	4691      	mov	r9, r2
 801b0ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b0b0:	4590      	cmp	r8, r2
 801b0b2:	eb79 0303 	sbcs.w	r3, r9, r3
 801b0b6:	da01      	bge.n	801b0bc <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 801b0b8:	f008 fae0 	bl	802367c <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 801b0bc:	683b      	ldr	r3, [r7, #0]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	f113 0f1f 	cmn.w	r3, #31
 801b0c4:	da08      	bge.n	801b0d8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 801b0c6:	683b      	ldr	r3, [r7, #0]
 801b0c8:	2200      	movs	r2, #0
 801b0ca:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 801b0cc:	f04f 0200 	mov.w	r2, #0
 801b0d0:	f04f 0300 	mov.w	r3, #0
 801b0d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 801b0d8:	69ba      	ldr	r2, [r7, #24]
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	601a      	str	r2, [r3, #0]
}
 801b0de:	3720      	adds	r7, #32
 801b0e0:	46bd      	mov	sp, r7
 801b0e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801b0e6:	bf00      	nop
 801b0e8:	41e00000 	.word	0x41e00000
 801b0ec:	80000001 	.word	0x80000001

0801b0f0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	b084      	sub	sp, #16
 801b0f4:	af00      	add	r7, sp, #0
 801b0f6:	ed87 0b02 	vstr	d0, [r7, #8]
 801b0fa:	6078      	str	r0, [r7, #4]
 801b0fc:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 801b0fe:	f04f 0200 	mov.w	r2, #0
 801b102:	4b0d      	ldr	r3, [pc, #52]	; (801b138 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 801b104:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801b108:	f7e5 fd10 	bl	8000b2c <__aeabi_dcmpgt>
 801b10c:	4603      	mov	r3, r0
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d101      	bne.n	801b116 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 801b112:	f008 fab3 	bl	802367c <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 801b116:	6839      	ldr	r1, [r7, #0]
 801b118:	6878      	ldr	r0, [r7, #4]
 801b11a:	ed97 0b02 	vldr	d0, [r7, #8]
 801b11e:	f7ff ff5b 	bl	801afd8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 801b122:	683b      	ldr	r3, [r7, #0]
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	2b00      	cmp	r3, #0
 801b128:	da01      	bge.n	801b12e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 801b12a:	f008 faa7 	bl	802367c <abort>
}
 801b12e:	bf00      	nop
 801b130:	3710      	adds	r7, #16
 801b132:	46bd      	mov	sp, r7
 801b134:	bd80      	pop	{r7, pc}
 801b136:	bf00      	nop
 801b138:	3ff00000 	.word	0x3ff00000

0801b13c <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b082      	sub	sp, #8
 801b140:	af00      	add	r7, sp, #0
 801b142:	6078      	str	r0, [r7, #4]
 801b144:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801b146:	683b      	ldr	r3, [r7, #0]
 801b148:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b152:	f7e5 fccd 	bl	8000af0 <__aeabi_dcmplt>
 801b156:	4603      	mov	r3, r0
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d001      	beq.n	801b160 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 801b15c:	683b      	ldr	r3, [r7, #0]
 801b15e:	e000      	b.n	801b162 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 801b160:	687b      	ldr	r3, [r7, #4]
    }
 801b162:	4618      	mov	r0, r3
 801b164:	3708      	adds	r7, #8
 801b166:	46bd      	mov	sp, r7
 801b168:	bd80      	pop	{r7, pc}
 801b16a:	0000      	movs	r0, r0
 801b16c:	0000      	movs	r0, r0
	...

0801b170 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 801b170:	b5b0      	push	{r4, r5, r7, lr}
 801b172:	b08e      	sub	sp, #56	; 0x38
 801b174:	af00      	add	r7, sp, #0
 801b176:	ed87 0b06 	vstr	d0, [r7, #24]
 801b17a:	ed87 1b04 	vstr	d1, [r7, #16]
 801b17e:	60f8      	str	r0, [r7, #12]
 801b180:	60b9      	str	r1, [r7, #8]
 801b182:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 801b184:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801b188:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801b18c:	f7e5 fa3e 	bl	800060c <__aeabi_dmul>
 801b190:	4602      	mov	r2, r0
 801b192:	460b      	mov	r3, r1
 801b194:	4614      	mov	r4, r2
 801b196:	461d      	mov	r5, r3
 801b198:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	fa22 f303 	lsr.w	r3, r2, r3
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	f7e5 f9c8 	bl	8000538 <__aeabi_i2d>
 801b1a8:	4602      	mov	r2, r0
 801b1aa:	460b      	mov	r3, r1
 801b1ac:	4620      	mov	r0, r4
 801b1ae:	4629      	mov	r1, r5
 801b1b0:	f7e5 fa2c 	bl	800060c <__aeabi_dmul>
 801b1b4:	4602      	mov	r2, r0
 801b1b6:	460b      	mov	r3, r1
 801b1b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801b1bc:	a30e      	add	r3, pc, #56	; (adr r3, 801b1f8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 801b1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801b1c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b1ca:	f107 0320 	add.w	r3, r7, #32
 801b1ce:	4611      	mov	r1, r2
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	f7ff ffb3 	bl	801b13c <_ZSt3minIdERKT_S2_S2_>
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 801b1e0:	6879      	ldr	r1, [r7, #4]
 801b1e2:	68b8      	ldr	r0, [r7, #8]
 801b1e4:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801b1e8:	f7ff ff82 	bl	801b0f0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 801b1ec:	bf00      	nop
 801b1ee:	3738      	adds	r7, #56	; 0x38
 801b1f0:	46bd      	mov	sp, r7
 801b1f2:	bdb0      	pop	{r4, r5, r7, pc}
 801b1f4:	f3af 8000 	nop.w
 801b1f8:	ffc00000 	.word	0xffc00000
 801b1fc:	41dfffff 	.word	0x41dfffff

0801b200 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 801b200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b204:	b087      	sub	sp, #28
 801b206:	af00      	add	r7, sp, #0
 801b208:	60f8      	str	r0, [r7, #12]
 801b20a:	60b9      	str	r1, [r7, #8]
 801b20c:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 801b20e:	2201      	movs	r2, #1
 801b210:	68fb      	ldr	r3, [r7, #12]
 801b212:	fa02 f303 	lsl.w	r3, r2, r3
 801b216:	3b01      	subs	r3, #1
 801b218:	4618      	mov	r0, r3
 801b21a:	f7e5 f98d 	bl	8000538 <__aeabi_i2d>
 801b21e:	4682      	mov	sl, r0
 801b220:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801b222:	687a      	ldr	r2, [r7, #4]
 801b224:	68fb      	ldr	r3, [r7, #12]
 801b226:	1ad1      	subs	r1, r2, r3
 801b228:	f04f 0201 	mov.w	r2, #1
 801b22c:	f04f 0300 	mov.w	r3, #0
 801b230:	f1a1 0620 	sub.w	r6, r1, #32
 801b234:	f1c1 0020 	rsb	r0, r1, #32
 801b238:	fa03 f901 	lsl.w	r9, r3, r1
 801b23c:	fa02 f606 	lsl.w	r6, r2, r6
 801b240:	ea49 0906 	orr.w	r9, r9, r6
 801b244:	fa22 f000 	lsr.w	r0, r2, r0
 801b248:	ea49 0900 	orr.w	r9, r9, r0
 801b24c:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 801b250:	4640      	mov	r0, r8
 801b252:	4649      	mov	r1, r9
 801b254:	f7e5 f9ac 	bl	80005b0 <__aeabi_l2d>
 801b258:	4602      	mov	r2, r0
 801b25a:	460b      	mov	r3, r1
 801b25c:	4650      	mov	r0, sl
 801b25e:	4659      	mov	r1, fp
 801b260:	f7e5 f9d4 	bl	800060c <__aeabi_dmul>
 801b264:	4602      	mov	r2, r0
 801b266:	460b      	mov	r3, r1
 801b268:	4690      	mov	r8, r2
 801b26a:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 801b26c:	f04f 0201 	mov.w	r2, #1
 801b270:	f04f 0300 	mov.w	r3, #0
 801b274:	68b9      	ldr	r1, [r7, #8]
 801b276:	f1a1 0620 	sub.w	r6, r1, #32
 801b27a:	f1c1 0020 	rsb	r0, r1, #32
 801b27e:	fa03 f501 	lsl.w	r5, r3, r1
 801b282:	fa02 f606 	lsl.w	r6, r2, r6
 801b286:	4335      	orrs	r5, r6
 801b288:	fa22 f000 	lsr.w	r0, r2, r0
 801b28c:	4305      	orrs	r5, r0
 801b28e:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801b292:	4620      	mov	r0, r4
 801b294:	4629      	mov	r1, r5
 801b296:	f7e5 f98b 	bl	80005b0 <__aeabi_l2d>
 801b29a:	4602      	mov	r2, r0
 801b29c:	460b      	mov	r3, r1
  const double max_input_rescaled =
 801b29e:	4640      	mov	r0, r8
 801b2a0:	4649      	mov	r1, r9
 801b2a2:	f7e5 fadd 	bl	8000860 <__aeabi_ddiv>
 801b2a6:	4602      	mov	r2, r0
 801b2a8:	460b      	mov	r3, r1
 801b2aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 801b2ae:	ed97 0b04 	vldr	d0, [r7, #16]
 801b2b2:	f005 fcfd 	bl	8020cb0 <floor>
 801b2b6:	ec53 2b10 	vmov	r2, r3, d0
 801b2ba:	4610      	mov	r0, r2
 801b2bc:	4619      	mov	r1, r3
 801b2be:	f7e5 fc55 	bl	8000b6c <__aeabi_d2iz>
 801b2c2:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 801b2c4:	4618      	mov	r0, r3
 801b2c6:	371c      	adds	r7, #28
 801b2c8:	46bd      	mov	sp, r7
 801b2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b2ce <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801b2ce:	b480      	push	{r7}
 801b2d0:	b083      	sub	sp, #12
 801b2d2:	af00      	add	r7, sp, #0
 801b2d4:	6078      	str	r0, [r7, #4]
 801b2d6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801b2d8:	683b      	ldr	r3, [r7, #0]
 801b2da:	ed93 7a00 	vldr	s14, [r3]
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	edd3 7a00 	vldr	s15, [r3]
 801b2e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2ec:	d501      	bpl.n	801b2f2 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 801b2ee:	683b      	ldr	r3, [r7, #0]
 801b2f0:	e000      	b.n	801b2f4 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 801b2f2:	687b      	ldr	r3, [r7, #4]
    }
 801b2f4:	4618      	mov	r0, r3
 801b2f6:	370c      	adds	r7, #12
 801b2f8:	46bd      	mov	sp, r7
 801b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2fe:	4770      	bx	lr

0801b300 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 801b300:	b580      	push	{r7, lr}
 801b302:	b082      	sub	sp, #8
 801b304:	af00      	add	r7, sp, #0
 801b306:	ed87 0b00 	vstr	d0, [r7]
 801b30a:	ed97 0b00 	vldr	d0, [r7]
 801b30e:	f005 fd87 	bl	8020e20 <round>
 801b312:	eeb0 7a40 	vmov.f32	s14, s0
 801b316:	eef0 7a60 	vmov.f32	s15, s1
 801b31a:	eeb0 0a47 	vmov.f32	s0, s14
 801b31e:	eef0 0a67 	vmov.f32	s1, s15
 801b322:	3708      	adds	r7, #8
 801b324:	46bd      	mov	sp, r7
 801b326:	bd80      	pop	{r7, pc}

0801b328 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 801b328:	b580      	push	{r7, lr}
 801b32a:	b082      	sub	sp, #8
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	ed87 0a01 	vstr	s0, [r7, #4]
 801b332:	ed97 0a01 	vldr	s0, [r7, #4]
 801b336:	f7e6 fba2 	bl	8001a7e <_ZSt5roundf>
 801b33a:	eef0 7a40 	vmov.f32	s15, s0
 801b33e:	eeb0 0a67 	vmov.f32	s0, s15
 801b342:	3708      	adds	r7, #8
 801b344:	46bd      	mov	sp, r7
 801b346:	bd80      	pop	{r7, pc}

0801b348 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 801b348:	b480      	push	{r7}
 801b34a:	af00      	add	r7, sp, #0
 801b34c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 801b350:	4618      	mov	r0, r3
 801b352:	46bd      	mov	sp, r7
 801b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b358:	4770      	bx	lr

0801b35a <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 801b35a:	b480      	push	{r7}
 801b35c:	af00      	add	r7, sp, #0
 801b35e:	237f      	movs	r3, #127	; 0x7f
 801b360:	4618      	mov	r0, r3
 801b362:	46bd      	mov	sp, r7
 801b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b368:	4770      	bx	lr

0801b36a <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 801b36a:	b480      	push	{r7}
 801b36c:	af00      	add	r7, sp, #0
 801b36e:	2300      	movs	r3, #0
 801b370:	4618      	mov	r0, r3
 801b372:	46bd      	mov	sp, r7
 801b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b378:	4770      	bx	lr

0801b37a <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 801b37a:	b480      	push	{r7}
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	23ff      	movs	r3, #255	; 0xff
 801b380:	4618      	mov	r0, r3
 801b382:	46bd      	mov	sp, r7
 801b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b388:	4770      	bx	lr
	...

0801b38c <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 801b38c:	b480      	push	{r7}
 801b38e:	af00      	add	r7, sp, #0
 801b390:	4b02      	ldr	r3, [pc, #8]	; (801b39c <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 801b392:	4618      	mov	r0, r3
 801b394:	46bd      	mov	sp, r7
 801b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b39a:	4770      	bx	lr
 801b39c:	ffff8000 	.word	0xffff8000

0801b3a0 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 801b3a0:	b480      	push	{r7}
 801b3a2:	af00      	add	r7, sp, #0
 801b3a4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b3a8:	4618      	mov	r0, r3
 801b3aa:	46bd      	mov	sp, r7
 801b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3b0:	4770      	bx	lr

0801b3b2 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 801b3b2:	b480      	push	{r7}
 801b3b4:	b083      	sub	sp, #12
 801b3b6:	af00      	add	r7, sp, #0
 801b3b8:	6078      	str	r0, [r7, #4]
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	689b      	ldr	r3, [r3, #8]
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	4618      	mov	r0, r3
 801b3c2:	370c      	adds	r7, #12
 801b3c4:	46bd      	mov	sp, r7
 801b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ca:	4770      	bx	lr

0801b3cc <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 801b3cc:	b480      	push	{r7}
 801b3ce:	b083      	sub	sp, #12
 801b3d0:	af00      	add	r7, sp, #0
 801b3d2:	ed87 0b00 	vstr	d0, [r7]
 801b3d6:	683a      	ldr	r2, [r7, #0]
 801b3d8:	6879      	ldr	r1, [r7, #4]
 801b3da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b3de:	ec43 2b17 	vmov	d7, r2, r3
 801b3e2:	eeb0 0a47 	vmov.f32	s0, s14
 801b3e6:	eef0 0a67 	vmov.f32	s1, s15
 801b3ea:	370c      	adds	r7, #12
 801b3ec:	46bd      	mov	sp, r7
 801b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3f2:	4770      	bx	lr

0801b3f4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b082      	sub	sp, #8
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
 801b3fc:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	689b      	ldr	r3, [r3, #8]
 801b402:	2b00      	cmp	r3, #0
 801b404:	d005      	beq.n	801b412 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	689a      	ldr	r2, [r3, #8]
 801b40a:	683b      	ldr	r3, [r7, #0]
 801b40c:	019b      	lsls	r3, r3, #6
 801b40e:	4413      	add	r3, r2
 801b410:	e006      	b.n	801b420 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b416:	6839      	ldr	r1, [r7, #0]
 801b418:	6878      	ldr	r0, [r7, #4]
 801b41a:	4798      	blx	r3
 801b41c:	4603      	mov	r3, r0
 801b41e:	bf00      	nop
  }
}
 801b420:	4618      	mov	r0, r3
 801b422:	3708      	adds	r7, #8
 801b424:	46bd      	mov	sp, r7
 801b426:	bd80      	pop	{r7, pc}

0801b428 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 801b428:	b480      	push	{r7}
 801b42a:	b087      	sub	sp, #28
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	60f8      	str	r0, [r7, #12]
 801b430:	60b9      	str	r1, [r7, #8]
 801b432:	607a      	str	r2, [r7, #4]
 801b434:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 801b436:	68bb      	ldr	r3, [r7, #8]
 801b438:	2b00      	cmp	r3, #0
 801b43a:	db0f      	blt.n	801b45c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 801b43c:	68ba      	ldr	r2, [r7, #8]
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	429a      	cmp	r2, r3
 801b442:	da0b      	bge.n	801b45c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 801b444:	68bb      	ldr	r3, [r7, #8]
 801b446:	009b      	lsls	r3, r3, #2
 801b448:	683a      	ldr	r2, [r7, #0]
 801b44a:	4413      	add	r3, r2
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 801b450:	697b      	ldr	r3, [r7, #20]
 801b452:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b456:	d001      	beq.n	801b45c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 801b458:	697b      	ldr	r3, [r7, #20]
 801b45a:	e001      	b.n	801b460 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 801b45c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b460:	4618      	mov	r0, r3
 801b462:	371c      	adds	r7, #28
 801b464:	46bd      	mov	sp, r7
 801b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b46a:	4770      	bx	lr

0801b46c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 801b46c:	b580      	push	{r7, lr}
 801b46e:	b086      	sub	sp, #24
 801b470:	af00      	add	r7, sp, #0
 801b472:	60f8      	str	r0, [r7, #12]
 801b474:	60b9      	str	r1, [r7, #8]
 801b476:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 801b478:	68bb      	ldr	r3, [r7, #8]
 801b47a:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 801b47c:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 801b47e:	68bb      	ldr	r3, [r7, #8]
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801b484:	6879      	ldr	r1, [r7, #4]
 801b486:	68f8      	ldr	r0, [r7, #12]
 801b488:	f7ff ffce 	bl	801b428 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801b48c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801b48e:	697b      	ldr	r3, [r7, #20]
 801b490:	2b00      	cmp	r3, #0
 801b492:	da01      	bge.n	801b498 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801b494:	2300      	movs	r3, #0
 801b496:	e005      	b.n	801b4a4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801b498:	6979      	ldr	r1, [r7, #20]
 801b49a:	68f8      	ldr	r0, [r7, #12]
 801b49c:	f7ff ffaa 	bl	801b3f4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801b4a0:	4603      	mov	r3, r0
 801b4a2:	bf00      	nop
}
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	3718      	adds	r7, #24
 801b4a8:	46bd      	mov	sp, r7
 801b4aa:	bd80      	pop	{r7, pc}

0801b4ac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 801b4ac:	b580      	push	{r7, lr}
 801b4ae:	b084      	sub	sp, #16
 801b4b0:	af00      	add	r7, sp, #0
 801b4b2:	60f8      	str	r0, [r7, #12]
 801b4b4:	60b9      	str	r1, [r7, #8]
 801b4b6:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 801b4b8:	687a      	ldr	r2, [r7, #4]
 801b4ba:	68b9      	ldr	r1, [r7, #8]
 801b4bc:	68f8      	ldr	r0, [r7, #12]
 801b4be:	f7ff ffd5 	bl	801b46c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 801b4c2:	4603      	mov	r3, r0
}
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	3710      	adds	r7, #16
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	bd80      	pop	{r7, pc}

0801b4cc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 801b4cc:	b580      	push	{r7, lr}
 801b4ce:	b086      	sub	sp, #24
 801b4d0:	af00      	add	r7, sp, #0
 801b4d2:	60f8      	str	r0, [r7, #12]
 801b4d4:	60b9      	str	r1, [r7, #8]
 801b4d6:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 801b4d8:	68bb      	ldr	r3, [r7, #8]
 801b4da:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 801b4dc:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 801b4de:	68bb      	ldr	r3, [r7, #8]
 801b4e0:	685b      	ldr	r3, [r3, #4]
 801b4e2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801b4e4:	6879      	ldr	r1, [r7, #4]
 801b4e6:	68f8      	ldr	r0, [r7, #12]
 801b4e8:	f7ff ff9e 	bl	801b428 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801b4ec:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801b4ee:	697b      	ldr	r3, [r7, #20]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	da01      	bge.n	801b4f8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801b4f4:	2300      	movs	r3, #0
 801b4f6:	e005      	b.n	801b504 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801b4f8:	6979      	ldr	r1, [r7, #20]
 801b4fa:	68f8      	ldr	r0, [r7, #12]
 801b4fc:	f7ff ff7a 	bl	801b3f4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801b500:	4603      	mov	r3, r0
 801b502:	bf00      	nop
}
 801b504:	4618      	mov	r0, r3
 801b506:	3718      	adds	r7, #24
 801b508:	46bd      	mov	sp, r7
 801b50a:	bd80      	pop	{r7, pc}

0801b50c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 801b50c:	b580      	push	{r7, lr}
 801b50e:	b084      	sub	sp, #16
 801b510:	af00      	add	r7, sp, #0
 801b512:	60f8      	str	r0, [r7, #12]
 801b514:	60b9      	str	r1, [r7, #8]
 801b516:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 801b518:	687a      	ldr	r2, [r7, #4]
 801b51a:	68b9      	ldr	r1, [r7, #8]
 801b51c:	68f8      	ldr	r0, [r7, #12]
 801b51e:	f7ff ffc5 	bl	801b4ac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801b522:	4603      	mov	r3, r0
}
 801b524:	4618      	mov	r0, r3
 801b526:	3710      	adds	r7, #16
 801b528:	46bd      	mov	sp, r7
 801b52a:	bd80      	pop	{r7, pc}
 801b52c:	0000      	movs	r0, r0
	...

0801b530 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801b530:	b5b0      	push	{r4, r5, r7, lr}
 801b532:	b08e      	sub	sp, #56	; 0x38
 801b534:	af02      	add	r7, sp, #8
 801b536:	60f8      	str	r0, [r7, #12]
 801b538:	60b9      	str	r1, [r7, #8]
 801b53a:	607a      	str	r2, [r7, #4]
 801b53c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801b53e:	68bb      	ldr	r3, [r7, #8]
 801b540:	68db      	ldr	r3, [r3, #12]
 801b542:	4618      	mov	r0, r3
 801b544:	f7e5 f80a 	bl	800055c <__aeabi_f2d>
 801b548:	4604      	mov	r4, r0
 801b54a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	68db      	ldr	r3, [r3, #12]
 801b550:	4618      	mov	r0, r3
 801b552:	f7e5 f803 	bl	800055c <__aeabi_f2d>
 801b556:	4602      	mov	r2, r0
 801b558:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801b55a:	4620      	mov	r0, r4
 801b55c:	4629      	mov	r1, r5
 801b55e:	f7e5 f855 	bl	800060c <__aeabi_dmul>
 801b562:	4602      	mov	r2, r0
 801b564:	460b      	mov	r3, r1
 801b566:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 801b56a:	683b      	ldr	r3, [r7, #0]
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d04b      	beq.n	801b608 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 801b570:	683b      	ldr	r3, [r7, #0]
 801b572:	68db      	ldr	r3, [r3, #12]
 801b574:	4618      	mov	r0, r3
 801b576:	f7e4 fff1 	bl	800055c <__aeabi_f2d>
 801b57a:	4602      	mov	r2, r0
 801b57c:	460b      	mov	r3, r1
 801b57e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 801b582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b586:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801b58a:	f7e4 fe87 	bl	800029c <__aeabi_dsub>
 801b58e:	4602      	mov	r2, r0
 801b590:	460b      	mov	r3, r1
 801b592:	ec43 2b17 	vmov	d7, r2, r3
 801b596:	eeb0 0a47 	vmov.f32	s0, s14
 801b59a:	eef0 0a67 	vmov.f32	s1, s15
 801b59e:	f7ff ff15 	bl	801b3cc <_ZSt3absd>
 801b5a2:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 801b5a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b5a8:	68db      	ldr	r3, [r3, #12]
 801b5aa:	4618      	mov	r0, r3
 801b5ac:	f7e4 ffd6 	bl	800055c <__aeabi_f2d>
 801b5b0:	4602      	mov	r2, r0
 801b5b2:	460b      	mov	r3, r1
 801b5b4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 801b5b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801b5bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801b5c0:	f7e5 f94e 	bl	8000860 <__aeabi_ddiv>
 801b5c4:	4602      	mov	r2, r0
 801b5c6:	460b      	mov	r3, r1
 801b5c8:	4610      	mov	r0, r2
 801b5ca:	4619      	mov	r1, r3
 801b5cc:	2301      	movs	r3, #1
 801b5ce:	461c      	mov	r4, r3
 801b5d0:	a318      	add	r3, pc, #96	; (adr r3, 801b634 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 801b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5d6:	f7e5 fa95 	bl	8000b04 <__aeabi_dcmple>
 801b5da:	4603      	mov	r3, r0
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d101      	bne.n	801b5e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 801b5e0:	2300      	movs	r3, #0
 801b5e2:	461c      	mov	r4, r3
 801b5e4:	b2e3      	uxtb	r3, r4
 801b5e6:	f083 0301 	eor.w	r3, r3, #1
 801b5ea:	b2db      	uxtb	r3, r3
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	d00b      	beq.n	801b608 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	695c      	ldr	r4, [r3, #20]
 801b5f4:	4b0c      	ldr	r3, [pc, #48]	; (801b628 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 801b5f6:	9300      	str	r3, [sp, #0]
 801b5f8:	f44f 73a2 	mov.w	r3, #324	; 0x144
 801b5fc:	4a0b      	ldr	r2, [pc, #44]	; (801b62c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 801b5fe:	490c      	ldr	r1, [pc, #48]	; (801b630 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 801b600:	68f8      	ldr	r0, [r7, #12]
 801b602:	47a0      	blx	r4
 801b604:	2301      	movs	r3, #1
 801b606:	e009      	b.n	801b61c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 801b608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b60a:	9300      	str	r3, [sp, #0]
 801b60c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b60e:	687a      	ldr	r2, [r7, #4]
 801b610:	68b9      	ldr	r1, [r7, #8]
 801b612:	68f8      	ldr	r0, [r7, #12]
 801b614:	f000 f812 	bl	801b63c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 801b618:	4603      	mov	r3, r0
                                          multiplier);
 801b61a:	bf00      	nop
}
 801b61c:	4618      	mov	r0, r3
 801b61e:	3730      	adds	r7, #48	; 0x30
 801b620:	46bd      	mov	sp, r7
 801b622:	bdb0      	pop	{r4, r5, r7, pc}
 801b624:	f3af 8000 	nop.w
 801b628:	08028970 	.word	0x08028970
 801b62c:	08028764 	.word	0x08028764
 801b630:	0802885c 	.word	0x0802885c
 801b634:	47ae147b 	.word	0x47ae147b
 801b638:	3f947ae1 	.word	0x3f947ae1

0801b63c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801b63c:	b590      	push	{r4, r7, lr}
 801b63e:	b089      	sub	sp, #36	; 0x24
 801b640:	af02      	add	r7, sp, #8
 801b642:	60f8      	str	r0, [r7, #12]
 801b644:	60b9      	str	r1, [r7, #8]
 801b646:	607a      	str	r2, [r7, #4]
 801b648:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 801b64a:	68bb      	ldr	r3, [r7, #8]
 801b64c:	ed93 7a03 	vldr	s14, [r3, #12]
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	edd3 7a03 	vldr	s15, [r3, #12]
 801b656:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 801b65a:	ee17 0a90 	vmov	r0, s15
 801b65e:	f7e4 ff7d 	bl	800055c <__aeabi_f2d>
 801b662:	4602      	mov	r2, r0
 801b664:	460b      	mov	r3, r1
 801b666:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 801b66a:	2301      	movs	r3, #1
 801b66c:	461c      	mov	r4, r3
 801b66e:	f04f 0200 	mov.w	r2, #0
 801b672:	f04f 0300 	mov.w	r3, #0
 801b676:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b67a:	f7e5 fa4d 	bl	8000b18 <__aeabi_dcmpge>
 801b67e:	4603      	mov	r3, r0
 801b680:	2b00      	cmp	r3, #0
 801b682:	d101      	bne.n	801b688 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 801b684:	2300      	movs	r3, #0
 801b686:	461c      	mov	r4, r3
 801b688:	b2e3      	uxtb	r3, r4
 801b68a:	f083 0301 	eor.w	r3, r3, #1
 801b68e:	b2db      	uxtb	r3, r3
 801b690:	2b00      	cmp	r3, #0
 801b692:	d00b      	beq.n	801b6ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	695c      	ldr	r4, [r3, #20]
 801b698:	4b0f      	ldr	r3, [pc, #60]	; (801b6d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 801b69a:	9300      	str	r3, [sp, #0]
 801b69c:	f240 1351 	movw	r3, #337	; 0x151
 801b6a0:	4a0e      	ldr	r2, [pc, #56]	; (801b6dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 801b6a2:	490f      	ldr	r1, [pc, #60]	; (801b6e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 801b6a4:	68f8      	ldr	r0, [r7, #12]
 801b6a6:	47a0      	blx	r4
 801b6a8:	2301      	movs	r3, #1
 801b6aa:	e010      	b.n	801b6ce <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 801b6ac:	683b      	ldr	r3, [r7, #0]
 801b6ae:	68db      	ldr	r3, [r3, #12]
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	f7e4 ff53 	bl	800055c <__aeabi_f2d>
 801b6b6:	4602      	mov	r2, r0
 801b6b8:	460b      	mov	r3, r1
 801b6ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b6be:	f7e5 f8cf 	bl	8000860 <__aeabi_ddiv>
 801b6c2:	4602      	mov	r2, r0
 801b6c4:	460b      	mov	r3, r1
 801b6c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b6c8:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 801b6cc:	2300      	movs	r3, #0
}
 801b6ce:	4618      	mov	r0, r3
 801b6d0:	371c      	adds	r7, #28
 801b6d2:	46bd      	mov	sp, r7
 801b6d4:	bd90      	pop	{r4, r7, pc}
 801b6d6:	bf00      	nop
 801b6d8:	08028994 	.word	0x08028994
 801b6dc:	08028764 	.word	0x08028764
 801b6e0:	0802885c 	.word	0x0802885c

0801b6e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 801b6e4:	b580      	push	{r7, lr}
 801b6e6:	b082      	sub	sp, #8
 801b6e8:	af00      	add	r7, sp, #0
 801b6ea:	6078      	str	r0, [r7, #4]
 801b6ec:	ed87 0a00 	vstr	s0, [r7]
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801b6f6:	ed97 7a00 	vldr	s14, [r7]
 801b6fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b6fe:	eeb0 0a66 	vmov.f32	s0, s13
 801b702:	f7ff fe11 	bl	801b328 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801b706:	eef0 7a40 	vmov.f32	s15, s0
 801b70a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b70e:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801b716:	4413      	add	r3, r2
  };
 801b718:	4618      	mov	r0, r3
 801b71a:	3708      	adds	r7, #8
 801b71c:	46bd      	mov	sp, r7
 801b71e:	bd80      	pop	{r7, pc}

0801b720 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 801b720:	b580      	push	{r7, lr}
 801b722:	b08e      	sub	sp, #56	; 0x38
 801b724:	af00      	add	r7, sp, #0
 801b726:	60b9      	str	r1, [r7, #8]
 801b728:	607a      	str	r2, [r7, #4]
 801b72a:	603b      	str	r3, [r7, #0]
 801b72c:	4603      	mov	r3, r0
 801b72e:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 801b730:	683b      	ldr	r3, [r7, #0]
 801b732:	68db      	ldr	r3, [r3, #12]
 801b734:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 801b736:	683b      	ldr	r3, [r7, #0]
 801b738:	691b      	ldr	r3, [r3, #16]
 801b73a:	633b      	str	r3, [r7, #48]	; 0x30
  };
 801b73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b73e:	617b      	str	r3, [r7, #20]
 801b740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b742:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 801b744:	7bfb      	ldrb	r3, [r7, #15]
 801b746:	2b01      	cmp	r3, #1
 801b748:	d118      	bne.n	801b77c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 801b74a:	f107 0314 	add.w	r3, r7, #20
 801b74e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 801b844 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801b752:	4618      	mov	r0, r3
 801b754:	f7ff ffc6 	bl	801b6e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801b758:	4603      	mov	r3, r0
 801b75a:	61fb      	str	r3, [r7, #28]
 801b75c:	f107 021c 	add.w	r2, r7, #28
 801b760:	f107 0308 	add.w	r3, r7, #8
 801b764:	4611      	mov	r1, r2
 801b766:	4618      	mov	r0, r3
 801b768:	f000 f8d6 	bl	801b918 <_ZSt3maxIlERKT_S2_S2_>
 801b76c:	4603      	mov	r3, r0
 801b76e:	681a      	ldr	r2, [r3, #0]
 801b770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b772:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801b774:	687a      	ldr	r2, [r7, #4]
 801b776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b778:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 801b77a:	e05f      	b.n	801b83c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 801b77c:	7bfb      	ldrb	r3, [r7, #15]
 801b77e:	2b03      	cmp	r3, #3
 801b780:	d129      	bne.n	801b7d6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 801b782:	f107 0314 	add.w	r3, r7, #20
 801b786:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 801b844 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801b78a:	4618      	mov	r0, r3
 801b78c:	f7ff ffaa 	bl	801b6e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801b790:	4603      	mov	r3, r0
 801b792:	623b      	str	r3, [r7, #32]
 801b794:	f107 0220 	add.w	r2, r7, #32
 801b798:	f107 0308 	add.w	r3, r7, #8
 801b79c:	4611      	mov	r1, r2
 801b79e:	4618      	mov	r0, r3
 801b7a0:	f000 f8ba 	bl	801b918 <_ZSt3maxIlERKT_S2_S2_>
 801b7a4:	4603      	mov	r3, r0
 801b7a6:	681a      	ldr	r2, [r3, #0]
 801b7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b7aa:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 801b7ac:	f107 0314 	add.w	r3, r7, #20
 801b7b0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801b7b4:	4618      	mov	r0, r3
 801b7b6:	f7ff ff95 	bl	801b6e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801b7ba:	4603      	mov	r3, r0
 801b7bc:	627b      	str	r3, [r7, #36]	; 0x24
 801b7be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b7c2:	1d3b      	adds	r3, r7, #4
 801b7c4:	4611      	mov	r1, r2
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	f000 f892 	bl	801b8f0 <_ZSt3minIlERKT_S2_S2_>
 801b7cc:	4603      	mov	r3, r0
 801b7ce:	681a      	ldr	r2, [r3, #0]
 801b7d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b7d2:	601a      	str	r2, [r3, #0]
}
 801b7d4:	e032      	b.n	801b83c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 801b7d6:	7bfb      	ldrb	r3, [r7, #15]
 801b7d8:	2b02      	cmp	r3, #2
 801b7da:	d129      	bne.n	801b830 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 801b7dc:	f107 0314 	add.w	r3, r7, #20
 801b7e0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801b7e4:	4618      	mov	r0, r3
 801b7e6:	f7ff ff7d 	bl	801b6e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801b7ea:	4603      	mov	r3, r0
 801b7ec:	62bb      	str	r3, [r7, #40]	; 0x28
 801b7ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b7f2:	f107 0308 	add.w	r3, r7, #8
 801b7f6:	4611      	mov	r1, r2
 801b7f8:	4618      	mov	r0, r3
 801b7fa:	f000 f88d 	bl	801b918 <_ZSt3maxIlERKT_S2_S2_>
 801b7fe:	4603      	mov	r3, r0
 801b800:	681a      	ldr	r2, [r3, #0]
 801b802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b804:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 801b806:	f107 0314 	add.w	r3, r7, #20
 801b80a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b80e:	4618      	mov	r0, r3
 801b810:	f7ff ff68 	bl	801b6e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801b814:	4603      	mov	r3, r0
 801b816:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b818:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801b81c:	1d3b      	adds	r3, r7, #4
 801b81e:	4611      	mov	r1, r2
 801b820:	4618      	mov	r0, r3
 801b822:	f000 f865 	bl	801b8f0 <_ZSt3minIlERKT_S2_S2_>
 801b826:	4603      	mov	r3, r0
 801b828:	681a      	ldr	r2, [r3, #0]
 801b82a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b82c:	601a      	str	r2, [r3, #0]
}
 801b82e:	e005      	b.n	801b83c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 801b830:	68ba      	ldr	r2, [r7, #8]
 801b832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b834:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801b836:	687a      	ldr	r2, [r7, #4]
 801b838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b83a:	601a      	str	r2, [r3, #0]
}
 801b83c:	bf00      	nop
 801b83e:	3738      	adds	r7, #56	; 0x38
 801b840:	46bd      	mov	sp, r7
 801b842:	bd80      	pop	{r7, pc}
 801b844:	00000000 	.word	0x00000000

0801b848 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 801b848:	b590      	push	{r4, r7, lr}
 801b84a:	b089      	sub	sp, #36	; 0x24
 801b84c:	af02      	add	r7, sp, #8
 801b84e:	60f8      	str	r0, [r7, #12]
 801b850:	607a      	str	r2, [r7, #4]
 801b852:	603b      	str	r3, [r7, #0]
 801b854:	460b      	mov	r3, r1
 801b856:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 801b858:	2300      	movs	r3, #0
 801b85a:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 801b85c:	2300      	movs	r3, #0
 801b85e:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	781b      	ldrb	r3, [r3, #0]
 801b864:	2b03      	cmp	r3, #3
 801b866:	d108      	bne.n	801b87a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 801b868:	f7ff fd7f 	bl	801b36a <_ZNSt14numeric_limitsIhE3minEv>
 801b86c:	4603      	mov	r3, r0
 801b86e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 801b870:	f7ff fd83 	bl	801b37a <_ZNSt14numeric_limitsIhE3maxEv>
 801b874:	4603      	mov	r3, r0
 801b876:	613b      	str	r3, [r7, #16]
 801b878:	e025      	b.n	801b8c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	781b      	ldrb	r3, [r3, #0]
 801b87e:	2b09      	cmp	r3, #9
 801b880:	d108      	bne.n	801b894 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 801b882:	f7ff fd61 	bl	801b348 <_ZNSt14numeric_limitsIaE3minEv>
 801b886:	4603      	mov	r3, r0
 801b888:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 801b88a:	f7ff fd66 	bl	801b35a <_ZNSt14numeric_limitsIaE3maxEv>
 801b88e:	4603      	mov	r3, r0
 801b890:	613b      	str	r3, [r7, #16]
 801b892:	e018      	b.n	801b8c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	781b      	ldrb	r3, [r3, #0]
 801b898:	2b07      	cmp	r3, #7
 801b89a:	d108      	bne.n	801b8ae <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 801b89c:	f7ff fd76 	bl	801b38c <_ZNSt14numeric_limitsIsE3minEv>
 801b8a0:	4603      	mov	r3, r0
 801b8a2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 801b8a4:	f7ff fd7c 	bl	801b3a0 <_ZNSt14numeric_limitsIsE3maxEv>
 801b8a8:	4603      	mov	r3, r0
 801b8aa:	613b      	str	r3, [r7, #16]
 801b8ac:	e00b      	b.n	801b8c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	695c      	ldr	r4, [r3, #20]
 801b8b2:	4b0c      	ldr	r3, [pc, #48]	; (801b8e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 801b8b4:	9300      	str	r3, [sp, #0]
 801b8b6:	f44f 73c2 	mov.w	r3, #388	; 0x184
 801b8ba:	4a0b      	ldr	r2, [pc, #44]	; (801b8e8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 801b8bc:	490b      	ldr	r1, [pc, #44]	; (801b8ec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 801b8be:	68f8      	ldr	r0, [r7, #12]
 801b8c0:	47a0      	blx	r4
 801b8c2:	2301      	movs	r3, #1
 801b8c4:	e00a      	b.n	801b8dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 801b8c6:	7af8      	ldrb	r0, [r7, #11]
 801b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8ca:	9301      	str	r3, [sp, #4]
 801b8cc:	683b      	ldr	r3, [r7, #0]
 801b8ce:	9300      	str	r3, [sp, #0]
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	693a      	ldr	r2, [r7, #16]
 801b8d4:	6979      	ldr	r1, [r7, #20]
 801b8d6:	f7ff ff23 	bl	801b720 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 801b8da:	2300      	movs	r3, #0
}
 801b8dc:	4618      	mov	r0, r3
 801b8de:	371c      	adds	r7, #28
 801b8e0:	46bd      	mov	sp, r7
 801b8e2:	bd90      	pop	{r4, r7, pc}
 801b8e4:	080289b0 	.word	0x080289b0
 801b8e8:	08028764 	.word	0x08028764
 801b8ec:	0802885c 	.word	0x0802885c

0801b8f0 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801b8f0:	b480      	push	{r7}
 801b8f2:	b083      	sub	sp, #12
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	6078      	str	r0, [r7, #4]
 801b8f8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801b8fa:	683b      	ldr	r3, [r7, #0]
 801b8fc:	681a      	ldr	r2, [r3, #0]
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	429a      	cmp	r2, r3
 801b904:	da01      	bge.n	801b90a <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 801b906:	683b      	ldr	r3, [r7, #0]
 801b908:	e000      	b.n	801b90c <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 801b90a:	687b      	ldr	r3, [r7, #4]
    }
 801b90c:	4618      	mov	r0, r3
 801b90e:	370c      	adds	r7, #12
 801b910:	46bd      	mov	sp, r7
 801b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b916:	4770      	bx	lr

0801b918 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801b918:	b480      	push	{r7}
 801b91a:	b083      	sub	sp, #12
 801b91c:	af00      	add	r7, sp, #0
 801b91e:	6078      	str	r0, [r7, #4]
 801b920:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	681a      	ldr	r2, [r3, #0]
 801b926:	683b      	ldr	r3, [r7, #0]
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	429a      	cmp	r2, r3
 801b92c:	da01      	bge.n	801b932 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 801b92e:	683b      	ldr	r3, [r7, #0]
 801b930:	e000      	b.n	801b934 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 801b932:	687b      	ldr	r3, [r7, #4]
    }
 801b934:	4618      	mov	r0, r3
 801b936:	370c      	adds	r7, #12
 801b938:	46bd      	mov	sp, r7
 801b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b93e:	4770      	bx	lr

0801b940 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 801b940:	b480      	push	{r7}
 801b942:	b083      	sub	sp, #12
 801b944:	af00      	add	r7, sp, #0
 801b946:	6078      	str	r0, [r7, #4]
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	2200      	movs	r2, #0
 801b94c:	601a      	str	r2, [r3, #0]
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	4618      	mov	r0, r3
 801b952:	370c      	adds	r7, #12
 801b954:	46bd      	mov	sp, r7
 801b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b95a:	4770      	bx	lr

0801b95c <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 801b95c:	b580      	push	{r7, lr}
 801b95e:	b084      	sub	sp, #16
 801b960:	af00      	add	r7, sp, #0
 801b962:	60f8      	str	r0, [r7, #12]
 801b964:	60b9      	str	r1, [r7, #8]
 801b966:	607a      	str	r2, [r7, #4]
 801b968:	68fb      	ldr	r3, [r7, #12]
 801b96a:	2200      	movs	r2, #0
 801b96c:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 801b96e:	687a      	ldr	r2, [r7, #4]
 801b970:	68b9      	ldr	r1, [r7, #8]
 801b972:	68f8      	ldr	r0, [r7, #12]
 801b974:	f000 f866 	bl	801ba44 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	4618      	mov	r0, r3
 801b97c:	3710      	adds	r7, #16
 801b97e:	46bd      	mov	sp, r7
 801b980:	bd80      	pop	{r7, pc}

0801b982 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 801b982:	b580      	push	{r7, lr}
 801b984:	b082      	sub	sp, #8
 801b986:	af00      	add	r7, sp, #0
 801b988:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	2b05      	cmp	r3, #5
 801b990:	dd08      	ble.n	801b9a4 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	685b      	ldr	r3, [r3, #4]
 801b996:	2b00      	cmp	r3, #0
 801b998:	d004      	beq.n	801b9a4 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	685b      	ldr	r3, [r3, #4]
 801b99e:	4618      	mov	r0, r3
 801b9a0:	f005 f910 	bl	8020bc4 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	4618      	mov	r0, r3
 801b9a8:	3708      	adds	r7, #8
 801b9aa:	46bd      	mov	sp, r7
 801b9ac:	bd80      	pop	{r7, pc}

0801b9ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 801b9ae:	b480      	push	{r7}
 801b9b0:	b083      	sub	sp, #12
 801b9b2:	af00      	add	r7, sp, #0
 801b9b4:	6078      	str	r0, [r7, #4]
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	681b      	ldr	r3, [r3, #0]
 801b9ba:	4618      	mov	r0, r3
 801b9bc:	370c      	adds	r7, #12
 801b9be:	46bd      	mov	sp, r7
 801b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9c4:	4770      	bx	lr

0801b9c6 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 801b9c6:	b480      	push	{r7}
 801b9c8:	b083      	sub	sp, #12
 801b9ca:	af00      	add	r7, sp, #0
 801b9cc:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	2b05      	cmp	r3, #5
 801b9d4:	dd02      	ble.n	801b9dc <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	685b      	ldr	r3, [r3, #4]
 801b9da:	e001      	b.n	801b9e0 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	3304      	adds	r3, #4
  }
 801b9e0:	4618      	mov	r0, r3
 801b9e2:	370c      	adds	r7, #12
 801b9e4:	46bd      	mov	sp, r7
 801b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ea:	4770      	bx	lr

0801b9ec <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 801b9ec:	b580      	push	{r7, lr}
 801b9ee:	b082      	sub	sp, #8
 801b9f0:	af00      	add	r7, sp, #0
 801b9f2:	6078      	str	r0, [r7, #4]
 801b9f4:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	681b      	ldr	r3, [r3, #0]
 801b9fa:	2b05      	cmp	r3, #5
 801b9fc:	dd08      	ble.n	801ba10 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	685b      	ldr	r3, [r3, #4]
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d004      	beq.n	801ba10 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	685b      	ldr	r3, [r3, #4]
 801ba0a:	4618      	mov	r0, r3
 801ba0c:	f005 f8da 	bl	8020bc4 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	683a      	ldr	r2, [r7, #0]
 801ba14:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 801ba16:	683b      	ldr	r3, [r7, #0]
 801ba18:	2b05      	cmp	r3, #5
 801ba1a:	dd0f      	ble.n	801ba3c <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 801ba1c:	683b      	ldr	r3, [r7, #0]
 801ba1e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801ba22:	4293      	cmp	r3, r2
 801ba24:	d201      	bcs.n	801ba2a <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 801ba26:	009b      	lsls	r3, r3, #2
 801ba28:	e001      	b.n	801ba2e <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 801ba2a:	f04f 33ff 	mov.w	r3, #4294967295
 801ba2e:	4618      	mov	r0, r3
 801ba30:	f005 f8db 	bl	8020bea <_Znaj>
 801ba34:	4603      	mov	r3, r0
 801ba36:	461a      	mov	r2, r3
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801ba3c:	bf00      	nop
 801ba3e:	3708      	adds	r7, #8
 801ba40:	46bd      	mov	sp, r7
 801ba42:	bd80      	pop	{r7, pc}

0801ba44 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 801ba44:	b580      	push	{r7, lr}
 801ba46:	b086      	sub	sp, #24
 801ba48:	af00      	add	r7, sp, #0
 801ba4a:	60f8      	str	r0, [r7, #12]
 801ba4c:	60b9      	str	r1, [r7, #8]
 801ba4e:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 801ba50:	68b9      	ldr	r1, [r7, #8]
 801ba52:	68f8      	ldr	r0, [r7, #12]
 801ba54:	f7ff ffca 	bl	801b9ec <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 801ba58:	68f8      	ldr	r0, [r7, #12]
 801ba5a:	f7ff ffb4 	bl	801b9c6 <_ZN6tflite12RuntimeShape8DimsDataEv>
 801ba5e:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 801ba60:	68bb      	ldr	r3, [r7, #8]
 801ba62:	009b      	lsls	r3, r3, #2
 801ba64:	461a      	mov	r2, r3
 801ba66:	6879      	ldr	r1, [r7, #4]
 801ba68:	6978      	ldr	r0, [r7, #20]
 801ba6a:	f007 fe89 	bl	8023780 <memcpy>
  }
 801ba6e:	bf00      	nop
 801ba70:	3718      	adds	r7, #24
 801ba72:	46bd      	mov	sp, r7
 801ba74:	bd80      	pop	{r7, pc}

0801ba76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 801ba76:	b580      	push	{r7, lr}
 801ba78:	b086      	sub	sp, #24
 801ba7a:	af00      	add	r7, sp, #0
 801ba7c:	6078      	str	r0, [r7, #4]
 801ba7e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 801ba80:	683b      	ldr	r3, [r7, #0]
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d103      	bne.n	801ba8e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 801ba86:	6878      	ldr	r0, [r7, #4]
 801ba88:	f7ff ff5a 	bl	801b940 <_ZN6tflite12RuntimeShapeC1Ev>
 801ba8c:	e00d      	b.n	801baaa <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 801ba8e:	683b      	ldr	r3, [r7, #0]
 801ba90:	689b      	ldr	r3, [r3, #8]
 801ba92:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801ba94:	697b      	ldr	r3, [r7, #20]
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801ba9a:	697b      	ldr	r3, [r7, #20]
 801ba9c:	3304      	adds	r3, #4
 801ba9e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801baa0:	68fa      	ldr	r2, [r7, #12]
 801baa2:	6939      	ldr	r1, [r7, #16]
 801baa4:	6878      	ldr	r0, [r7, #4]
 801baa6:	f7ff ff59 	bl	801b95c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801baaa:	6878      	ldr	r0, [r7, #4]
 801baac:	3718      	adds	r7, #24
 801baae:	46bd      	mov	sp, r7
 801bab0:	bd80      	pop	{r7, pc}

0801bab2 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 801bab2:	b480      	push	{r7}
 801bab4:	af00      	add	r7, sp, #0
 801bab6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801baba:	4618      	mov	r0, r3
 801babc:	46bd      	mov	sp, r7
 801babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bac2:	4770      	bx	lr

0801bac4 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 801bac4:	b480      	push	{r7}
 801bac6:	af00      	add	r7, sp, #0
 801bac8:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801bacc:	ee07 3a90 	vmov	s15, r3
 801bad0:	eeb0 0a67 	vmov.f32	s0, s15
 801bad4:	46bd      	mov	sp, r7
 801bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bada:	4770      	bx	lr

0801badc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 801badc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bae0:	b092      	sub	sp, #72	; 0x48
 801bae2:	af00      	add	r7, sp, #0
 801bae4:	61f8      	str	r0, [r7, #28]
 801bae6:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 801bae8:	69fa      	ldr	r2, [r7, #28]
 801baea:	69bb      	ldr	r3, [r7, #24]
 801baec:	429a      	cmp	r2, r3
 801baee:	d107      	bne.n	801bb00 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801baf0:	f7ff ffdf 	bl	801bab2 <_ZNSt14numeric_limitsIlE3minEv>
 801baf4:	4602      	mov	r2, r0
 801baf6:	69fb      	ldr	r3, [r7, #28]
 801baf8:	4293      	cmp	r3, r2
 801bafa:	d101      	bne.n	801bb00 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801bafc:	2301      	movs	r3, #1
 801bafe:	e000      	b.n	801bb02 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 801bb00:	2300      	movs	r3, #0
 801bb02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 801bb06:	69fb      	ldr	r3, [r7, #28]
 801bb08:	17da      	asrs	r2, r3, #31
 801bb0a:	60bb      	str	r3, [r7, #8]
 801bb0c:	60fa      	str	r2, [r7, #12]
 801bb0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801bb12:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 801bb16:	69bb      	ldr	r3, [r7, #24]
 801bb18:	17da      	asrs	r2, r3, #31
 801bb1a:	603b      	str	r3, [r7, #0]
 801bb1c:	607a      	str	r2, [r7, #4]
 801bb1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bb22:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 801bb26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bb28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bb2a:	fb03 f202 	mul.w	r2, r3, r2
 801bb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bb30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801bb32:	fb01 f303 	mul.w	r3, r1, r3
 801bb36:	4413      	add	r3, r2
 801bb38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801bb3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bb3c:	fba1 4502 	umull	r4, r5, r1, r2
 801bb40:	442b      	add	r3, r5
 801bb42:	461d      	mov	r5, r3
 801bb44:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 801bb48:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 801bb4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	db02      	blt.n	801bb5a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 801bb54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bb58:	e000      	b.n	801bb5c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 801bb5a:	4b1a      	ldr	r3, [pc, #104]	; (801bbc4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 801bb5c:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 801bb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb60:	17da      	asrs	r2, r3, #31
 801bb62:	4698      	mov	r8, r3
 801bb64:	4691      	mov	r9, r2
 801bb66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801bb6a:	eb18 0102 	adds.w	r1, r8, r2
 801bb6e:	6139      	str	r1, [r7, #16]
 801bb70:	eb49 0303 	adc.w	r3, r9, r3
 801bb74:	617b      	str	r3, [r7, #20]
 801bb76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	da07      	bge.n	801bb8e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 801bb7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bb82:	eb12 0a01 	adds.w	sl, r2, r1
 801bb86:	f143 0b00 	adc.w	fp, r3, #0
 801bb8a:	4652      	mov	r2, sl
 801bb8c:	465b      	mov	r3, fp
 801bb8e:	f04f 0000 	mov.w	r0, #0
 801bb92:	f04f 0100 	mov.w	r1, #0
 801bb96:	0fd0      	lsrs	r0, r2, #31
 801bb98:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801bb9c:	17d9      	asrs	r1, r3, #31
 801bb9e:	4602      	mov	r2, r0
 801bba0:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 801bba2:	4613      	mov	r3, r2
 801bba4:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 801bba6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d003      	beq.n	801bbb6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 801bbae:	f7ff fa09 	bl	801afc4 <_ZNSt14numeric_limitsIlE3maxEv>
 801bbb2:	4603      	mov	r3, r0
 801bbb4:	e000      	b.n	801bbb8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 801bbb6:	6a3b      	ldr	r3, [r7, #32]
}
 801bbb8:	4618      	mov	r0, r3
 801bbba:	3748      	adds	r7, #72	; 0x48
 801bbbc:	46bd      	mov	sp, r7
 801bbbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801bbc2:	bf00      	nop
 801bbc4:	c0000001 	.word	0xc0000001

0801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 801bbc8:	b580      	push	{r7, lr}
 801bbca:	b082      	sub	sp, #8
 801bbcc:	af00      	add	r7, sp, #0
 801bbce:	6078      	str	r0, [r7, #4]
 801bbd0:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 801bbd2:	683b      	ldr	r3, [r7, #0]
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	da01      	bge.n	801bbdc <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 801bbd8:	f007 fd50 	bl	802367c <abort>
    TFLITE_DCHECK_LT(i, size_);
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	683a      	ldr	r2, [r7, #0]
 801bbe2:	429a      	cmp	r2, r3
 801bbe4:	db01      	blt.n	801bbea <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 801bbe6:	f007 fd49 	bl	802367c <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	2b05      	cmp	r3, #5
 801bbf0:	dd06      	ble.n	801bc00 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	685a      	ldr	r2, [r3, #4]
 801bbf6:	683b      	ldr	r3, [r7, #0]
 801bbf8:	009b      	lsls	r3, r3, #2
 801bbfa:	4413      	add	r3, r2
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	e004      	b.n	801bc0a <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 801bc00:	687a      	ldr	r2, [r7, #4]
 801bc02:	683b      	ldr	r3, [r7, #0]
 801bc04:	009b      	lsls	r3, r3, #2
 801bc06:	4413      	add	r3, r2
 801bc08:	685b      	ldr	r3, [r3, #4]
  }
 801bc0a:	4618      	mov	r0, r3
 801bc0c:	3708      	adds	r7, #8
 801bc0e:	46bd      	mov	sp, r7
 801bc10:	bd80      	pop	{r7, pc}

0801bc12 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 801bc12:	b480      	push	{r7}
 801bc14:	b083      	sub	sp, #12
 801bc16:	af00      	add	r7, sp, #0
 801bc18:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	2b05      	cmp	r3, #5
 801bc20:	dd02      	ble.n	801bc28 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	685b      	ldr	r3, [r3, #4]
 801bc26:	e001      	b.n	801bc2c <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	3304      	adds	r3, #4
  }
 801bc2c:	4618      	mov	r0, r3
 801bc2e:	370c      	adds	r7, #12
 801bc30:	46bd      	mov	sp, r7
 801bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc36:	4770      	bx	lr

0801bc38 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 801bc38:	b580      	push	{r7, lr}
 801bc3a:	b086      	sub	sp, #24
 801bc3c:	af00      	add	r7, sp, #0
 801bc3e:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 801bc40:	2301      	movs	r3, #1
 801bc42:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 801bc44:	6878      	ldr	r0, [r7, #4]
 801bc46:	f7ff ffe4 	bl	801bc12 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801bc4a:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 801bc4c:	2300      	movs	r3, #0
 801bc4e:	613b      	str	r3, [r7, #16]
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	693a      	ldr	r2, [r7, #16]
 801bc56:	429a      	cmp	r2, r3
 801bc58:	da0c      	bge.n	801bc74 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 801bc5a:	693b      	ldr	r3, [r7, #16]
 801bc5c:	009b      	lsls	r3, r3, #2
 801bc5e:	68fa      	ldr	r2, [r7, #12]
 801bc60:	4413      	add	r3, r2
 801bc62:	681a      	ldr	r2, [r3, #0]
 801bc64:	697b      	ldr	r3, [r7, #20]
 801bc66:	fb02 f303 	mul.w	r3, r2, r3
 801bc6a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 801bc6c:	693b      	ldr	r3, [r7, #16]
 801bc6e:	3301      	adds	r3, #1
 801bc70:	613b      	str	r3, [r7, #16]
 801bc72:	e7ed      	b.n	801bc50 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 801bc74:	697b      	ldr	r3, [r7, #20]
  }
 801bc76:	4618      	mov	r0, r3
 801bc78:	3718      	adds	r7, #24
 801bc7a:	46bd      	mov	sp, r7
 801bc7c:	bd80      	pop	{r7, pc}

0801bc7e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 801bc7e:	b590      	push	{r4, r7, lr}
 801bc80:	b085      	sub	sp, #20
 801bc82:	af00      	add	r7, sp, #0
 801bc84:	6078      	str	r0, [r7, #4]
 801bc86:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 801bc88:	6878      	ldr	r0, [r7, #4]
 801bc8a:	f7ff fe90 	bl	801b9ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801bc8e:	4604      	mov	r4, r0
 801bc90:	6838      	ldr	r0, [r7, #0]
 801bc92:	f7ff fe8c 	bl	801b9ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801bc96:	4603      	mov	r3, r0
 801bc98:	429c      	cmp	r4, r3
 801bc9a:	d001      	beq.n	801bca0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 801bc9c:	f007 fcee 	bl	802367c <abort>
  const int dims_count = shape.DimensionsCount();
 801bca0:	6878      	ldr	r0, [r7, #4]
 801bca2:	f7ff fe84 	bl	801b9ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801bca6:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 801bca8:	2300      	movs	r3, #0
 801bcaa:	60fb      	str	r3, [r7, #12]
 801bcac:	68fa      	ldr	r2, [r7, #12]
 801bcae:	68bb      	ldr	r3, [r7, #8]
 801bcb0:	429a      	cmp	r2, r3
 801bcb2:	da11      	bge.n	801bcd8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801bcb4:	68f9      	ldr	r1, [r7, #12]
 801bcb6:	6878      	ldr	r0, [r7, #4]
 801bcb8:	f7ff ff86 	bl	801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801bcbc:	4604      	mov	r4, r0
 801bcbe:	68f9      	ldr	r1, [r7, #12]
 801bcc0:	6838      	ldr	r0, [r7, #0]
 801bcc2:	f7ff ff81 	bl	801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801bcc6:	4603      	mov	r3, r0
 801bcc8:	429c      	cmp	r4, r3
 801bcca:	d001      	beq.n	801bcd0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 801bccc:	f007 fcd6 	bl	802367c <abort>
  for (int i = 0; i < dims_count; ++i) {
 801bcd0:	68fb      	ldr	r3, [r7, #12]
 801bcd2:	3301      	adds	r3, #1
 801bcd4:	60fb      	str	r3, [r7, #12]
 801bcd6:	e7e9      	b.n	801bcac <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 801bcd8:	6878      	ldr	r0, [r7, #4]
 801bcda:	f7ff ffad 	bl	801bc38 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801bcde:	4603      	mov	r3, r0
}
 801bce0:	4618      	mov	r0, r3
 801bce2:	3714      	adds	r7, #20
 801bce4:	46bd      	mov	sp, r7
 801bce6:	bd90      	pop	{r4, r7, pc}

0801bce8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 801bce8:	b580      	push	{r7, lr}
 801bcea:	b086      	sub	sp, #24
 801bcec:	af00      	add	r7, sp, #0
 801bcee:	60f8      	str	r0, [r7, #12]
 801bcf0:	60b9      	str	r1, [r7, #8]
 801bcf2:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bcfa:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	dc02      	bgt.n	801bd08 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	425b      	negs	r3, r3
 801bd06:	e000      	b.n	801bd0a <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 801bd08:	2300      	movs	r3, #0
 801bd0a:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 801bd0c:	68fa      	ldr	r2, [r7, #12]
 801bd0e:	697b      	ldr	r3, [r7, #20]
 801bd10:	fa02 f303 	lsl.w	r3, r2, r3
 801bd14:	68b9      	ldr	r1, [r7, #8]
 801bd16:	4618      	mov	r0, r3
 801bd18:	f7ff fee0 	bl	801badc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801bd1c:	4603      	mov	r3, r0
 801bd1e:	6939      	ldr	r1, [r7, #16]
 801bd20:	4618      	mov	r0, r3
 801bd22:	f000 fb4b 	bl	801c3bc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801bd26:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 801bd28:	4618      	mov	r0, r3
 801bd2a:	3718      	adds	r7, #24
 801bd2c:	46bd      	mov	sp, r7
 801bd2e:	bd80      	pop	{r7, pc}

0801bd30 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 801bd30:	b580      	push	{r7, lr}
 801bd32:	b084      	sub	sp, #16
 801bd34:	af00      	add	r7, sp, #0
 801bd36:	60f8      	str	r0, [r7, #12]
 801bd38:	60b9      	str	r1, [r7, #8]
 801bd3a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d101      	bne.n	801bd46 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801bd42:	f007 fc9b 	bl	802367c <abort>
  TFLITE_DCHECK(node != nullptr);
 801bd46:	68bb      	ldr	r3, [r7, #8]
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d101      	bne.n	801bd50 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801bd4c:	f007 fc96 	bl	802367c <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 801bd50:	68fb      	ldr	r3, [r7, #12]
 801bd52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801bd54:	68bb      	ldr	r3, [r7, #8]
 801bd56:	6819      	ldr	r1, [r3, #0]
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	009b      	lsls	r3, r3, #2
 801bd5c:	440b      	add	r3, r1
 801bd5e:	685b      	ldr	r3, [r3, #4]
 801bd60:	4619      	mov	r1, r3
 801bd62:	68f8      	ldr	r0, [r7, #12]
 801bd64:	4790      	blx	r2
 801bd66:	4603      	mov	r3, r0
}
 801bd68:	4618      	mov	r0, r3
 801bd6a:	3710      	adds	r7, #16
 801bd6c:	46bd      	mov	sp, r7
 801bd6e:	bd80      	pop	{r7, pc}

0801bd70 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 801bd70:	b580      	push	{r7, lr}
 801bd72:	b084      	sub	sp, #16
 801bd74:	af00      	add	r7, sp, #0
 801bd76:	60f8      	str	r0, [r7, #12]
 801bd78:	60b9      	str	r1, [r7, #8]
 801bd7a:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 801bd7c:	687a      	ldr	r2, [r7, #4]
 801bd7e:	68b9      	ldr	r1, [r7, #8]
 801bd80:	68f8      	ldr	r0, [r7, #12]
 801bd82:	f7ff ffd5 	bl	801bd30 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801bd86:	4603      	mov	r3, r0
}
 801bd88:	4618      	mov	r0, r3
 801bd8a:	3710      	adds	r7, #16
 801bd8c:	46bd      	mov	sp, r7
 801bd8e:	bd80      	pop	{r7, pc}

0801bd90 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 801bd90:	b580      	push	{r7, lr}
 801bd92:	b084      	sub	sp, #16
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	60f8      	str	r0, [r7, #12]
 801bd98:	60b9      	str	r1, [r7, #8]
 801bd9a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d101      	bne.n	801bda6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801bda2:	f007 fc6b 	bl	802367c <abort>
  TFLITE_DCHECK(node != nullptr);
 801bda6:	68bb      	ldr	r3, [r7, #8]
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d101      	bne.n	801bdb0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801bdac:	f007 fc66 	bl	802367c <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 801bdb0:	68fb      	ldr	r3, [r7, #12]
 801bdb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801bdb4:	68bb      	ldr	r3, [r7, #8]
 801bdb6:	6859      	ldr	r1, [r3, #4]
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	009b      	lsls	r3, r3, #2
 801bdbc:	440b      	add	r3, r1
 801bdbe:	685b      	ldr	r3, [r3, #4]
 801bdc0:	4619      	mov	r1, r3
 801bdc2:	68f8      	ldr	r0, [r7, #12]
 801bdc4:	4790      	blx	r2
 801bdc6:	4603      	mov	r3, r0
}
 801bdc8:	4618      	mov	r0, r3
 801bdca:	3710      	adds	r7, #16
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	bd80      	pop	{r7, pc}

0801bdd0 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b08a      	sub	sp, #40	; 0x28
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	60f8      	str	r0, [r7, #12]
 801bdd8:	60b9      	str	r1, [r7, #8]
 801bdda:	607a      	str	r2, [r7, #4]
 801bddc:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801bdde:	6879      	ldr	r1, [r7, #4]
 801bde0:	68f8      	ldr	r0, [r7, #12]
 801bde2:	f7ff ff4c 	bl	801bc7e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801bde6:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801bde8:	2300      	movs	r3, #0
 801bdea:	627b      	str	r3, [r7, #36]	; 0x24
 801bdec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bdee:	6a3b      	ldr	r3, [r7, #32]
 801bdf0:	429a      	cmp	r2, r3
 801bdf2:	da1d      	bge.n	801be30 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 801bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdf6:	009b      	lsls	r3, r3, #2
 801bdf8:	68ba      	ldr	r2, [r7, #8]
 801bdfa:	4413      	add	r3, r2
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 801be00:	f04f 0300 	mov.w	r3, #0
 801be04:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 801be06:	edd7 7a07 	vldr	s15, [r7, #28]
 801be0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801be0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be12:	d501      	bpl.n	801be18 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 801be14:	69bb      	ldr	r3, [r7, #24]
 801be16:	e000      	b.n	801be1a <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 801be18:	69fb      	ldr	r3, [r7, #28]
 801be1a:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 801be1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be1e:	009b      	lsls	r3, r3, #2
 801be20:	683a      	ldr	r2, [r7, #0]
 801be22:	4413      	add	r3, r2
 801be24:	697a      	ldr	r2, [r7, #20]
 801be26:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801be28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be2a:	3301      	adds	r3, #1
 801be2c:	627b      	str	r3, [r7, #36]	; 0x24
 801be2e:	e7dd      	b.n	801bdec <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801be30:	bf00      	nop
 801be32:	3728      	adds	r7, #40	; 0x28
 801be34:	46bd      	mov	sp, r7
 801be36:	bd80      	pop	{r7, pc}

0801be38 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 801be38:	b580      	push	{r7, lr}
 801be3a:	b08a      	sub	sp, #40	; 0x28
 801be3c:	af00      	add	r7, sp, #0
 801be3e:	60f8      	str	r0, [r7, #12]
 801be40:	60b9      	str	r1, [r7, #8]
 801be42:	607a      	str	r2, [r7, #4]
 801be44:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801be46:	6879      	ldr	r1, [r7, #4]
 801be48:	68f8      	ldr	r0, [r7, #12]
 801be4a:	f7ff ff18 	bl	801bc7e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801be4e:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801be50:	2300      	movs	r3, #0
 801be52:	627b      	str	r3, [r7, #36]	; 0x24
 801be54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801be56:	6a3b      	ldr	r3, [r7, #32]
 801be58:	429a      	cmp	r2, r3
 801be5a:	da2a      	bge.n	801beb2 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 801be5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be5e:	009b      	lsls	r3, r3, #2
 801be60:	68ba      	ldr	r2, [r7, #8]
 801be62:	4413      	add	r3, r2
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 801be68:	4b14      	ldr	r3, [pc, #80]	; (801bebc <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 801be6a:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 801be6c:	f04f 0300 	mov.w	r3, #0
 801be70:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 801be72:	edd7 7a07 	vldr	s15, [r7, #28]
 801be76:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801be7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801be7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be82:	dd01      	ble.n	801be88 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 801be84:	69bb      	ldr	r3, [r7, #24]
 801be86:	e009      	b.n	801be9c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801be88:	edd7 7a07 	vldr	s15, [r7, #28]
 801be8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801be90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be94:	d501      	bpl.n	801be9a <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 801be96:	697b      	ldr	r3, [r7, #20]
 801be98:	e000      	b.n	801be9c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801be9a:	69fb      	ldr	r3, [r7, #28]
 801be9c:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 801be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bea0:	009b      	lsls	r3, r3, #2
 801bea2:	683a      	ldr	r2, [r7, #0]
 801bea4:	4413      	add	r3, r2
 801bea6:	693a      	ldr	r2, [r7, #16]
 801bea8:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801beaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801beac:	3301      	adds	r3, #1
 801beae:	627b      	str	r3, [r7, #36]	; 0x24
 801beb0:	e7d0      	b.n	801be54 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801beb2:	bf00      	nop
 801beb4:	3728      	adds	r7, #40	; 0x28
 801beb6:	46bd      	mov	sp, r7
 801beb8:	bd80      	pop	{r7, pc}
 801beba:	bf00      	nop
 801bebc:	40c00000 	.word	0x40c00000

0801bec0 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 801bec0:	b580      	push	{r7, lr}
 801bec2:	b084      	sub	sp, #16
 801bec4:	af00      	add	r7, sp, #0
 801bec6:	60f8      	str	r0, [r7, #12]
 801bec8:	60b9      	str	r1, [r7, #8]
 801beca:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d101      	bne.n	801bed8 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 801bed4:	f007 fbd2 	bl	802367c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bedc:	211c      	movs	r1, #28
 801bede:	68f8      	ldr	r0, [r7, #12]
 801bee0:	4798      	blx	r3
 801bee2:	4603      	mov	r3, r0
}
 801bee4:	4618      	mov	r0, r3
 801bee6:	3710      	adds	r7, #16
 801bee8:	46bd      	mov	sp, r7
 801beea:	bd80      	pop	{r7, pc}

0801beec <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 801beec:	b590      	push	{r4, r7, lr}
 801beee:	b089      	sub	sp, #36	; 0x24
 801bef0:	af02      	add	r7, sp, #8
 801bef2:	6078      	str	r0, [r7, #4]
 801bef4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801bef6:	683b      	ldr	r3, [r7, #0]
 801bef8:	691b      	ldr	r3, [r3, #16]
 801befa:	2b00      	cmp	r3, #0
 801befc:	d101      	bne.n	801bf02 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801befe:	f007 fbbd 	bl	802367c <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 801bf02:	683b      	ldr	r3, [r7, #0]
 801bf04:	691b      	ldr	r3, [r3, #16]
 801bf06:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801bf08:	2200      	movs	r2, #0
 801bf0a:	6839      	ldr	r1, [r7, #0]
 801bf0c:	6878      	ldr	r0, [r7, #4]
 801bf0e:	f7ff facd 	bl	801b4ac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801bf12:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 801bf14:	693b      	ldr	r3, [r7, #16]
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	d10a      	bne.n	801bf30 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	695c      	ldr	r4, [r3, #20]
 801bf1e:	4b1a      	ldr	r3, [pc, #104]	; (801bf88 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 801bf20:	9300      	str	r3, [sp, #0]
 801bf22:	238e      	movs	r3, #142	; 0x8e
 801bf24:	4a19      	ldr	r2, [pc, #100]	; (801bf8c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801bf26:	491a      	ldr	r1, [pc, #104]	; (801bf90 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801bf28:	6878      	ldr	r0, [r7, #4]
 801bf2a:	47a0      	blx	r4
 801bf2c:	2301      	movs	r3, #1
 801bf2e:	e027      	b.n	801bf80 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801bf30:	2200      	movs	r2, #0
 801bf32:	6839      	ldr	r1, [r7, #0]
 801bf34:	6878      	ldr	r0, [r7, #4]
 801bf36:	f7ff fac9 	bl	801b4cc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801bf3a:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 801bf3c:	68fb      	ldr	r3, [r7, #12]
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	d10a      	bne.n	801bf58 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	695c      	ldr	r4, [r3, #20]
 801bf46:	4b13      	ldr	r3, [pc, #76]	; (801bf94 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 801bf48:	9300      	str	r3, [sp, #0]
 801bf4a:	2390      	movs	r3, #144	; 0x90
 801bf4c:	4a0f      	ldr	r2, [pc, #60]	; (801bf8c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801bf4e:	4910      	ldr	r1, [pc, #64]	; (801bf90 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801bf50:	6878      	ldr	r0, [r7, #4]
 801bf52:	47a0      	blx	r4
 801bf54:	2301      	movs	r3, #1
 801bf56:	e013      	b.n	801bf80 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 801bf58:	693b      	ldr	r3, [r7, #16]
 801bf5a:	781b      	ldrb	r3, [r3, #0]
 801bf5c:	2b09      	cmp	r3, #9
 801bf5e:	d105      	bne.n	801bf6c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 801bf60:	697a      	ldr	r2, [r7, #20]
 801bf62:	68f9      	ldr	r1, [r7, #12]
 801bf64:	6938      	ldr	r0, [r7, #16]
 801bf66:	f000 fa9d 	bl	801c4a4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 801bf6a:	e008      	b.n	801bf7e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 801bf6c:	693b      	ldr	r3, [r7, #16]
 801bf6e:	781b      	ldrb	r3, [r3, #0]
 801bf70:	2b03      	cmp	r3, #3
 801bf72:	d104      	bne.n	801bf7e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 801bf74:	697a      	ldr	r2, [r7, #20]
 801bf76:	68f9      	ldr	r1, [r7, #12]
 801bf78:	6938      	ldr	r0, [r7, #16]
 801bf7a:	f000 fb35 	bl	801c5e8 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 801bf7e:	2300      	movs	r3, #0
}
 801bf80:	4618      	mov	r0, r3
 801bf82:	371c      	adds	r7, #28
 801bf84:	46bd      	mov	sp, r7
 801bf86:	bd90      	pop	{r4, r7, pc}
 801bf88:	08028ad0 	.word	0x08028ad0
 801bf8c:	08028a30 	.word	0x08028a30
 801bf90:	08028ab8 	.word	0x08028ab8
 801bf94:	08028ae4 	.word	0x08028ae4

0801bf98 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 801bf98:	b590      	push	{r4, r7, lr}
 801bf9a:	b0ad      	sub	sp, #180	; 0xb4
 801bf9c:	af02      	add	r7, sp, #8
 801bf9e:	6078      	str	r0, [r7, #4]
 801bfa0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801bfa2:	683b      	ldr	r3, [r7, #0]
 801bfa4:	691b      	ldr	r3, [r3, #16]
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	d101      	bne.n	801bfae <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801bfaa:	f007 fb67 	bl	802367c <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 801bfae:	683b      	ldr	r3, [r7, #0]
 801bfb0:	691b      	ldr	r3, [r3, #16]
 801bfb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801bfb6:	2200      	movs	r2, #0
 801bfb8:	6839      	ldr	r1, [r7, #0]
 801bfba:	6878      	ldr	r0, [r7, #4]
 801bfbc:	f7ff fed8 	bl	801bd70 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801bfc0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801bfc4:	2200      	movs	r2, #0
 801bfc6:	6839      	ldr	r1, [r7, #0]
 801bfc8:	6878      	ldr	r0, [r7, #4]
 801bfca:	f7ff fee1 	bl	801bd90 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801bfce:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801bfd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bfd6:	7a1b      	ldrb	r3, [r3, #8]
 801bfd8:	2b09      	cmp	r3, #9
 801bfda:	d032      	beq.n	801c042 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801bfdc:	2b09      	cmp	r3, #9
 801bfde:	f300 808c 	bgt.w	801c0fa <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 801bfe2:	2b01      	cmp	r3, #1
 801bfe4:	d002      	beq.n	801bfec <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 801bfe6:	2b03      	cmp	r3, #3
 801bfe8:	d059      	beq.n	801c09e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 801bfea:	e086      	b.n	801c0fa <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 801bfec:	f107 030c 	add.w	r3, r7, #12
 801bff0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801bff4:	4618      	mov	r0, r3
 801bff6:	f001 fe2f 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801bffa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801bffe:	f000 fb95 	bl	801c72c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801c002:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 801c004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c008:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c00c:	4618      	mov	r0, r3
 801c00e:	f001 fe23 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801c012:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c016:	f000 fb98 	bl	801c74a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801c01a:	4603      	mov	r3, r0
 801c01c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c020:	f107 000c 	add.w	r0, r7, #12
 801c024:	4621      	mov	r1, r4
 801c026:	f7ff fed3 	bl	801bdd0 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 801c02a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c02e:	4618      	mov	r0, r3
 801c030:	f7ff fca7 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801c034:	f107 030c 	add.w	r3, r7, #12
 801c038:	4618      	mov	r0, r3
 801c03a:	f7ff fca2 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801c03e:	2300      	movs	r3, #0
 801c040:	e069      	b.n	801c116 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801c042:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c046:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c04a:	4618      	mov	r0, r3
 801c04c:	f001 fe04 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 801c050:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c054:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c058:	4618      	mov	r0, r3
 801c05a:	f001 fdfd 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801c05e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c062:	f000 fb83 	bl	801c76c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801c066:	4604      	mov	r4, r0
 801c068:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c06c:	f000 fb8d 	bl	801c78a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801c070:	4603      	mov	r3, r0
 801c072:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801c076:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801c07a:	9300      	str	r3, [sp, #0]
 801c07c:	4623      	mov	r3, r4
 801c07e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801c082:	f000 fb93 	bl	801c7ac <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 801c086:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c08a:	4618      	mov	r0, r3
 801c08c:	f7ff fc79 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801c090:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c094:	4618      	mov	r0, r3
 801c096:	f7ff fc74 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801c09a:	2300      	movs	r3, #0
 801c09c:	e03b      	b.n	801c116 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801c09e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c0a2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	f001 fdd6 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 801c0ac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c0b0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c0b4:	4618      	mov	r0, r3
 801c0b6:	f001 fdcf 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801c0ba:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c0be:	f000 fbc1 	bl	801c844 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801c0c2:	4604      	mov	r4, r0
 801c0c4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c0c8:	f000 fbcb 	bl	801c862 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801c0cc:	4603      	mov	r3, r0
 801c0ce:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801c0d2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801c0d6:	9300      	str	r3, [sp, #0]
 801c0d8:	4623      	mov	r3, r4
 801c0da:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801c0de:	f000 fbd1 	bl	801c884 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 801c0e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c0e6:	4618      	mov	r0, r3
 801c0e8:	f7ff fc4b 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801c0ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c0f0:	4618      	mov	r0, r3
 801c0f2:	f7ff fc46 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801c0f6:	2300      	movs	r3, #0
 801c0f8:	e00d      	b.n	801c116 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	695c      	ldr	r4, [r3, #20]
 801c0fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c102:	7a1b      	ldrb	r3, [r3, #8]
 801c104:	4618      	mov	r0, r3
 801c106:	f7fe fee1 	bl	801aecc <TfLiteTypeGetName>
 801c10a:	4603      	mov	r3, r0
 801c10c:	461a      	mov	r2, r3
 801c10e:	4904      	ldr	r1, [pc, #16]	; (801c120 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 801c110:	6878      	ldr	r0, [r7, #4]
 801c112:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801c114:	2301      	movs	r3, #1
    }
  }
}
 801c116:	4618      	mov	r0, r3
 801c118:	37ac      	adds	r7, #172	; 0xac
 801c11a:	46bd      	mov	sp, r7
 801c11c:	bd90      	pop	{r4, r7, pc}
 801c11e:	bf00      	nop
 801c120:	08028af8 	.word	0x08028af8

0801c124 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 801c124:	b580      	push	{r7, lr}
 801c126:	b084      	sub	sp, #16
 801c128:	af00      	add	r7, sp, #0
 801c12a:	60f8      	str	r0, [r7, #12]
 801c12c:	60b9      	str	r1, [r7, #8]
 801c12e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801c130:	68fb      	ldr	r3, [r7, #12]
 801c132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c134:	2b00      	cmp	r3, #0
 801c136:	d101      	bne.n	801c13c <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 801c138:	f007 faa0 	bl	802367c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 801c13c:	68fb      	ldr	r3, [r7, #12]
 801c13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c140:	2104      	movs	r1, #4
 801c142:	68f8      	ldr	r0, [r7, #12]
 801c144:	4798      	blx	r3
 801c146:	4603      	mov	r3, r0
}
 801c148:	4618      	mov	r0, r3
 801c14a:	3710      	adds	r7, #16
 801c14c:	46bd      	mov	sp, r7
 801c14e:	bd80      	pop	{r7, pc}

0801c150 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 801c150:	b590      	push	{r4, r7, lr}
 801c152:	b087      	sub	sp, #28
 801c154:	af02      	add	r7, sp, #8
 801c156:	6078      	str	r0, [r7, #4]
 801c158:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801c15a:	683b      	ldr	r3, [r7, #0]
 801c15c:	691b      	ldr	r3, [r3, #16]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d101      	bne.n	801c166 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801c162:	f007 fa8b 	bl	802367c <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 801c166:	683b      	ldr	r3, [r7, #0]
 801c168:	691b      	ldr	r3, [r3, #16]
 801c16a:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801c16c:	2200      	movs	r2, #0
 801c16e:	6839      	ldr	r1, [r7, #0]
 801c170:	6878      	ldr	r0, [r7, #4]
 801c172:	f7ff f99b 	bl	801b4ac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801c176:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 801c178:	68bb      	ldr	r3, [r7, #8]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d10a      	bne.n	801c194 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	695c      	ldr	r4, [r3, #20]
 801c182:	4b20      	ldr	r3, [pc, #128]	; (801c204 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 801c184:	9300      	str	r3, [sp, #0]
 801c186:	23cd      	movs	r3, #205	; 0xcd
 801c188:	4a1f      	ldr	r2, [pc, #124]	; (801c208 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 801c18a:	4920      	ldr	r1, [pc, #128]	; (801c20c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 801c18c:	6878      	ldr	r0, [r7, #4]
 801c18e:	47a0      	blx	r4
 801c190:	2301      	movs	r3, #1
 801c192:	e033      	b.n	801c1fc <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 801c194:	68bb      	ldr	r3, [r7, #8]
 801c196:	781b      	ldrb	r3, [r3, #0]
 801c198:	2b09      	cmp	r3, #9
 801c19a:	d115      	bne.n	801c1c8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801c19c:	68bb      	ldr	r3, [r7, #8]
 801c19e:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 801c1a2:	68bb      	ldr	r3, [r7, #8]
 801c1a4:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801c1a6:	4618      	mov	r0, r3
 801c1a8:	eef0 0a67 	vmov.f32	s1, s15
 801c1ac:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801c1b0:	f000 fbb3 	bl	801c91a <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 801c1b4:	4603      	mov	r3, r0
 801c1b6:	461a      	mov	r2, r3
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 801c1bc:	68bb      	ldr	r3, [r7, #8]
 801c1be:	691b      	ldr	r3, [r3, #16]
 801c1c0:	b25a      	sxtb	r2, r3
 801c1c2:	68fb      	ldr	r3, [r7, #12]
 801c1c4:	705a      	strb	r2, [r3, #1]
 801c1c6:	e018      	b.n	801c1fa <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 801c1c8:	68bb      	ldr	r3, [r7, #8]
 801c1ca:	781b      	ldrb	r3, [r3, #0]
 801c1cc:	2b03      	cmp	r3, #3
 801c1ce:	d114      	bne.n	801c1fa <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801c1d0:	68bb      	ldr	r3, [r7, #8]
 801c1d2:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 801c1d6:	68bb      	ldr	r3, [r7, #8]
 801c1d8:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801c1da:	4618      	mov	r0, r3
 801c1dc:	eef0 0a67 	vmov.f32	s1, s15
 801c1e0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801c1e4:	f000 fbe8 	bl	801c9b8 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 801c1e8:	4603      	mov	r3, r0
 801c1ea:	461a      	mov	r2, r3
 801c1ec:	68fb      	ldr	r3, [r7, #12]
 801c1ee:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 801c1f0:	68bb      	ldr	r3, [r7, #8]
 801c1f2:	691b      	ldr	r3, [r3, #16]
 801c1f4:	b2da      	uxtb	r2, r3
 801c1f6:	68fb      	ldr	r3, [r7, #12]
 801c1f8:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 801c1fa:	2300      	movs	r3, #0
}
 801c1fc:	4618      	mov	r0, r3
 801c1fe:	3714      	adds	r7, #20
 801c200:	46bd      	mov	sp, r7
 801c202:	bd90      	pop	{r4, r7, pc}
 801c204:	08028ad0 	.word	0x08028ad0
 801c208:	08028a30 	.word	0x08028a30
 801c20c:	08028ab8 	.word	0x08028ab8

0801c210 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 801c210:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c212:	b0ad      	sub	sp, #180	; 0xb4
 801c214:	af02      	add	r7, sp, #8
 801c216:	6078      	str	r0, [r7, #4]
 801c218:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801c21a:	683b      	ldr	r3, [r7, #0]
 801c21c:	691b      	ldr	r3, [r3, #16]
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d101      	bne.n	801c226 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 801c222:	f007 fa2b 	bl	802367c <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 801c226:	683b      	ldr	r3, [r7, #0]
 801c228:	691b      	ldr	r3, [r3, #16]
 801c22a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801c22e:	2200      	movs	r2, #0
 801c230:	6839      	ldr	r1, [r7, #0]
 801c232:	6878      	ldr	r0, [r7, #4]
 801c234:	f7ff fd9c 	bl	801bd70 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801c238:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801c23c:	2200      	movs	r2, #0
 801c23e:	6839      	ldr	r1, [r7, #0]
 801c240:	6878      	ldr	r0, [r7, #4]
 801c242:	f7ff fda5 	bl	801bd90 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801c246:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801c24a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c24e:	7a1b      	ldrb	r3, [r3, #8]
 801c250:	2b09      	cmp	r3, #9
 801c252:	d032      	beq.n	801c2ba <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801c254:	2b09      	cmp	r3, #9
 801c256:	f300 809c 	bgt.w	801c392 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 801c25a:	2b01      	cmp	r3, #1
 801c25c:	d002      	beq.n	801c264 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 801c25e:	2b03      	cmp	r3, #3
 801c260:	d062      	beq.n	801c328 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 801c262:	e096      	b.n	801c392 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 801c264:	f107 030c 	add.w	r3, r7, #12
 801c268:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c26c:	4618      	mov	r0, r3
 801c26e:	f001 fcf3 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801c272:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c276:	f000 fa59 	bl	801c72c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801c27a:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 801c27c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c280:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c284:	4618      	mov	r0, r3
 801c286:	f001 fce7 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801c28a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c28e:	f000 fa5c 	bl	801c74a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801c292:	4603      	mov	r3, r0
 801c294:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c298:	f107 000c 	add.w	r0, r7, #12
 801c29c:	4621      	mov	r1, r4
 801c29e:	f7ff fdcb 	bl	801be38 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 801c2a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c2a6:	4618      	mov	r0, r3
 801c2a8:	f7ff fb6b 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801c2ac:	f107 030c 	add.w	r3, r7, #12
 801c2b0:	4618      	mov	r0, r3
 801c2b2:	f7ff fb66 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801c2b6:	2300      	movs	r3, #0
 801c2b8:	e079      	b.n	801c3ae <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801c2ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c2be:	f993 4001 	ldrsb.w	r4, [r3, #1]
 801c2c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c2c6:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 801c2ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c2ce:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c2d2:	4618      	mov	r0, r3
 801c2d4:	f001 fcc0 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801c2d8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c2dc:	f000 fa46 	bl	801c76c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801c2e0:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 801c2e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c2e6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c2ea:	4618      	mov	r0, r3
 801c2ec:	f001 fcb4 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801c2f0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c2f4:	f000 fa49 	bl	801c78a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801c2f8:	4603      	mov	r3, r0
 801c2fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801c2fe:	9301      	str	r3, [sp, #4]
 801c300:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c304:	9300      	str	r3, [sp, #0]
 801c306:	4633      	mov	r3, r6
 801c308:	4629      	mov	r1, r5
 801c30a:	4620      	mov	r0, r4
 801c30c:	f000 fba3 	bl	801ca56 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 801c310:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c314:	4618      	mov	r0, r3
 801c316:	f7ff fb34 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 801c31a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c31e:	4618      	mov	r0, r3
 801c320:	f7ff fb2f 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801c324:	2300      	movs	r3, #0
 801c326:	e042      	b.n	801c3ae <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801c328:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c32c:	78dc      	ldrb	r4, [r3, #3]
 801c32e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c332:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 801c334:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c338:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c33c:	4618      	mov	r0, r3
 801c33e:	f001 fc8b 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801c342:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c346:	f000 fa7d 	bl	801c844 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801c34a:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 801c34c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c350:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c354:	4618      	mov	r0, r3
 801c356:	f001 fc7f 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801c35a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c35e:	f000 fa80 	bl	801c862 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801c362:	4603      	mov	r3, r0
 801c364:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801c368:	9301      	str	r3, [sp, #4]
 801c36a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c36e:	9300      	str	r3, [sp, #0]
 801c370:	4633      	mov	r3, r6
 801c372:	4629      	mov	r1, r5
 801c374:	4620      	mov	r0, r4
 801c376:	f000 fbad 	bl	801cad4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 801c37a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c37e:	4618      	mov	r0, r3
 801c380:	f7ff faff 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 801c384:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c388:	4618      	mov	r0, r3
 801c38a:	f7ff fafa 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801c38e:	2300      	movs	r3, #0
 801c390:	e00d      	b.n	801c3ae <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	695c      	ldr	r4, [r3, #20]
 801c396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c39a:	7a1b      	ldrb	r3, [r3, #8]
 801c39c:	4618      	mov	r0, r3
 801c39e:	f7fe fd95 	bl	801aecc <TfLiteTypeGetName>
 801c3a2:	4603      	mov	r3, r0
 801c3a4:	461a      	mov	r2, r3
 801c3a6:	4904      	ldr	r1, [pc, #16]	; (801c3b8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 801c3a8:	6878      	ldr	r0, [r7, #4]
 801c3aa:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801c3ac:	2301      	movs	r3, #1
    }
  }
}
 801c3ae:	4618      	mov	r0, r3
 801c3b0:	37ac      	adds	r7, #172	; 0xac
 801c3b2:	46bd      	mov	sp, r7
 801c3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3b6:	bf00      	nop
 801c3b8:	08028af8 	.word	0x08028af8

0801c3bc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 801c3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3be:	b089      	sub	sp, #36	; 0x24
 801c3c0:	af00      	add	r7, sp, #0
 801c3c2:	6078      	str	r0, [r7, #4]
 801c3c4:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 801c3c6:	6839      	ldr	r1, [r7, #0]
 801c3c8:	2900      	cmp	r1, #0
 801c3ca:	da06      	bge.n	801c3da <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 801c3cc:	4b31      	ldr	r3, [pc, #196]	; (801c494 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 801c3ce:	4a32      	ldr	r2, [pc, #200]	; (801c498 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801c3d0:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801c3d4:	4831      	ldr	r0, [pc, #196]	; (801c49c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801c3d6:	f007 f959 	bl	802368c <__assert_func>
  assert(exponent <= 31);
 801c3da:	6839      	ldr	r1, [r7, #0]
 801c3dc:	291f      	cmp	r1, #31
 801c3de:	dd06      	ble.n	801c3ee <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 801c3e0:	4b2f      	ldr	r3, [pc, #188]	; (801c4a0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 801c3e2:	4a2d      	ldr	r2, [pc, #180]	; (801c498 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801c3e4:	f240 1167 	movw	r1, #359	; 0x167
 801c3e8:	482c      	ldr	r0, [pc, #176]	; (801c49c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801c3ea:	f007 f94f 	bl	802368c <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 801c3ee:	f04f 0001 	mov.w	r0, #1
 801c3f2:	f04f 0100 	mov.w	r1, #0
 801c3f6:	683c      	ldr	r4, [r7, #0]
 801c3f8:	f1a4 0620 	sub.w	r6, r4, #32
 801c3fc:	f1c4 0520 	rsb	r5, r4, #32
 801c400:	fa01 f304 	lsl.w	r3, r1, r4
 801c404:	fa00 f606 	lsl.w	r6, r0, r6
 801c408:	4333      	orrs	r3, r6
 801c40a:	fa20 f505 	lsr.w	r5, r0, r5
 801c40e:	432b      	orrs	r3, r5
 801c410:	fa00 f204 	lsl.w	r2, r0, r4
 801c414:	4613      	mov	r3, r2
 801c416:	3b01      	subs	r3, #1
 801c418:	4618      	mov	r0, r3
 801c41a:	f000 fb93 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c41e:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 801c420:	2000      	movs	r0, #0
 801c422:	f000 fb8f 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c426:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 801c428:	2001      	movs	r0, #1
 801c42a:	f000 fb8b 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c42e:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 801c430:	69f9      	ldr	r1, [r7, #28]
 801c432:	6878      	ldr	r0, [r7, #4]
 801c434:	f000 fb91 	bl	801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c438:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 801c43a:	2101      	movs	r1, #1
 801c43c:	69f8      	ldr	r0, [r7, #28]
 801c43e:	f000 fb9a 	bl	801cb76 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801c442:	4604      	mov	r4, r0
 801c444:	69b9      	ldr	r1, [r7, #24]
 801c446:	6878      	ldr	r0, [r7, #4]
 801c448:	f000 fba4 	bl	801cb94 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801c44c:	4603      	mov	r3, r0
 801c44e:	6979      	ldr	r1, [r7, #20]
 801c450:	4618      	mov	r0, r3
 801c452:	f000 fb82 	bl	801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c456:	4603      	mov	r3, r0
 801c458:	4619      	mov	r1, r3
 801c45a:	4620      	mov	r0, r4
 801c45c:	f000 fbae 	bl	801cbbc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801c460:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 801c462:	6839      	ldr	r1, [r7, #0]
 801c464:	6878      	ldr	r0, [r7, #4]
 801c466:	f000 fb86 	bl	801cb76 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801c46a:	4604      	mov	r4, r0
 801c46c:	68f9      	ldr	r1, [r7, #12]
 801c46e:	6938      	ldr	r0, [r7, #16]
 801c470:	f000 fbb2 	bl	801cbd8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801c474:	4603      	mov	r3, r0
 801c476:	6979      	ldr	r1, [r7, #20]
 801c478:	4618      	mov	r0, r3
 801c47a:	f000 fb6e 	bl	801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c47e:	4603      	mov	r3, r0
 801c480:	4619      	mov	r1, r3
 801c482:	4620      	mov	r0, r4
 801c484:	f000 fb9a 	bl	801cbbc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801c488:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 801c48a:	4618      	mov	r0, r3
 801c48c:	3724      	adds	r7, #36	; 0x24
 801c48e:	46bd      	mov	sp, r7
 801c490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c492:	bf00      	nop
 801c494:	08028b64 	.word	0x08028b64
 801c498:	08028b74 	.word	0x08028b74
 801c49c:	08028bd0 	.word	0x08028bd0
 801c4a0:	08028c58 	.word	0x08028c58

0801c4a4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801c4a4:	b590      	push	{r4, r7, lr}
 801c4a6:	b099      	sub	sp, #100	; 0x64
 801c4a8:	af00      	add	r7, sp, #0
 801c4aa:	60f8      	str	r0, [r7, #12]
 801c4ac:	60b9      	str	r1, [r7, #8]
 801c4ae:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801c4b0:	f04f 0300 	mov.w	r3, #0
 801c4b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801c4b6:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801c4ba:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	ed93 7a03 	vldr	s14, [r3, #12]
 801c4c2:	68bb      	ldr	r3, [r7, #8]
 801c4c4:	edd3 7a03 	vldr	s15, [r3, #12]
 801c4c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801c4cc:	ee16 0a90 	vmov	r0, s13
 801c4d0:	f7e4 f844 	bl	800055c <__aeabi_f2d>
 801c4d4:	4602      	mov	r2, r0
 801c4d6:	460b      	mov	r3, r1
 801c4d8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801c4dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c4e0:	68f9      	ldr	r1, [r7, #12]
 801c4e2:	4618      	mov	r0, r3
 801c4e4:	f7ff fac7 	bl	801ba76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801c4e8:	f107 0310 	add.w	r3, r7, #16
 801c4ec:	68b9      	ldr	r1, [r7, #8]
 801c4ee:	4618      	mov	r0, r3
 801c4f0:	f7ff fac1 	bl	801ba76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	f103 0214 	add.w	r2, r3, #20
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	3318      	adds	r3, #24
 801c4fe:	4619      	mov	r1, r3
 801c500:	4610      	mov	r0, r2
 801c502:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801c506:	f7fe fd67 	bl	801afd8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801c50a:	f7fe ff1d 	bl	801b348 <_ZNSt14numeric_limitsIaE3minEv>
 801c50e:	4603      	mov	r3, r0
 801c510:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801c512:	68bb      	ldr	r3, [r7, #8]
 801c514:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801c516:	68bb      	ldr	r3, [r7, #8]
 801c518:	edd3 7a03 	vldr	s15, [r3, #12]
 801c51c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801c520:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c524:	eeb0 0a66 	vmov.f32	s0, s13
 801c528:	f004 fd74 	bl	8021014 <roundf>
 801c52c:	eef0 7a40 	vmov.f32	s15, s0
 801c530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c534:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801c538:	4423      	add	r3, r4
 801c53a:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801c53c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801c540:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c544:	4611      	mov	r1, r2
 801c546:	4618      	mov	r0, r3
 801c548:	f7ff f9e6 	bl	801b918 <_ZSt3maxIlERKT_S2_S2_>
 801c54c:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801c54e:	681a      	ldr	r2, [r3, #0]
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801c554:	f7ff fab6 	bl	801bac4 <_ZNSt14numeric_limitsIfE8infinityEv>
 801c558:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801c55c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801c560:	eef4 7a47 	vcmp.f32	s15, s14
 801c564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c568:	d103      	bne.n	801c572 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801c56a:	f7fe fef6 	bl	801b35a <_ZNSt14numeric_limitsIaE3maxEv>
 801c56e:	4603      	mov	r3, r0
 801c570:	e022      	b.n	801c5b8 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801c572:	f7fe fef2 	bl	801b35a <_ZNSt14numeric_limitsIaE3maxEv>
 801c576:	4603      	mov	r3, r0
 801c578:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801c57a:	68bb      	ldr	r3, [r7, #8]
 801c57c:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801c57e:	68bb      	ldr	r3, [r7, #8]
 801c580:	edd3 7a03 	vldr	s15, [r3, #12]
 801c584:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801c588:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c58c:	eeb0 0a66 	vmov.f32	s0, s13
 801c590:	f004 fd40 	bl	8021014 <roundf>
 801c594:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801c598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c59c:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 801c5a0:	4423      	add	r3, r4
 801c5a2:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801c5a4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801c5a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c5ac:	4611      	mov	r1, r2
 801c5ae:	4618      	mov	r0, r3
 801c5b0:	f7ff f99e 	bl	801b8f0 <_ZSt3minIlERKT_S2_S2_>
 801c5b4:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801c5b6:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801c5b8:	687a      	ldr	r2, [r7, #4]
 801c5ba:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	691a      	ldr	r2, [r3, #16]
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 801c5c4:	68bb      	ldr	r3, [r7, #8]
 801c5c6:	691a      	ldr	r2, [r3, #16]
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801c5cc:	f107 0310 	add.w	r3, r7, #16
 801c5d0:	4618      	mov	r0, r3
 801c5d2:	f7ff f9d6 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801c5d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c5da:	4618      	mov	r0, r3
 801c5dc:	f7ff f9d1 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801c5e0:	bf00      	nop
 801c5e2:	3764      	adds	r7, #100	; 0x64
 801c5e4:	46bd      	mov	sp, r7
 801c5e6:	bd90      	pop	{r4, r7, pc}

0801c5e8 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801c5e8:	b590      	push	{r4, r7, lr}
 801c5ea:	b099      	sub	sp, #100	; 0x64
 801c5ec:	af00      	add	r7, sp, #0
 801c5ee:	60f8      	str	r0, [r7, #12]
 801c5f0:	60b9      	str	r1, [r7, #8]
 801c5f2:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801c5f4:	f04f 0300 	mov.w	r3, #0
 801c5f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801c5fa:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801c5fe:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	ed93 7a03 	vldr	s14, [r3, #12]
 801c606:	68bb      	ldr	r3, [r7, #8]
 801c608:	edd3 7a03 	vldr	s15, [r3, #12]
 801c60c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801c610:	ee16 0a90 	vmov	r0, s13
 801c614:	f7e3 ffa2 	bl	800055c <__aeabi_f2d>
 801c618:	4602      	mov	r2, r0
 801c61a:	460b      	mov	r3, r1
 801c61c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801c620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c624:	68f9      	ldr	r1, [r7, #12]
 801c626:	4618      	mov	r0, r3
 801c628:	f7ff fa25 	bl	801ba76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801c62c:	f107 0310 	add.w	r3, r7, #16
 801c630:	68b9      	ldr	r1, [r7, #8]
 801c632:	4618      	mov	r0, r3
 801c634:	f7ff fa1f 	bl	801ba76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	f103 0214 	add.w	r2, r3, #20
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	3318      	adds	r3, #24
 801c642:	4619      	mov	r1, r3
 801c644:	4610      	mov	r0, r2
 801c646:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801c64a:	f7fe fcc5 	bl	801afd8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801c64e:	f7fe fe8c 	bl	801b36a <_ZNSt14numeric_limitsIhE3minEv>
 801c652:	4603      	mov	r3, r0
 801c654:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801c656:	68bb      	ldr	r3, [r7, #8]
 801c658:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801c65a:	68bb      	ldr	r3, [r7, #8]
 801c65c:	edd3 7a03 	vldr	s15, [r3, #12]
 801c660:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801c664:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c668:	eeb0 0a66 	vmov.f32	s0, s13
 801c66c:	f004 fcd2 	bl	8021014 <roundf>
 801c670:	eef0 7a40 	vmov.f32	s15, s0
 801c674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c678:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801c67c:	4423      	add	r3, r4
 801c67e:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801c680:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801c684:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c688:	4611      	mov	r1, r2
 801c68a:	4618      	mov	r0, r3
 801c68c:	f7ff f944 	bl	801b918 <_ZSt3maxIlERKT_S2_S2_>
 801c690:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801c692:	681a      	ldr	r2, [r3, #0]
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801c698:	f7ff fa14 	bl	801bac4 <_ZNSt14numeric_limitsIfE8infinityEv>
 801c69c:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801c6a0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801c6a4:	eef4 7a47 	vcmp.f32	s15, s14
 801c6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6ac:	d103      	bne.n	801c6b6 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801c6ae:	f7fe fe64 	bl	801b37a <_ZNSt14numeric_limitsIhE3maxEv>
 801c6b2:	4603      	mov	r3, r0
 801c6b4:	e022      	b.n	801c6fc <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801c6b6:	f7fe fe60 	bl	801b37a <_ZNSt14numeric_limitsIhE3maxEv>
 801c6ba:	4603      	mov	r3, r0
 801c6bc:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801c6be:	68bb      	ldr	r3, [r7, #8]
 801c6c0:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801c6c2:	68bb      	ldr	r3, [r7, #8]
 801c6c4:	edd3 7a03 	vldr	s15, [r3, #12]
 801c6c8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801c6cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c6d0:	eeb0 0a66 	vmov.f32	s0, s13
 801c6d4:	f004 fc9e 	bl	8021014 <roundf>
 801c6d8:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801c6dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c6e0:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 801c6e4:	4423      	add	r3, r4
 801c6e6:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801c6e8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801c6ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c6f0:	4611      	mov	r1, r2
 801c6f2:	4618      	mov	r0, r3
 801c6f4:	f7ff f8fc 	bl	801b8f0 <_ZSt3minIlERKT_S2_S2_>
 801c6f8:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801c6fa:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801c6fc:	687a      	ldr	r2, [r7, #4]
 801c6fe:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	691a      	ldr	r2, [r3, #16]
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 801c708:	68bb      	ldr	r3, [r7, #8]
 801c70a:	691a      	ldr	r2, [r3, #16]
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801c710:	f107 0310 	add.w	r3, r7, #16
 801c714:	4618      	mov	r0, r3
 801c716:	f7ff f934 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801c71a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c71e:	4618      	mov	r0, r3
 801c720:	f7ff f92f 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801c724:	bf00      	nop
 801c726:	3764      	adds	r7, #100	; 0x64
 801c728:	46bd      	mov	sp, r7
 801c72a:	bd90      	pop	{r4, r7, pc}

0801c72c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801c72c:	b580      	push	{r7, lr}
 801c72e:	b082      	sub	sp, #8
 801c730:	af00      	add	r7, sp, #0
 801c732:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	2b00      	cmp	r3, #0
 801c738:	d101      	bne.n	801c73e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 801c73a:	f006 ff9f 	bl	802367c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	681b      	ldr	r3, [r3, #0]
}
 801c742:	4618      	mov	r0, r3
 801c744:	3708      	adds	r7, #8
 801c746:	46bd      	mov	sp, r7
 801c748:	bd80      	pop	{r7, pc}

0801c74a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801c74a:	b480      	push	{r7}
 801c74c:	b083      	sub	sp, #12
 801c74e:	af00      	add	r7, sp, #0
 801c750:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	2b00      	cmp	r3, #0
 801c756:	d002      	beq.n	801c75e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	e000      	b.n	801c760 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 801c75e:	2300      	movs	r3, #0
}
 801c760:	4618      	mov	r0, r3
 801c762:	370c      	adds	r7, #12
 801c764:	46bd      	mov	sp, r7
 801c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c76a:	4770      	bx	lr

0801c76c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801c76c:	b580      	push	{r7, lr}
 801c76e:	b082      	sub	sp, #8
 801c770:	af00      	add	r7, sp, #0
 801c772:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801c774:	687b      	ldr	r3, [r7, #4]
 801c776:	2b00      	cmp	r3, #0
 801c778:	d101      	bne.n	801c77e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 801c77a:	f006 ff7f 	bl	802367c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	681b      	ldr	r3, [r3, #0]
}
 801c782:	4618      	mov	r0, r3
 801c784:	3708      	adds	r7, #8
 801c786:	46bd      	mov	sp, r7
 801c788:	bd80      	pop	{r7, pc}

0801c78a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801c78a:	b480      	push	{r7}
 801c78c:	b083      	sub	sp, #12
 801c78e:	af00      	add	r7, sp, #0
 801c790:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	2b00      	cmp	r3, #0
 801c796:	d002      	beq.n	801c79e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	681b      	ldr	r3, [r3, #0]
 801c79c:	e000      	b.n	801c7a0 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 801c79e:	2300      	movs	r3, #0
}
 801c7a0:	4618      	mov	r0, r3
 801c7a2:	370c      	adds	r7, #12
 801c7a4:	46bd      	mov	sp, r7
 801c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7aa:	4770      	bx	lr

0801c7ac <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801c7ac:	b590      	push	{r4, r7, lr}
 801c7ae:	b089      	sub	sp, #36	; 0x24
 801c7b0:	af00      	add	r7, sp, #0
 801c7b2:	60f8      	str	r0, [r7, #12]
 801c7b4:	60b9      	str	r1, [r7, #8]
 801c7b6:	607a      	str	r2, [r7, #4]
 801c7b8:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801c7ba:	6879      	ldr	r1, [r7, #4]
 801c7bc:	68b8      	ldr	r0, [r7, #8]
 801c7be:	f7ff fa5e 	bl	801bc7e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801c7c2:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	61fb      	str	r3, [r7, #28]
 801c7c8:	69fa      	ldr	r2, [r7, #28]
 801c7ca:	69bb      	ldr	r3, [r7, #24]
 801c7cc:	429a      	cmp	r2, r3
 801c7ce:	da35      	bge.n	801c83c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 801c7d0:	69fb      	ldr	r3, [r7, #28]
 801c7d2:	683a      	ldr	r2, [r7, #0]
 801c7d4:	4413      	add	r3, r2
 801c7d6:	f993 3000 	ldrsb.w	r3, [r3]
 801c7da:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	68db      	ldr	r3, [r3, #12]
 801c7e4:	697a      	ldr	r2, [r7, #20]
 801c7e6:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 801c7e8:	68fb      	ldr	r3, [r7, #12]
 801c7ea:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801c7f0:	461a      	mov	r2, r3
 801c7f2:	f7ff fa79 	bl	801bce8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801c7f6:	4603      	mov	r3, r0
        data.params.output_offset +
 801c7f8:	4423      	add	r3, r4
    int32_t clamped =
 801c7fa:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	3304      	adds	r3, #4
 801c800:	f107 0210 	add.w	r2, r7, #16
 801c804:	4611      	mov	r1, r2
 801c806:	4618      	mov	r0, r3
 801c808:	f7ff f886 	bl	801b918 <_ZSt3maxIlERKT_S2_S2_>
 801c80c:	4603      	mov	r3, r0
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801c812:	68fb      	ldr	r3, [r7, #12]
 801c814:	3308      	adds	r3, #8
 801c816:	f107 0210 	add.w	r2, r7, #16
 801c81a:	4611      	mov	r1, r2
 801c81c:	4618      	mov	r0, r3
 801c81e:	f7ff f867 	bl	801b8f0 <_ZSt3minIlERKT_S2_S2_>
 801c822:	4603      	mov	r3, r0
 801c824:	681b      	ldr	r3, [r3, #0]
 801c826:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 801c828:	6939      	ldr	r1, [r7, #16]
 801c82a:	69fb      	ldr	r3, [r7, #28]
 801c82c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c82e:	4413      	add	r3, r2
 801c830:	b24a      	sxtb	r2, r1
 801c832:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801c834:	69fb      	ldr	r3, [r7, #28]
 801c836:	3301      	adds	r3, #1
 801c838:	61fb      	str	r3, [r7, #28]
 801c83a:	e7c5      	b.n	801c7c8 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801c83c:	bf00      	nop
 801c83e:	3724      	adds	r7, #36	; 0x24
 801c840:	46bd      	mov	sp, r7
 801c842:	bd90      	pop	{r4, r7, pc}

0801c844 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801c844:	b580      	push	{r7, lr}
 801c846:	b082      	sub	sp, #8
 801c848:	af00      	add	r7, sp, #0
 801c84a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d101      	bne.n	801c856 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 801c852:	f006 ff13 	bl	802367c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	681b      	ldr	r3, [r3, #0]
}
 801c85a:	4618      	mov	r0, r3
 801c85c:	3708      	adds	r7, #8
 801c85e:	46bd      	mov	sp, r7
 801c860:	bd80      	pop	{r7, pc}

0801c862 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801c862:	b480      	push	{r7}
 801c864:	b083      	sub	sp, #12
 801c866:	af00      	add	r7, sp, #0
 801c868:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d002      	beq.n	801c876 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	e000      	b.n	801c878 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 801c876:	2300      	movs	r3, #0
}
 801c878:	4618      	mov	r0, r3
 801c87a:	370c      	adds	r7, #12
 801c87c:	46bd      	mov	sp, r7
 801c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c882:	4770      	bx	lr

0801c884 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801c884:	b590      	push	{r4, r7, lr}
 801c886:	b089      	sub	sp, #36	; 0x24
 801c888:	af00      	add	r7, sp, #0
 801c88a:	60f8      	str	r0, [r7, #12]
 801c88c:	60b9      	str	r1, [r7, #8]
 801c88e:	607a      	str	r2, [r7, #4]
 801c890:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801c892:	6879      	ldr	r1, [r7, #4]
 801c894:	68b8      	ldr	r0, [r7, #8]
 801c896:	f7ff f9f2 	bl	801bc7e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801c89a:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801c89c:	2300      	movs	r3, #0
 801c89e:	61fb      	str	r3, [r7, #28]
 801c8a0:	69fa      	ldr	r2, [r7, #28]
 801c8a2:	69bb      	ldr	r3, [r7, #24]
 801c8a4:	429a      	cmp	r2, r3
 801c8a6:	da34      	bge.n	801c912 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 801c8a8:	69fb      	ldr	r3, [r7, #28]
 801c8aa:	683a      	ldr	r2, [r7, #0]
 801c8ac:	4413      	add	r3, r2
 801c8ae:	781b      	ldrb	r3, [r3, #0]
 801c8b0:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801c8b2:	68fb      	ldr	r3, [r7, #12]
 801c8b4:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801c8b6:	68fb      	ldr	r3, [r7, #12]
 801c8b8:	68db      	ldr	r3, [r3, #12]
 801c8ba:	697a      	ldr	r2, [r7, #20]
 801c8bc:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 801c8be:	68fb      	ldr	r3, [r7, #12]
 801c8c0:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801c8c6:	461a      	mov	r2, r3
 801c8c8:	f7ff fa0e 	bl	801bce8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801c8cc:	4603      	mov	r3, r0
        data.params.output_offset +
 801c8ce:	4423      	add	r3, r4
    int32_t clamped =
 801c8d0:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801c8d2:	68fb      	ldr	r3, [r7, #12]
 801c8d4:	3304      	adds	r3, #4
 801c8d6:	f107 0210 	add.w	r2, r7, #16
 801c8da:	4611      	mov	r1, r2
 801c8dc:	4618      	mov	r0, r3
 801c8de:	f7ff f81b 	bl	801b918 <_ZSt3maxIlERKT_S2_S2_>
 801c8e2:	4603      	mov	r3, r0
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801c8e8:	68fb      	ldr	r3, [r7, #12]
 801c8ea:	3308      	adds	r3, #8
 801c8ec:	f107 0210 	add.w	r2, r7, #16
 801c8f0:	4611      	mov	r1, r2
 801c8f2:	4618      	mov	r0, r3
 801c8f4:	f7fe fffc 	bl	801b8f0 <_ZSt3minIlERKT_S2_S2_>
 801c8f8:	4603      	mov	r3, r0
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 801c8fe:	6939      	ldr	r1, [r7, #16]
 801c900:	69fb      	ldr	r3, [r7, #28]
 801c902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c904:	4413      	add	r3, r2
 801c906:	b2ca      	uxtb	r2, r1
 801c908:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801c90a:	69fb      	ldr	r3, [r7, #28]
 801c90c:	3301      	adds	r3, #1
 801c90e:	61fb      	str	r3, [r7, #28]
 801c910:	e7c6      	b.n	801c8a0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801c912:	bf00      	nop
 801c914:	3724      	adds	r7, #36	; 0x24
 801c916:	46bd      	mov	sp, r7
 801c918:	bd90      	pop	{r4, r7, pc}

0801c91a <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 801c91a:	b5b0      	push	{r4, r5, r7, lr}
 801c91c:	b088      	sub	sp, #32
 801c91e:	af00      	add	r7, sp, #0
 801c920:	ed87 0a03 	vstr	s0, [r7, #12]
 801c924:	edc7 0a02 	vstr	s1, [r7, #8]
 801c928:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 801c92a:	ed97 7a03 	vldr	s14, [r7, #12]
 801c92e:	edd7 7a02 	vldr	s15, [r7, #8]
 801c932:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c936:	ee16 0a90 	vmov	r0, s13
 801c93a:	f7e3 fe0f 	bl	800055c <__aeabi_f2d>
 801c93e:	4602      	mov	r2, r0
 801c940:	460b      	mov	r3, r1
 801c942:	ec43 2b10 	vmov	d0, r2, r3
 801c946:	f004 fa6b 	bl	8020e20 <round>
 801c94a:	ec55 4b10 	vmov	r4, r5, d0
 801c94e:	6878      	ldr	r0, [r7, #4]
 801c950:	f7e3 fdf2 	bl	8000538 <__aeabi_i2d>
 801c954:	4602      	mov	r2, r0
 801c956:	460b      	mov	r3, r1
 801c958:	4620      	mov	r0, r4
 801c95a:	4629      	mov	r1, r5
 801c95c:	f7e3 fca0 	bl	80002a0 <__adddf3>
 801c960:	4602      	mov	r2, r0
 801c962:	460b      	mov	r3, r1
 801c964:	4610      	mov	r0, r2
 801c966:	4619      	mov	r1, r3
 801c968:	f7e4 f900 	bl	8000b6c <__aeabi_d2iz>
 801c96c:	4603      	mov	r3, r0
 801c96e:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801c970:	f7fe fcea 	bl	801b348 <_ZNSt14numeric_limitsIaE3minEv>
 801c974:	4603      	mov	r3, r0
 801c976:	61bb      	str	r3, [r7, #24]
 801c978:	f107 0214 	add.w	r2, r7, #20
 801c97c:	f107 0318 	add.w	r3, r7, #24
 801c980:	4611      	mov	r1, r2
 801c982:	4618      	mov	r0, r3
 801c984:	f7fe ffc8 	bl	801b918 <_ZSt3maxIlERKT_S2_S2_>
 801c988:	4603      	mov	r3, r0
  result =
 801c98a:	681b      	ldr	r3, [r3, #0]
 801c98c:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801c98e:	f7fe fce4 	bl	801b35a <_ZNSt14numeric_limitsIaE3maxEv>
 801c992:	4603      	mov	r3, r0
 801c994:	61fb      	str	r3, [r7, #28]
 801c996:	f107 0214 	add.w	r2, r7, #20
 801c99a:	f107 031c 	add.w	r3, r7, #28
 801c99e:	4611      	mov	r1, r2
 801c9a0:	4618      	mov	r0, r3
 801c9a2:	f7fe ffa5 	bl	801b8f0 <_ZSt3minIlERKT_S2_S2_>
 801c9a6:	4603      	mov	r3, r0
  result =
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	617b      	str	r3, [r7, #20]
  return result;
 801c9ac:	697b      	ldr	r3, [r7, #20]
 801c9ae:	b25b      	sxtb	r3, r3
}
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	3720      	adds	r7, #32
 801c9b4:	46bd      	mov	sp, r7
 801c9b6:	bdb0      	pop	{r4, r5, r7, pc}

0801c9b8 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 801c9b8:	b5b0      	push	{r4, r5, r7, lr}
 801c9ba:	b088      	sub	sp, #32
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	ed87 0a03 	vstr	s0, [r7, #12]
 801c9c2:	edc7 0a02 	vstr	s1, [r7, #8]
 801c9c6:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 801c9c8:	ed97 7a03 	vldr	s14, [r7, #12]
 801c9cc:	edd7 7a02 	vldr	s15, [r7, #8]
 801c9d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c9d4:	ee16 0a90 	vmov	r0, s13
 801c9d8:	f7e3 fdc0 	bl	800055c <__aeabi_f2d>
 801c9dc:	4602      	mov	r2, r0
 801c9de:	460b      	mov	r3, r1
 801c9e0:	ec43 2b10 	vmov	d0, r2, r3
 801c9e4:	f004 fa1c 	bl	8020e20 <round>
 801c9e8:	ec55 4b10 	vmov	r4, r5, d0
 801c9ec:	6878      	ldr	r0, [r7, #4]
 801c9ee:	f7e3 fda3 	bl	8000538 <__aeabi_i2d>
 801c9f2:	4602      	mov	r2, r0
 801c9f4:	460b      	mov	r3, r1
 801c9f6:	4620      	mov	r0, r4
 801c9f8:	4629      	mov	r1, r5
 801c9fa:	f7e3 fc51 	bl	80002a0 <__adddf3>
 801c9fe:	4602      	mov	r2, r0
 801ca00:	460b      	mov	r3, r1
 801ca02:	4610      	mov	r0, r2
 801ca04:	4619      	mov	r1, r3
 801ca06:	f7e4 f8b1 	bl	8000b6c <__aeabi_d2iz>
 801ca0a:	4603      	mov	r3, r0
 801ca0c:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801ca0e:	f7fe fcac 	bl	801b36a <_ZNSt14numeric_limitsIhE3minEv>
 801ca12:	4603      	mov	r3, r0
 801ca14:	61bb      	str	r3, [r7, #24]
 801ca16:	f107 0214 	add.w	r2, r7, #20
 801ca1a:	f107 0318 	add.w	r3, r7, #24
 801ca1e:	4611      	mov	r1, r2
 801ca20:	4618      	mov	r0, r3
 801ca22:	f7fe ff79 	bl	801b918 <_ZSt3maxIlERKT_S2_S2_>
 801ca26:	4603      	mov	r3, r0
  result =
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801ca2c:	f7fe fca5 	bl	801b37a <_ZNSt14numeric_limitsIhE3maxEv>
 801ca30:	4603      	mov	r3, r0
 801ca32:	61fb      	str	r3, [r7, #28]
 801ca34:	f107 0214 	add.w	r2, r7, #20
 801ca38:	f107 031c 	add.w	r3, r7, #28
 801ca3c:	4611      	mov	r1, r2
 801ca3e:	4618      	mov	r0, r3
 801ca40:	f7fe ff56 	bl	801b8f0 <_ZSt3minIlERKT_S2_S2_>
 801ca44:	4603      	mov	r3, r0
  result =
 801ca46:	681b      	ldr	r3, [r3, #0]
 801ca48:	617b      	str	r3, [r7, #20]
  return result;
 801ca4a:	697b      	ldr	r3, [r7, #20]
 801ca4c:	b2db      	uxtb	r3, r3
}
 801ca4e:	4618      	mov	r0, r3
 801ca50:	3720      	adds	r7, #32
 801ca52:	46bd      	mov	sp, r7
 801ca54:	bdb0      	pop	{r4, r5, r7, pc}

0801ca56 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 801ca56:	b580      	push	{r7, lr}
 801ca58:	b088      	sub	sp, #32
 801ca5a:	af00      	add	r7, sp, #0
 801ca5c:	60ba      	str	r2, [r7, #8]
 801ca5e:	607b      	str	r3, [r7, #4]
 801ca60:	4603      	mov	r3, r0
 801ca62:	73fb      	strb	r3, [r7, #15]
 801ca64:	460b      	mov	r3, r1
 801ca66:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801ca68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ca6a:	68b8      	ldr	r0, [r7, #8]
 801ca6c:	f7ff f907 	bl	801bc7e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801ca70:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801ca72:	2300      	movs	r3, #0
 801ca74:	61fb      	str	r3, [r7, #28]
 801ca76:	69fa      	ldr	r2, [r7, #28]
 801ca78:	69bb      	ldr	r3, [r7, #24]
 801ca7a:	429a      	cmp	r2, r3
 801ca7c:	da26      	bge.n	801cacc <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 801ca7e:	69fb      	ldr	r3, [r7, #28]
 801ca80:	687a      	ldr	r2, [r7, #4]
 801ca82:	4413      	add	r3, r2
 801ca84:	781b      	ldrb	r3, [r3, #0]
 801ca86:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 801ca88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca8c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ca90:	429a      	cmp	r2, r3
 801ca92:	dd04      	ble.n	801ca9e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 801ca94:	f107 030e 	add.w	r3, r7, #14
 801ca98:	f993 3000 	ldrsb.w	r3, [r3]
 801ca9c:	e00c      	b.n	801cab8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801ca9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801caa2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801caa6:	429a      	cmp	r2, r3
 801caa8:	da04      	bge.n	801cab4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 801caaa:	f107 030f 	add.w	r3, r7, #15
 801caae:	f993 3000 	ldrsb.w	r3, [r3]
 801cab2:	e001      	b.n	801cab8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801cab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cab8:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 801caba:	69fb      	ldr	r3, [r7, #28]
 801cabc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cabe:	4413      	add	r3, r2
 801cac0:	7dba      	ldrb	r2, [r7, #22]
 801cac2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801cac4:	69fb      	ldr	r3, [r7, #28]
 801cac6:	3301      	adds	r3, #1
 801cac8:	61fb      	str	r3, [r7, #28]
 801caca:	e7d4      	b.n	801ca76 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 801cacc:	bf00      	nop
 801cace:	3720      	adds	r7, #32
 801cad0:	46bd      	mov	sp, r7
 801cad2:	bd80      	pop	{r7, pc}

0801cad4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 801cad4:	b580      	push	{r7, lr}
 801cad6:	b088      	sub	sp, #32
 801cad8:	af00      	add	r7, sp, #0
 801cada:	60ba      	str	r2, [r7, #8]
 801cadc:	607b      	str	r3, [r7, #4]
 801cade:	4603      	mov	r3, r0
 801cae0:	73fb      	strb	r3, [r7, #15]
 801cae2:	460b      	mov	r3, r1
 801cae4:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801cae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cae8:	68b8      	ldr	r0, [r7, #8]
 801caea:	f7ff f8c8 	bl	801bc7e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801caee:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801caf0:	2300      	movs	r3, #0
 801caf2:	61fb      	str	r3, [r7, #28]
 801caf4:	69fa      	ldr	r2, [r7, #28]
 801caf6:	69bb      	ldr	r3, [r7, #24]
 801caf8:	429a      	cmp	r2, r3
 801cafa:	da1f      	bge.n	801cb3c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 801cafc:	69fb      	ldr	r3, [r7, #28]
 801cafe:	687a      	ldr	r2, [r7, #4]
 801cb00:	4413      	add	r3, r2
 801cb02:	781b      	ldrb	r3, [r3, #0]
 801cb04:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 801cb06:	7bbb      	ldrb	r3, [r7, #14]
 801cb08:	7dfa      	ldrb	r2, [r7, #23]
 801cb0a:	429a      	cmp	r2, r3
 801cb0c:	d903      	bls.n	801cb16 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 801cb0e:	f107 030e 	add.w	r3, r7, #14
 801cb12:	781b      	ldrb	r3, [r3, #0]
 801cb14:	e008      	b.n	801cb28 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 801cb16:	7bfb      	ldrb	r3, [r7, #15]
 801cb18:	7dfa      	ldrb	r2, [r7, #23]
 801cb1a:	429a      	cmp	r2, r3
 801cb1c:	d203      	bcs.n	801cb26 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 801cb1e:	f107 030f 	add.w	r3, r7, #15
 801cb22:	781b      	ldrb	r3, [r3, #0]
 801cb24:	e000      	b.n	801cb28 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 801cb26:	7dfb      	ldrb	r3, [r7, #23]
 801cb28:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 801cb2a:	69fb      	ldr	r3, [r7, #28]
 801cb2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cb2e:	4413      	add	r3, r2
 801cb30:	7dba      	ldrb	r2, [r7, #22]
 801cb32:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801cb34:	69fb      	ldr	r3, [r7, #28]
 801cb36:	3301      	adds	r3, #1
 801cb38:	61fb      	str	r3, [r7, #28]
 801cb3a:	e7db      	b.n	801caf4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 801cb3c:	bf00      	nop
 801cb3e:	3720      	adds	r7, #32
 801cb40:	46bd      	mov	sp, r7
 801cb42:	bd80      	pop	{r7, pc}

0801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 801cb44:	b480      	push	{r7}
 801cb46:	b083      	sub	sp, #12
 801cb48:	af00      	add	r7, sp, #0
 801cb4a:	6078      	str	r0, [r7, #4]
  return x;
 801cb4c:	687b      	ldr	r3, [r7, #4]
}
 801cb4e:	4618      	mov	r0, r3
 801cb50:	370c      	adds	r7, #12
 801cb52:	46bd      	mov	sp, r7
 801cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb58:	4770      	bx	lr

0801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 801cb5a:	b480      	push	{r7}
 801cb5c:	b083      	sub	sp, #12
 801cb5e:	af00      	add	r7, sp, #0
 801cb60:	6078      	str	r0, [r7, #4]
 801cb62:	6039      	str	r1, [r7, #0]
  return a & b;
 801cb64:	687a      	ldr	r2, [r7, #4]
 801cb66:	683b      	ldr	r3, [r7, #0]
 801cb68:	4013      	ands	r3, r2
}
 801cb6a:	4618      	mov	r0, r3
 801cb6c:	370c      	adds	r7, #12
 801cb6e:	46bd      	mov	sp, r7
 801cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb74:	4770      	bx	lr

0801cb76 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 801cb76:	b480      	push	{r7}
 801cb78:	b083      	sub	sp, #12
 801cb7a:	af00      	add	r7, sp, #0
 801cb7c:	6078      	str	r0, [r7, #4]
 801cb7e:	6039      	str	r1, [r7, #0]
  return a >> offset;
 801cb80:	687a      	ldr	r2, [r7, #4]
 801cb82:	683b      	ldr	r3, [r7, #0]
 801cb84:	fa42 f303 	asr.w	r3, r2, r3
}
 801cb88:	4618      	mov	r0, r3
 801cb8a:	370c      	adds	r7, #12
 801cb8c:	46bd      	mov	sp, r7
 801cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb92:	4770      	bx	lr

0801cb94 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 801cb94:	b580      	push	{r7, lr}
 801cb96:	b082      	sub	sp, #8
 801cb98:	af00      	add	r7, sp, #0
 801cb9a:	6078      	str	r0, [r7, #4]
 801cb9c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 801cb9e:	687a      	ldr	r2, [r7, #4]
 801cba0:	683b      	ldr	r3, [r7, #0]
 801cba2:	429a      	cmp	r2, r3
 801cba4:	bfb4      	ite	lt
 801cba6:	2301      	movlt	r3, #1
 801cba8:	2300      	movge	r3, #0
 801cbaa:	b2db      	uxtb	r3, r3
 801cbac:	4618      	mov	r0, r3
 801cbae:	f000 f827 	bl	801cc00 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801cbb2:	4603      	mov	r3, r0
}
 801cbb4:	4618      	mov	r0, r3
 801cbb6:	3708      	adds	r7, #8
 801cbb8:	46bd      	mov	sp, r7
 801cbba:	bd80      	pop	{r7, pc}

0801cbbc <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 801cbbc:	b480      	push	{r7}
 801cbbe:	b083      	sub	sp, #12
 801cbc0:	af00      	add	r7, sp, #0
 801cbc2:	6078      	str	r0, [r7, #4]
 801cbc4:	6039      	str	r1, [r7, #0]
  return a + b;
 801cbc6:	687a      	ldr	r2, [r7, #4]
 801cbc8:	683b      	ldr	r3, [r7, #0]
 801cbca:	4413      	add	r3, r2
}
 801cbcc:	4618      	mov	r0, r3
 801cbce:	370c      	adds	r7, #12
 801cbd0:	46bd      	mov	sp, r7
 801cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbd6:	4770      	bx	lr

0801cbd8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 801cbd8:	b580      	push	{r7, lr}
 801cbda:	b082      	sub	sp, #8
 801cbdc:	af00      	add	r7, sp, #0
 801cbde:	6078      	str	r0, [r7, #4]
 801cbe0:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 801cbe2:	687a      	ldr	r2, [r7, #4]
 801cbe4:	683b      	ldr	r3, [r7, #0]
 801cbe6:	429a      	cmp	r2, r3
 801cbe8:	bfcc      	ite	gt
 801cbea:	2301      	movgt	r3, #1
 801cbec:	2300      	movle	r3, #0
 801cbee:	b2db      	uxtb	r3, r3
 801cbf0:	4618      	mov	r0, r3
 801cbf2:	f000 f805 	bl	801cc00 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801cbf6:	4603      	mov	r3, r0
}
 801cbf8:	4618      	mov	r0, r3
 801cbfa:	3708      	adds	r7, #8
 801cbfc:	46bd      	mov	sp, r7
 801cbfe:	bd80      	pop	{r7, pc}

0801cc00 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 801cc00:	b580      	push	{r7, lr}
 801cc02:	b082      	sub	sp, #8
 801cc04:	af00      	add	r7, sp, #0
 801cc06:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	d004      	beq.n	801cc18 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 801cc0e:	2000      	movs	r0, #0
 801cc10:	f000 f807 	bl	801cc22 <_ZN8gemmlowp6BitNotIlEET_S1_>
 801cc14:	4603      	mov	r3, r0
 801cc16:	e000      	b.n	801cc1a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 801cc18:	2300      	movs	r3, #0
}
 801cc1a:	4618      	mov	r0, r3
 801cc1c:	3708      	adds	r7, #8
 801cc1e:	46bd      	mov	sp, r7
 801cc20:	bd80      	pop	{r7, pc}

0801cc22 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 801cc22:	b480      	push	{r7}
 801cc24:	b083      	sub	sp, #12
 801cc26:	af00      	add	r7, sp, #0
 801cc28:	6078      	str	r0, [r7, #4]
  return ~a;
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	43db      	mvns	r3, r3
}
 801cc2e:	4618      	mov	r0, r3
 801cc30:	370c      	adds	r7, #12
 801cc32:	46bd      	mov	sp, r7
 801cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc38:	4770      	bx	lr

0801cc3a <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 801cc3a:	b480      	push	{r7}
 801cc3c:	b083      	sub	sp, #12
 801cc3e:	af00      	add	r7, sp, #0
 801cc40:	6078      	str	r0, [r7, #4]
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	681b      	ldr	r3, [r3, #0]
 801cc46:	681b      	ldr	r3, [r3, #0]
 801cc48:	4618      	mov	r0, r3
 801cc4a:	370c      	adds	r7, #12
 801cc4c:	46bd      	mov	sp, r7
 801cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc52:	4770      	bx	lr

0801cc54 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 801cc54:	b480      	push	{r7}
 801cc56:	b083      	sub	sp, #12
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	6078      	str	r0, [r7, #4]
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	685b      	ldr	r3, [r3, #4]
 801cc60:	681b      	ldr	r3, [r3, #0]
 801cc62:	4618      	mov	r0, r3
 801cc64:	370c      	adds	r7, #12
 801cc66:	46bd      	mov	sp, r7
 801cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc6c:	4770      	bx	lr

0801cc6e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801cc6e:	b580      	push	{r7, lr}
 801cc70:	b082      	sub	sp, #8
 801cc72:	af00      	add	r7, sp, #0
 801cc74:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d101      	bne.n	801cc80 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 801cc7c:	f006 fcfe 	bl	802367c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	681b      	ldr	r3, [r3, #0]
}
 801cc84:	4618      	mov	r0, r3
 801cc86:	3708      	adds	r7, #8
 801cc88:	46bd      	mov	sp, r7
 801cc8a:	bd80      	pop	{r7, pc}

0801cc8c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 801cc8c:	b590      	push	{r4, r7, lr}
 801cc8e:	b087      	sub	sp, #28
 801cc90:	af00      	add	r7, sp, #0
 801cc92:	60f8      	str	r0, [r7, #12]
 801cc94:	60b9      	str	r1, [r7, #8]
 801cc96:	607a      	str	r2, [r7, #4]
 801cc98:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 801cc9a:	68b9      	ldr	r1, [r7, #8]
 801cc9c:	68f8      	ldr	r0, [r7, #12]
 801cc9e:	f7fe ff93 	bl	801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801cca2:	4604      	mov	r4, r0
 801cca4:	6839      	ldr	r1, [r7, #0]
 801cca6:	6878      	ldr	r0, [r7, #4]
 801cca8:	f7fe ff8e 	bl	801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ccac:	4603      	mov	r3, r0
 801ccae:	429c      	cmp	r4, r3
 801ccb0:	d001      	beq.n	801ccb6 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 801ccb2:	f006 fce3 	bl	802367c <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 801ccb6:	68b9      	ldr	r1, [r7, #8]
 801ccb8:	68f8      	ldr	r0, [r7, #12]
 801ccba:	f7fe ff85 	bl	801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ccbe:	4603      	mov	r3, r0
 801ccc0:	613b      	str	r3, [r7, #16]
 801ccc2:	6839      	ldr	r1, [r7, #0]
 801ccc4:	6878      	ldr	r0, [r7, #4]
 801ccc6:	f7fe ff7f 	bl	801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ccca:	4603      	mov	r3, r0
 801cccc:	617b      	str	r3, [r7, #20]
 801ccce:	f107 0214 	add.w	r2, r7, #20
 801ccd2:	f107 0310 	add.w	r3, r7, #16
 801ccd6:	4611      	mov	r1, r2
 801ccd8:	4618      	mov	r0, r3
 801ccda:	f7fe fe09 	bl	801b8f0 <_ZSt3minIlERKT_S2_S2_>
 801ccde:	4603      	mov	r3, r0
 801cce0:	681b      	ldr	r3, [r3, #0]
}
 801cce2:	4618      	mov	r0, r3
 801cce4:	371c      	adds	r7, #28
 801cce6:	46bd      	mov	sp, r7
 801cce8:	bd90      	pop	{r4, r7, pc}

0801ccea <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801ccea:	b580      	push	{r7, lr}
 801ccec:	b082      	sub	sp, #8
 801ccee:	af00      	add	r7, sp, #0
 801ccf0:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d101      	bne.n	801ccfc <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 801ccf8:	f006 fcc0 	bl	802367c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	681b      	ldr	r3, [r3, #0]
}
 801cd00:	4618      	mov	r0, r3
 801cd02:	3708      	adds	r7, #8
 801cd04:	46bd      	mov	sp, r7
 801cd06:	bd80      	pop	{r7, pc}

0801cd08 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 801cd08:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801cd0c:	b090      	sub	sp, #64	; 0x40
 801cd0e:	af00      	add	r7, sp, #0
 801cd10:	61f8      	str	r0, [r7, #28]
 801cd12:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 801cd14:	69fb      	ldr	r3, [r7, #28]
 801cd16:	17da      	asrs	r2, r3, #31
 801cd18:	613b      	str	r3, [r7, #16]
 801cd1a:	617a      	str	r2, [r7, #20]
 801cd1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801cd20:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 801cd24:	69bb      	ldr	r3, [r7, #24]
 801cd26:	17da      	asrs	r2, r3, #31
 801cd28:	60bb      	str	r3, [r7, #8]
 801cd2a:	60fa      	str	r2, [r7, #12]
 801cd2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cd30:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 801cd34:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801cd38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801cd3c:	1886      	adds	r6, r0, r2
 801cd3e:	603e      	str	r6, [r7, #0]
 801cd40:	eb41 0303 	adc.w	r3, r1, r3
 801cd44:	607b      	str	r3, [r7, #4]
 801cd46:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cd4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 801cd4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	db04      	blt.n	801cd60 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 801cd56:	f04f 0201 	mov.w	r2, #1
 801cd5a:	f04f 0300 	mov.w	r3, #0
 801cd5e:	e003      	b.n	801cd68 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 801cd60:	f04f 32ff 	mov.w	r2, #4294967295
 801cd64:	f04f 33ff 	mov.w	r3, #4294967295
 801cd68:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 801cd6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801cd70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801cd74:	eb10 0802 	adds.w	r8, r0, r2
 801cd78:	eb41 0903 	adc.w	r9, r1, r3
 801cd7c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 801cd80:	2200      	movs	r2, #0
 801cd82:	469a      	mov	sl, r3
 801cd84:	4693      	mov	fp, r2
 801cd86:	eb1a 0408 	adds.w	r4, sl, r8
 801cd8a:	eb4b 0509 	adc.w	r5, fp, r9
 801cd8e:	f04f 0200 	mov.w	r2, #0
 801cd92:	f04f 0300 	mov.w	r3, #0
 801cd96:	0862      	lsrs	r2, r4, #1
 801cd98:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801cd9c:	106b      	asrs	r3, r5, #1
 801cd9e:	4613      	mov	r3, r2
}
 801cda0:	4618      	mov	r0, r3
 801cda2:	3740      	adds	r7, #64	; 0x40
 801cda4:	46bd      	mov	sp, r7
 801cda6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801cdaa:	4770      	bx	lr

0801cdac <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 801cdac:	b580      	push	{r7, lr}
 801cdae:	b084      	sub	sp, #16
 801cdb0:	af00      	add	r7, sp, #0
 801cdb2:	60f8      	str	r0, [r7, #12]
 801cdb4:	60b9      	str	r1, [r7, #8]
 801cdb6:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 801cdb8:	68fa      	ldr	r2, [r7, #12]
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	fa02 f303 	lsl.w	r3, r2, r3
 801cdc0:	68b9      	ldr	r1, [r7, #8]
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	f7fe fe8a 	bl	801badc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801cdc8:	4603      	mov	r3, r0
}
 801cdca:	4618      	mov	r0, r3
 801cdcc:	3710      	adds	r7, #16
 801cdce:	46bd      	mov	sp, r7
 801cdd0:	bd80      	pop	{r7, pc}

0801cdd2 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 801cdd2:	b580      	push	{r7, lr}
 801cdd4:	b088      	sub	sp, #32
 801cdd6:	af00      	add	r7, sp, #0
 801cdd8:	60f8      	str	r0, [r7, #12]
 801cdda:	60b9      	str	r1, [r7, #8]
 801cddc:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	4618      	mov	r0, r3
 801cde2:	f000 f821 	bl	801ce28 <_ZN6tflite17CountLeadingZerosImEEiT_>
 801cde6:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 801cde8:	68ba      	ldr	r2, [r7, #8]
 801cdea:	69fb      	ldr	r3, [r7, #28]
 801cdec:	1ad2      	subs	r2, r2, r3
 801cdee:	687b      	ldr	r3, [r7, #4]
 801cdf0:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 801cdf2:	68fa      	ldr	r2, [r7, #12]
 801cdf4:	69fb      	ldr	r3, [r7, #28]
 801cdf6:	fa02 f303 	lsl.w	r3, r2, r3
 801cdfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 801cdfe:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 801ce00:	69b8      	ldr	r0, [r7, #24]
 801ce02:	f000 f823 	bl	801ce4c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801ce06:	4603      	mov	r3, r0
 801ce08:	4618      	mov	r0, r3
 801ce0a:	f000 f831 	bl	801ce70 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 801ce0e:	4603      	mov	r3, r0
 801ce10:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 801ce12:	f107 0314 	add.w	r3, r7, #20
 801ce16:	4618      	mov	r0, r3
 801ce18:	f000 f88a 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801ce1c:	4603      	mov	r3, r0
 801ce1e:	681b      	ldr	r3, [r3, #0]
}
 801ce20:	4618      	mov	r0, r3
 801ce22:	3720      	adds	r7, #32
 801ce24:	46bd      	mov	sp, r7
 801ce26:	bd80      	pop	{r7, pc}

0801ce28 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 801ce28:	b480      	push	{r7}
 801ce2a:	b083      	sub	sp, #12
 801ce2c:	af00      	add	r7, sp, #0
 801ce2e:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d003      	beq.n	801ce3e <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 801ce36:	687b      	ldr	r3, [r7, #4]
 801ce38:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 801ce3c:	e000      	b.n	801ce40 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 801ce3e:	2320      	movs	r3, #32
}
 801ce40:	4618      	mov	r0, r3
 801ce42:	370c      	adds	r7, #12
 801ce44:	46bd      	mov	sp, r7
 801ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce4a:	4770      	bx	lr

0801ce4c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 801ce4c:	b580      	push	{r7, lr}
 801ce4e:	b084      	sub	sp, #16
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 801ce54:	f107 030c 	add.w	r3, r7, #12
 801ce58:	4618      	mov	r0, r3
 801ce5a:	f000 f869 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801ce5e:	4602      	mov	r2, r0
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	6013      	str	r3, [r2, #0]
    return retval;
 801ce64:	68fb      	ldr	r3, [r7, #12]
  }
 801ce66:	4618      	mov	r0, r3
 801ce68:	3710      	adds	r7, #16
 801ce6a:	46bd      	mov	sp, r7
 801ce6c:	bd80      	pop	{r7, pc}
	...

0801ce70 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 801ce70:	b580      	push	{r7, lr}
 801ce72:	b08a      	sub	sp, #40	; 0x28
 801ce74:	af00      	add	r7, sp, #0
 801ce76:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 801ce78:	f000 f879 	bl	801cf6e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801ce7c:	4603      	mov	r3, r0
 801ce7e:	4619      	mov	r1, r3
 801ce80:	6878      	ldr	r0, [r7, #4]
 801ce82:	f000 f87f 	bl	801cf84 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ce86:	4603      	mov	r3, r0
 801ce88:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 801ce8a:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 801ce8e:	f000 f8ab 	bl	801cfe8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801ce92:	4603      	mov	r3, r0
 801ce94:	4618      	mov	r0, r3
 801ce96:	f000 f893 	bl	801cfc0 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801ce9a:	4603      	mov	r3, r0
 801ce9c:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 801ce9e:	4823      	ldr	r0, [pc, #140]	; (801cf2c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801cea0:	f000 f8a2 	bl	801cfe8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801cea4:	4603      	mov	r3, r0
 801cea6:	4618      	mov	r0, r3
 801cea8:	f000 f88a 	bl	801cfc0 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801ceac:	4603      	mov	r3, r0
 801ceae:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 801ceb0:	69b9      	ldr	r1, [r7, #24]
 801ceb2:	6a38      	ldr	r0, [r7, #32]
 801ceb4:	f000 f8a5 	bl	801d002 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ceb8:	4603      	mov	r3, r0
 801ceba:	4619      	mov	r1, r3
 801cebc:	69f8      	ldr	r0, [r7, #28]
 801cebe:	f000 f8c2 	bl	801d046 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801cec2:	4603      	mov	r3, r0
 801cec4:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801cec6:	2300      	movs	r3, #0
 801cec8:	627b      	str	r3, [r7, #36]	; 0x24
 801ceca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cecc:	2b02      	cmp	r3, #2
 801cece:	dc21      	bgt.n	801cf14 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 801ced0:	6979      	ldr	r1, [r7, #20]
 801ced2:	6a38      	ldr	r0, [r7, #32]
 801ced4:	f000 f895 	bl	801d002 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ced8:	4603      	mov	r3, r0
 801ceda:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 801cedc:	f000 f8d1 	bl	801d082 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 801cee0:	4603      	mov	r3, r0
 801cee2:	6939      	ldr	r1, [r7, #16]
 801cee4:	4618      	mov	r0, r3
 801cee6:	f000 f8d5 	bl	801d094 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ceea:	4603      	mov	r3, r0
 801ceec:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 801ceee:	68f9      	ldr	r1, [r7, #12]
 801cef0:	6978      	ldr	r0, [r7, #20]
 801cef2:	f000 f8ed 	bl	801d0d0 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801cef6:	4603      	mov	r3, r0
 801cef8:	4618      	mov	r0, r3
 801cefa:	f000 f90b 	bl	801d114 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801cefe:	4603      	mov	r3, r0
 801cf00:	4619      	mov	r1, r3
 801cf02:	6978      	ldr	r0, [r7, #20]
 801cf04:	f000 f89f 	bl	801d046 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801cf08:	4603      	mov	r3, r0
 801cf0a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf0e:	3301      	adds	r3, #1
 801cf10:	627b      	str	r3, [r7, #36]	; 0x24
 801cf12:	e7da      	b.n	801ceca <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 801cf14:	6978      	ldr	r0, [r7, #20]
 801cf16:	f000 f917 	bl	801d148 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 801cf1a:	4603      	mov	r3, r0
 801cf1c:	4618      	mov	r0, r3
 801cf1e:	f000 f929 	bl	801d174 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801cf22:	4603      	mov	r3, r0
}
 801cf24:	4618      	mov	r0, r3
 801cf26:	3728      	adds	r7, #40	; 0x28
 801cf28:	46bd      	mov	sp, r7
 801cf2a:	bd80      	pop	{r7, pc}
 801cf2c:	c3c3c3c4 	.word	0xc3c3c3c4

0801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 801cf30:	b480      	push	{r7}
 801cf32:	b083      	sub	sp, #12
 801cf34:	af00      	add	r7, sp, #0
 801cf36:	6078      	str	r0, [r7, #4]
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	4618      	mov	r0, r3
 801cf3c:	370c      	adds	r7, #12
 801cf3e:	46bd      	mov	sp, r7
 801cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf44:	4770      	bx	lr

0801cf46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801cf46:	b590      	push	{r4, r7, lr}
 801cf48:	b085      	sub	sp, #20
 801cf4a:	af00      	add	r7, sp, #0
 801cf4c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801cf4e:	f107 030c 	add.w	r3, r7, #12
 801cf52:	4618      	mov	r0, r3
 801cf54:	f7ff ffec 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cf58:	4604      	mov	r4, r0
 801cf5a:	6878      	ldr	r0, [r7, #4]
 801cf5c:	f7ff fdf2 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801cf60:	4603      	mov	r3, r0
 801cf62:	6023      	str	r3, [r4, #0]
    return retval;
 801cf64:	68fb      	ldr	r3, [r7, #12]
  }
 801cf66:	4618      	mov	r0, r3
 801cf68:	3714      	adds	r7, #20
 801cf6a:	46bd      	mov	sp, r7
 801cf6c:	bd90      	pop	{r4, r7, pc}

0801cf6e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 801cf6e:	b580      	push	{r7, lr}
 801cf70:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801cf72:	f000 f927 	bl	801d1c4 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 801cf76:	4603      	mov	r3, r0
 801cf78:	4618      	mov	r0, r3
 801cf7a:	f7ff ffe4 	bl	801cf46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801cf7e:	4603      	mov	r3, r0
  }
 801cf80:	4618      	mov	r0, r3
 801cf82:	bd80      	pop	{r7, pc}

0801cf84 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 801cf84:	b590      	push	{r4, r7, lr}
 801cf86:	b083      	sub	sp, #12
 801cf88:	af00      	add	r7, sp, #0
 801cf8a:	6078      	str	r0, [r7, #4]
 801cf8c:	6039      	str	r1, [r7, #0]
 801cf8e:	1d3b      	adds	r3, r7, #4
 801cf90:	4618      	mov	r0, r3
 801cf92:	f7ff ffcd 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cf96:	4603      	mov	r3, r0
 801cf98:	681c      	ldr	r4, [r3, #0]
 801cf9a:	463b      	mov	r3, r7
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	f7ff ffc7 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cfa2:	4603      	mov	r3, r0
 801cfa4:	681b      	ldr	r3, [r3, #0]
 801cfa6:	4619      	mov	r1, r3
 801cfa8:	4620      	mov	r0, r4
 801cfaa:	f7ff fead 	bl	801cd08 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 801cfae:	4603      	mov	r3, r0
 801cfb0:	4618      	mov	r0, r3
 801cfb2:	f7ff ff4b 	bl	801ce4c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801cfb6:	4603      	mov	r3, r0
 801cfb8:	4618      	mov	r0, r3
 801cfba:	370c      	adds	r7, #12
 801cfbc:	46bd      	mov	sp, r7
 801cfbe:	bd90      	pop	{r4, r7, pc}

0801cfc0 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801cfc0:	b590      	push	{r4, r7, lr}
 801cfc2:	b085      	sub	sp, #20
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801cfc8:	f107 030c 	add.w	r3, r7, #12
 801cfcc:	4618      	mov	r0, r3
 801cfce:	f000 f900 	bl	801d1d2 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801cfd2:	4604      	mov	r4, r0
 801cfd4:	6878      	ldr	r0, [r7, #4]
 801cfd6:	f7ff fdb5 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801cfda:	4603      	mov	r3, r0
 801cfdc:	6023      	str	r3, [r4, #0]
    return retval;
 801cfde:	68fb      	ldr	r3, [r7, #12]
  }
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	3714      	adds	r7, #20
 801cfe4:	46bd      	mov	sp, r7
 801cfe6:	bd90      	pop	{r4, r7, pc}

0801cfe8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801cfe8:	b580      	push	{r7, lr}
 801cfea:	b082      	sub	sp, #8
 801cfec:	af00      	add	r7, sp, #0
 801cfee:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801cff0:	2100      	movs	r1, #0
 801cff2:	6878      	ldr	r0, [r7, #4]
 801cff4:	f7ff f9e2 	bl	801c3bc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801cff8:	4603      	mov	r3, r0
}
 801cffa:	4618      	mov	r0, r3
 801cffc:	3708      	adds	r7, #8
 801cffe:	46bd      	mov	sp, r7
 801d000:	bd80      	pop	{r7, pc}

0801d002 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801d002:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d004:	b085      	sub	sp, #20
 801d006:	af00      	add	r7, sp, #0
 801d008:	6078      	str	r0, [r7, #4]
 801d00a:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801d00c:	1d3b      	adds	r3, r7, #4
 801d00e:	4618      	mov	r0, r3
 801d010:	f7ff ff8e 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d014:	4603      	mov	r3, r0
 801d016:	681d      	ldr	r5, [r3, #0]
 801d018:	463b      	mov	r3, r7
 801d01a:	4618      	mov	r0, r3
 801d01c:	f000 f8d9 	bl	801d1d2 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d020:	4603      	mov	r3, r0
 801d022:	681e      	ldr	r6, [r3, #0]
 801d024:	f107 030c 	add.w	r3, r7, #12
 801d028:	4618      	mov	r0, r3
 801d02a:	f000 f8d2 	bl	801d1d2 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d02e:	4604      	mov	r4, r0
 801d030:	4631      	mov	r1, r6
 801d032:	4628      	mov	r0, r5
 801d034:	f7fe fd52 	bl	801badc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801d038:	4603      	mov	r3, r0
 801d03a:	6023      	str	r3, [r4, #0]
  return c;
 801d03c:	68fb      	ldr	r3, [r7, #12]
}
 801d03e:	4618      	mov	r0, r3
 801d040:	3714      	adds	r7, #20
 801d042:	46bd      	mov	sp, r7
 801d044:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d046 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801d046:	b590      	push	{r4, r7, lr}
 801d048:	b083      	sub	sp, #12
 801d04a:	af00      	add	r7, sp, #0
 801d04c:	6078      	str	r0, [r7, #4]
 801d04e:	6039      	str	r1, [r7, #0]
 801d050:	1d3b      	adds	r3, r7, #4
 801d052:	4618      	mov	r0, r3
 801d054:	f000 f8bd 	bl	801d1d2 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d058:	4603      	mov	r3, r0
 801d05a:	681c      	ldr	r4, [r3, #0]
 801d05c:	463b      	mov	r3, r7
 801d05e:	4618      	mov	r0, r3
 801d060:	f000 f8b7 	bl	801d1d2 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d064:	4603      	mov	r3, r0
 801d066:	681b      	ldr	r3, [r3, #0]
 801d068:	4619      	mov	r1, r3
 801d06a:	4620      	mov	r0, r4
 801d06c:	f7ff fda6 	bl	801cbbc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801d070:	4603      	mov	r3, r0
 801d072:	4618      	mov	r0, r3
 801d074:	f000 f8b8 	bl	801d1e8 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801d078:	4603      	mov	r3, r0
 801d07a:	4618      	mov	r0, r3
 801d07c:	370c      	adds	r7, #12
 801d07e:	46bd      	mov	sp, r7
 801d080:	bd90      	pop	{r4, r7, pc}

0801d082 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 801d082:	b580      	push	{r7, lr}
 801d084:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801d086:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801d08a:	f7ff ff99 	bl	801cfc0 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801d08e:	4603      	mov	r3, r0
  }
 801d090:	4618      	mov	r0, r3
 801d092:	bd80      	pop	{r7, pc}

0801d094 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801d094:	b590      	push	{r4, r7, lr}
 801d096:	b083      	sub	sp, #12
 801d098:	af00      	add	r7, sp, #0
 801d09a:	6078      	str	r0, [r7, #4]
 801d09c:	6039      	str	r1, [r7, #0]
 801d09e:	1d3b      	adds	r3, r7, #4
 801d0a0:	4618      	mov	r0, r3
 801d0a2:	f000 f896 	bl	801d1d2 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d0a6:	4603      	mov	r3, r0
 801d0a8:	681c      	ldr	r4, [r3, #0]
 801d0aa:	463b      	mov	r3, r7
 801d0ac:	4618      	mov	r0, r3
 801d0ae:	f000 f890 	bl	801d1d2 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d0b2:	4603      	mov	r3, r0
 801d0b4:	681b      	ldr	r3, [r3, #0]
 801d0b6:	4619      	mov	r1, r3
 801d0b8:	4620      	mov	r0, r4
 801d0ba:	f000 f875 	bl	801d1a8 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801d0be:	4603      	mov	r3, r0
 801d0c0:	4618      	mov	r0, r3
 801d0c2:	f000 f891 	bl	801d1e8 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801d0c6:	4603      	mov	r3, r0
 801d0c8:	4618      	mov	r0, r3
 801d0ca:	370c      	adds	r7, #12
 801d0cc:	46bd      	mov	sp, r7
 801d0ce:	bd90      	pop	{r4, r7, pc}

0801d0d0 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801d0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0d2:	b085      	sub	sp, #20
 801d0d4:	af00      	add	r7, sp, #0
 801d0d6:	6078      	str	r0, [r7, #4]
 801d0d8:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801d0da:	1d3b      	adds	r3, r7, #4
 801d0dc:	4618      	mov	r0, r3
 801d0de:	f000 f878 	bl	801d1d2 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d0e2:	4603      	mov	r3, r0
 801d0e4:	681d      	ldr	r5, [r3, #0]
 801d0e6:	463b      	mov	r3, r7
 801d0e8:	4618      	mov	r0, r3
 801d0ea:	f000 f872 	bl	801d1d2 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d0ee:	4603      	mov	r3, r0
 801d0f0:	681e      	ldr	r6, [r3, #0]
 801d0f2:	f107 030c 	add.w	r3, r7, #12
 801d0f6:	4618      	mov	r0, r3
 801d0f8:	f000 f887 	bl	801d20a <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801d0fc:	4604      	mov	r4, r0
 801d0fe:	4631      	mov	r1, r6
 801d100:	4628      	mov	r0, r5
 801d102:	f7fe fceb 	bl	801badc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801d106:	4603      	mov	r3, r0
 801d108:	6023      	str	r3, [r4, #0]
  return c;
 801d10a:	68fb      	ldr	r3, [r7, #12]
}
 801d10c:	4618      	mov	r0, r3
 801d10e:	3714      	adds	r7, #20
 801d110:	46bd      	mov	sp, r7
 801d112:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d114 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801d114:	b5b0      	push	{r4, r5, r7, lr}
 801d116:	b084      	sub	sp, #16
 801d118:	af00      	add	r7, sp, #0
 801d11a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801d11c:	1d3b      	adds	r3, r7, #4
 801d11e:	4618      	mov	r0, r3
 801d120:	f000 f873 	bl	801d20a <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801d124:	4603      	mov	r3, r0
 801d126:	681d      	ldr	r5, [r3, #0]
 801d128:	f107 030c 	add.w	r3, r7, #12
 801d12c:	4618      	mov	r0, r3
 801d12e:	f000 f850 	bl	801d1d2 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d132:	4604      	mov	r4, r0
 801d134:	4628      	mov	r0, r5
 801d136:	f000 f873 	bl	801d220 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 801d13a:	4603      	mov	r3, r0
 801d13c:	6023      	str	r3, [r4, #0]
  return result;
 801d13e:	68fb      	ldr	r3, [r7, #12]
}
 801d140:	4618      	mov	r0, r3
 801d142:	3710      	adds	r7, #16
 801d144:	46bd      	mov	sp, r7
 801d146:	bdb0      	pop	{r4, r5, r7, pc}

0801d148 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 801d148:	b590      	push	{r4, r7, lr}
 801d14a:	b085      	sub	sp, #20
 801d14c:	af00      	add	r7, sp, #0
 801d14e:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 801d150:	1d3b      	adds	r3, r7, #4
 801d152:	4618      	mov	r0, r3
 801d154:	f000 f83d 	bl	801d1d2 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d158:	4604      	mov	r4, r0
 801d15a:	f107 030c 	add.w	r3, r7, #12
 801d15e:	4618      	mov	r0, r3
 801d160:	f000 f86a 	bl	801d238 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801d164:	4602      	mov	r2, r0
 801d166:	6823      	ldr	r3, [r4, #0]
 801d168:	6013      	str	r3, [r2, #0]
  return c;
 801d16a:	68fb      	ldr	r3, [r7, #12]
}
 801d16c:	4618      	mov	r0, r3
 801d16e:	3714      	adds	r7, #20
 801d170:	46bd      	mov	sp, r7
 801d172:	bd90      	pop	{r4, r7, pc}

0801d174 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801d174:	b5b0      	push	{r4, r5, r7, lr}
 801d176:	b084      	sub	sp, #16
 801d178:	af00      	add	r7, sp, #0
 801d17a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801d17c:	1d3b      	adds	r3, r7, #4
 801d17e:	4618      	mov	r0, r3
 801d180:	f000 f85a 	bl	801d238 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801d184:	4603      	mov	r3, r0
 801d186:	681d      	ldr	r5, [r3, #0]
 801d188:	f107 030c 	add.w	r3, r7, #12
 801d18c:	4618      	mov	r0, r3
 801d18e:	f7ff fecf 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d192:	4604      	mov	r4, r0
 801d194:	4628      	mov	r0, r5
 801d196:	f000 f85a 	bl	801d24e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 801d19a:	4603      	mov	r3, r0
 801d19c:	6023      	str	r3, [r4, #0]
  return result;
 801d19e:	68fb      	ldr	r3, [r7, #12]
}
 801d1a0:	4618      	mov	r0, r3
 801d1a2:	3710      	adds	r7, #16
 801d1a4:	46bd      	mov	sp, r7
 801d1a6:	bdb0      	pop	{r4, r5, r7, pc}

0801d1a8 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 801d1a8:	b480      	push	{r7}
 801d1aa:	b083      	sub	sp, #12
 801d1ac:	af00      	add	r7, sp, #0
 801d1ae:	6078      	str	r0, [r7, #4]
 801d1b0:	6039      	str	r1, [r7, #0]
  return a - b;
 801d1b2:	687a      	ldr	r2, [r7, #4]
 801d1b4:	683b      	ldr	r3, [r7, #0]
 801d1b6:	1ad3      	subs	r3, r2, r3
}
 801d1b8:	4618      	mov	r0, r3
 801d1ba:	370c      	adds	r7, #12
 801d1bc:	46bd      	mov	sp, r7
 801d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1c2:	4770      	bx	lr

0801d1c4 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 801d1c4:	b580      	push	{r7, lr}
 801d1c6:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 801d1c8:	f7fd fefc 	bl	801afc4 <_ZNSt14numeric_limitsIlE3maxEv>
 801d1cc:	4603      	mov	r3, r0
  }
 801d1ce:	4618      	mov	r0, r3
 801d1d0:	bd80      	pop	{r7, pc}

0801d1d2 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 801d1d2:	b480      	push	{r7}
 801d1d4:	b083      	sub	sp, #12
 801d1d6:	af00      	add	r7, sp, #0
 801d1d8:	6078      	str	r0, [r7, #4]
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	4618      	mov	r0, r3
 801d1de:	370c      	adds	r7, #12
 801d1e0:	46bd      	mov	sp, r7
 801d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1e6:	4770      	bx	lr

0801d1e8 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801d1e8:	b580      	push	{r7, lr}
 801d1ea:	b084      	sub	sp, #16
 801d1ec:	af00      	add	r7, sp, #0
 801d1ee:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801d1f0:	f107 030c 	add.w	r3, r7, #12
 801d1f4:	4618      	mov	r0, r3
 801d1f6:	f7ff ffec 	bl	801d1d2 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d1fa:	4602      	mov	r2, r0
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	6013      	str	r3, [r2, #0]
    return retval;
 801d200:	68fb      	ldr	r3, [r7, #12]
  }
 801d202:	4618      	mov	r0, r3
 801d204:	3710      	adds	r7, #16
 801d206:	46bd      	mov	sp, r7
 801d208:	bd80      	pop	{r7, pc}

0801d20a <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 801d20a:	b480      	push	{r7}
 801d20c:	b083      	sub	sp, #12
 801d20e:	af00      	add	r7, sp, #0
 801d210:	6078      	str	r0, [r7, #4]
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	4618      	mov	r0, r3
 801d216:	370c      	adds	r7, #12
 801d218:	46bd      	mov	sp, r7
 801d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d21e:	4770      	bx	lr

0801d220 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801d220:	b580      	push	{r7, lr}
 801d222:	b082      	sub	sp, #8
 801d224:	af00      	add	r7, sp, #0
 801d226:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801d228:	6878      	ldr	r0, [r7, #4]
 801d22a:	f000 f81d 	bl	801d268 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 801d22e:	4603      	mov	r3, r0
}
 801d230:	4618      	mov	r0, r3
 801d232:	3708      	adds	r7, #8
 801d234:	46bd      	mov	sp, r7
 801d236:	bd80      	pop	{r7, pc}

0801d238 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 801d238:	b480      	push	{r7}
 801d23a:	b083      	sub	sp, #12
 801d23c:	af00      	add	r7, sp, #0
 801d23e:	6078      	str	r0, [r7, #4]
 801d240:	687b      	ldr	r3, [r7, #4]
 801d242:	4618      	mov	r0, r3
 801d244:	370c      	adds	r7, #12
 801d246:	46bd      	mov	sp, r7
 801d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d24c:	4770      	bx	lr

0801d24e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801d24e:	b580      	push	{r7, lr}
 801d250:	b082      	sub	sp, #8
 801d252:	af00      	add	r7, sp, #0
 801d254:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801d256:	6878      	ldr	r0, [r7, #4]
 801d258:	f000 f848 	bl	801d2ec <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 801d25c:	4603      	mov	r3, r0
}
 801d25e:	4618      	mov	r0, r3
 801d260:	3708      	adds	r7, #8
 801d262:	46bd      	mov	sp, r7
 801d264:	bd80      	pop	{r7, pc}
	...

0801d268 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801d268:	b580      	push	{r7, lr}
 801d26a:	b08a      	sub	sp, #40	; 0x28
 801d26c:	af00      	add	r7, sp, #0
 801d26e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801d270:	f7fe fc1f 	bl	801bab2 <_ZNSt14numeric_limitsIlE3minEv>
 801d274:	4603      	mov	r3, r0
 801d276:	4618      	mov	r0, r3
 801d278:	f7ff fc64 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d27c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801d27e:	f7fd fea1 	bl	801afc4 <_ZNSt14numeric_limitsIlE3maxEv>
 801d282:	4603      	mov	r3, r0
 801d284:	4618      	mov	r0, r3
 801d286:	f7ff fc5d 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d28a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801d28c:	2320      	movs	r3, #32
 801d28e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801d290:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801d294:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801d296:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 801d29a:	f7ff fc53 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d29e:	4603      	mov	r3, r0
 801d2a0:	4619      	mov	r1, r3
 801d2a2:	6878      	ldr	r0, [r7, #4]
 801d2a4:	f7ff fc98 	bl	801cbd8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801d2a8:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801d2aa:	480f      	ldr	r0, [pc, #60]	; (801d2e8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 801d2ac:	f7ff fc4a 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d2b0:	4603      	mov	r3, r0
 801d2b2:	4619      	mov	r1, r3
 801d2b4:	6878      	ldr	r0, [r7, #4]
 801d2b6:	f7ff fc6d 	bl	801cb94 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801d2ba:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801d2bc:	2102      	movs	r1, #2
 801d2be:	6878      	ldr	r0, [r7, #4]
 801d2c0:	f000 f856 	bl	801d370 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801d2c4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801d2c6:	68fa      	ldr	r2, [r7, #12]
 801d2c8:	6a39      	ldr	r1, [r7, #32]
 801d2ca:	6978      	ldr	r0, [r7, #20]
 801d2cc:	f000 f894 	bl	801d3f8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801d2d0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801d2d2:	68fa      	ldr	r2, [r7, #12]
 801d2d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d2d6:	6938      	ldr	r0, [r7, #16]
 801d2d8:	f000 f88e 	bl	801d3f8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801d2dc:	60f8      	str	r0, [r7, #12]
    return result;
 801d2de:	68fb      	ldr	r3, [r7, #12]
  }
 801d2e0:	4618      	mov	r0, r3
 801d2e2:	3728      	adds	r7, #40	; 0x28
 801d2e4:	46bd      	mov	sp, r7
 801d2e6:	bd80      	pop	{r7, pc}
 801d2e8:	e0000001 	.word	0xe0000001

0801d2ec <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801d2ec:	b580      	push	{r7, lr}
 801d2ee:	b08a      	sub	sp, #40	; 0x28
 801d2f0:	af00      	add	r7, sp, #0
 801d2f2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801d2f4:	f7fe fbdd 	bl	801bab2 <_ZNSt14numeric_limitsIlE3minEv>
 801d2f8:	4603      	mov	r3, r0
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	f7ff fc22 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d300:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801d302:	f7fd fe5f 	bl	801afc4 <_ZNSt14numeric_limitsIlE3maxEv>
 801d306:	4603      	mov	r3, r0
 801d308:	4618      	mov	r0, r3
 801d30a:	f7ff fc1b 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d30e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801d310:	2320      	movs	r3, #32
 801d312:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801d314:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801d318:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801d31a:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801d31e:	f7ff fc11 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d322:	4603      	mov	r3, r0
 801d324:	4619      	mov	r1, r3
 801d326:	6878      	ldr	r0, [r7, #4]
 801d328:	f7ff fc56 	bl	801cbd8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801d32c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801d32e:	480f      	ldr	r0, [pc, #60]	; (801d36c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 801d330:	f7ff fc08 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d334:	4603      	mov	r3, r0
 801d336:	4619      	mov	r1, r3
 801d338:	6878      	ldr	r0, [r7, #4]
 801d33a:	f7ff fc2b 	bl	801cb94 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801d33e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801d340:	2101      	movs	r1, #1
 801d342:	6878      	ldr	r0, [r7, #4]
 801d344:	f000 f814 	bl	801d370 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801d348:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801d34a:	68fa      	ldr	r2, [r7, #12]
 801d34c:	6a39      	ldr	r1, [r7, #32]
 801d34e:	6978      	ldr	r0, [r7, #20]
 801d350:	f000 f852 	bl	801d3f8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801d354:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801d356:	68fa      	ldr	r2, [r7, #12]
 801d358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d35a:	6938      	ldr	r0, [r7, #16]
 801d35c:	f000 f84c 	bl	801d3f8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801d360:	60f8      	str	r0, [r7, #12]
    return result;
 801d362:	68fb      	ldr	r3, [r7, #12]
  }
 801d364:	4618      	mov	r0, r3
 801d366:	3728      	adds	r7, #40	; 0x28
 801d368:	46bd      	mov	sp, r7
 801d36a:	bd80      	pop	{r7, pc}
 801d36c:	c0000001 	.word	0xc0000001

0801d370 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 801d370:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801d374:	b089      	sub	sp, #36	; 0x24
 801d376:	af00      	add	r7, sp, #0
 801d378:	6078      	str	r0, [r7, #4]
 801d37a:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 801d37c:	6879      	ldr	r1, [r7, #4]
 801d37e:	17c8      	asrs	r0, r1, #31
 801d380:	4688      	mov	r8, r1
 801d382:	4681      	mov	r9, r0
 801d384:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 801d388:	2001      	movs	r0, #1
 801d38a:	6839      	ldr	r1, [r7, #0]
 801d38c:	fa00 f101 	lsl.w	r1, r0, r1
 801d390:	17c8      	asrs	r0, r1, #31
 801d392:	460c      	mov	r4, r1
 801d394:	4605      	mov	r5, r0
 801d396:	69f9      	ldr	r1, [r7, #28]
 801d398:	fb04 f001 	mul.w	r0, r4, r1
 801d39c:	69b9      	ldr	r1, [r7, #24]
 801d39e:	fb05 f101 	mul.w	r1, r5, r1
 801d3a2:	4401      	add	r1, r0
 801d3a4:	69b8      	ldr	r0, [r7, #24]
 801d3a6:	fba0 2304 	umull	r2, r3, r0, r4
 801d3aa:	4419      	add	r1, r3
 801d3ac:	460b      	mov	r3, r1
 801d3ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801d3b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 801d3b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d3ba:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 801d3bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801d3c0:	60bb      	str	r3, [r7, #8]
             ? min
 801d3c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801d3c6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801d3ca:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801d3ce:	db0b      	blt.n	801d3e8 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 801d3d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801d3d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801d3d8:	f173 0300 	sbcs.w	r3, r3, #0
 801d3dc:	da01      	bge.n	801d3e2 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 801d3de:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 801d3e0:	e004      	b.n	801d3ec <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 801d3e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 801d3e6:	e001      	b.n	801d3ec <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 801d3e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801d3ec:	4618      	mov	r0, r3
 801d3ee:	3724      	adds	r7, #36	; 0x24
 801d3f0:	46bd      	mov	sp, r7
 801d3f2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 801d3f6:	4770      	bx	lr

0801d3f8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 801d3f8:	b590      	push	{r4, r7, lr}
 801d3fa:	b085      	sub	sp, #20
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	60f8      	str	r0, [r7, #12]
 801d400:	60b9      	str	r1, [r7, #8]
 801d402:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 801d404:	68b9      	ldr	r1, [r7, #8]
 801d406:	68f8      	ldr	r0, [r7, #12]
 801d408:	f7ff fba7 	bl	801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801d40c:	4604      	mov	r4, r0
 801d40e:	68f8      	ldr	r0, [r7, #12]
 801d410:	f7ff fc07 	bl	801cc22 <_ZN8gemmlowp6BitNotIlEET_S1_>
 801d414:	4603      	mov	r3, r0
 801d416:	6879      	ldr	r1, [r7, #4]
 801d418:	4618      	mov	r0, r3
 801d41a:	f7ff fb9e 	bl	801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801d41e:	4603      	mov	r3, r0
 801d420:	4619      	mov	r1, r3
 801d422:	4620      	mov	r0, r4
 801d424:	f000 f805 	bl	801d432 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 801d428:	4603      	mov	r3, r0
}
 801d42a:	4618      	mov	r0, r3
 801d42c:	3714      	adds	r7, #20
 801d42e:	46bd      	mov	sp, r7
 801d430:	bd90      	pop	{r4, r7, pc}

0801d432 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 801d432:	b480      	push	{r7}
 801d434:	b083      	sub	sp, #12
 801d436:	af00      	add	r7, sp, #0
 801d438:	6078      	str	r0, [r7, #4]
 801d43a:	6039      	str	r1, [r7, #0]
  return a ^ b;
 801d43c:	687a      	ldr	r2, [r7, #4]
 801d43e:	683b      	ldr	r3, [r7, #0]
 801d440:	4053      	eors	r3, r2
}
 801d442:	4618      	mov	r0, r3
 801d444:	370c      	adds	r7, #12
 801d446:	46bd      	mov	sp, r7
 801d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d44c:	4770      	bx	lr

0801d44e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801d44e:	b580      	push	{r7, lr}
 801d450:	b084      	sub	sp, #16
 801d452:	af00      	add	r7, sp, #0
 801d454:	60f8      	str	r0, [r7, #12]
 801d456:	60b9      	str	r1, [r7, #8]
 801d458:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d101      	bne.n	801d466 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 801d462:	f006 f90b 	bl	802367c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801d466:	68fb      	ldr	r3, [r7, #12]
 801d468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d46a:	2124      	movs	r1, #36	; 0x24
 801d46c:	68f8      	ldr	r0, [r7, #12]
 801d46e:	4798      	blx	r3
 801d470:	4603      	mov	r3, r0
}
 801d472:	4618      	mov	r0, r3
 801d474:	3710      	adds	r7, #16
 801d476:	46bd      	mov	sp, r7
 801d478:	bd80      	pop	{r7, pc}
	...

0801d47c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801d47c:	b5b0      	push	{r4, r5, r7, lr}
 801d47e:	b0a0      	sub	sp, #128	; 0x80
 801d480:	af04      	add	r7, sp, #16
 801d482:	6078      	str	r0, [r7, #4]
 801d484:	6039      	str	r1, [r7, #0]
 801d486:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 801d488:	683b      	ldr	r3, [r7, #0]
 801d48a:	691b      	ldr	r3, [r3, #16]
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d101      	bne.n	801d494 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 801d490:	f006 f8f4 	bl	802367c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801d494:	683b      	ldr	r3, [r7, #0]
 801d496:	695b      	ldr	r3, [r3, #20]
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d101      	bne.n	801d4a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 801d49c:	f006 f8ee 	bl	802367c <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801d4a0:	683b      	ldr	r3, [r7, #0]
 801d4a2:	691b      	ldr	r3, [r3, #16]
 801d4a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 801d4a6:	683b      	ldr	r3, [r7, #0]
 801d4a8:	695b      	ldr	r3, [r3, #20]
 801d4aa:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 801d4ac:	4b81      	ldr	r3, [pc, #516]	; (801d6b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	461a      	mov	r2, r3
 801d4b2:	6839      	ldr	r1, [r7, #0]
 801d4b4:	6878      	ldr	r0, [r7, #4]
 801d4b6:	f7fd fff9 	bl	801b4ac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801d4ba:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 801d4bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d10a      	bne.n	801d4d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	695c      	ldr	r4, [r3, #20]
 801d4c6:	4b7c      	ldr	r3, [pc, #496]	; (801d6b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801d4c8:	9300      	str	r3, [sp, #0]
 801d4ca:	2340      	movs	r3, #64	; 0x40
 801d4cc:	4a7b      	ldr	r2, [pc, #492]	; (801d6bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801d4ce:	497c      	ldr	r1, [pc, #496]	; (801d6c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801d4d0:	6878      	ldr	r0, [r7, #4]
 801d4d2:	47a0      	blx	r4
 801d4d4:	2401      	movs	r4, #1
 801d4d6:	e0e7      	b.n	801d6a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 801d4d8:	4b7a      	ldr	r3, [pc, #488]	; (801d6c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	461a      	mov	r2, r3
 801d4de:	6839      	ldr	r1, [r7, #0]
 801d4e0:	6878      	ldr	r0, [r7, #4]
 801d4e2:	f7fd ffe3 	bl	801b4ac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801d4e6:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 801d4e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	d10a      	bne.n	801d504 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	695c      	ldr	r4, [r3, #20]
 801d4f2:	4b75      	ldr	r3, [pc, #468]	; (801d6c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801d4f4:	9300      	str	r3, [sp, #0]
 801d4f6:	2343      	movs	r3, #67	; 0x43
 801d4f8:	4a70      	ldr	r2, [pc, #448]	; (801d6bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801d4fa:	4971      	ldr	r1, [pc, #452]	; (801d6c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801d4fc:	6878      	ldr	r0, [r7, #4]
 801d4fe:	47a0      	blx	r4
 801d500:	2401      	movs	r4, #1
 801d502:	e0d1      	b.n	801d6a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 801d504:	4b71      	ldr	r3, [pc, #452]	; (801d6cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	461a      	mov	r2, r3
 801d50a:	6839      	ldr	r1, [r7, #0]
 801d50c:	6878      	ldr	r0, [r7, #4]
 801d50e:	f7fd fffd 	bl	801b50c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 801d512:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 801d514:	4b6e      	ldr	r3, [pc, #440]	; (801d6d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801d516:	681b      	ldr	r3, [r3, #0]
 801d518:	461a      	mov	r2, r3
 801d51a:	6839      	ldr	r1, [r7, #0]
 801d51c:	6878      	ldr	r0, [r7, #4]
 801d51e:	f7fd ffd5 	bl	801b4cc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801d522:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 801d524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d526:	2b00      	cmp	r3, #0
 801d528:	d10a      	bne.n	801d540 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	695c      	ldr	r4, [r3, #20]
 801d52e:	4b69      	ldr	r3, [pc, #420]	; (801d6d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801d530:	9300      	str	r3, [sp, #0]
 801d532:	2347      	movs	r3, #71	; 0x47
 801d534:	4a61      	ldr	r2, [pc, #388]	; (801d6bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801d536:	4962      	ldr	r1, [pc, #392]	; (801d6c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801d538:	6878      	ldr	r0, [r7, #4]
 801d53a:	47a0      	blx	r4
 801d53c:	2401      	movs	r4, #1
 801d53e:	e0b3      	b.n	801d6a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 801d540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d542:	781a      	ldrb	r2, [r3, #0]
 801d544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d546:	781b      	ldrb	r3, [r3, #0]
 801d548:	429a      	cmp	r2, r3
 801d54a:	d01a      	beq.n	801d582 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	695c      	ldr	r4, [r3, #20]
 801d550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d552:	781b      	ldrb	r3, [r3, #0]
 801d554:	4618      	mov	r0, r3
 801d556:	f7fd fcb9 	bl	801aecc <TfLiteTypeGetName>
 801d55a:	4605      	mov	r5, r0
 801d55c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d55e:	781b      	ldrb	r3, [r3, #0]
 801d560:	4618      	mov	r0, r3
 801d562:	f7fd fcb3 	bl	801aecc <TfLiteTypeGetName>
 801d566:	4603      	mov	r3, r0
 801d568:	9303      	str	r3, [sp, #12]
 801d56a:	9502      	str	r5, [sp, #8]
 801d56c:	4b5a      	ldr	r3, [pc, #360]	; (801d6d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801d56e:	9301      	str	r3, [sp, #4]
 801d570:	4b5a      	ldr	r3, [pc, #360]	; (801d6dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801d572:	9300      	str	r3, [sp, #0]
 801d574:	2349      	movs	r3, #73	; 0x49
 801d576:	4a51      	ldr	r2, [pc, #324]	; (801d6bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801d578:	4959      	ldr	r1, [pc, #356]	; (801d6e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801d57a:	6878      	ldr	r0, [r7, #4]
 801d57c:	47a0      	blx	r4
 801d57e:	2401      	movs	r4, #1
 801d580:	e092      	b.n	801d6a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 801d582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d584:	781a      	ldrb	r2, [r3, #0]
 801d586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d588:	781b      	ldrb	r3, [r3, #0]
 801d58a:	429a      	cmp	r2, r3
 801d58c:	d006      	beq.n	801d59c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	695b      	ldr	r3, [r3, #20]
 801d592:	4954      	ldr	r1, [pc, #336]	; (801d6e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 801d594:	6878      	ldr	r0, [r7, #4]
 801d596:	4798      	blx	r3
 801d598:	2401      	movs	r4, #1
 801d59a:	e085      	b.n	801d6a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 801d59c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d59e:	f04f 32ff 	mov.w	r2, #4294967295
 801d5a2:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 801d5a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d5a6:	7819      	ldrb	r1, [r3, #0]
 801d5a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d5aa:	781a      	ldrb	r2, [r3, #0]
 801d5ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d5ae:	9303      	str	r3, [sp, #12]
 801d5b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d5b2:	9302      	str	r3, [sp, #8]
 801d5b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d5b6:	9301      	str	r3, [sp, #4]
 801d5b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d5ba:	9300      	str	r3, [sp, #0]
 801d5bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d5be:	6878      	ldr	r0, [r7, #4]
 801d5c0:	f000 fae4 	bl	801db8c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 801d5c4:	4603      	mov	r3, r0
 801d5c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801d5ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	d002      	beq.n	801d5d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 801d5d2:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 801d5d6:	e067      	b.n	801d6a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 801d5d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d5da:	781b      	ldrb	r3, [r3, #0]
 801d5dc:	2b09      	cmp	r3, #9
 801d5de:	d162      	bne.n	801d6a6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 801d5e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d5e4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801d5e6:	4618      	mov	r0, r3
 801d5e8:	f7fe fa45 	bl	801ba76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 801d5ec:	f107 0318 	add.w	r3, r7, #24
 801d5f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d5f2:	4618      	mov	r0, r3
 801d5f4:	f7fe fa3f 	bl	801ba76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 801d5f8:	f107 0318 	add.w	r3, r7, #24
 801d5fc:	4618      	mov	r0, r3
 801d5fe:	f7fe f9d6 	bl	801b9ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d602:	4603      	mov	r3, r0
 801d604:	2b02      	cmp	r3, #2
 801d606:	d001      	beq.n	801d60c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 801d608:	f006 f838 	bl	802367c <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 801d60c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d610:	4618      	mov	r0, r3
 801d612:	f7fe f9cc 	bl	801b9ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d616:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 801d618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d61a:	1e5a      	subs	r2, r3, #1
 801d61c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d620:	4611      	mov	r1, r2
 801d622:	4618      	mov	r0, r3
 801d624:	f7fe fad0 	bl	801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d628:	4603      	mov	r3, r0
 801d62a:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 801d62c:	2301      	movs	r3, #1
 801d62e:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 801d630:	2301      	movs	r3, #1
 801d632:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 801d634:	f107 0318 	add.w	r3, r7, #24
 801d638:	2101      	movs	r1, #1
 801d63a:	4618      	mov	r0, r3
 801d63c:	f7fe fac4 	bl	801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d640:	4603      	mov	r3, r0
 801d642:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 801d644:	f107 0308 	add.w	r3, r7, #8
 801d648:	4618      	mov	r0, r3
 801d64a:	f7f5 f81d 	bl	8012688 <arm_fully_connected_s8_get_buffer_size>
 801d64e:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 801d650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d652:	2b00      	cmp	r3, #0
 801d654:	dd11      	ble.n	801d67a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d65a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d65c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d65e:	3220      	adds	r2, #32
 801d660:	6878      	ldr	r0, [r7, #4]
 801d662:	4798      	blx	r3
 801d664:	4603      	mov	r3, r0
 801d666:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801d66a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801d66e:	2b00      	cmp	r3, #0
 801d670:	d007      	beq.n	801d682 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 801d672:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 801d676:	2500      	movs	r5, #0
 801d678:	e004      	b.n	801d684 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801d67a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d67c:	f04f 32ff 	mov.w	r2, #4294967295
 801d680:	621a      	str	r2, [r3, #32]
 801d682:	2501      	movs	r5, #1
 801d684:	f107 0318 	add.w	r3, r7, #24
 801d688:	4618      	mov	r0, r3
 801d68a:	f7fe f97a 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
 801d68e:	2d01      	cmp	r5, #1
 801d690:	d001      	beq.n	801d696 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 801d692:	2500      	movs	r5, #0
 801d694:	e000      	b.n	801d698 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 801d696:	2501      	movs	r5, #1
 801d698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d69c:	4618      	mov	r0, r3
 801d69e:	f7fe f970 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
 801d6a2:	2d01      	cmp	r5, #1
 801d6a4:	d100      	bne.n	801d6a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 801d6a6:	2400      	movs	r4, #0
}
 801d6a8:	4623      	mov	r3, r4
 801d6aa:	4618      	mov	r0, r3
 801d6ac:	3770      	adds	r7, #112	; 0x70
 801d6ae:	46bd      	mov	sp, r7
 801d6b0:	bdb0      	pop	{r4, r5, r7, pc}
 801d6b2:	bf00      	nop
 801d6b4:	080296c4 	.word	0x080296c4
 801d6b8:	08028d0c 	.word	0x08028d0c
 801d6bc:	08028c68 	.word	0x08028c68
 801d6c0:	08028cf4 	.word	0x08028cf4
 801d6c4:	080296c8 	.word	0x080296c8
 801d6c8:	08028d20 	.word	0x08028d20
 801d6cc:	080296cc 	.word	0x080296cc
 801d6d0:	080296d0 	.word	0x080296d0
 801d6d4:	08028d34 	.word	0x08028d34
 801d6d8:	08028d64 	.word	0x08028d64
 801d6dc:	08028d74 	.word	0x08028d74
 801d6e0:	08028d48 	.word	0x08028d48
 801d6e4:	08028d80 	.word	0x08028d80

0801d6e8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 801d6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6ea:	b0bf      	sub	sp, #252	; 0xfc
 801d6ec:	af08      	add	r7, sp, #32
 801d6ee:	6178      	str	r0, [r7, #20]
 801d6f0:	6139      	str	r1, [r7, #16]
 801d6f2:	60fa      	str	r2, [r7, #12]
 801d6f4:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801d6f6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d6fa:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801d6fe:	4618      	mov	r0, r3
 801d700:	f000 faaa 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 801d704:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d708:	4618      	mov	r0, r3
 801d70a:	f7fe f950 	bl	801b9ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d70e:	4603      	mov	r3, r0
 801d710:	2b02      	cmp	r3, #2
 801d712:	d001      	beq.n	801d718 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 801d714:	f005 ffb2 	bl	802367c <abort>
  const int batches = output_shape.Dims(0);
 801d718:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d71c:	2100      	movs	r1, #0
 801d71e:	4618      	mov	r0, r3
 801d720:	f7fe fa52 	bl	801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d724:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 801d728:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d72c:	2101      	movs	r1, #1
 801d72e:	4618      	mov	r0, r3
 801d730:	f7fe fa4a 	bl	801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d734:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801d738:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d73c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801d740:	4618      	mov	r0, r3
 801d742:	f000 fa89 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 801d746:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d74a:	4618      	mov	r0, r3
 801d74c:	f7fe f92f 	bl	801b9ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d750:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801d754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801d758:	1e5a      	subs	r2, r3, #1
 801d75a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d75e:	4611      	mov	r1, r2
 801d760:	4618      	mov	r0, r3
 801d762:	f7fe fa31 	bl	801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d766:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801d76a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d76e:	68b9      	ldr	r1, [r7, #8]
 801d770:	4618      	mov	r0, r3
 801d772:	f000 fa71 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	695b      	ldr	r3, [r3, #20]
 801d77a:	425b      	negs	r3, r3
 801d77c:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 801d77e:	68fb      	ldr	r3, [r7, #12]
 801d780:	69db      	ldr	r3, [r3, #28]
 801d782:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 801d784:	68fb      	ldr	r3, [r7, #12]
 801d786:	699b      	ldr	r3, [r3, #24]
 801d788:	425b      	negs	r3, r3
 801d78a:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 801d78c:	68fb      	ldr	r3, [r7, #12]
 801d78e:	689b      	ldr	r3, [r3, #8]
 801d790:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 801d792:	68fb      	ldr	r3, [r7, #12]
 801d794:	68db      	ldr	r3, [r3, #12]
 801d796:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 801d798:	68fb      	ldr	r3, [r7, #12]
 801d79a:	681b      	ldr	r3, [r3, #0]
 801d79c:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 801d79e:	68fb      	ldr	r3, [r7, #12]
 801d7a0:	685b      	ldr	r3, [r3, #4]
 801d7a2:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 801d7a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801d7a8:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 801d7aa:	2301      	movs	r3, #1
 801d7ac:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 801d7ae:	2301      	movs	r3, #1
 801d7b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 801d7b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801d7b6:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 801d7b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801d7bc:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 801d7be:	2301      	movs	r3, #1
 801d7c0:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 801d7c2:	2301      	movs	r3, #1
 801d7c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 801d7c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801d7ca:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 801d7cc:	2301      	movs	r3, #1
 801d7ce:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 801d7d0:	2301      	movs	r3, #1
 801d7d2:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 801d7d4:	2301      	movs	r3, #1
 801d7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 801d7d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801d7dc:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 801d7de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801d7e2:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 801d7e4:	2301      	movs	r3, #1
 801d7e6:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 801d7e8:	2301      	movs	r3, #1
 801d7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 801d7ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801d7f0:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 801d7f2:	2300      	movs	r3, #0
 801d7f4:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 801d7f6:	2300      	movs	r3, #0
 801d7f8:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 801d7fa:	68fb      	ldr	r3, [r7, #12]
 801d7fc:	6a1b      	ldr	r3, [r3, #32]
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	db08      	blt.n	801d814 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801d802:	697b      	ldr	r3, [r7, #20]
 801d804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d806:	68fa      	ldr	r2, [r7, #12]
 801d808:	6a12      	ldr	r2, [r2, #32]
 801d80a:	4611      	mov	r1, r2
 801d80c:	6978      	ldr	r0, [r7, #20]
 801d80e:	4798      	blx	r3
 801d810:	4603      	mov	r3, r0
 801d812:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 801d814:	68b8      	ldr	r0, [r7, #8]
 801d816:	f7fe ffa9 	bl	801c76c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801d81a:	4605      	mov	r5, r0
 801d81c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801d820:	f7fe ffa4 	bl	801c76c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801d824:	4606      	mov	r6, r0
 801d826:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801d82a:	f7ff fa20 	bl	801cc6e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801d82e:	6078      	str	r0, [r7, #4]
 801d830:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801d834:	f7fe ffa9 	bl	801c78a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801d838:	4603      	mov	r3, r0
 801d83a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801d83e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801d842:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801d846:	f107 001c 	add.w	r0, r7, #28
 801d84a:	9306      	str	r3, [sp, #24]
 801d84c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d850:	9305      	str	r3, [sp, #20]
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	9304      	str	r3, [sp, #16]
 801d856:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d85a:	9303      	str	r3, [sp, #12]
 801d85c:	9602      	str	r6, [sp, #8]
 801d85e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d862:	9301      	str	r3, [sp, #4]
 801d864:	9500      	str	r5, [sp, #0]
 801d866:	4623      	mov	r3, r4
 801d868:	f7f4 fec7 	bl	80125fa <arm_fully_connected_s8>
 801d86c:	4603      	mov	r3, r0
 801d86e:	2b00      	cmp	r3, #0
 801d870:	bf14      	ite	ne
 801d872:	2301      	movne	r3, #1
 801d874:	2300      	moveq	r3, #0
 801d876:	b2db      	uxtb	r3, r3
 801d878:	2b00      	cmp	r3, #0
 801d87a:	d03e      	beq.n	801d8fa <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 801d87c:	697b      	ldr	r3, [r7, #20]
 801d87e:	695c      	ldr	r4, [r3, #20]
 801d880:	68b8      	ldr	r0, [r7, #8]
 801d882:	f7fe ff73 	bl	801c76c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801d886:	4606      	mov	r6, r0
 801d888:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801d88c:	f7fe ff6e 	bl	801c76c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801d890:	6078      	str	r0, [r7, #4]
 801d892:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801d896:	f7ff f9ea 	bl	801cc6e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801d89a:	6038      	str	r0, [r7, #0]
 801d89c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801d8a0:	f7fe ff73 	bl	801c78a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801d8a4:	4603      	mov	r3, r0
 801d8a6:	f107 0554 	add.w	r5, r7, #84	; 0x54
 801d8aa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801d8ae:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801d8b2:	f107 001c 	add.w	r0, r7, #28
 801d8b6:	9306      	str	r3, [sp, #24]
 801d8b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d8bc:	9305      	str	r3, [sp, #20]
 801d8be:	683b      	ldr	r3, [r7, #0]
 801d8c0:	9304      	str	r3, [sp, #16]
 801d8c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d8c6:	9303      	str	r3, [sp, #12]
 801d8c8:	687b      	ldr	r3, [r7, #4]
 801d8ca:	9302      	str	r3, [sp, #8]
 801d8cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d8d0:	9301      	str	r3, [sp, #4]
 801d8d2:	9600      	str	r6, [sp, #0]
 801d8d4:	462b      	mov	r3, r5
 801d8d6:	f7f4 fe90 	bl	80125fa <arm_fully_connected_s8>
 801d8da:	4603      	mov	r3, r0
 801d8dc:	461a      	mov	r2, r3
 801d8de:	2300      	movs	r3, #0
 801d8e0:	9303      	str	r3, [sp, #12]
 801d8e2:	9202      	str	r2, [sp, #8]
 801d8e4:	4b0f      	ldr	r3, [pc, #60]	; (801d924 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 801d8e6:	9301      	str	r3, [sp, #4]
 801d8e8:	4b0f      	ldr	r3, [pc, #60]	; (801d928 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 801d8ea:	9300      	str	r3, [sp, #0]
 801d8ec:	23a6      	movs	r3, #166	; 0xa6
 801d8ee:	4a0f      	ldr	r2, [pc, #60]	; (801d92c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 801d8f0:	490f      	ldr	r1, [pc, #60]	; (801d930 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 801d8f2:	6978      	ldr	r0, [r7, #20]
 801d8f4:	47a0      	blx	r4
 801d8f6:	2401      	movs	r4, #1
 801d8f8:	e000      	b.n	801d8fc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 801d8fa:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801d8fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d900:	4618      	mov	r0, r3
 801d902:	f7fe f83e 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801d906:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d90a:	4618      	mov	r0, r3
 801d90c:	f7fe f839 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801d910:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d914:	4618      	mov	r0, r3
 801d916:	f7fe f834 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801d91a:	4623      	mov	r3, r4
 801d91c:	4618      	mov	r0, r3
 801d91e:	37dc      	adds	r7, #220	; 0xdc
 801d920:	46bd      	mov	sp, r7
 801d922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d924:	08028e58 	.word	0x08028e58
 801d928:	08028e6c 	.word	0x08028e6c
 801d92c:	08028c68 	.word	0x08028c68
 801d930:	08028e3c 	.word	0x08028e3c

0801d934 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 801d934:	b590      	push	{r4, r7, lr}
 801d936:	b0d1      	sub	sp, #324	; 0x144
 801d938:	af04      	add	r7, sp, #16
 801d93a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d93e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801d942:	6018      	str	r0, [r3, #0]
 801d944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801d94c:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801d94e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801d956:	681b      	ldr	r3, [r3, #0]
 801d958:	695b      	ldr	r3, [r3, #20]
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	d101      	bne.n	801d962 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801d95e:	f005 fe8d 	bl	802367c <abort>
  const auto* params =
 801d962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	695b      	ldr	r3, [r3, #20]
 801d96e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 801d972:	4b67      	ldr	r3, [pc, #412]	; (801db10 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
 801d974:	681a      	ldr	r2, [r3, #0]
 801d976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d97a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801d97e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d982:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801d986:	6809      	ldr	r1, [r1, #0]
 801d988:	6818      	ldr	r0, [r3, #0]
 801d98a:	f7fe f9f1 	bl	801bd70 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801d98e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 801d992:	4b60      	ldr	r3, [pc, #384]	; (801db14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
 801d994:	681a      	ldr	r2, [r3, #0]
 801d996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d99a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801d99e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d9a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801d9a6:	6809      	ldr	r1, [r1, #0]
 801d9a8:	6818      	ldr	r0, [r3, #0]
 801d9aa:	f7fe f9e1 	bl	801bd70 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801d9ae:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 801d9b2:	4b59      	ldr	r3, [pc, #356]	; (801db18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e4>)
 801d9b4:	681a      	ldr	r2, [r3, #0]
 801d9b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d9ba:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801d9be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d9c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801d9c6:	6809      	ldr	r1, [r1, #0]
 801d9c8:	6818      	ldr	r0, [r3, #0]
 801d9ca:	f7fe f9d1 	bl	801bd70 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801d9ce:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 801d9d2:	4b52      	ldr	r3, [pc, #328]	; (801db1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
 801d9d4:	681a      	ldr	r2, [r3, #0]
 801d9d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d9da:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801d9de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d9e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801d9e6:	6809      	ldr	r1, [r1, #0]
 801d9e8:	6818      	ldr	r0, [r3, #0]
 801d9ea:	f7fe f9d1 	bl	801bd90 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801d9ee:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 801d9f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d9f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801d9fa:	681b      	ldr	r3, [r3, #0]
 801d9fc:	691b      	ldr	r3, [r3, #16]
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	d101      	bne.n	801da06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 801da02:	f005 fe3b 	bl	802367c <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801da06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801da0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801da0e:	681b      	ldr	r3, [r3, #0]
 801da10:	691b      	ldr	r3, [r3, #16]
 801da12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 801da16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801da1a:	7a1b      	ldrb	r3, [r3, #8]
 801da1c:	2b09      	cmp	r3, #9
 801da1e:	d021      	beq.n	801da64 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
 801da20:	2b09      	cmp	r3, #9
 801da22:	dc55      	bgt.n	801dad0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
 801da24:	2b01      	cmp	r3, #1
 801da26:	d002      	beq.n	801da2e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 801da28:	2b03      	cmp	r3, #3
 801da2a:	d036      	beq.n	801da9a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
 801da2c:	e050      	b.n	801dad0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801da2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801da32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801da36:	681b      	ldr	r3, [r3, #0]
 801da38:	695c      	ldr	r4, [r3, #20]
 801da3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801da3e:	7a1b      	ldrb	r3, [r3, #8]
 801da40:	4618      	mov	r0, r3
 801da42:	f7fd fa43 	bl	801aecc <TfLiteTypeGetName>
 801da46:	4602      	mov	r2, r0
 801da48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801da4c:	7a1b      	ldrb	r3, [r3, #8]
 801da4e:	4619      	mov	r1, r3
 801da50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801da54:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801da58:	460b      	mov	r3, r1
 801da5a:	4931      	ldr	r1, [pc, #196]	; (801db20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801da5c:	6800      	ldr	r0, [r0, #0]
 801da5e:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801da60:	2301      	movs	r3, #1
 801da62:	e04f      	b.n	801db04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 801da64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801da68:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801da6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801da70:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801da74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801da78:	9302      	str	r3, [sp, #8]
 801da7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801da7e:	9301      	str	r3, [sp, #4]
 801da80:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801da84:	9300      	str	r3, [sp, #0]
 801da86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801da8a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801da8e:	6809      	ldr	r1, [r1, #0]
 801da90:	6800      	ldr	r0, [r0, #0]
 801da92:	f7ff fe29 	bl	801d6e8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 801da96:	4603      	mov	r3, r0
                               output);
 801da98:	e034      	b.n	801db04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801da9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801da9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801daa2:	681b      	ldr	r3, [r3, #0]
 801daa4:	695c      	ldr	r4, [r3, #20]
 801daa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801daaa:	7a1b      	ldrb	r3, [r3, #8]
 801daac:	4618      	mov	r0, r3
 801daae:	f7fd fa0d 	bl	801aecc <TfLiteTypeGetName>
 801dab2:	4602      	mov	r2, r0
 801dab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dab8:	7a1b      	ldrb	r3, [r3, #8]
 801daba:	4619      	mov	r1, r3
 801dabc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dac0:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801dac4:	460b      	mov	r3, r1
 801dac6:	4916      	ldr	r1, [pc, #88]	; (801db20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801dac8:	6800      	ldr	r0, [r0, #0]
 801daca:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801dacc:	2301      	movs	r3, #1
 801dace:	e019      	b.n	801db04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801dad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dad4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	695c      	ldr	r4, [r3, #20]
 801dadc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dae0:	7a1b      	ldrb	r3, [r3, #8]
 801dae2:	4618      	mov	r0, r3
 801dae4:	f7fd f9f2 	bl	801aecc <TfLiteTypeGetName>
 801dae8:	4602      	mov	r2, r0
 801daea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801daee:	7a1b      	ldrb	r3, [r3, #8]
 801daf0:	4619      	mov	r1, r3
 801daf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801daf6:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801dafa:	460b      	mov	r3, r1
 801dafc:	4908      	ldr	r1, [pc, #32]	; (801db20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801dafe:	6800      	ldr	r0, [r0, #0]
 801db00:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801db02:	2301      	movs	r3, #1
    }
  }
  return kTfLiteOk;
}
 801db04:	4618      	mov	r0, r3
 801db06:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801db0a:	46bd      	mov	sp, r7
 801db0c:	bd90      	pop	{r4, r7, pc}
 801db0e:	bf00      	nop
 801db10:	080296c4 	.word	0x080296c4
 801db14:	080296c8 	.word	0x080296c8
 801db18:	080296cc 	.word	0x080296cc
 801db1c:	080296d0 	.word	0x080296d0
 801db20:	08028f90 	.word	0x08028f90

0801db24 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 801db24:	b4b0      	push	{r4, r5, r7}
 801db26:	b083      	sub	sp, #12
 801db28:	af00      	add	r7, sp, #0
 801db2a:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 801db2c:	4b13      	ldr	r3, [pc, #76]	; (801db7c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801db2e:	4a14      	ldr	r2, [pc, #80]	; (801db80 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 801db30:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 801db32:	4b12      	ldr	r3, [pc, #72]	; (801db7c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801db34:	2200      	movs	r2, #0
 801db36:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 801db38:	4b10      	ldr	r3, [pc, #64]	; (801db7c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801db3a:	4a12      	ldr	r2, [pc, #72]	; (801db84 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 801db3c:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 801db3e:	4b0f      	ldr	r3, [pc, #60]	; (801db7c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801db40:	4a11      	ldr	r2, [pc, #68]	; (801db88 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 801db42:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 801db44:	4b0d      	ldr	r3, [pc, #52]	; (801db7c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801db46:	2200      	movs	r2, #0
 801db48:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 801db4a:	4b0c      	ldr	r3, [pc, #48]	; (801db7c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801db4c:	2200      	movs	r2, #0
 801db4e:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 801db50:	4b0a      	ldr	r3, [pc, #40]	; (801db7c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801db52:	2200      	movs	r2, #0
 801db54:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 801db56:	4b09      	ldr	r3, [pc, #36]	; (801db7c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801db58:	2200      	movs	r2, #0
 801db5a:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	4a07      	ldr	r2, [pc, #28]	; (801db7c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801db60:	461c      	mov	r4, r3
 801db62:	4615      	mov	r5, r2
 801db64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801db66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801db68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801db6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801db70:	6878      	ldr	r0, [r7, #4]
 801db72:	370c      	adds	r7, #12
 801db74:	46bd      	mov	sp, r7
 801db76:	bcb0      	pop	{r4, r5, r7}
 801db78:	4770      	bx	lr
 801db7a:	bf00      	nop
 801db7c:	20002bf4 	.word	0x20002bf4
 801db80:	0801d44f 	.word	0x0801d44f
 801db84:	0801d47d 	.word	0x0801d47d
 801db88:	0801d935 	.word	0x0801d935

0801db8c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 801db8c:	b580      	push	{r7, lr}
 801db8e:	b08a      	sub	sp, #40	; 0x28
 801db90:	af02      	add	r7, sp, #8
 801db92:	60f8      	str	r0, [r7, #12]
 801db94:	607b      	str	r3, [r7, #4]
 801db96:	460b      	mov	r3, r1
 801db98:	72fb      	strb	r3, [r7, #11]
 801db9a:	4613      	mov	r3, r2
 801db9c:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 801db9e:	7abb      	ldrb	r3, [r7, #10]
 801dba0:	2b01      	cmp	r3, #1
 801dba2:	d03e      	beq.n	801dc22 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 801dba4:	f04f 0200 	mov.w	r2, #0
 801dba8:	f04f 0300 	mov.w	r3, #0
 801dbac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 801dbb0:	f107 0310 	add.w	r3, r7, #16
 801dbb4:	9301      	str	r3, [sp, #4]
 801dbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbb8:	9300      	str	r3, [sp, #0]
 801dbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dbbe:	6879      	ldr	r1, [r7, #4]
 801dbc0:	68f8      	ldr	r0, [r7, #12]
 801dbc2:	f7fd fcb5 	bl	801b530 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 801dbc6:	4603      	mov	r3, r0
 801dbc8:	77fb      	strb	r3, [r7, #31]
 801dbca:	7ffb      	ldrb	r3, [r7, #31]
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	d001      	beq.n	801dbd4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 801dbd0:	7ffb      	ldrb	r3, [r7, #31]
 801dbd2:	e027      	b.n	801dc24 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 801dbd4:	ed97 7b04 	vldr	d7, [r7, #16]
 801dbd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dbda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbdc:	3304      	adds	r3, #4
 801dbde:	4619      	mov	r1, r3
 801dbe0:	4610      	mov	r0, r2
 801dbe2:	eeb0 0a47 	vmov.f32	s0, s14
 801dbe6:	eef0 0a67 	vmov.f32	s1, s15
 801dbea:	f7fd f9f5 	bl	801afd8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	691a      	ldr	r2, [r3, #16]
 801dbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbf4:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 801dbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbf8:	691a      	ldr	r2, [r3, #16]
 801dbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbfc:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 801dbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc00:	691a      	ldr	r2, [r3, #16]
 801dc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc04:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 801dc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc08:	f103 0208 	add.w	r2, r3, #8
 801dc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc0e:	330c      	adds	r3, #12
 801dc10:	7af9      	ldrb	r1, [r7, #11]
 801dc12:	9300      	str	r3, [sp, #0]
 801dc14:	4613      	mov	r3, r2
 801dc16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dc18:	68f8      	ldr	r0, [r7, #12]
 801dc1a:	f7fd fe15 	bl	801b848 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 801dc1e:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 801dc20:	e000      	b.n	801dc24 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 801dc22:	2300      	movs	r3, #0
}
 801dc24:	4618      	mov	r0, r3
 801dc26:	3720      	adds	r7, #32
 801dc28:	46bd      	mov	sp, r7
 801dc2a:	bd80      	pop	{r7, pc}

0801dc2c <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801dc2c:	b480      	push	{r7}
 801dc2e:	b083      	sub	sp, #12
 801dc30:	af00      	add	r7, sp, #0
 801dc32:	6078      	str	r0, [r7, #4]
 801dc34:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dc3c:	683b      	ldr	r3, [r7, #0]
 801dc3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dc42:	429a      	cmp	r2, r3
 801dc44:	da01      	bge.n	801dc4a <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 801dc46:	683b      	ldr	r3, [r7, #0]
 801dc48:	e000      	b.n	801dc4c <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 801dc4a:	687b      	ldr	r3, [r7, #4]
    }
 801dc4c:	4618      	mov	r0, r3
 801dc4e:	370c      	adds	r7, #12
 801dc50:	46bd      	mov	sp, r7
 801dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc56:	4770      	bx	lr

0801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 801dc58:	b580      	push	{r7, lr}
 801dc5a:	b086      	sub	sp, #24
 801dc5c:	af00      	add	r7, sp, #0
 801dc5e:	6078      	str	r0, [r7, #4]
 801dc60:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 801dc62:	683b      	ldr	r3, [r7, #0]
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	d003      	beq.n	801dc70 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 801dc68:	683b      	ldr	r3, [r7, #0]
 801dc6a:	685b      	ldr	r3, [r3, #4]
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	d103      	bne.n	801dc78 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 801dc70:	6878      	ldr	r0, [r7, #4]
 801dc72:	f7fd fe65 	bl	801b940 <_ZN6tflite12RuntimeShapeC1Ev>
 801dc76:	e00d      	b.n	801dc94 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 801dc78:	683b      	ldr	r3, [r7, #0]
 801dc7a:	685b      	ldr	r3, [r3, #4]
 801dc7c:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801dc7e:	697b      	ldr	r3, [r7, #20]
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801dc84:	697b      	ldr	r3, [r7, #20]
 801dc86:	3304      	adds	r3, #4
 801dc88:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801dc8a:	68fa      	ldr	r2, [r7, #12]
 801dc8c:	6939      	ldr	r1, [r7, #16]
 801dc8e:	6878      	ldr	r0, [r7, #4]
 801dc90:	f7fd fe64 	bl	801b95c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801dc94:	6878      	ldr	r0, [r7, #4]
 801dc96:	3718      	adds	r7, #24
 801dc98:	46bd      	mov	sp, r7
 801dc9a:	bd80      	pop	{r7, pc}

0801dc9c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 801dc9c:	b580      	push	{r7, lr}
 801dc9e:	b086      	sub	sp, #24
 801dca0:	af00      	add	r7, sp, #0
 801dca2:	6078      	str	r0, [r7, #4]
 801dca4:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 801dca6:	6878      	ldr	r0, [r7, #4]
 801dca8:	f7fd fe81 	bl	801b9ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801dcac:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 801dcae:	683b      	ldr	r3, [r7, #0]
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	db03      	blt.n	801dcbc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 801dcb4:	683a      	ldr	r2, [r7, #0]
 801dcb6:	68fb      	ldr	r3, [r7, #12]
 801dcb8:	429a      	cmp	r2, r3
 801dcba:	db01      	blt.n	801dcc0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 801dcbc:	f005 fcde 	bl	802367c <abort>
  const auto* dims_data = shape.DimsData();
 801dcc0:	6878      	ldr	r0, [r7, #4]
 801dcc2:	f7fd ffa6 	bl	801bc12 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801dcc6:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 801dcc8:	2301      	movs	r3, #1
 801dcca:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801dccc:	2300      	movs	r3, #0
 801dcce:	613b      	str	r3, [r7, #16]
 801dcd0:	693a      	ldr	r2, [r7, #16]
 801dcd2:	68fb      	ldr	r3, [r7, #12]
 801dcd4:	429a      	cmp	r2, r3
 801dcd6:	da12      	bge.n	801dcfe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 801dcd8:	693a      	ldr	r2, [r7, #16]
 801dcda:	683b      	ldr	r3, [r7, #0]
 801dcdc:	429a      	cmp	r2, r3
 801dcde:	d005      	beq.n	801dcec <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 801dce0:	693b      	ldr	r3, [r7, #16]
 801dce2:	009b      	lsls	r3, r3, #2
 801dce4:	68ba      	ldr	r2, [r7, #8]
 801dce6:	4413      	add	r3, r2
 801dce8:	681b      	ldr	r3, [r3, #0]
 801dcea:	e000      	b.n	801dcee <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 801dcec:	2301      	movs	r3, #1
 801dcee:	697a      	ldr	r2, [r7, #20]
 801dcf0:	fb02 f303 	mul.w	r3, r2, r3
 801dcf4:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801dcf6:	693b      	ldr	r3, [r7, #16]
 801dcf8:	3301      	adds	r3, #1
 801dcfa:	613b      	str	r3, [r7, #16]
 801dcfc:	e7e8      	b.n	801dcd0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 801dcfe:	697b      	ldr	r3, [r7, #20]
}
 801dd00:	4618      	mov	r0, r3
 801dd02:	3718      	adds	r7, #24
 801dd04:	46bd      	mov	sp, r7
 801dd06:	bd80      	pop	{r7, pc}

0801dd08 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 801dd08:	b590      	push	{r4, r7, lr}
 801dd0a:	b087      	sub	sp, #28
 801dd0c:	af00      	add	r7, sp, #0
 801dd0e:	60f8      	str	r0, [r7, #12]
 801dd10:	60b9      	str	r1, [r7, #8]
 801dd12:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 801dd14:	68f8      	ldr	r0, [r7, #12]
 801dd16:	f7fd fe4a 	bl	801b9ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801dd1a:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 801dd1c:	2300      	movs	r3, #0
 801dd1e:	617b      	str	r3, [r7, #20]
 801dd20:	697a      	ldr	r2, [r7, #20]
 801dd22:	693b      	ldr	r3, [r7, #16]
 801dd24:	429a      	cmp	r2, r3
 801dd26:	da15      	bge.n	801dd54 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 801dd28:	697a      	ldr	r2, [r7, #20]
 801dd2a:	68bb      	ldr	r3, [r7, #8]
 801dd2c:	429a      	cmp	r2, r3
 801dd2e:	d00d      	beq.n	801dd4c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801dd30:	6979      	ldr	r1, [r7, #20]
 801dd32:	68f8      	ldr	r0, [r7, #12]
 801dd34:	f7fd ff48 	bl	801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801dd38:	4604      	mov	r4, r0
 801dd3a:	6979      	ldr	r1, [r7, #20]
 801dd3c:	6878      	ldr	r0, [r7, #4]
 801dd3e:	f7fd ff43 	bl	801bbc8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801dd42:	4603      	mov	r3, r0
 801dd44:	429c      	cmp	r4, r3
 801dd46:	d001      	beq.n	801dd4c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 801dd48:	f005 fc98 	bl	802367c <abort>
  for (int i = 0; i < dims_count; ++i) {
 801dd4c:	697b      	ldr	r3, [r7, #20]
 801dd4e:	3301      	adds	r3, #1
 801dd50:	617b      	str	r3, [r7, #20]
 801dd52:	e7e5      	b.n	801dd20 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 801dd54:	68b9      	ldr	r1, [r7, #8]
 801dd56:	68f8      	ldr	r0, [r7, #12]
 801dd58:	f7ff ffa0 	bl	801dc9c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801dd5c:	4603      	mov	r3, r0
}
 801dd5e:	4618      	mov	r0, r3
 801dd60:	371c      	adds	r7, #28
 801dd62:	46bd      	mov	sp, r7
 801dd64:	bd90      	pop	{r4, r7, pc}

0801dd66 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801dd66:	b580      	push	{r7, lr}
 801dd68:	b082      	sub	sp, #8
 801dd6a:	af00      	add	r7, sp, #0
 801dd6c:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801dd6e:	2100      	movs	r1, #0
 801dd70:	6878      	ldr	r0, [r7, #4]
 801dd72:	f7fe fb23 	bl	801c3bc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801dd76:	4603      	mov	r3, r0
}
 801dd78:	4618      	mov	r0, r3
 801dd7a:	3708      	adds	r7, #8
 801dd7c:	46bd      	mov	sp, r7
 801dd7e:	bd80      	pop	{r7, pc}

0801dd80 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801dd80:	b580      	push	{r7, lr}
 801dd82:	b082      	sub	sp, #8
 801dd84:	af00      	add	r7, sp, #0
 801dd86:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801dd88:	6878      	ldr	r0, [r7, #4]
 801dd8a:	f000 f805 	bl	801dd98 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 801dd8e:	4603      	mov	r3, r0
}
 801dd90:	4618      	mov	r0, r3
 801dd92:	3708      	adds	r7, #8
 801dd94:	46bd      	mov	sp, r7
 801dd96:	bd80      	pop	{r7, pc}

0801dd98 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801dd98:	b580      	push	{r7, lr}
 801dd9a:	b082      	sub	sp, #8
 801dd9c:	af00      	add	r7, sp, #0
 801dd9e:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801dda0:	2101      	movs	r1, #1
 801dda2:	6878      	ldr	r0, [r7, #4]
 801dda4:	f7fe fb0a 	bl	801c3bc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801dda8:	4603      	mov	r3, r0
  }
 801ddaa:	4618      	mov	r0, r3
 801ddac:	3708      	adds	r7, #8
 801ddae:	46bd      	mov	sp, r7
 801ddb0:	bd80      	pop	{r7, pc}

0801ddb2 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 801ddb2:	b590      	push	{r4, r7, lr}
 801ddb4:	b085      	sub	sp, #20
 801ddb6:	af00      	add	r7, sp, #0
 801ddb8:	60f8      	str	r0, [r7, #12]
 801ddba:	60b9      	str	r1, [r7, #8]
 801ddbc:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801ddbe:	f107 0308 	add.w	r3, r7, #8
 801ddc2:	4618      	mov	r0, r3
 801ddc4:	f7ff f8b4 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801ddc8:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801ddca:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801ddcc:	1d3b      	adds	r3, r7, #4
 801ddce:	4618      	mov	r0, r3
 801ddd0:	f7ff f8ae 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801ddd4:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	461a      	mov	r2, r3
 801ddda:	4621      	mov	r1, r4
 801dddc:	68f8      	ldr	r0, [r7, #12]
 801ddde:	f7ff fb0b 	bl	801d3f8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801dde2:	4603      	mov	r3, r0
 801dde4:	4618      	mov	r0, r3
 801dde6:	f7ff f831 	bl	801ce4c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801ddea:	4603      	mov	r3, r0
}
 801ddec:	4618      	mov	r0, r3
 801ddee:	3714      	adds	r7, #20
 801ddf0:	46bd      	mov	sp, r7
 801ddf2:	bd90      	pop	{r4, r7, pc}

0801ddf4 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 801ddf4:	b580      	push	{r7, lr}
 801ddf6:	b082      	sub	sp, #8
 801ddf8:	af00      	add	r7, sp, #0
 801ddfa:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	2b00      	cmp	r3, #0
 801de00:	bf0c      	ite	eq
 801de02:	2301      	moveq	r3, #1
 801de04:	2300      	movne	r3, #0
 801de06:	b2db      	uxtb	r3, r3
 801de08:	4618      	mov	r0, r3
 801de0a:	f7fe fef9 	bl	801cc00 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801de0e:	4603      	mov	r3, r0
}
 801de10:	4618      	mov	r0, r3
 801de12:	3708      	adds	r7, #8
 801de14:	46bd      	mov	sp, r7
 801de16:	bd80      	pop	{r7, pc}

0801de18 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 801de18:	b580      	push	{r7, lr}
 801de1a:	b08a      	sub	sp, #40	; 0x28
 801de1c:	af00      	add	r7, sp, #0
 801de1e:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 801de20:	482c      	ldr	r0, [pc, #176]	; (801ded4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801de22:	f7ff ffa0 	bl	801dd66 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801de26:	4603      	mov	r3, r0
 801de28:	4618      	mov	r0, r3
 801de2a:	f7ff f88c 	bl	801cf46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801de2e:	4603      	mov	r3, r0
 801de30:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 801de32:	4829      	ldr	r0, [pc, #164]	; (801ded8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 801de34:	f7ff ff97 	bl	801dd66 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801de38:	4603      	mov	r3, r0
 801de3a:	4618      	mov	r0, r3
 801de3c:	f7ff f883 	bl	801cf46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801de40:	4603      	mov	r3, r0
 801de42:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 801de44:	f000 f86c 	bl	801df20 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 801de48:	4603      	mov	r3, r0
 801de4a:	4619      	mov	r1, r3
 801de4c:	6878      	ldr	r0, [r7, #4]
 801de4e:	f000 f870 	bl	801df32 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801de52:	4603      	mov	r3, r0
 801de54:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 801de56:	69f9      	ldr	r1, [r7, #28]
 801de58:	69f8      	ldr	r0, [r7, #28]
 801de5a:	f000 f83f 	bl	801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801de5e:	4603      	mov	r3, r0
 801de60:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 801de62:	69f9      	ldr	r1, [r7, #28]
 801de64:	69b8      	ldr	r0, [r7, #24]
 801de66:	f000 f839 	bl	801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801de6a:	4603      	mov	r3, r0
 801de6c:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 801de6e:	69b9      	ldr	r1, [r7, #24]
 801de70:	69b8      	ldr	r0, [r7, #24]
 801de72:	f000 f833 	bl	801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801de76:	4603      	mov	r3, r0
 801de78:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 801de7a:	6938      	ldr	r0, [r7, #16]
 801de7c:	f000 f877 	bl	801df6e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801de80:	4603      	mov	r3, r0
 801de82:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 801de84:	6979      	ldr	r1, [r7, #20]
 801de86:	68f8      	ldr	r0, [r7, #12]
 801de88:	f000 f853 	bl	801df32 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801de8c:	4603      	mov	r3, r0
 801de8e:	6a39      	ldr	r1, [r7, #32]
 801de90:	4618      	mov	r0, r3
 801de92:	f000 f823 	bl	801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801de96:	4603      	mov	r3, r0
 801de98:	69b9      	ldr	r1, [r7, #24]
 801de9a:	4618      	mov	r0, r3
 801de9c:	f000 f849 	bl	801df32 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dea0:	4603      	mov	r3, r0
 801dea2:	4618      	mov	r0, r3
 801dea4:	f000 f879 	bl	801df9a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801dea8:	4603      	mov	r3, r0
 801deaa:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 801deac:	68b9      	ldr	r1, [r7, #8]
 801deae:	69f8      	ldr	r0, [r7, #28]
 801deb0:	f000 f83f 	bl	801df32 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801deb4:	4603      	mov	r3, r0
 801deb6:	4619      	mov	r1, r3
 801deb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801deba:	f000 f80f 	bl	801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801debe:	4603      	mov	r3, r0
 801dec0:	4619      	mov	r1, r3
 801dec2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dec4:	f000 f87f 	bl	801dfc6 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dec8:	4603      	mov	r3, r0
}
 801deca:	4618      	mov	r0, r3
 801decc:	3728      	adds	r7, #40	; 0x28
 801dece:	46bd      	mov	sp, r7
 801ded0:	bd80      	pop	{r7, pc}
 801ded2:	bf00      	nop
 801ded4:	70f5a894 	.word	0x70f5a894
 801ded8:	2aaaaaab 	.word	0x2aaaaaab

0801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801dedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dede:	b085      	sub	sp, #20
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	6078      	str	r0, [r7, #4]
 801dee4:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801dee6:	1d3b      	adds	r3, r7, #4
 801dee8:	4618      	mov	r0, r3
 801deea:	f7ff f821 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801deee:	4603      	mov	r3, r0
 801def0:	681d      	ldr	r5, [r3, #0]
 801def2:	463b      	mov	r3, r7
 801def4:	4618      	mov	r0, r3
 801def6:	f7ff f81b 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801defa:	4603      	mov	r3, r0
 801defc:	681e      	ldr	r6, [r3, #0]
 801defe:	f107 030c 	add.w	r3, r7, #12
 801df02:	4618      	mov	r0, r3
 801df04:	f7ff f814 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801df08:	4604      	mov	r4, r0
 801df0a:	4631      	mov	r1, r6
 801df0c:	4628      	mov	r0, r5
 801df0e:	f7fd fde5 	bl	801badc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801df12:	4603      	mov	r3, r0
 801df14:	6023      	str	r3, [r4, #0]
  return c;
 801df16:	68fb      	ldr	r3, [r7, #12]
}
 801df18:	4618      	mov	r0, r3
 801df1a:	3714      	adds	r7, #20
 801df1c:	46bd      	mov	sp, r7
 801df1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801df20 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 801df20:	b580      	push	{r7, lr}
 801df22:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801df24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801df28:	f7ff f80d 	bl	801cf46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801df2c:	4603      	mov	r3, r0
  }
 801df2e:	4618      	mov	r0, r3
 801df30:	bd80      	pop	{r7, pc}

0801df32 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801df32:	b590      	push	{r4, r7, lr}
 801df34:	b083      	sub	sp, #12
 801df36:	af00      	add	r7, sp, #0
 801df38:	6078      	str	r0, [r7, #4]
 801df3a:	6039      	str	r1, [r7, #0]
 801df3c:	1d3b      	adds	r3, r7, #4
 801df3e:	4618      	mov	r0, r3
 801df40:	f7fe fff6 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801df44:	4603      	mov	r3, r0
 801df46:	681c      	ldr	r4, [r3, #0]
 801df48:	463b      	mov	r3, r7
 801df4a:	4618      	mov	r0, r3
 801df4c:	f7fe fff0 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801df50:	4603      	mov	r3, r0
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	4619      	mov	r1, r3
 801df56:	4620      	mov	r0, r4
 801df58:	f7fe fe30 	bl	801cbbc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801df5c:	4603      	mov	r3, r0
 801df5e:	4618      	mov	r0, r3
 801df60:	f7fe ff74 	bl	801ce4c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801df64:	4603      	mov	r3, r0
 801df66:	4618      	mov	r0, r3
 801df68:	370c      	adds	r7, #12
 801df6a:	46bd      	mov	sp, r7
 801df6c:	bd90      	pop	{r4, r7, pc}

0801df6e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801df6e:	b580      	push	{r7, lr}
 801df70:	b082      	sub	sp, #8
 801df72:	af00      	add	r7, sp, #0
 801df74:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801df76:	1d3b      	adds	r3, r7, #4
 801df78:	4618      	mov	r0, r3
 801df7a:	f7fe ffd9 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801df7e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801df80:	681b      	ldr	r3, [r3, #0]
 801df82:	4618      	mov	r0, r3
 801df84:	f000 f83d 	bl	801e002 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 801df88:	4603      	mov	r3, r0
 801df8a:	4618      	mov	r0, r3
 801df8c:	f7fe ff5e 	bl	801ce4c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801df90:	4603      	mov	r3, r0
}
 801df92:	4618      	mov	r0, r3
 801df94:	3708      	adds	r7, #8
 801df96:	46bd      	mov	sp, r7
 801df98:	bd80      	pop	{r7, pc}

0801df9a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801df9a:	b580      	push	{r7, lr}
 801df9c:	b082      	sub	sp, #8
 801df9e:	af00      	add	r7, sp, #0
 801dfa0:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801dfa2:	1d3b      	adds	r3, r7, #4
 801dfa4:	4618      	mov	r0, r3
 801dfa6:	f7fe ffc3 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dfaa:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801dfac:	681b      	ldr	r3, [r3, #0]
 801dfae:	4618      	mov	r0, r3
 801dfb0:	f7ff fee6 	bl	801dd80 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 801dfb4:	4603      	mov	r3, r0
 801dfb6:	4618      	mov	r0, r3
 801dfb8:	f7fe ff48 	bl	801ce4c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801dfbc:	4603      	mov	r3, r0
}
 801dfbe:	4618      	mov	r0, r3
 801dfc0:	3708      	adds	r7, #8
 801dfc2:	46bd      	mov	sp, r7
 801dfc4:	bd80      	pop	{r7, pc}

0801dfc6 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 801dfc6:	b590      	push	{r4, r7, lr}
 801dfc8:	b083      	sub	sp, #12
 801dfca:	af00      	add	r7, sp, #0
 801dfcc:	6078      	str	r0, [r7, #4]
 801dfce:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801dfd0:	1d3b      	adds	r3, r7, #4
 801dfd2:	4618      	mov	r0, r3
 801dfd4:	f7fe ffac 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dfd8:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801dfda:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801dfdc:	463b      	mov	r3, r7
 801dfde:	4618      	mov	r0, r3
 801dfe0:	f7fe ffa6 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dfe4:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801dfe6:	681b      	ldr	r3, [r3, #0]
 801dfe8:	4619      	mov	r1, r3
 801dfea:	4620      	mov	r0, r4
 801dfec:	f000 f815 	bl	801e01a <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 801dff0:	4603      	mov	r3, r0
 801dff2:	4618      	mov	r0, r3
 801dff4:	f7fe ff2a 	bl	801ce4c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801dff8:	4603      	mov	r3, r0
}
 801dffa:	4618      	mov	r0, r3
 801dffc:	370c      	adds	r7, #12
 801dffe:	46bd      	mov	sp, r7
 801e000:	bd90      	pop	{r4, r7, pc}

0801e002 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801e002:	b580      	push	{r7, lr}
 801e004:	b082      	sub	sp, #8
 801e006:	af00      	add	r7, sp, #0
 801e008:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801e00a:	6878      	ldr	r0, [r7, #4]
 801e00c:	f000 f813 	bl	801e036 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 801e010:	4603      	mov	r3, r0
}
 801e012:	4618      	mov	r0, r3
 801e014:	3708      	adds	r7, #8
 801e016:	46bd      	mov	sp, r7
 801e018:	bd80      	pop	{r7, pc}

0801e01a <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 801e01a:	b580      	push	{r7, lr}
 801e01c:	b082      	sub	sp, #8
 801e01e:	af00      	add	r7, sp, #0
 801e020:	6078      	str	r0, [r7, #4]
 801e022:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 801e024:	6839      	ldr	r1, [r7, #0]
 801e026:	6878      	ldr	r0, [r7, #4]
 801e028:	f000 f812 	bl	801e050 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 801e02c:	4603      	mov	r3, r0
}
 801e02e:	4618      	mov	r0, r3
 801e030:	3708      	adds	r7, #8
 801e032:	46bd      	mov	sp, r7
 801e034:	bd80      	pop	{r7, pc}

0801e036 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801e036:	b580      	push	{r7, lr}
 801e038:	b082      	sub	sp, #8
 801e03a:	af00      	add	r7, sp, #0
 801e03c:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801e03e:	2102      	movs	r1, #2
 801e040:	6878      	ldr	r0, [r7, #4]
 801e042:	f7fe f9bb 	bl	801c3bc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801e046:	4603      	mov	r3, r0
  }
 801e048:	4618      	mov	r0, r3
 801e04a:	3708      	adds	r7, #8
 801e04c:	46bd      	mov	sp, r7
 801e04e:	bd80      	pop	{r7, pc}

0801e050 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 801e050:	b580      	push	{r7, lr}
 801e052:	b082      	sub	sp, #8
 801e054:	af00      	add	r7, sp, #0
 801e056:	6078      	str	r0, [r7, #4]
 801e058:	6039      	str	r1, [r7, #0]
 801e05a:	6839      	ldr	r1, [r7, #0]
 801e05c:	6878      	ldr	r0, [r7, #4]
 801e05e:	f7fe fdad 	bl	801cbbc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801e062:	4603      	mov	r3, r0
 801e064:	4618      	mov	r0, r3
 801e066:	3708      	adds	r7, #8
 801e068:	46bd      	mov	sp, r7
 801e06a:	bd80      	pop	{r7, pc}

0801e06c <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801e06c:	b480      	push	{r7}
 801e06e:	b083      	sub	sp, #12
 801e070:	af00      	add	r7, sp, #0
 801e072:	6078      	str	r0, [r7, #4]
 801e074:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	781a      	ldrb	r2, [r3, #0]
 801e07a:	683b      	ldr	r3, [r7, #0]
 801e07c:	781b      	ldrb	r3, [r3, #0]
 801e07e:	429a      	cmp	r2, r3
 801e080:	d201      	bcs.n	801e086 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 801e082:	683b      	ldr	r3, [r7, #0]
 801e084:	e000      	b.n	801e088 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 801e086:	687b      	ldr	r3, [r7, #4]
    }
 801e088:	4618      	mov	r0, r3
 801e08a:	370c      	adds	r7, #12
 801e08c:	46bd      	mov	sp, r7
 801e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e092:	4770      	bx	lr

0801e094 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801e094:	b480      	push	{r7}
 801e096:	b083      	sub	sp, #12
 801e098:	af00      	add	r7, sp, #0
 801e09a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d002      	beq.n	801e0a8 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 801e0a2:	687b      	ldr	r3, [r7, #4]
 801e0a4:	681b      	ldr	r3, [r3, #0]
 801e0a6:	e000      	b.n	801e0aa <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 801e0a8:	2300      	movs	r3, #0
}
 801e0aa:	4618      	mov	r0, r3
 801e0ac:	370c      	adds	r7, #12
 801e0ae:	46bd      	mov	sp, r7
 801e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0b4:	4770      	bx	lr
	...

0801e0b8 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 801e0b8:	b580      	push	{r7, lr}
 801e0ba:	b086      	sub	sp, #24
 801e0bc:	af00      	add	r7, sp, #0
 801e0be:	4603      	mov	r3, r0
 801e0c0:	6039      	str	r1, [r7, #0]
 801e0c2:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 801e0c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801e0c8:	11db      	asrs	r3, r3, #7
 801e0ca:	b21b      	sxth	r3, r3
 801e0cc:	b29b      	uxth	r3, r3
 801e0ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801e0d2:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 801e0d4:	8afb      	ldrh	r3, [r7, #22]
 801e0d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e0da:	d306      	bcc.n	801e0ea <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 801e0dc:	4b1a      	ldr	r3, [pc, #104]	; (801e148 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 801e0de:	4a1b      	ldr	r2, [pc, #108]	; (801e14c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 801e0e0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801e0e4:	481a      	ldr	r0, [pc, #104]	; (801e150 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 801e0e6:	f005 fad1 	bl	802368c <__assert_func>
  int16_t offset = value & 0x7f;
 801e0ea:	88fb      	ldrh	r3, [r7, #6]
 801e0ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e0f0:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 801e0f2:	8afb      	ldrh	r3, [r7, #22]
 801e0f4:	005b      	lsls	r3, r3, #1
 801e0f6:	683a      	ldr	r2, [r7, #0]
 801e0f8:	4413      	add	r3, r2
 801e0fa:	881b      	ldrh	r3, [r3, #0]
 801e0fc:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 801e0fe:	8afb      	ldrh	r3, [r7, #22]
 801e100:	3301      	adds	r3, #1
 801e102:	005b      	lsls	r3, r3, #1
 801e104:	683a      	ldr	r2, [r7, #0]
 801e106:	4413      	add	r3, r2
 801e108:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e10c:	b29a      	uxth	r2, r3
 801e10e:	8afb      	ldrh	r3, [r7, #22]
 801e110:	005b      	lsls	r3, r3, #1
 801e112:	6839      	ldr	r1, [r7, #0]
 801e114:	440b      	add	r3, r1
 801e116:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e11a:	b29b      	uxth	r3, r3
 801e11c:	1ad3      	subs	r3, r2, r3
 801e11e:	b29b      	uxth	r3, r3
 801e120:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 801e122:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801e126:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801e12a:	fb02 f303 	mul.w	r3, r2, r3
 801e12e:	3340      	adds	r3, #64	; 0x40
 801e130:	11db      	asrs	r3, r3, #7
 801e132:	60fb      	str	r3, [r7, #12]
  return base + delta;
 801e134:	68fb      	ldr	r3, [r7, #12]
 801e136:	b29a      	uxth	r2, r3
 801e138:	8a7b      	ldrh	r3, [r7, #18]
 801e13a:	4413      	add	r3, r2
 801e13c:	b29b      	uxth	r3, r3
 801e13e:	b21b      	sxth	r3, r3
}
 801e140:	4618      	mov	r0, r3
 801e142:	3718      	adds	r7, #24
 801e144:	46bd      	mov	sp, r7
 801e146:	bd80      	pop	{r7, pc}
 801e148:	08028fac 	.word	0x08028fac
 801e14c:	08028fd8 	.word	0x08028fd8
 801e150:	0802901c 	.word	0x0802901c

0801e154 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 801e154:	b580      	push	{r7, lr}
 801e156:	b08a      	sub	sp, #40	; 0x28
 801e158:	af00      	add	r7, sp, #0
 801e15a:	60f8      	str	r0, [r7, #12]
 801e15c:	60b9      	str	r1, [r7, #8]
 801e15e:	607a      	str	r2, [r7, #4]
 801e160:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 801e162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e164:	687a      	ldr	r2, [r7, #4]
 801e166:	fb03 f202 	mul.w	r2, r3, r2
 801e16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e16c:	4413      	add	r3, r2
 801e16e:	005b      	lsls	r3, r3, #1
 801e170:	68ba      	ldr	r2, [r7, #8]
 801e172:	4413      	add	r3, r2
 801e174:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e178:	461a      	mov	r2, r3
 801e17a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e17e:	1ad3      	subs	r3, r2, r3
 801e180:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 801e182:	68fb      	ldr	r3, [r7, #12]
 801e184:	6899      	ldr	r1, [r3, #8]
 801e186:	68fb      	ldr	r3, [r7, #12]
 801e188:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 801e18a:	461a      	mov	r2, r3
 801e18c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e18e:	f7fd fdab 	bl	801bce8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801e192:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 801e194:	6a3b      	ldr	r3, [r7, #32]
 801e196:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 801e19a:	337f      	adds	r3, #127	; 0x7f
 801e19c:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801e19e:	4b12      	ldr	r3, [pc, #72]	; (801e1e8 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 801e1a0:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 801e1a2:	f107 0214 	add.w	r2, r7, #20
 801e1a6:	f107 0310 	add.w	r3, r7, #16
 801e1aa:	4611      	mov	r1, r2
 801e1ac:	4618      	mov	r0, r3
 801e1ae:	f7fd fbb3 	bl	801b918 <_ZSt3maxIlERKT_S2_S2_>
 801e1b2:	4602      	mov	r2, r0
 801e1b4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e1b8:	61bb      	str	r3, [r7, #24]
 801e1ba:	f107 0318 	add.w	r3, r7, #24
 801e1be:	4619      	mov	r1, r3
 801e1c0:	4610      	mov	r0, r2
 801e1c2:	f7fd fb95 	bl	801b8f0 <_ZSt3minIlERKT_S2_S2_>
 801e1c6:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801e1c8:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 801e1ca:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 801e1cc:	68fb      	ldr	r3, [r7, #12]
 801e1ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e1d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801e1d4:	4611      	mov	r1, r2
 801e1d6:	4618      	mov	r0, r3
 801e1d8:	f7ff ff6e 	bl	801e0b8 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801e1dc:	4603      	mov	r3, r0
}
 801e1de:	4618      	mov	r0, r3
 801e1e0:	3728      	adds	r7, #40	; 0x28
 801e1e2:	46bd      	mov	sp, r7
 801e1e4:	bd80      	pop	{r7, pc}
 801e1e6:	bf00      	nop
 801e1e8:	ffff8000 	.word	0xffff8000

0801e1ec <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 801e1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1f0:	b0ab      	sub	sp, #172	; 0xac
 801e1f2:	af02      	add	r7, sp, #8
 801e1f4:	63f8      	str	r0, [r7, #60]	; 0x3c
 801e1f6:	63b9      	str	r1, [r7, #56]	; 0x38
 801e1f8:	637a      	str	r2, [r7, #52]	; 0x34
 801e1fa:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801e1fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801e1fe:	f7fd fbd6 	bl	801b9ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801e202:	4603      	mov	r3, r0
 801e204:	3b01      	subs	r3, #1
 801e206:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801e20a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e20c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801e210:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801e212:	f7ff fd79 	bl	801dd08 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801e216:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801e21a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e21e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e220:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801e224:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801e226:	f7fe fd31 	bl	801cc8c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801e22a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 801e22e:	2300      	movs	r3, #0
 801e230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801e234:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801e238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801e23c:	429a      	cmp	r2, r3
 801e23e:	f280 8157 	bge.w	801e4f0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 801e242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e246:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801e24a:	2300      	movs	r3, #0
 801e24c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801e250:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e254:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e258:	429a      	cmp	r2, r3
 801e25a:	da1c      	bge.n	801e296 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801e25c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801e260:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e264:	fb03 f202 	mul.w	r2, r3, r2
 801e268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e26c:	4413      	add	r3, r2
 801e26e:	005a      	lsls	r2, r3, #1
 801e270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e272:	441a      	add	r2, r3
 801e274:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 801e278:	4611      	mov	r1, r2
 801e27a:	4618      	mov	r0, r3
 801e27c:	f7ff fcd6 	bl	801dc2c <_ZSt3maxIsERKT_S2_S2_>
 801e280:	4603      	mov	r3, r0
 801e282:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e286:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801e28a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e28e:	3301      	adds	r3, #1
 801e290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801e294:	e7dc      	b.n	801e250 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 801e296:	2300      	movs	r3, #0
 801e298:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 801e29c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801e2a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e2a4:	fb02 f303 	mul.w	r3, r2, r3
 801e2a8:	005a      	lsls	r2, r3, #1
 801e2aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2ae:	4413      	add	r3, r2
 801e2b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 801e2b2:	2300      	movs	r3, #0
 801e2b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e2b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801e2bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e2c0:	429a      	cmp	r2, r3
 801e2c2:	da28      	bge.n	801e316 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801e2c4:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 801e2c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e2cc:	005a      	lsls	r2, r3, #1
 801e2ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801e2d0:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801e2d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e2d6:	9301      	str	r3, [sp, #4]
 801e2d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e2dc:	9300      	str	r3, [sp, #0]
 801e2de:	460b      	mov	r3, r1
 801e2e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801e2e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e2e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e2e8:	f7ff ff34 	bl	801e154 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 801e2ec:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 801e2ee:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 801e2f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e2f4:	005a      	lsls	r2, r3, #1
 801e2f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801e2f8:	4413      	add	r3, r2
 801e2fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e2fe:	461a      	mov	r2, r3
 801e300:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801e304:	4413      	add	r3, r2
 801e306:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 801e30a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e30e:	3301      	adds	r3, #1
 801e310:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e314:	e7d0      	b.n	801e2b8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 801e316:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801e31a:	4618      	mov	r0, r3
 801e31c:	f7fe fd84 	bl	801ce28 <_ZN6tflite17CountLeadingZerosImEEiT_>
 801e320:	4603      	mov	r3, r0
 801e322:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 801e326:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801e32a:	17da      	asrs	r2, r3, #31
 801e32c:	623b      	str	r3, [r7, #32]
 801e32e:	627a      	str	r2, [r7, #36]	; 0x24
 801e330:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801e334:	1e59      	subs	r1, r3, #1
 801e336:	f1a1 0320 	sub.w	r3, r1, #32
 801e33a:	f1c1 0220 	rsb	r2, r1, #32
 801e33e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e340:	fa00 f901 	lsl.w	r9, r0, r1
 801e344:	6a38      	ldr	r0, [r7, #32]
 801e346:	fa00 f303 	lsl.w	r3, r0, r3
 801e34a:	ea49 0903 	orr.w	r9, r9, r3
 801e34e:	6a3b      	ldr	r3, [r7, #32]
 801e350:	fa23 f202 	lsr.w	r2, r3, r2
 801e354:	ea49 0902 	orr.w	r9, r9, r2
 801e358:	6a3b      	ldr	r3, [r7, #32]
 801e35a:	fa03 f801 	lsl.w	r8, r3, r1
 801e35e:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 801e362:	61bb      	str	r3, [r7, #24]
 801e364:	f149 0300 	adc.w	r3, r9, #0
 801e368:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 801e36a:	f04f 0200 	mov.w	r2, #0
 801e36e:	f04f 0300 	mov.w	r3, #0
 801e372:	69b9      	ldr	r1, [r7, #24]
 801e374:	0b8a      	lsrs	r2, r1, #14
 801e376:	69f9      	ldr	r1, [r7, #28]
 801e378:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 801e37c:	69f9      	ldr	r1, [r7, #28]
 801e37e:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 801e380:	4613      	mov	r3, r2
 801e382:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 801e384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e386:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 801e38a:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801e38c:	4b5b      	ldr	r3, [pc, #364]	; (801e4fc <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 801e38e:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 801e390:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801e394:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e398:	4611      	mov	r1, r2
 801e39a:	4618      	mov	r0, r3
 801e39c:	f7fd fabc 	bl	801b918 <_ZSt3maxIlERKT_S2_S2_>
 801e3a0:	4602      	mov	r2, r0
 801e3a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e3a6:	657b      	str	r3, [r7, #84]	; 0x54
 801e3a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e3ac:	4619      	mov	r1, r3
 801e3ae:	4610      	mov	r0, r2
 801e3b0:	f7fd fa9e 	bl	801b8f0 <_ZSt3minIlERKT_S2_S2_>
 801e3b4:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801e3b6:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 801e3b8:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 801e3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 801e3c0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e3c4:	4611      	mov	r1, r2
 801e3c6:	4618      	mov	r0, r3
 801e3c8:	f7ff fe76 	bl	801e0b8 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801e3cc:	4603      	mov	r3, r0
 801e3ce:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 801e3d2:	2300      	movs	r3, #0
 801e3d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801e3d8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801e3dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e3e0:	429a      	cmp	r2, r3
 801e3e2:	da7f      	bge.n	801e4e4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 801e3e4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801e3e8:	f1c3 031f 	rsb	r3, r3, #31
 801e3ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 801e3f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801e3f4:	1e5a      	subs	r2, r3, #1
 801e3f6:	2301      	movs	r3, #1
 801e3f8:	4093      	lsls	r3, r2
 801e3fa:	17da      	asrs	r2, r3, #31
 801e3fc:	603b      	str	r3, [r7, #0]
 801e3fe:	607a      	str	r2, [r7, #4]
 801e400:	e9d7 3400 	ldrd	r3, r4, [r7]
 801e404:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801e408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801e40c:	005a      	lsls	r2, r3, #1
 801e40e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801e410:	4413      	add	r3, r2
 801e412:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e416:	b21b      	sxth	r3, r3
 801e418:	17da      	asrs	r2, r3, #31
 801e41a:	613b      	str	r3, [r7, #16]
 801e41c:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801e41e:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801e422:	17da      	asrs	r2, r3, #31
 801e424:	60bb      	str	r3, [r7, #8]
 801e426:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801e428:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e42c:	460b      	mov	r3, r1
 801e42e:	68ba      	ldr	r2, [r7, #8]
 801e430:	fb02 f203 	mul.w	r2, r2, r3
 801e434:	68fb      	ldr	r3, [r7, #12]
 801e436:	e9c7 0104 	strd	r0, r1, [r7, #16]
 801e43a:	4601      	mov	r1, r0
 801e43c:	fb01 f303 	mul.w	r3, r1, r3
 801e440:	4413      	add	r3, r2
 801e442:	693a      	ldr	r2, [r7, #16]
 801e444:	68b9      	ldr	r1, [r7, #8]
 801e446:	fba2 ab01 	umull	sl, fp, r2, r1
 801e44a:	445b      	add	r3, fp
 801e44c:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801e44e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801e452:	eb1a 0502 	adds.w	r5, sl, r2
 801e456:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 801e45a:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 801e45e:	f1c1 0320 	rsb	r3, r1, #32
 801e462:	f1b1 0220 	subs.w	r2, r1, #32
 801e466:	fa25 f001 	lsr.w	r0, r5, r1
 801e46a:	62b8      	str	r0, [r7, #40]	; 0x28
 801e46c:	fa06 f303 	lsl.w	r3, r6, r3
 801e470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e472:	ea40 0003 	orr.w	r0, r0, r3
 801e476:	62b8      	str	r0, [r7, #40]	; 0x28
 801e478:	d404      	bmi.n	801e484 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 801e47a:	fa46 f202 	asr.w	r2, r6, r2
 801e47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e480:	4313      	orrs	r3, r2
 801e482:	62bb      	str	r3, [r7, #40]	; 0x28
 801e484:	fa46 f301 	asr.w	r3, r6, r1
 801e488:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801e48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e48c:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 801e48e:	2300      	movs	r3, #0
 801e490:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 801e492:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e496:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801e49a:	4611      	mov	r1, r2
 801e49c:	4618      	mov	r0, r3
 801e49e:	f7fd fa3b 	bl	801b918 <_ZSt3maxIlERKT_S2_S2_>
 801e4a2:	4602      	mov	r2, r0
 801e4a4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e4a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e4aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801e4ae:	4619      	mov	r1, r3
 801e4b0:	4610      	mov	r0, r2
 801e4b2:	f7fd fa1d 	bl	801b8f0 <_ZSt3minIlERKT_S2_S2_>
 801e4b6:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 801e4b8:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 801e4ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801e4be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e4c2:	fb03 f202 	mul.w	r2, r3, r2
 801e4c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801e4ca:	4413      	add	r3, r2
 801e4cc:	005a      	lsls	r2, r3, #1
 801e4ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e4d2:	441a      	add	r2, r3
 801e4d4:	b20b      	sxth	r3, r1
 801e4d6:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 801e4d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801e4dc:	3301      	adds	r3, #1
 801e4de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801e4e2:	e779      	b.n	801e3d8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 801e4e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e4e8:	3301      	adds	r3, #1
 801e4ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801e4ee:	e6a1      	b.n	801e234 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 801e4f0:	bf00      	nop
 801e4f2:	37a4      	adds	r7, #164	; 0xa4
 801e4f4:	46bd      	mov	sp, r7
 801e4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4fa:	bf00      	nop
 801e4fc:	ffff8000 	.word	0xffff8000

0801e500 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 801e500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e504:	b0bc      	sub	sp, #240	; 0xf0
 801e506:	af04      	add	r7, sp, #16
 801e508:	60f8      	str	r0, [r7, #12]
 801e50a:	60b9      	str	r1, [r7, #8]
 801e50c:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 801e50e:	68fb      	ldr	r3, [r7, #12]
 801e510:	7a1b      	ldrb	r3, [r3, #8]
 801e512:	2b03      	cmp	r3, #3
 801e514:	d127      	bne.n	801e566 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 801e516:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801e51a:	68f9      	ldr	r1, [r7, #12]
 801e51c:	4618      	mov	r0, r3
 801e51e:	f7ff fb9b 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801e522:	68f8      	ldr	r0, [r7, #12]
 801e524:	f7fe f98e 	bl	801c844 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801e528:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 801e52a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801e52e:	68b9      	ldr	r1, [r7, #8]
 801e530:	4618      	mov	r0, r3
 801e532:	f7ff fb91 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801e536:	68b8      	ldr	r0, [r7, #8]
 801e538:	f7fe f993 	bl	801c862 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801e53c:	4602      	mov	r2, r0
 801e53e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801e542:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801e546:	9200      	str	r2, [sp, #0]
 801e548:	4622      	mov	r2, r4
 801e54a:	6878      	ldr	r0, [r7, #4]
 801e54c:	f000 f930 	bl	801e7b0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 801e550:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801e554:	4618      	mov	r0, r3
 801e556:	f7fd fa14 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801e55a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801e55e:	4618      	mov	r0, r3
 801e560:	f7fd fa0f 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
 801e564:	e080      	b.n	801e668 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
        tflite::micro::GetTensorData<uint8_t>(output));
  } else if (input->type == kTfLiteInt8) {
 801e566:	68fb      	ldr	r3, [r7, #12]
 801e568:	7a1b      	ldrb	r3, [r3, #8]
 801e56a:	2b09      	cmp	r3, #9
 801e56c:	d153      	bne.n	801e616 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x116>
    if (output->type == kTfLiteInt16) {
 801e56e:	68bb      	ldr	r3, [r7, #8]
 801e570:	7a1b      	ldrb	r3, [r3, #8]
 801e572:	2b07      	cmp	r3, #7
 801e574:	d077      	beq.n	801e666 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
          op_data, tflite::micro::GetTensorShape(input),
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int16_t>(output));
    } else {
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801e576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e57a:	68f9      	ldr	r1, [r7, #12]
 801e57c:	4618      	mov	r0, r3
 801e57e:	f7ff fb6b 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801e582:	f107 0314 	add.w	r3, r7, #20
 801e586:	68b9      	ldr	r1, [r7, #8]
 801e588:	4618      	mov	r0, r3
 801e58a:	f7ff fb65 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 801e58e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e592:	4618      	mov	r0, r3
 801e594:	f7fd fa0b 	bl	801b9ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801e598:	4603      	mov	r3, r0
 801e59a:	3b01      	subs	r3, #1
 801e59c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801e5a0:	f107 0214 	add.w	r2, r7, #20
 801e5a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e5a8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801e5ac:	4618      	mov	r0, r3
 801e5ae:	f7ff fbab 	bl	801dd08 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801e5b2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801e5b6:	f107 0214 	add.w	r2, r7, #20
 801e5ba:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801e5be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e5c2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801e5c6:	f7fe fb61 	bl	801cc8c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801e5ca:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801e5ce:	68f8      	ldr	r0, [r7, #12]
 801e5d0:	f7fe f8cc 	bl	801c76c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801e5d4:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	689e      	ldr	r6, [r3, #8]
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801e5e2:	68b8      	ldr	r0, [r7, #8]
 801e5e4:	f7fe f8d1 	bl	801c78a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801e5e8:	4603      	mov	r3, r0
 801e5ea:	9302      	str	r3, [sp, #8]
 801e5ec:	9501      	str	r5, [sp, #4]
 801e5ee:	9400      	str	r4, [sp, #0]
 801e5f0:	4633      	mov	r3, r6
 801e5f2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801e5f6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801e5fa:	4640      	mov	r0, r8
 801e5fc:	f7f6 fe3c 	bl	8015278 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801e600:	f107 0314 	add.w	r3, r7, #20
 801e604:	4618      	mov	r0, r3
 801e606:	f7fd f9bc 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801e60a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e60e:	4618      	mov	r0, r3
 801e610:	f7fd f9b7 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
 801e614:	e028      	b.n	801e668 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
                     tflite::micro::GetTensorData<int8_t>(output));
    }
  } else {
    tflite::reference_ops::SoftmaxInt16(
        op_data, tflite::micro::GetTensorShape(input),
 801e616:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801e61a:	68f9      	ldr	r1, [r7, #12]
 801e61c:	4618      	mov	r0, r3
 801e61e:	f7ff fb1b 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801e622:	68f8      	ldr	r0, [r7, #12]
 801e624:	f7fe fb61 	bl	801ccea <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 801e628:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
 801e62a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e62e:	68b9      	ldr	r1, [r7, #8]
 801e630:	4618      	mov	r0, r3
 801e632:	f7ff fb11 	bl	801dc58 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801e636:	68b8      	ldr	r0, [r7, #8]
 801e638:	f7ff fd2c 	bl	801e094 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 801e63c:	4602      	mov	r2, r0
 801e63e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e642:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 801e646:	9200      	str	r2, [sp, #0]
 801e648:	4622      	mov	r2, r4
 801e64a:	6878      	ldr	r0, [r7, #4]
 801e64c:	f7ff fdce 	bl	801e1ec <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 801e650:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e654:	4618      	mov	r0, r3
 801e656:	f7fd f994 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801e65a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801e65e:	4618      	mov	r0, r3
 801e660:	f7fd f98f 	bl	801b982 <_ZN6tflite12RuntimeShapeD1Ev>
 801e664:	e000      	b.n	801e668 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
      return;
 801e666:	bf00      	nop
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 801e668:	37e0      	adds	r7, #224	; 0xe0
 801e66a:	46bd      	mov	sp, r7
 801e66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e670 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 801e670:	b5b0      	push	{r4, r5, r7, lr}
 801e672:	b09e      	sub	sp, #120	; 0x78
 801e674:	af00      	add	r7, sp, #0
 801e676:	6078      	str	r0, [r7, #4]
 801e678:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801e67a:	2200      	movs	r2, #0
 801e67c:	6839      	ldr	r1, [r7, #0]
 801e67e:	6878      	ldr	r0, [r7, #4]
 801e680:	f7fd fb76 	bl	801bd70 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801e684:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 801e686:	2200      	movs	r2, #0
 801e688:	6839      	ldr	r1, [r7, #0]
 801e68a:	6878      	ldr	r0, [r7, #4]
 801e68c:	f7fd fb80 	bl	801bd90 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801e690:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 801e692:	683b      	ldr	r3, [r7, #0]
 801e694:	691b      	ldr	r3, [r3, #16]
 801e696:	2b00      	cmp	r3, #0
 801e698:	d101      	bne.n	801e69e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801e69a:	f004 ffef 	bl	802367c <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 801e69e:	683b      	ldr	r3, [r7, #0]
 801e6a0:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 801e6a2:	f107 0408 	add.w	r4, r7, #8
 801e6a6:	461d      	mov	r5, r3
 801e6a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e6aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e6ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e6ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e6b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e6b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e6b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e6b8:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 801e6bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e6be:	7a1b      	ldrb	r3, [r3, #8]
 801e6c0:	3b01      	subs	r3, #1
 801e6c2:	2b08      	cmp	r3, #8
 801e6c4:	d84a      	bhi.n	801e75c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
 801e6c6:	a201      	add	r2, pc, #4	; (adr r2, 801e6cc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 801e6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e6cc:	0801e6f1 	.word	0x0801e6f1
 801e6d0:	0801e75d 	.word	0x0801e75d
 801e6d4:	0801e721 	.word	0x0801e721
 801e6d8:	0801e75d 	.word	0x0801e75d
 801e6dc:	0801e75d 	.word	0x0801e75d
 801e6e0:	0801e75d 	.word	0x0801e75d
 801e6e4:	0801e73f 	.word	0x0801e73f
 801e6e8:	0801e75d 	.word	0x0801e75d
 801e6ec:	0801e70f 	.word	0x0801e70f
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	695c      	ldr	r4, [r3, #20]
 801e6f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e6f6:	7a1b      	ldrb	r3, [r3, #8]
 801e6f8:	4618      	mov	r0, r3
 801e6fa:	f7fc fbe7 	bl	801aecc <TfLiteTypeGetName>
 801e6fe:	4602      	mov	r2, r0
 801e700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e702:	7a1b      	ldrb	r3, [r3, #8]
 801e704:	491e      	ldr	r1, [pc, #120]	; (801e780 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801e706:	6878      	ldr	r0, [r7, #4]
 801e708:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801e70a:	2301      	movs	r3, #1
 801e70c:	e034      	b.n	801e778 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      SoftmaxQuantized(input, output, data);
 801e70e:	f107 0308 	add.w	r3, r7, #8
 801e712:	461a      	mov	r2, r3
 801e714:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801e716:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801e718:	f7ff fef2 	bl	801e500 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801e71c:	2300      	movs	r3, #0
 801e71e:	e02b      	b.n	801e778 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801e720:	687b      	ldr	r3, [r7, #4]
 801e722:	695c      	ldr	r4, [r3, #20]
 801e724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e726:	7a1b      	ldrb	r3, [r3, #8]
 801e728:	4618      	mov	r0, r3
 801e72a:	f7fc fbcf 	bl	801aecc <TfLiteTypeGetName>
 801e72e:	4602      	mov	r2, r0
 801e730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e732:	7a1b      	ldrb	r3, [r3, #8]
 801e734:	4912      	ldr	r1, [pc, #72]	; (801e780 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801e736:	6878      	ldr	r0, [r7, #4]
 801e738:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801e73a:	2301      	movs	r3, #1
 801e73c:	e01c      	b.n	801e778 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801e73e:	687b      	ldr	r3, [r7, #4]
 801e740:	695c      	ldr	r4, [r3, #20]
 801e742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e744:	7a1b      	ldrb	r3, [r3, #8]
 801e746:	4618      	mov	r0, r3
 801e748:	f7fc fbc0 	bl	801aecc <TfLiteTypeGetName>
 801e74c:	4602      	mov	r2, r0
 801e74e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e750:	7a1b      	ldrb	r3, [r3, #8]
 801e752:	490b      	ldr	r1, [pc, #44]	; (801e780 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801e754:	6878      	ldr	r0, [r7, #4]
 801e756:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801e758:	2301      	movs	r3, #1
 801e75a:	e00d      	b.n	801e778 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>

      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	695c      	ldr	r4, [r3, #20]
 801e760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e762:	7a1b      	ldrb	r3, [r3, #8]
 801e764:	4618      	mov	r0, r3
 801e766:	f7fc fbb1 	bl	801aecc <TfLiteTypeGetName>
 801e76a:	4602      	mov	r2, r0
 801e76c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e76e:	7a1b      	ldrb	r3, [r3, #8]
 801e770:	4903      	ldr	r1, [pc, #12]	; (801e780 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801e772:	6878      	ldr	r0, [r7, #4]
 801e774:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801e776:	2301      	movs	r3, #1
  }
}
 801e778:	4618      	mov	r0, r3
 801e77a:	3778      	adds	r7, #120	; 0x78
 801e77c:	46bd      	mov	sp, r7
 801e77e:	bdb0      	pop	{r4, r5, r7, pc}
 801e780:	080290a0 	.word	0x080290a0

0801e784 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801e784:	b4b0      	push	{r4, r5, r7}
 801e786:	b083      	sub	sp, #12
 801e788:	af00      	add	r7, sp, #0
 801e78a:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	4a07      	ldr	r2, [pc, #28]	; (801e7ac <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 801e790:	461c      	mov	r4, r3
 801e792:	4615      	mov	r5, r2
 801e794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e798:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801e79c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801e7a0:	6878      	ldr	r0, [r7, #4]
 801e7a2:	370c      	adds	r7, #12
 801e7a4:	46bd      	mov	sp, r7
 801e7a6:	bcb0      	pop	{r4, r5, r7}
 801e7a8:	4770      	bx	lr
 801e7aa:	bf00      	nop
 801e7ac:	080290bc 	.word	0x080290bc

0801e7b0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801e7b0:	b590      	push	{r4, r7, lr}
 801e7b2:	b09f      	sub	sp, #124	; 0x7c
 801e7b4:	af00      	add	r7, sp, #0
 801e7b6:	60f8      	str	r0, [r7, #12]
 801e7b8:	60b9      	str	r1, [r7, #8]
 801e7ba:	607a      	str	r2, [r7, #4]
 801e7bc:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 801e7be:	68fb      	ldr	r3, [r7, #12]
 801e7c0:	689b      	ldr	r3, [r3, #8]
 801e7c2:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 801e7c4:	68fb      	ldr	r3, [r7, #12]
 801e7c6:	68db      	ldr	r3, [r3, #12]
 801e7c8:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801e7ca:	68fb      	ldr	r3, [r7, #12]
 801e7cc:	699b      	ldr	r3, [r3, #24]
 801e7ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801e7d0:	68b8      	ldr	r0, [r7, #8]
 801e7d2:	f7fd f8ec 	bl	801b9ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801e7d6:	4603      	mov	r3, r0
 801e7d8:	3b01      	subs	r3, #1
 801e7da:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801e7dc:	683a      	ldr	r2, [r7, #0]
 801e7de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801e7e0:	68b8      	ldr	r0, [r7, #8]
 801e7e2:	f7ff fa91 	bl	801dd08 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801e7e6:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801e7e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e7ea:	683a      	ldr	r2, [r7, #0]
 801e7ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801e7ee:	68b8      	ldr	r0, [r7, #8]
 801e7f0:	f7fe fa4c 	bl	801cc8c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801e7f4:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801e7f6:	2300      	movs	r3, #0
 801e7f8:	677b      	str	r3, [r7, #116]	; 0x74
 801e7fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801e7fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e7fe:	429a      	cmp	r2, r3
 801e800:	f280 80ed 	bge.w	801e9de <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801e804:	2300      	movs	r3, #0
 801e806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801e80a:	2300      	movs	r3, #0
 801e80c:	673b      	str	r3, [r7, #112]	; 0x70
 801e80e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801e810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e812:	429a      	cmp	r2, r3
 801e814:	da16      	bge.n	801e844 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801e816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e818:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e81a:	fb03 f202 	mul.w	r2, r3, r2
 801e81e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e820:	4413      	add	r3, r2
 801e822:	461a      	mov	r2, r3
 801e824:	687b      	ldr	r3, [r7, #4]
 801e826:	441a      	add	r2, r3
 801e828:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801e82c:	4611      	mov	r1, r2
 801e82e:	4618      	mov	r0, r3
 801e830:	f7ff fc1c 	bl	801e06c <_ZSt3maxIhERKT_S2_S2_>
 801e834:	4603      	mov	r3, r0
 801e836:	781b      	ldrb	r3, [r3, #0]
 801e838:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801e83c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e83e:	3301      	adds	r3, #1
 801e840:	673b      	str	r3, [r7, #112]	; 0x70
 801e842:	e7e4      	b.n	801e80e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801e844:	f000 f8cf 	bl	801e9e6 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801e848:	4603      	mov	r3, r0
 801e84a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801e84c:	2300      	movs	r3, #0
 801e84e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801e850:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801e852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e854:	429a      	cmp	r2, r3
 801e856:	da2f      	bge.n	801e8b8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801e858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e85a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e85c:	fb03 f202 	mul.w	r2, r3, r2
 801e860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e862:	4413      	add	r3, r2
 801e864:	461a      	mov	r2, r3
 801e866:	687b      	ldr	r3, [r7, #4]
 801e868:	4413      	add	r3, r2
 801e86a:	781b      	ldrb	r3, [r3, #0]
 801e86c:	461a      	mov	r2, r3
 801e86e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801e872:	1ad3      	subs	r3, r2, r3
 801e874:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801e876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e87a:	429a      	cmp	r2, r3
 801e87c:	db18      	blt.n	801e8b0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801e87e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801e880:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801e882:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e884:	f7fe fa92 	bl	801cdac <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801e888:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801e88a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801e88c:	f000 f8b3 	bl	801e9f6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801e890:	4603      	mov	r3, r0
 801e892:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801e894:	69f8      	ldr	r0, [r7, #28]
 801e896:	f000 f8dd 	bl	801ea54 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801e89a:	4603      	mov	r3, r0
 801e89c:	4618      	mov	r0, r3
 801e89e:	f000 fa21 	bl	801ece4 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801e8a2:	4603      	mov	r3, r0
 801e8a4:	4619      	mov	r1, r3
 801e8a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e8a8:	f000 f8b6 	bl	801ea18 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801e8ac:	4603      	mov	r3, r0
 801e8ae:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801e8b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e8b2:	3301      	adds	r3, #1
 801e8b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 801e8b6:	e7cb      	b.n	801e850 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801e8b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e8bc:	4618      	mov	r0, r3
 801e8be:	f000 fa2b 	bl	801ed18 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801e8c2:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801e8c4:	681b      	ldr	r3, [r3, #0]
 801e8c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801e8ca:	210c      	movs	r1, #12
 801e8cc:	4618      	mov	r0, r3
 801e8ce:	f7fe fa80 	bl	801cdd2 <_ZN6tflite13GetReciprocalEliPi>
 801e8d2:	4603      	mov	r3, r0
 801e8d4:	4618      	mov	r0, r3
 801e8d6:	f7fe fab9 	bl	801ce4c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801e8da:	4603      	mov	r3, r0
 801e8dc:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 801e8de:	2300      	movs	r3, #0
 801e8e0:	66bb      	str	r3, [r7, #104]	; 0x68
 801e8e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e8e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e8e6:	429a      	cmp	r2, r3
 801e8e8:	da75      	bge.n	801e9d6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801e8ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e8ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e8ee:	fb03 f202 	mul.w	r2, r3, r2
 801e8f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e8f4:	4413      	add	r3, r2
 801e8f6:	461a      	mov	r2, r3
 801e8f8:	687b      	ldr	r3, [r7, #4]
 801e8fa:	4413      	add	r3, r2
 801e8fc:	781b      	ldrb	r3, [r3, #0]
 801e8fe:	461a      	mov	r2, r3
 801e900:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801e904:	1ad3      	subs	r3, r2, r3
 801e906:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 801e908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e90a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e90c:	429a      	cmp	r2, r3
 801e90e:	db50      	blt.n	801e9b2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801e910:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801e912:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801e914:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801e916:	f7fe fa49 	bl	801cdac <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801e91a:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801e91c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801e91e:	f000 f86a 	bl	801e9f6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801e922:	4603      	mov	r3, r0
 801e924:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801e926:	69b8      	ldr	r0, [r7, #24]
 801e928:	f000 f894 	bl	801ea54 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801e92c:	4603      	mov	r3, r0
 801e92e:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801e930:	6979      	ldr	r1, [r7, #20]
 801e932:	6a38      	ldr	r0, [r7, #32]
 801e934:	f7ff fad2 	bl	801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801e938:	4603      	mov	r3, r0
 801e93a:	633b      	str	r3, [r7, #48]	; 0x30
 801e93c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e940:	4618      	mov	r0, r3
 801e942:	f7fe faf5 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e946:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801e948:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801e94a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e94c:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801e94e:	4611      	mov	r1, r2
 801e950:	4618      	mov	r0, r3
 801e952:	f7fd fd33 	bl	801c3bc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801e956:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 801e958:	f7fc fd07 	bl	801b36a <_ZNSt14numeric_limitsIhE3minEv>
 801e95c:	4603      	mov	r3, r0
 801e95e:	461a      	mov	r2, r3
            unsat_output +
 801e960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e962:	4413      	add	r3, r2
        const int32_t shifted_output =
 801e964:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 801e966:	f7fc fd08 	bl	801b37a <_ZNSt14numeric_limitsIhE3maxEv>
 801e96a:	4603      	mov	r3, r0
 801e96c:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 801e96e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801e972:	f107 0310 	add.w	r3, r7, #16
 801e976:	4611      	mov	r1, r2
 801e978:	4618      	mov	r0, r3
 801e97a:	f7fc ffb9 	bl	801b8f0 <_ZSt3minIlERKT_S2_S2_>
 801e97e:	4604      	mov	r4, r0
 801e980:	f7fc fcf3 	bl	801b36a <_ZNSt14numeric_limitsIhE3minEv>
 801e984:	4603      	mov	r3, r0
 801e986:	63bb      	str	r3, [r7, #56]	; 0x38
 801e988:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e98c:	4619      	mov	r1, r3
 801e98e:	4620      	mov	r0, r4
 801e990:	f7fc ffc2 	bl	801b918 <_ZSt3maxIlERKT_S2_S2_>
 801e994:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801e996:	6819      	ldr	r1, [r3, #0]
 801e998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e99a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e99c:	fb03 f202 	mul.w	r2, r3, r2
 801e9a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e9a2:	4413      	add	r3, r2
 801e9a4:	461a      	mov	r2, r3
 801e9a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e9aa:	4413      	add	r3, r2
 801e9ac:	b2ca      	uxtb	r2, r1
 801e9ae:	701a      	strb	r2, [r3, #0]
 801e9b0:	e00d      	b.n	801e9ce <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801e9b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e9b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e9b6:	fb03 f202 	mul.w	r2, r3, r2
 801e9ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e9bc:	4413      	add	r3, r2
 801e9be:	461a      	mov	r2, r3
 801e9c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e9c4:	189c      	adds	r4, r3, r2
 801e9c6:	f7fc fcd0 	bl	801b36a <_ZNSt14numeric_limitsIhE3minEv>
 801e9ca:	4603      	mov	r3, r0
 801e9cc:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801e9ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e9d0:	3301      	adds	r3, #1
 801e9d2:	66bb      	str	r3, [r7, #104]	; 0x68
 801e9d4:	e785      	b.n	801e8e2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 801e9d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e9d8:	3301      	adds	r3, #1
 801e9da:	677b      	str	r3, [r7, #116]	; 0x74
 801e9dc:	e70d      	b.n	801e7fa <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 801e9de:	bf00      	nop
 801e9e0:	377c      	adds	r7, #124	; 0x7c
 801e9e2:	46bd      	mov	sp, r7
 801e9e4:	bd90      	pop	{r4, r7, pc}

0801e9e6 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 801e9e6:	b580      	push	{r7, lr}
 801e9e8:	af00      	add	r7, sp, #0
 801e9ea:	2000      	movs	r0, #0
 801e9ec:	f000 f99f 	bl	801ed2e <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 801e9f0:	4603      	mov	r3, r0
 801e9f2:	4618      	mov	r0, r3
 801e9f4:	bd80      	pop	{r7, pc}

0801e9f6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801e9f6:	b580      	push	{r7, lr}
 801e9f8:	b084      	sub	sp, #16
 801e9fa:	af00      	add	r7, sp, #0
 801e9fc:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801e9fe:	f107 030c 	add.w	r3, r7, #12
 801ea02:	4618      	mov	r0, r3
 801ea04:	f000 f9a7 	bl	801ed56 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801ea08:	4602      	mov	r2, r0
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	6013      	str	r3, [r2, #0]
    return retval;
 801ea0e:	68fb      	ldr	r3, [r7, #12]
  }
 801ea10:	4618      	mov	r0, r3
 801ea12:	3710      	adds	r7, #16
 801ea14:	46bd      	mov	sp, r7
 801ea16:	bd80      	pop	{r7, pc}

0801ea18 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801ea18:	b590      	push	{r4, r7, lr}
 801ea1a:	b083      	sub	sp, #12
 801ea1c:	af00      	add	r7, sp, #0
 801ea1e:	6078      	str	r0, [r7, #4]
 801ea20:	6039      	str	r1, [r7, #0]
 801ea22:	1d3b      	adds	r3, r7, #4
 801ea24:	4618      	mov	r0, r3
 801ea26:	f000 f977 	bl	801ed18 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801ea2a:	4603      	mov	r3, r0
 801ea2c:	681c      	ldr	r4, [r3, #0]
 801ea2e:	463b      	mov	r3, r7
 801ea30:	4618      	mov	r0, r3
 801ea32:	f000 f971 	bl	801ed18 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801ea36:	4603      	mov	r3, r0
 801ea38:	681b      	ldr	r3, [r3, #0]
 801ea3a:	4619      	mov	r1, r3
 801ea3c:	4620      	mov	r0, r4
 801ea3e:	f7fe f8bd 	bl	801cbbc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801ea42:	4603      	mov	r3, r0
 801ea44:	4618      	mov	r0, r3
 801ea46:	f000 f991 	bl	801ed6c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 801ea4a:	4603      	mov	r3, r0
 801ea4c:	4618      	mov	r0, r3
 801ea4e:	370c      	adds	r7, #12
 801ea50:	46bd      	mov	sp, r7
 801ea52:	bd90      	pop	{r4, r7, pc}

0801ea54 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 801ea54:	b590      	push	{r4, r7, lr}
 801ea56:	b091      	sub	sp, #68	; 0x44
 801ea58:	af00      	add	r7, sp, #0
 801ea5a:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 801ea5c:	f000 f997 	bl	801ed8e <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 801ea60:	4603      	mov	r3, r0
 801ea62:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 801ea64:	2001      	movs	r0, #1
 801ea66:	f000 f99b 	bl	801eda0 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801ea6a:	4603      	mov	r3, r0
 801ea6c:	4619      	mov	r1, r3
 801ea6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ea70:	f000 f9aa 	bl	801edc8 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ea74:	4603      	mov	r3, r0
 801ea76:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 801ea78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ea7a:	6878      	ldr	r0, [r7, #4]
 801ea7c:	f000 f9c2 	bl	801ee04 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ea80:	4603      	mov	r3, r0
 801ea82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ea84:	4618      	mov	r0, r3
 801ea86:	f000 f99f 	bl	801edc8 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ea8a:	4603      	mov	r3, r0
 801ea8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 801ea8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ea90:	f000 f9d6 	bl	801ee40 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801ea94:	4603      	mov	r3, r0
 801ea96:	4618      	mov	r0, r3
 801ea98:	f7ff f9be 	bl	801de18 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 801ea9c:	4603      	mov	r3, r0
 801ea9e:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 801eaa0:	6879      	ldr	r1, [r7, #4]
 801eaa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801eaa4:	f000 f990 	bl	801edc8 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801eaa8:	4603      	mov	r3, r0
 801eaaa:	63bb      	str	r3, [r7, #56]	; 0x38
 801eaac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801eab0:	4618      	mov	r0, r3
 801eab2:	f000 f950 	bl	801ed56 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801eab6:	4603      	mov	r3, r0
 801eab8:	681b      	ldr	r3, [r3, #0]
 801eaba:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 801eabc:	4883      	ldr	r0, [pc, #524]	; (801eccc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 801eabe:	f7ff f952 	bl	801dd66 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801eac2:	4603      	mov	r3, r0
 801eac4:	4618      	mov	r0, r3
 801eac6:	f7fe fa3e 	bl	801cf46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801eaca:	4603      	mov	r3, r0
 801eacc:	627b      	str	r3, [r7, #36]	; 0x24
 801eace:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801ead2:	f7fe f837 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ead6:	4603      	mov	r3, r0
 801ead8:	4619      	mov	r1, r3
 801eada:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801eadc:	f7fe f83d 	bl	801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801eae0:	4603      	mov	r3, r0
 801eae2:	4618      	mov	r0, r3
 801eae4:	f7fe f88c 	bl	801cc00 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801eae8:	4604      	mov	r4, r0
 801eaea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801eaec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801eaee:	f7ff f9f5 	bl	801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801eaf2:	4603      	mov	r3, r0
 801eaf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eaf6:	4619      	mov	r1, r3
 801eaf8:	4620      	mov	r0, r4
 801eafa:	f7ff f95a 	bl	801ddb2 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801eafe:	4603      	mov	r3, r0
 801eb00:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 801eb02:	4873      	ldr	r0, [pc, #460]	; (801ecd0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 801eb04:	f7ff f92f 	bl	801dd66 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801eb08:	4603      	mov	r3, r0
 801eb0a:	4618      	mov	r0, r3
 801eb0c:	f7fe fa1b 	bl	801cf46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801eb10:	4603      	mov	r3, r0
 801eb12:	623b      	str	r3, [r7, #32]
 801eb14:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 801eb18:	f7fe f814 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801eb1c:	4603      	mov	r3, r0
 801eb1e:	4619      	mov	r1, r3
 801eb20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801eb22:	f7fe f81a 	bl	801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801eb26:	4603      	mov	r3, r0
 801eb28:	4618      	mov	r0, r3
 801eb2a:	f7fe f869 	bl	801cc00 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801eb2e:	4604      	mov	r4, r0
 801eb30:	6a39      	ldr	r1, [r7, #32]
 801eb32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801eb34:	f7ff f9d2 	bl	801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801eb38:	4603      	mov	r3, r0
 801eb3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eb3c:	4619      	mov	r1, r3
 801eb3e:	4620      	mov	r0, r4
 801eb40:	f7ff f937 	bl	801ddb2 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801eb44:	4603      	mov	r3, r0
 801eb46:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 801eb48:	4862      	ldr	r0, [pc, #392]	; (801ecd4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 801eb4a:	f7ff f90c 	bl	801dd66 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801eb4e:	4603      	mov	r3, r0
 801eb50:	4618      	mov	r0, r3
 801eb52:	f7fe f9f8 	bl	801cf46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801eb56:	4603      	mov	r3, r0
 801eb58:	61fb      	str	r3, [r7, #28]
 801eb5a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801eb5e:	f7fd fff1 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801eb62:	4603      	mov	r3, r0
 801eb64:	4619      	mov	r1, r3
 801eb66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801eb68:	f7fd fff7 	bl	801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801eb6c:	4603      	mov	r3, r0
 801eb6e:	4618      	mov	r0, r3
 801eb70:	f7fe f846 	bl	801cc00 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801eb74:	4604      	mov	r4, r0
 801eb76:	69f9      	ldr	r1, [r7, #28]
 801eb78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801eb7a:	f7ff f9af 	bl	801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801eb7e:	4603      	mov	r3, r0
 801eb80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eb82:	4619      	mov	r1, r3
 801eb84:	4620      	mov	r0, r4
 801eb86:	f7ff f914 	bl	801ddb2 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801eb8a:	4603      	mov	r3, r0
 801eb8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 801eb8e:	4852      	ldr	r0, [pc, #328]	; (801ecd8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 801eb90:	f7ff f8e9 	bl	801dd66 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801eb94:	4603      	mov	r3, r0
 801eb96:	4618      	mov	r0, r3
 801eb98:	f7fe f9d5 	bl	801cf46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801eb9c:	4603      	mov	r3, r0
 801eb9e:	61bb      	str	r3, [r7, #24]
 801eba0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 801eba4:	f7fd ffce 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801eba8:	4603      	mov	r3, r0
 801ebaa:	4619      	mov	r1, r3
 801ebac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ebae:	f7fd ffd4 	bl	801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ebb2:	4603      	mov	r3, r0
 801ebb4:	4618      	mov	r0, r3
 801ebb6:	f7fe f823 	bl	801cc00 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ebba:	4604      	mov	r4, r0
 801ebbc:	69b9      	ldr	r1, [r7, #24]
 801ebbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ebc0:	f7ff f98c 	bl	801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ebc4:	4603      	mov	r3, r0
 801ebc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ebc8:	4619      	mov	r1, r3
 801ebca:	4620      	mov	r0, r4
 801ebcc:	f7ff f8f1 	bl	801ddb2 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ebd0:	4603      	mov	r3, r0
 801ebd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 801ebd4:	4841      	ldr	r0, [pc, #260]	; (801ecdc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 801ebd6:	f7ff f8c6 	bl	801dd66 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801ebda:	4603      	mov	r3, r0
 801ebdc:	4618      	mov	r0, r3
 801ebde:	f7fe f9b2 	bl	801cf46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ebe2:	4603      	mov	r3, r0
 801ebe4:	617b      	str	r3, [r7, #20]
 801ebe6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801ebea:	f7fd ffab 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ebee:	4603      	mov	r3, r0
 801ebf0:	4619      	mov	r1, r3
 801ebf2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ebf4:	f7fd ffb1 	bl	801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ebf8:	4603      	mov	r3, r0
 801ebfa:	4618      	mov	r0, r3
 801ebfc:	f7fe f800 	bl	801cc00 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ec00:	4604      	mov	r4, r0
 801ec02:	6979      	ldr	r1, [r7, #20]
 801ec04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ec06:	f7ff f969 	bl	801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ec0a:	4603      	mov	r3, r0
 801ec0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ec0e:	4619      	mov	r1, r3
 801ec10:	4620      	mov	r0, r4
 801ec12:	f7ff f8ce 	bl	801ddb2 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ec16:	4603      	mov	r3, r0
 801ec18:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 801ec1a:	4831      	ldr	r0, [pc, #196]	; (801ece0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 801ec1c:	f7ff f8a3 	bl	801dd66 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801ec20:	4603      	mov	r3, r0
 801ec22:	4618      	mov	r0, r3
 801ec24:	f7fe f98f 	bl	801cf46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ec28:	4603      	mov	r3, r0
 801ec2a:	613b      	str	r3, [r7, #16]
 801ec2c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801ec30:	f7fd ff88 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ec34:	4603      	mov	r3, r0
 801ec36:	4619      	mov	r1, r3
 801ec38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ec3a:	f7fd ff8e 	bl	801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ec3e:	4603      	mov	r3, r0
 801ec40:	4618      	mov	r0, r3
 801ec42:	f7fd ffdd 	bl	801cc00 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ec46:	4604      	mov	r4, r0
 801ec48:	6939      	ldr	r1, [r7, #16]
 801ec4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ec4c:	f7ff f946 	bl	801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ec50:	4603      	mov	r3, r0
 801ec52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ec54:	4619      	mov	r1, r3
 801ec56:	4620      	mov	r0, r4
 801ec58:	f7ff f8ab 	bl	801ddb2 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ec5c:	4603      	mov	r3, r0
 801ec5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 801ec60:	20f2      	movs	r0, #242	; 0xf2
 801ec62:	f7ff f880 	bl	801dd66 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801ec66:	4603      	mov	r3, r0
 801ec68:	4618      	mov	r0, r3
 801ec6a:	f7fe f96c 	bl	801cf46 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ec6e:	4603      	mov	r3, r0
 801ec70:	60fb      	str	r3, [r7, #12]
 801ec72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801ec76:	f7fd ff65 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ec7a:	4603      	mov	r3, r0
 801ec7c:	4619      	mov	r1, r3
 801ec7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ec80:	f7fd ff6b 	bl	801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ec84:	4603      	mov	r3, r0
 801ec86:	4618      	mov	r0, r3
 801ec88:	f7fd ffba 	bl	801cc00 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ec8c:	4604      	mov	r4, r0
 801ec8e:	68f9      	ldr	r1, [r7, #12]
 801ec90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ec92:	f7ff f923 	bl	801dedc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ec96:	4603      	mov	r3, r0
 801ec98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ec9a:	4619      	mov	r1, r3
 801ec9c:	4620      	mov	r0, r4
 801ec9e:	f7ff f888 	bl	801ddb2 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801eca2:	4603      	mov	r3, r0
 801eca4:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 801eca6:	6878      	ldr	r0, [r7, #4]
 801eca8:	f000 f8e4 	bl	801ee74 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 801ecac:	4604      	mov	r4, r0
 801ecae:	f7fe f95e 	bl	801cf6e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801ecb2:	4603      	mov	r3, r0
 801ecb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ecb6:	4619      	mov	r1, r3
 801ecb8:	4620      	mov	r0, r4
 801ecba:	f7ff f87a 	bl	801ddb2 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ecbe:	4603      	mov	r3, r0
 801ecc0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801ecc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801ecc4:	4618      	mov	r0, r3
 801ecc6:	3744      	adds	r7, #68	; 0x44
 801ecc8:	46bd      	mov	sp, r7
 801ecca:	bd90      	pop	{r4, r7, pc}
 801eccc:	63afbe7b 	.word	0x63afbe7b
 801ecd0:	4da2cbf2 	.word	0x4da2cbf2
 801ecd4:	2f16ac6c 	.word	0x2f16ac6c
 801ecd8:	1152aaa4 	.word	0x1152aaa4
 801ecdc:	02582ab7 	.word	0x02582ab7
 801ece0:	000afe11 	.word	0x000afe11

0801ece4 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801ece4:	b5b0      	push	{r4, r5, r7, lr}
 801ece6:	b084      	sub	sp, #16
 801ece8:	af00      	add	r7, sp, #0
 801ecea:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801ecec:	1d3b      	adds	r3, r7, #4
 801ecee:	4618      	mov	r0, r3
 801ecf0:	f7fe f91e 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801ecf4:	4603      	mov	r3, r0
 801ecf6:	681d      	ldr	r5, [r3, #0]
 801ecf8:	f107 030c 	add.w	r3, r7, #12
 801ecfc:	4618      	mov	r0, r3
 801ecfe:	f000 f80b 	bl	801ed18 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801ed02:	4604      	mov	r4, r0
 801ed04:	4628      	mov	r0, r5
 801ed06:	f000 f8c7 	bl	801ee98 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 801ed0a:	4603      	mov	r3, r0
 801ed0c:	6023      	str	r3, [r4, #0]
  return result;
 801ed0e:	68fb      	ldr	r3, [r7, #12]
}
 801ed10:	4618      	mov	r0, r3
 801ed12:	3710      	adds	r7, #16
 801ed14:	46bd      	mov	sp, r7
 801ed16:	bdb0      	pop	{r4, r5, r7, pc}

0801ed18 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 801ed18:	b480      	push	{r7}
 801ed1a:	b083      	sub	sp, #12
 801ed1c:	af00      	add	r7, sp, #0
 801ed1e:	6078      	str	r0, [r7, #4]
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	4618      	mov	r0, r3
 801ed24:	370c      	adds	r7, #12
 801ed26:	46bd      	mov	sp, r7
 801ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed2c:	4770      	bx	lr

0801ed2e <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801ed2e:	b590      	push	{r4, r7, lr}
 801ed30:	b085      	sub	sp, #20
 801ed32:	af00      	add	r7, sp, #0
 801ed34:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801ed36:	f107 030c 	add.w	r3, r7, #12
 801ed3a:	4618      	mov	r0, r3
 801ed3c:	f7ff ffec 	bl	801ed18 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801ed40:	4604      	mov	r4, r0
 801ed42:	6878      	ldr	r0, [r7, #4]
 801ed44:	f7fd fefe 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ed48:	4603      	mov	r3, r0
 801ed4a:	6023      	str	r3, [r4, #0]
    return retval;
 801ed4c:	68fb      	ldr	r3, [r7, #12]
  }
 801ed4e:	4618      	mov	r0, r3
 801ed50:	3714      	adds	r7, #20
 801ed52:	46bd      	mov	sp, r7
 801ed54:	bd90      	pop	{r4, r7, pc}

0801ed56 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 801ed56:	b480      	push	{r7}
 801ed58:	b083      	sub	sp, #12
 801ed5a:	af00      	add	r7, sp, #0
 801ed5c:	6078      	str	r0, [r7, #4]
 801ed5e:	687b      	ldr	r3, [r7, #4]
 801ed60:	4618      	mov	r0, r3
 801ed62:	370c      	adds	r7, #12
 801ed64:	46bd      	mov	sp, r7
 801ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed6a:	4770      	bx	lr

0801ed6c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801ed6c:	b580      	push	{r7, lr}
 801ed6e:	b084      	sub	sp, #16
 801ed70:	af00      	add	r7, sp, #0
 801ed72:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801ed74:	f107 030c 	add.w	r3, r7, #12
 801ed78:	4618      	mov	r0, r3
 801ed7a:	f7ff ffcd 	bl	801ed18 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801ed7e:	4602      	mov	r2, r0
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	6013      	str	r3, [r2, #0]
    return retval;
 801ed84:	68fb      	ldr	r3, [r7, #12]
  }
 801ed86:	4618      	mov	r0, r3
 801ed88:	3710      	adds	r7, #16
 801ed8a:	46bd      	mov	sp, r7
 801ed8c:	bd80      	pop	{r7, pc}

0801ed8e <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 801ed8e:	b580      	push	{r7, lr}
 801ed90:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801ed92:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801ed96:	f000 f803 	bl	801eda0 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801ed9a:	4603      	mov	r3, r0
  }
 801ed9c:	4618      	mov	r0, r3
 801ed9e:	bd80      	pop	{r7, pc}

0801eda0 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801eda0:	b590      	push	{r4, r7, lr}
 801eda2:	b085      	sub	sp, #20
 801eda4:	af00      	add	r7, sp, #0
 801eda6:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801eda8:	f107 030c 	add.w	r3, r7, #12
 801edac:	4618      	mov	r0, r3
 801edae:	f7ff ffd2 	bl	801ed56 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801edb2:	4604      	mov	r4, r0
 801edb4:	6878      	ldr	r0, [r7, #4]
 801edb6:	f7fd fec5 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801edba:	4603      	mov	r3, r0
 801edbc:	6023      	str	r3, [r4, #0]
    return retval;
 801edbe:	68fb      	ldr	r3, [r7, #12]
  }
 801edc0:	4618      	mov	r0, r3
 801edc2:	3714      	adds	r7, #20
 801edc4:	46bd      	mov	sp, r7
 801edc6:	bd90      	pop	{r4, r7, pc}

0801edc8 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801edc8:	b590      	push	{r4, r7, lr}
 801edca:	b083      	sub	sp, #12
 801edcc:	af00      	add	r7, sp, #0
 801edce:	6078      	str	r0, [r7, #4]
 801edd0:	6039      	str	r1, [r7, #0]
 801edd2:	1d3b      	adds	r3, r7, #4
 801edd4:	4618      	mov	r0, r3
 801edd6:	f7ff ffbe 	bl	801ed56 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801edda:	4603      	mov	r3, r0
 801eddc:	681c      	ldr	r4, [r3, #0]
 801edde:	463b      	mov	r3, r7
 801ede0:	4618      	mov	r0, r3
 801ede2:	f7ff ffb8 	bl	801ed56 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801ede6:	4603      	mov	r3, r0
 801ede8:	681b      	ldr	r3, [r3, #0]
 801edea:	4619      	mov	r1, r3
 801edec:	4620      	mov	r0, r4
 801edee:	f7fe f9db 	bl	801d1a8 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801edf2:	4603      	mov	r3, r0
 801edf4:	4618      	mov	r0, r3
 801edf6:	f7ff fdfe 	bl	801e9f6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801edfa:	4603      	mov	r3, r0
 801edfc:	4618      	mov	r0, r3
 801edfe:	370c      	adds	r7, #12
 801ee00:	46bd      	mov	sp, r7
 801ee02:	bd90      	pop	{r4, r7, pc}

0801ee04 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801ee04:	b590      	push	{r4, r7, lr}
 801ee06:	b083      	sub	sp, #12
 801ee08:	af00      	add	r7, sp, #0
 801ee0a:	6078      	str	r0, [r7, #4]
 801ee0c:	6039      	str	r1, [r7, #0]
 801ee0e:	1d3b      	adds	r3, r7, #4
 801ee10:	4618      	mov	r0, r3
 801ee12:	f7ff ffa0 	bl	801ed56 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801ee16:	4603      	mov	r3, r0
 801ee18:	681c      	ldr	r4, [r3, #0]
 801ee1a:	463b      	mov	r3, r7
 801ee1c:	4618      	mov	r0, r3
 801ee1e:	f7ff ff9a 	bl	801ed56 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801ee22:	4603      	mov	r3, r0
 801ee24:	681b      	ldr	r3, [r3, #0]
 801ee26:	4619      	mov	r1, r3
 801ee28:	4620      	mov	r0, r4
 801ee2a:	f7fd fe96 	bl	801cb5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ee2e:	4603      	mov	r3, r0
 801ee30:	4618      	mov	r0, r3
 801ee32:	f7ff fde0 	bl	801e9f6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801ee36:	4603      	mov	r3, r0
 801ee38:	4618      	mov	r0, r3
 801ee3a:	370c      	adds	r7, #12
 801ee3c:	46bd      	mov	sp, r7
 801ee3e:	bd90      	pop	{r4, r7, pc}

0801ee40 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801ee40:	b5b0      	push	{r4, r5, r7, lr}
 801ee42:	b084      	sub	sp, #16
 801ee44:	af00      	add	r7, sp, #0
 801ee46:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801ee48:	1d3b      	adds	r3, r7, #4
 801ee4a:	4618      	mov	r0, r3
 801ee4c:	f7ff ff83 	bl	801ed56 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801ee50:	4603      	mov	r3, r0
 801ee52:	681d      	ldr	r5, [r3, #0]
 801ee54:	f107 030c 	add.w	r3, r7, #12
 801ee58:	4618      	mov	r0, r3
 801ee5a:	f7fe f869 	bl	801cf30 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801ee5e:	4604      	mov	r4, r0
 801ee60:	4628      	mov	r0, r5
 801ee62:	f000 f825 	bl	801eeb0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 801ee66:	4603      	mov	r3, r0
 801ee68:	6023      	str	r3, [r4, #0]
  return result;
 801ee6a:	68fb      	ldr	r3, [r7, #12]
}
 801ee6c:	4618      	mov	r0, r3
 801ee6e:	3710      	adds	r7, #16
 801ee70:	46bd      	mov	sp, r7
 801ee72:	bdb0      	pop	{r4, r5, r7, pc}

0801ee74 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 801ee74:	b580      	push	{r7, lr}
 801ee76:	b082      	sub	sp, #8
 801ee78:	af00      	add	r7, sp, #0
 801ee7a:	6078      	str	r0, [r7, #4]
 801ee7c:	1d3b      	adds	r3, r7, #4
 801ee7e:	4618      	mov	r0, r3
 801ee80:	f7ff ff69 	bl	801ed56 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801ee84:	4603      	mov	r3, r0
 801ee86:	681b      	ldr	r3, [r3, #0]
 801ee88:	4618      	mov	r0, r3
 801ee8a:	f7fe ffb3 	bl	801ddf4 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 801ee8e:	4603      	mov	r3, r0
 801ee90:	4618      	mov	r0, r3
 801ee92:	3708      	adds	r7, #8
 801ee94:	46bd      	mov	sp, r7
 801ee96:	bd80      	pop	{r7, pc}

0801ee98 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801ee98:	b580      	push	{r7, lr}
 801ee9a:	b082      	sub	sp, #8
 801ee9c:	af00      	add	r7, sp, #0
 801ee9e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801eea0:	6878      	ldr	r0, [r7, #4]
 801eea2:	f000 f811 	bl	801eec8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801eea6:	4603      	mov	r3, r0
}
 801eea8:	4618      	mov	r0, r3
 801eeaa:	3708      	adds	r7, #8
 801eeac:	46bd      	mov	sp, r7
 801eeae:	bd80      	pop	{r7, pc}

0801eeb0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801eeb0:	b580      	push	{r7, lr}
 801eeb2:	b082      	sub	sp, #8
 801eeb4:	af00      	add	r7, sp, #0
 801eeb6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801eeb8:	6878      	ldr	r0, [r7, #4]
 801eeba:	f000 f813 	bl	801eee4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 801eebe:	4603      	mov	r3, r0
}
 801eec0:	4618      	mov	r0, r3
 801eec2:	3708      	adds	r7, #8
 801eec4:	46bd      	mov	sp, r7
 801eec6:	bd80      	pop	{r7, pc}

0801eec8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801eec8:	b580      	push	{r7, lr}
 801eeca:	b082      	sub	sp, #8
 801eecc:	af00      	add	r7, sp, #0
 801eece:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801eed0:	210c      	movs	r1, #12
 801eed2:	6878      	ldr	r0, [r7, #4]
 801eed4:	f7fd fa72 	bl	801c3bc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801eed8:	4603      	mov	r3, r0
  }
 801eeda:	4618      	mov	r0, r3
 801eedc:	3708      	adds	r7, #8
 801eede:	46bd      	mov	sp, r7
 801eee0:	bd80      	pop	{r7, pc}
	...

0801eee4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801eee4:	b580      	push	{r7, lr}
 801eee6:	b08a      	sub	sp, #40	; 0x28
 801eee8:	af00      	add	r7, sp, #0
 801eeea:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801eeec:	f7fc fde1 	bl	801bab2 <_ZNSt14numeric_limitsIlE3minEv>
 801eef0:	4603      	mov	r3, r0
 801eef2:	4618      	mov	r0, r3
 801eef4:	f7fd fe26 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801eef8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801eefa:	f7fc f863 	bl	801afc4 <_ZNSt14numeric_limitsIlE3maxEv>
 801eefe:	4603      	mov	r3, r0
 801ef00:	4618      	mov	r0, r3
 801ef02:	f7fd fe1f 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ef06:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801ef08:	2320      	movs	r3, #32
 801ef0a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801ef0c:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 801ef10:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801ef12:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 801ef16:	f7fd fe15 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ef1a:	4603      	mov	r3, r0
 801ef1c:	4619      	mov	r1, r3
 801ef1e:	6878      	ldr	r0, [r7, #4]
 801ef20:	f7fd fe5a 	bl	801cbd8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801ef24:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801ef26:	480f      	ldr	r0, [pc, #60]	; (801ef64 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 801ef28:	f7fd fe0c 	bl	801cb44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ef2c:	4603      	mov	r3, r0
 801ef2e:	4619      	mov	r1, r3
 801ef30:	6878      	ldr	r0, [r7, #4]
 801ef32:	f7fd fe2f 	bl	801cb94 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801ef36:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801ef38:	2105      	movs	r1, #5
 801ef3a:	6878      	ldr	r0, [r7, #4]
 801ef3c:	f7fe fa18 	bl	801d370 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801ef40:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801ef42:	68fa      	ldr	r2, [r7, #12]
 801ef44:	6a39      	ldr	r1, [r7, #32]
 801ef46:	6978      	ldr	r0, [r7, #20]
 801ef48:	f7fe fa56 	bl	801d3f8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801ef4c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801ef4e:	68fa      	ldr	r2, [r7, #12]
 801ef50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ef52:	6938      	ldr	r0, [r7, #16]
 801ef54:	f7fe fa50 	bl	801d3f8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801ef58:	60f8      	str	r0, [r7, #12]
    return result;
 801ef5a:	68fb      	ldr	r3, [r7, #12]
  }
 801ef5c:	4618      	mov	r0, r3
 801ef5e:	3728      	adds	r7, #40	; 0x28
 801ef60:	46bd      	mov	sp, r7
 801ef62:	bd80      	pop	{r7, pc}
 801ef64:	fc000001 	.word	0xfc000001

0801ef68 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 801ef68:	b580      	push	{r7, lr}
 801ef6a:	ed2d 8b02 	vpush	{d8}
 801ef6e:	b094      	sub	sp, #80	; 0x50
 801ef70:	af00      	add	r7, sp, #0
 801ef72:	6178      	str	r0, [r7, #20]
 801ef74:	ed87 0a04 	vstr	s0, [r7, #16]
 801ef78:	edc7 0a03 	vstr	s1, [r7, #12]
 801ef7c:	60b9      	str	r1, [r7, #8]
 801ef7e:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 801ef80:	ed97 7a03 	vldr	s14, [r7, #12]
 801ef84:	edd7 7a04 	vldr	s15, [r7, #16]
 801ef88:	ee77 6a67 	vsub.f32	s13, s14, s15
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	3b01      	subs	r3, #1
 801ef90:	ee07 3a90 	vmov	s15, r3
 801ef94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ef98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ef9c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 801efa0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801efa4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801efa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801efac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 801efb0:	2300      	movs	r3, #0
 801efb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	3b01      	subs	r3, #1
 801efb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801efba:	429a      	cmp	r2, r3
 801efbc:	f280 80c0 	bge.w	801f140 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 801efc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801efc2:	ee07 3a90 	vmov	s15, r3
 801efc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801efca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801efce:	ee27 7a27 	vmul.f32	s14, s14, s15
 801efd2:	edd7 7a04 	vldr	s15, [r7, #16]
 801efd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801efda:	697b      	ldr	r3, [r7, #20]
 801efdc:	eeb0 0a67 	vmov.f32	s0, s15
 801efe0:	4798      	blx	r3
 801efe2:	eef0 7a40 	vmov.f32	s15, s0
 801efe6:	ed9f 7a74 	vldr	s14, [pc, #464]	; 801f1b8 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801efea:	ee67 7a87 	vmul.f32	s15, s15, s14
 801efee:	eeb0 0a67 	vmov.f32	s0, s15
 801eff2:	f7fc f999 	bl	801b328 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801eff6:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801effa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801effc:	3301      	adds	r3, #1
 801effe:	ee07 3a90 	vmov	s15, r3
 801f002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f006:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801f00a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f00e:	edd7 7a04 	vldr	s15, [r7, #16]
 801f012:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f016:	697b      	ldr	r3, [r7, #20]
 801f018:	eeb0 0a67 	vmov.f32	s0, s15
 801f01c:	4798      	blx	r3
 801f01e:	eef0 7a40 	vmov.f32	s15, s0
 801f022:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801f1b8 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801f026:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 801f02a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f02c:	ee07 3a90 	vmov	s15, r3
 801f030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f034:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801f038:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f03c:	edd7 7a04 	vldr	s15, [r7, #16]
 801f040:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f044:	697b      	ldr	r3, [r7, #20]
 801f046:	eeb0 0a67 	vmov.f32	s0, s15
 801f04a:	4798      	blx	r3
 801f04c:	eef0 7a40 	vmov.f32	s15, s0
 801f050:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801f1b8 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801f054:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f058:	eeb0 0a67 	vmov.f32	s0, s15
 801f05c:	f7fc f964 	bl	801b328 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801f060:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801f064:	ee78 7a27 	vadd.f32	s15, s16, s15
 801f068:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f06c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801f070:	eeb0 0a47 	vmov.f32	s0, s14
 801f074:	f7fc f958 	bl	801b328 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801f078:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 801f07c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f07e:	ee07 3a90 	vmov	s15, r3
 801f082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f086:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801f08a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f08e:	edd7 7a04 	vldr	s15, [r7, #16]
 801f092:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f096:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801f09a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f09e:	697b      	ldr	r3, [r7, #20]
 801f0a0:	eeb0 0a67 	vmov.f32	s0, s15
 801f0a4:	4798      	blx	r3
 801f0a6:	eef0 7a40 	vmov.f32	s15, s0
 801f0aa:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801f1b8 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801f0ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f0b2:	eeb0 0a67 	vmov.f32	s0, s15
 801f0b6:	f7fc f937 	bl	801b328 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801f0ba:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 801f0be:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801f0c2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801f0c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f0ca:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 801f0ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f0d2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f0d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801f0da:	eeb0 0a47 	vmov.f32	s0, s14
 801f0de:	f7fc f923 	bl	801b328 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801f0e2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801f0e6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801f0ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801f0ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f0f2:	edc7 7a06 	vstr	s15, [r7, #24]
 801f0f6:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801f0fa:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 801f0fc:	f107 021c 	add.w	r2, r7, #28
 801f100:	f107 0318 	add.w	r3, r7, #24
 801f104:	4611      	mov	r1, r2
 801f106:	4618      	mov	r0, r3
 801f108:	f7e7 faf7 	bl	80066fa <_ZSt3maxIfERKT_S2_S2_>
 801f10c:	4602      	mov	r2, r0
 801f10e:	4b2b      	ldr	r3, [pc, #172]	; (801f1bc <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801f110:	623b      	str	r3, [r7, #32]
 801f112:	f107 0320 	add.w	r3, r7, #32
 801f116:	4619      	mov	r1, r3
 801f118:	4610      	mov	r0, r2
 801f11a:	f7fc f8d8 	bl	801b2ce <_ZSt3minIfERKT_S2_S2_>
 801f11e:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801f120:	edd3 7a00 	vldr	s15, [r3]
 801f124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f126:	005b      	lsls	r3, r3, #1
 801f128:	68ba      	ldr	r2, [r7, #8]
 801f12a:	4413      	add	r3, r2
 801f12c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f130:	ee17 2a90 	vmov	r2, s15
 801f134:	b212      	sxth	r2, r2
 801f136:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 801f138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f13a:	3301      	adds	r3, #1
 801f13c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f13e:	e739      	b.n	801efb4 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 801f140:	697b      	ldr	r3, [r7, #20]
 801f142:	ed97 0a03 	vldr	s0, [r7, #12]
 801f146:	4798      	blx	r3
 801f148:	eef0 7a40 	vmov.f32	s15, s0
 801f14c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 801f1b8 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801f150:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f154:	eeb0 0a67 	vmov.f32	s0, s15
 801f158:	f7fc f8e6 	bl	801b328 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801f15c:	eef0 7a40 	vmov.f32	s15, s0
 801f160:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801f164:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801f168:	62bb      	str	r3, [r7, #40]	; 0x28
 801f16a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f16e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f172:	4611      	mov	r1, r2
 801f174:	4618      	mov	r0, r3
 801f176:	f7e7 fac0 	bl	80066fa <_ZSt3maxIfERKT_S2_S2_>
 801f17a:	4602      	mov	r2, r0
 801f17c:	4b0f      	ldr	r3, [pc, #60]	; (801f1bc <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801f17e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801f184:	4619      	mov	r1, r3
 801f186:	4610      	mov	r0, r2
 801f188:	f7fc f8a1 	bl	801b2ce <_ZSt3minIfERKT_S2_S2_>
 801f18c:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 801f18e:	edd3 7a00 	vldr	s15, [r3]
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f198:	3b01      	subs	r3, #1
 801f19a:	005b      	lsls	r3, r3, #1
 801f19c:	68ba      	ldr	r2, [r7, #8]
 801f19e:	4413      	add	r3, r2
 801f1a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f1a4:	ee17 2a90 	vmov	r2, s15
 801f1a8:	b212      	sxth	r2, r2
 801f1aa:	801a      	strh	r2, [r3, #0]
}
 801f1ac:	bf00      	nop
 801f1ae:	3750      	adds	r7, #80	; 0x50
 801f1b0:	46bd      	mov	sp, r7
 801f1b2:	ecbd 8b02 	vpop	{d8}
 801f1b6:	bd80      	pop	{r7, pc}
 801f1b8:	47000000 	.word	0x47000000
 801f1bc:	46fffe00 	.word	0x46fffe00

0801f1c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 801f1c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f1c4:	b090      	sub	sp, #64	; 0x40
 801f1c6:	af06      	add	r7, sp, #24
 801f1c8:	60f8      	str	r0, [r7, #12]
 801f1ca:	60b9      	str	r1, [r7, #8]
 801f1cc:	607a      	str	r2, [r7, #4]
 801f1ce:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 801f1d0:	68bb      	ldr	r3, [r7, #8]
 801f1d2:	781b      	ldrb	r3, [r3, #0]
 801f1d4:	2b09      	cmp	r3, #9
 801f1d6:	d004      	beq.n	801f1e2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 801f1d8:	68bb      	ldr	r3, [r7, #8]
 801f1da:	781b      	ldrb	r3, [r3, #0]
 801f1dc:	2b07      	cmp	r3, #7
 801f1de:	f040 81b6 	bne.w	801f54e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 801f1e2:	68bb      	ldr	r3, [r7, #8]
 801f1e4:	781b      	ldrb	r3, [r3, #0]
 801f1e6:	2b07      	cmp	r3, #7
 801f1e8:	d156      	bne.n	801f298 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801f1ea:	687b      	ldr	r3, [r7, #4]
 801f1ec:	691b      	ldr	r3, [r3, #16]
 801f1ee:	2b00      	cmp	r3, #0
 801f1f0:	d011      	beq.n	801f216 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 801f1f2:	68fb      	ldr	r3, [r7, #12]
 801f1f4:	695c      	ldr	r4, [r3, #20]
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	691b      	ldr	r3, [r3, #16]
 801f1fa:	2200      	movs	r2, #0
 801f1fc:	9203      	str	r2, [sp, #12]
 801f1fe:	9302      	str	r3, [sp, #8]
 801f200:	4ba1      	ldr	r3, [pc, #644]	; (801f488 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 801f202:	9301      	str	r3, [sp, #4]
 801f204:	4ba1      	ldr	r3, [pc, #644]	; (801f48c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801f206:	9300      	str	r3, [sp, #0]
 801f208:	2325      	movs	r3, #37	; 0x25
 801f20a:	4aa1      	ldr	r2, [pc, #644]	; (801f490 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f20c:	49a1      	ldr	r1, [pc, #644]	; (801f494 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801f20e:	68f8      	ldr	r0, [r7, #12]
 801f210:	47a0      	blx	r4
 801f212:	2301      	movs	r3, #1
 801f214:	e1e0      	b.n	801f5d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 801f216:	687b      	ldr	r3, [r7, #4]
 801f218:	edd3 7a03 	vldr	s15, [r3, #12]
 801f21c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 801f498 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801f220:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f228:	dd07      	ble.n	801f23a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 801f22a:	687b      	ldr	r3, [r7, #4]
 801f22c:	edd3 7a03 	vldr	s15, [r3, #12]
 801f230:	ed9f 7a99 	vldr	s14, [pc, #612]	; 801f498 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801f234:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f238:	e006      	b.n	801f248 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 801f23a:	687b      	ldr	r3, [r7, #4]
 801f23c:	edd3 7a03 	vldr	s15, [r3, #12]
 801f240:	ed9f 7a95 	vldr	s14, [pc, #596]	; 801f498 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801f244:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f248:	edc7 7a08 	vstr	s15, [r7, #32]
 801f24c:	edd7 7a08 	vldr	s15, [r7, #32]
 801f250:	ed9f 7a92 	vldr	s14, [pc, #584]	; 801f49c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 801f254:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f25c:	f340 80dd 	ble.w	801f41a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801f260:	68fb      	ldr	r3, [r7, #12]
 801f262:	695c      	ldr	r4, [r3, #20]
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	68db      	ldr	r3, [r3, #12]
 801f268:	4618      	mov	r0, r3
 801f26a:	f7e1 f977 	bl	800055c <__aeabi_f2d>
 801f26e:	4602      	mov	r2, r0
 801f270:	460b      	mov	r3, r1
 801f272:	f04f 0000 	mov.w	r0, #0
 801f276:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801f27a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f27e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f282:	4b87      	ldr	r3, [pc, #540]	; (801f4a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 801f284:	9301      	str	r3, [sp, #4]
 801f286:	4b87      	ldr	r3, [pc, #540]	; (801f4a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801f288:	9300      	str	r3, [sp, #0]
 801f28a:	2326      	movs	r3, #38	; 0x26
 801f28c:	4a80      	ldr	r2, [pc, #512]	; (801f490 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f28e:	4986      	ldr	r1, [pc, #536]	; (801f4a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801f290:	68f8      	ldr	r0, [r7, #12]
 801f292:	47a0      	blx	r4
 801f294:	2301      	movs	r3, #1
 801f296:	e19f      	b.n	801f5d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 801f298:	68bb      	ldr	r3, [r7, #8]
 801f29a:	781b      	ldrb	r3, [r3, #0]
 801f29c:	2b09      	cmp	r3, #9
 801f29e:	d018      	beq.n	801f2d2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 801f2a0:	68fb      	ldr	r3, [r7, #12]
 801f2a2:	695c      	ldr	r4, [r3, #20]
 801f2a4:	68bb      	ldr	r3, [r7, #8]
 801f2a6:	781b      	ldrb	r3, [r3, #0]
 801f2a8:	4618      	mov	r0, r3
 801f2aa:	f7fb fe0f 	bl	801aecc <TfLiteTypeGetName>
 801f2ae:	4605      	mov	r5, r0
 801f2b0:	2009      	movs	r0, #9
 801f2b2:	f7fb fe0b 	bl	801aecc <TfLiteTypeGetName>
 801f2b6:	4603      	mov	r3, r0
 801f2b8:	9303      	str	r3, [sp, #12]
 801f2ba:	9502      	str	r5, [sp, #8]
 801f2bc:	4b7b      	ldr	r3, [pc, #492]	; (801f4ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801f2be:	9301      	str	r3, [sp, #4]
 801f2c0:	4b7b      	ldr	r3, [pc, #492]	; (801f4b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 801f2c2:	9300      	str	r3, [sp, #0]
 801f2c4:	2329      	movs	r3, #41	; 0x29
 801f2c6:	4a72      	ldr	r2, [pc, #456]	; (801f490 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f2c8:	497a      	ldr	r1, [pc, #488]	; (801f4b4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801f2ca:	68f8      	ldr	r0, [r7, #12]
 801f2cc:	47a0      	blx	r4
 801f2ce:	2301      	movs	r3, #1
 801f2d0:	e182      	b.n	801f5d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 801f2d2:	687b      	ldr	r3, [r7, #4]
 801f2d4:	781b      	ldrb	r3, [r3, #0]
 801f2d6:	2b07      	cmp	r3, #7
 801f2d8:	d155      	bne.n	801f386 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	691b      	ldr	r3, [r3, #16]
 801f2de:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801f2e2:	d011      	beq.n	801f308 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 801f2e4:	68fb      	ldr	r3, [r7, #12]
 801f2e6:	695c      	ldr	r4, [r3, #20]
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	691b      	ldr	r3, [r3, #16]
 801f2ec:	4a72      	ldr	r2, [pc, #456]	; (801f4b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 801f2ee:	9203      	str	r2, [sp, #12]
 801f2f0:	9302      	str	r3, [sp, #8]
 801f2f2:	4b72      	ldr	r3, [pc, #456]	; (801f4bc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 801f2f4:	9301      	str	r3, [sp, #4]
 801f2f6:	4b65      	ldr	r3, [pc, #404]	; (801f48c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801f2f8:	9300      	str	r3, [sp, #0]
 801f2fa:	232b      	movs	r3, #43	; 0x2b
 801f2fc:	4a64      	ldr	r2, [pc, #400]	; (801f490 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f2fe:	4965      	ldr	r1, [pc, #404]	; (801f494 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801f300:	68f8      	ldr	r0, [r7, #12]
 801f302:	47a0      	blx	r4
 801f304:	2301      	movs	r3, #1
 801f306:	e167      	b.n	801f5d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	edd3 7a03 	vldr	s15, [r3, #12]
 801f30e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801f4c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801f312:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f31a:	dd07      	ble.n	801f32c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	edd3 7a03 	vldr	s15, [r3, #12]
 801f322:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801f4c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801f326:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f32a:	e006      	b.n	801f33a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 801f32c:	687b      	ldr	r3, [r7, #4]
 801f32e:	edd3 7a03 	vldr	s15, [r3, #12]
 801f332:	ed9f 7a63 	vldr	s14, [pc, #396]	; 801f4c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801f336:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f33a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801f33e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801f342:	ed9f 7a60 	vldr	s14, [pc, #384]	; 801f4c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 801f346:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f34e:	dd64      	ble.n	801f41a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801f350:	68fb      	ldr	r3, [r7, #12]
 801f352:	695c      	ldr	r4, [r3, #20]
 801f354:	687b      	ldr	r3, [r7, #4]
 801f356:	68db      	ldr	r3, [r3, #12]
 801f358:	4618      	mov	r0, r3
 801f35a:	f7e1 f8ff 	bl	800055c <__aeabi_f2d>
 801f35e:	4602      	mov	r2, r0
 801f360:	460b      	mov	r3, r1
 801f362:	f04f 0000 	mov.w	r0, #0
 801f366:	4958      	ldr	r1, [pc, #352]	; (801f4c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 801f368:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f36c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f370:	4b56      	ldr	r3, [pc, #344]	; (801f4cc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 801f372:	9301      	str	r3, [sp, #4]
 801f374:	4b4b      	ldr	r3, [pc, #300]	; (801f4a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801f376:	9300      	str	r3, [sp, #0]
 801f378:	232c      	movs	r3, #44	; 0x2c
 801f37a:	4a45      	ldr	r2, [pc, #276]	; (801f490 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f37c:	494a      	ldr	r1, [pc, #296]	; (801f4a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801f37e:	68f8      	ldr	r0, [r7, #12]
 801f380:	47a0      	blx	r4
 801f382:	2301      	movs	r3, #1
 801f384:	e128      	b.n	801f5d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 801f386:	687b      	ldr	r3, [r7, #4]
 801f388:	781b      	ldrb	r3, [r3, #0]
 801f38a:	2b09      	cmp	r3, #9
 801f38c:	d018      	beq.n	801f3c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 801f38e:	68fb      	ldr	r3, [r7, #12]
 801f390:	695c      	ldr	r4, [r3, #20]
 801f392:	687b      	ldr	r3, [r7, #4]
 801f394:	781b      	ldrb	r3, [r3, #0]
 801f396:	4618      	mov	r0, r3
 801f398:	f7fb fd98 	bl	801aecc <TfLiteTypeGetName>
 801f39c:	4605      	mov	r5, r0
 801f39e:	2009      	movs	r0, #9
 801f3a0:	f7fb fd94 	bl	801aecc <TfLiteTypeGetName>
 801f3a4:	4603      	mov	r3, r0
 801f3a6:	9303      	str	r3, [sp, #12]
 801f3a8:	9502      	str	r5, [sp, #8]
 801f3aa:	4b40      	ldr	r3, [pc, #256]	; (801f4ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801f3ac:	9301      	str	r3, [sp, #4]
 801f3ae:	4b48      	ldr	r3, [pc, #288]	; (801f4d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 801f3b0:	9300      	str	r3, [sp, #0]
 801f3b2:	232f      	movs	r3, #47	; 0x2f
 801f3b4:	4a36      	ldr	r2, [pc, #216]	; (801f490 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f3b6:	493f      	ldr	r1, [pc, #252]	; (801f4b4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801f3b8:	68f8      	ldr	r0, [r7, #12]
 801f3ba:	47a0      	blx	r4
 801f3bc:	2301      	movs	r3, #1
 801f3be:	e10b      	b.n	801f5d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	691b      	ldr	r3, [r3, #16]
 801f3c4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 801f3c8:	d012      	beq.n	801f3f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 801f3ca:	68fb      	ldr	r3, [r7, #12]
 801f3cc:	695c      	ldr	r4, [r3, #20]
 801f3ce:	687b      	ldr	r3, [r7, #4]
 801f3d0:	691b      	ldr	r3, [r3, #16]
 801f3d2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801f3d6:	9203      	str	r2, [sp, #12]
 801f3d8:	9302      	str	r3, [sp, #8]
 801f3da:	4b3e      	ldr	r3, [pc, #248]	; (801f4d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 801f3dc:	9301      	str	r3, [sp, #4]
 801f3de:	4b2b      	ldr	r3, [pc, #172]	; (801f48c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801f3e0:	9300      	str	r3, [sp, #0]
 801f3e2:	2330      	movs	r3, #48	; 0x30
 801f3e4:	4a2a      	ldr	r2, [pc, #168]	; (801f490 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f3e6:	492b      	ldr	r1, [pc, #172]	; (801f494 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801f3e8:	68f8      	ldr	r0, [r7, #12]
 801f3ea:	47a0      	blx	r4
 801f3ec:	2301      	movs	r3, #1
 801f3ee:	e0f3      	b.n	801f5d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 801f3f0:	687b      	ldr	r3, [r7, #4]
 801f3f2:	edd3 7a03 	vldr	s15, [r3, #12]
 801f3f6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801f4d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 801f3fa:	eef4 7a47 	vcmp.f32	s15, s14
 801f3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f402:	d00a      	beq.n	801f41a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801f404:	68fb      	ldr	r3, [r7, #12]
 801f406:	695c      	ldr	r4, [r3, #20]
 801f408:	4b34      	ldr	r3, [pc, #208]	; (801f4dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 801f40a:	9300      	str	r3, [sp, #0]
 801f40c:	2331      	movs	r3, #49	; 0x31
 801f40e:	4a20      	ldr	r2, [pc, #128]	; (801f490 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f410:	4933      	ldr	r1, [pc, #204]	; (801f4e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 801f412:	68f8      	ldr	r0, [r7, #12]
 801f414:	47a0      	blx	r4
 801f416:	2301      	movs	r3, #1
 801f418:	e0de      	b.n	801f5d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 801f41a:	68bb      	ldr	r3, [r7, #8]
 801f41c:	781b      	ldrb	r3, [r3, #0]
 801f41e:	2b07      	cmp	r3, #7
 801f420:	d160      	bne.n	801f4e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 801f422:	68bb      	ldr	r3, [r7, #8]
 801f424:	68db      	ldr	r3, [r3, #12]
 801f426:	4618      	mov	r0, r3
 801f428:	f7e1 f898 	bl	800055c <__aeabi_f2d>
 801f42c:	4604      	mov	r4, r0
 801f42e:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 801f430:	683b      	ldr	r3, [r7, #0]
 801f432:	681b      	ldr	r3, [r3, #0]
 801f434:	4618      	mov	r0, r3
 801f436:	f7e1 f891 	bl	800055c <__aeabi_f2d>
 801f43a:	4602      	mov	r2, r0
 801f43c:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 801f43e:	4620      	mov	r0, r4
 801f440:	4629      	mov	r1, r5
 801f442:	f7e1 f8e3 	bl	800060c <__aeabi_dmul>
 801f446:	4602      	mov	r2, r0
 801f448:	460b      	mov	r3, r1
 801f44a:	4610      	mov	r0, r2
 801f44c:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 801f44e:	a30c      	add	r3, pc, #48	; (adr r3, 801f480 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 801f450:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f454:	f7e1 fa04 	bl	8000860 <__aeabi_ddiv>
 801f458:	4602      	mov	r2, r0
 801f45a:	460b      	mov	r3, r1
 801f45c:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 801f460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f462:	3308      	adds	r3, #8
 801f464:	f107 0214 	add.w	r2, r7, #20
 801f468:	4611      	mov	r1, r2
 801f46a:	4618      	mov	r0, r3
 801f46c:	ed97 0b06 	vldr	d0, [r7, #24]
 801f470:	f7fb fdb2 	bl	801afd8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 801f474:	697a      	ldr	r2, [r7, #20]
 801f476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f478:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 801f47a:	e0ac      	b.n	801f5d6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 801f47c:	f3af 8000 	nop.w
 801f480:	00140014 	.word	0x00140014
 801f484:	3f240014 	.word	0x3f240014
 801f488:	08029288 	.word	0x08029288
 801f48c:	0802928c 	.word	0x0802928c
 801f490:	080291e0 	.word	0x080291e0
 801f494:	0802926c 	.word	0x0802926c
 801f498:	38000000 	.word	0x38000000
 801f49c:	3303126f 	.word	0x3303126f
 801f4a0:	080292c8 	.word	0x080292c8
 801f4a4:	080292d4 	.word	0x080292d4
 801f4a8:	080292a8 	.word	0x080292a8
 801f4ac:	08029308 	.word	0x08029308
 801f4b0:	08029314 	.word	0x08029314
 801f4b4:	080292ec 	.word	0x080292ec
 801f4b8:	ffff8000 	.word	0xffff8000
 801f4bc:	08029320 	.word	0x08029320
 801f4c0:	37800000 	.word	0x37800000
 801f4c4:	3283126f 	.word	0x3283126f
 801f4c8:	3ef00000 	.word	0x3ef00000
 801f4cc:	08029328 	.word	0x08029328
 801f4d0:	08029334 	.word	0x08029334
 801f4d4:	08029344 	.word	0x08029344
 801f4d8:	3b800000 	.word	0x3b800000
 801f4dc:	08029364 	.word	0x08029364
 801f4e0:	0802934c 	.word	0x0802934c
          static_cast<double>(params->beta),
 801f4e4:	683b      	ldr	r3, [r7, #0]
 801f4e6:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 801f4e8:	4618      	mov	r0, r3
 801f4ea:	f7e1 f837 	bl	800055c <__aeabi_f2d>
 801f4ee:	4680      	mov	r8, r0
 801f4f0:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 801f4f2:	68bb      	ldr	r3, [r7, #8]
 801f4f4:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 801f4f6:	4618      	mov	r0, r3
 801f4f8:	f7e1 f830 	bl	800055c <__aeabi_f2d>
 801f4fc:	4682      	mov	sl, r0
 801f4fe:	468b      	mov	fp, r1
 801f500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f502:	3308      	adds	r3, #8
 801f504:	f107 0210 	add.w	r2, r7, #16
 801f508:	4619      	mov	r1, r3
 801f50a:	2005      	movs	r0, #5
 801f50c:	ec4b ab11 	vmov	d1, sl, fp
 801f510:	ec49 8b10 	vmov	d0, r8, r9
 801f514:	f7fb fe2c 	bl	801b170 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 801f518:	693a      	ldr	r2, [r7, #16]
 801f51a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f51c:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 801f51e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f520:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 801f522:	221f      	movs	r2, #31
 801f524:	4619      	mov	r1, r3
 801f526:	2005      	movs	r0, #5
 801f528:	f7fb fe6a 	bl	801b200 <_ZN6tflite20CalculateInputRadiusEiii>
 801f52c:	4603      	mov	r3, r0
 801f52e:	4618      	mov	r0, r3
 801f530:	f7e1 f802 	bl	8000538 <__aeabi_i2d>
 801f534:	4602      	mov	r2, r0
 801f536:	460b      	mov	r3, r1
 801f538:	4614      	mov	r4, r2
 801f53a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 801f53e:	4620      	mov	r0, r4
 801f540:	4629      	mov	r1, r5
 801f542:	f7e1 fb13 	bl	8000b6c <__aeabi_d2iz>
 801f546:	4602      	mov	r2, r0
 801f548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f54a:	619a      	str	r2, [r3, #24]
    }
 801f54c:	e043      	b.n	801f5d6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 801f54e:	68bb      	ldr	r3, [r7, #8]
 801f550:	781b      	ldrb	r3, [r3, #0]
 801f552:	2b01      	cmp	r3, #1
 801f554:	d018      	beq.n	801f588 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 801f556:	68fb      	ldr	r3, [r7, #12]
 801f558:	695c      	ldr	r4, [r3, #20]
 801f55a:	68bb      	ldr	r3, [r7, #8]
 801f55c:	781b      	ldrb	r3, [r3, #0]
 801f55e:	4618      	mov	r0, r3
 801f560:	f7fb fcb4 	bl	801aecc <TfLiteTypeGetName>
 801f564:	4605      	mov	r5, r0
 801f566:	2001      	movs	r0, #1
 801f568:	f7fb fcb0 	bl	801aecc <TfLiteTypeGetName>
 801f56c:	4603      	mov	r3, r0
 801f56e:	9303      	str	r3, [sp, #12]
 801f570:	9502      	str	r5, [sp, #8]
 801f572:	4b1c      	ldr	r3, [pc, #112]	; (801f5e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801f574:	9301      	str	r3, [sp, #4]
 801f576:	4b1c      	ldr	r3, [pc, #112]	; (801f5e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 801f578:	9300      	str	r3, [sp, #0]
 801f57a:	234e      	movs	r3, #78	; 0x4e
 801f57c:	4a1b      	ldr	r2, [pc, #108]	; (801f5ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801f57e:	491c      	ldr	r1, [pc, #112]	; (801f5f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801f580:	68f8      	ldr	r0, [r7, #12]
 801f582:	47a0      	blx	r4
 801f584:	2301      	movs	r3, #1
 801f586:	e027      	b.n	801f5d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 801f588:	687b      	ldr	r3, [r7, #4]
 801f58a:	781b      	ldrb	r3, [r3, #0]
 801f58c:	2b01      	cmp	r3, #1
 801f58e:	d018      	beq.n	801f5c2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 801f590:	68fb      	ldr	r3, [r7, #12]
 801f592:	695c      	ldr	r4, [r3, #20]
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	781b      	ldrb	r3, [r3, #0]
 801f598:	4618      	mov	r0, r3
 801f59a:	f7fb fc97 	bl	801aecc <TfLiteTypeGetName>
 801f59e:	4605      	mov	r5, r0
 801f5a0:	2001      	movs	r0, #1
 801f5a2:	f7fb fc93 	bl	801aecc <TfLiteTypeGetName>
 801f5a6:	4603      	mov	r3, r0
 801f5a8:	9303      	str	r3, [sp, #12]
 801f5aa:	9502      	str	r5, [sp, #8]
 801f5ac:	4b0d      	ldr	r3, [pc, #52]	; (801f5e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801f5ae:	9301      	str	r3, [sp, #4]
 801f5b0:	4b10      	ldr	r3, [pc, #64]	; (801f5f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 801f5b2:	9300      	str	r3, [sp, #0]
 801f5b4:	234f      	movs	r3, #79	; 0x4f
 801f5b6:	4a0d      	ldr	r2, [pc, #52]	; (801f5ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801f5b8:	490d      	ldr	r1, [pc, #52]	; (801f5f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801f5ba:	68f8      	ldr	r0, [r7, #12]
 801f5bc:	47a0      	blx	r4
 801f5be:	2301      	movs	r3, #1
 801f5c0:	e00a      	b.n	801f5d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 801f5c2:	683b      	ldr	r3, [r7, #0]
 801f5c4:	681b      	ldr	r3, [r3, #0]
 801f5c6:	4618      	mov	r0, r3
 801f5c8:	f7e0 ffc8 	bl	800055c <__aeabi_f2d>
 801f5cc:	4602      	mov	r2, r0
 801f5ce:	460b      	mov	r3, r1
 801f5d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801f5d2:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 801f5d6:	2300      	movs	r3, #0
}
 801f5d8:	4618      	mov	r0, r3
 801f5da:	3728      	adds	r7, #40	; 0x28
 801f5dc:	46bd      	mov	sp, r7
 801f5de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f5e2:	bf00      	nop
 801f5e4:	08029388 	.word	0x08029388
 801f5e8:	08029314 	.word	0x08029314
 801f5ec:	080291e0 	.word	0x080291e0
 801f5f0:	080292ec 	.word	0x080292ec
 801f5f4:	08029334 	.word	0x08029334

0801f5f8 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 801f5f8:	b580      	push	{r7, lr}
 801f5fa:	b084      	sub	sp, #16
 801f5fc:	af00      	add	r7, sp, #0
 801f5fe:	60f8      	str	r0, [r7, #12]
 801f600:	60b9      	str	r1, [r7, #8]
 801f602:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801f604:	68fb      	ldr	r3, [r7, #12]
 801f606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f608:	2b00      	cmp	r3, #0
 801f60a:	d101      	bne.n	801f610 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 801f60c:	f004 f836 	bl	802367c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 801f610:	68fb      	ldr	r3, [r7, #12]
 801f612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f614:	2138      	movs	r1, #56	; 0x38
 801f616:	68f8      	ldr	r0, [r7, #12]
 801f618:	4798      	blx	r3
 801f61a:	4603      	mov	r3, r0
}
 801f61c:	4618      	mov	r0, r3
 801f61e:	3710      	adds	r7, #16
 801f620:	46bd      	mov	sp, r7
 801f622:	bd80      	pop	{r7, pc}

0801f624 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801f624:	b580      	push	{r7, lr}
 801f626:	b082      	sub	sp, #8
 801f628:	af00      	add	r7, sp, #0
 801f62a:	6078      	str	r0, [r7, #4]
 801f62c:	ed87 0a00 	vstr	s0, [r7]
 801f630:	ed97 0a00 	vldr	s0, [r7]
 801f634:	f7e2 fa13 	bl	8001a5e <_ZSt3expf>
 801f638:	eef0 7a40 	vmov.f32	s15, s0
 801f63c:	eeb0 0a67 	vmov.f32	s0, s15
 801f640:	3708      	adds	r7, #8
 801f642:	46bd      	mov	sp, r7
 801f644:	bd80      	pop	{r7, pc}

0801f646 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 801f646:	b580      	push	{r7, lr}
 801f648:	b082      	sub	sp, #8
 801f64a:	af00      	add	r7, sp, #0
 801f64c:	ed87 0a01 	vstr	s0, [r7, #4]
 801f650:	ed97 0a01 	vldr	s0, [r7, #4]
 801f654:	2000      	movs	r0, #0
 801f656:	f7ff ffe5 	bl	801f624 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 801f65a:	eef0 7a40 	vmov.f32	s15, s0
 801f65e:	eeb0 0a67 	vmov.f32	s0, s15
 801f662:	3708      	adds	r7, #8
 801f664:	46bd      	mov	sp, r7
 801f666:	bd80      	pop	{r7, pc}

0801f668 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 801f668:	b480      	push	{r7}
 801f66a:	b083      	sub	sp, #12
 801f66c:	af00      	add	r7, sp, #0
 801f66e:	6078      	str	r0, [r7, #4]
 801f670:	4b03      	ldr	r3, [pc, #12]	; (801f680 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 801f672:	4618      	mov	r0, r3
 801f674:	370c      	adds	r7, #12
 801f676:	46bd      	mov	sp, r7
 801f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f67c:	4770      	bx	lr
 801f67e:	bf00      	nop
 801f680:	0801f647 	.word	0x0801f647

0801f684 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801f684:	b480      	push	{r7}
 801f686:	b083      	sub	sp, #12
 801f688:	af00      	add	r7, sp, #0
 801f68a:	6078      	str	r0, [r7, #4]
 801f68c:	ed87 0a00 	vstr	s0, [r7]
 801f690:	edd7 7a00 	vldr	s15, [r7]
 801f694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f698:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f69c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f6a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801f6a4:	eef0 7a66 	vmov.f32	s15, s13
 801f6a8:	eeb0 0a67 	vmov.f32	s0, s15
 801f6ac:	370c      	adds	r7, #12
 801f6ae:	46bd      	mov	sp, r7
 801f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6b4:	4770      	bx	lr

0801f6b6 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 801f6b6:	b580      	push	{r7, lr}
 801f6b8:	b082      	sub	sp, #8
 801f6ba:	af00      	add	r7, sp, #0
 801f6bc:	ed87 0a01 	vstr	s0, [r7, #4]
 801f6c0:	ed97 0a01 	vldr	s0, [r7, #4]
 801f6c4:	2000      	movs	r0, #0
 801f6c6:	f7ff ffdd 	bl	801f684 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 801f6ca:	eef0 7a40 	vmov.f32	s15, s0
 801f6ce:	eeb0 0a67 	vmov.f32	s0, s15
 801f6d2:	3708      	adds	r7, #8
 801f6d4:	46bd      	mov	sp, r7
 801f6d6:	bd80      	pop	{r7, pc}

0801f6d8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 801f6d8:	b480      	push	{r7}
 801f6da:	b083      	sub	sp, #12
 801f6dc:	af00      	add	r7, sp, #0
 801f6de:	6078      	str	r0, [r7, #4]
 801f6e0:	4b03      	ldr	r3, [pc, #12]	; (801f6f0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 801f6e2:	4618      	mov	r0, r3
 801f6e4:	370c      	adds	r7, #12
 801f6e6:	46bd      	mov	sp, r7
 801f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6ec:	4770      	bx	lr
 801f6ee:	bf00      	nop
 801f6f0:	0801f6b7 	.word	0x0801f6b7

0801f6f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 801f6f4:	b590      	push	{r4, r7, lr}
 801f6f6:	b08f      	sub	sp, #60	; 0x3c
 801f6f8:	af04      	add	r7, sp, #16
 801f6fa:	6078      	str	r0, [r7, #4]
 801f6fc:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801f6fe:	6838      	ldr	r0, [r7, #0]
 801f700:	f7fd fa9b 	bl	801cc3a <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801f704:	4603      	mov	r3, r0
 801f706:	2b01      	cmp	r3, #1
 801f708:	bf14      	ite	ne
 801f70a:	2301      	movne	r3, #1
 801f70c:	2300      	moveq	r3, #0
 801f70e:	b2db      	uxtb	r3, r3
 801f710:	2b00      	cmp	r3, #0
 801f712:	d013      	beq.n	801f73c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 801f714:	687b      	ldr	r3, [r7, #4]
 801f716:	695c      	ldr	r4, [r3, #20]
 801f718:	6838      	ldr	r0, [r7, #0]
 801f71a:	f7fd fa8e 	bl	801cc3a <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801f71e:	4603      	mov	r3, r0
 801f720:	2201      	movs	r2, #1
 801f722:	9203      	str	r2, [sp, #12]
 801f724:	9302      	str	r3, [sp, #8]
 801f726:	4b7c      	ldr	r3, [pc, #496]	; (801f918 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801f728:	9301      	str	r3, [sp, #4]
 801f72a:	4b7c      	ldr	r3, [pc, #496]	; (801f91c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 801f72c:	9300      	str	r3, [sp, #0]
 801f72e:	235d      	movs	r3, #93	; 0x5d
 801f730:	4a7b      	ldr	r2, [pc, #492]	; (801f920 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f732:	497c      	ldr	r1, [pc, #496]	; (801f924 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801f734:	6878      	ldr	r0, [r7, #4]
 801f736:	47a0      	blx	r4
 801f738:	2301      	movs	r3, #1
 801f73a:	e146      	b.n	801f9ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801f73c:	6838      	ldr	r0, [r7, #0]
 801f73e:	f7fd fa89 	bl	801cc54 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801f742:	4603      	mov	r3, r0
 801f744:	2b01      	cmp	r3, #1
 801f746:	bf14      	ite	ne
 801f748:	2301      	movne	r3, #1
 801f74a:	2300      	moveq	r3, #0
 801f74c:	b2db      	uxtb	r3, r3
 801f74e:	2b00      	cmp	r3, #0
 801f750:	d013      	beq.n	801f77a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	695c      	ldr	r4, [r3, #20]
 801f756:	6838      	ldr	r0, [r7, #0]
 801f758:	f7fd fa7c 	bl	801cc54 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801f75c:	4603      	mov	r3, r0
 801f75e:	2201      	movs	r2, #1
 801f760:	9203      	str	r2, [sp, #12]
 801f762:	9302      	str	r3, [sp, #8]
 801f764:	4b6c      	ldr	r3, [pc, #432]	; (801f918 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801f766:	9301      	str	r3, [sp, #4]
 801f768:	4b6f      	ldr	r3, [pc, #444]	; (801f928 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 801f76a:	9300      	str	r3, [sp, #0]
 801f76c:	235e      	movs	r3, #94	; 0x5e
 801f76e:	4a6c      	ldr	r2, [pc, #432]	; (801f920 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f770:	496c      	ldr	r1, [pc, #432]	; (801f924 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801f772:	6878      	ldr	r0, [r7, #4]
 801f774:	47a0      	blx	r4
 801f776:	2301      	movs	r3, #1
 801f778:	e127      	b.n	801f9ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 801f77a:	2200      	movs	r2, #0
 801f77c:	6839      	ldr	r1, [r7, #0]
 801f77e:	6878      	ldr	r0, [r7, #4]
 801f780:	f7fb fe94 	bl	801b4ac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801f784:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 801f786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f788:	2b00      	cmp	r3, #0
 801f78a:	d10a      	bne.n	801f7a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 801f78c:	687b      	ldr	r3, [r7, #4]
 801f78e:	695c      	ldr	r4, [r3, #20]
 801f790:	4b66      	ldr	r3, [pc, #408]	; (801f92c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801f792:	9300      	str	r3, [sp, #0]
 801f794:	2360      	movs	r3, #96	; 0x60
 801f796:	4a62      	ldr	r2, [pc, #392]	; (801f920 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f798:	4965      	ldr	r1, [pc, #404]	; (801f930 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f79a:	6878      	ldr	r0, [r7, #4]
 801f79c:	47a0      	blx	r4
 801f79e:	2301      	movs	r3, #1
 801f7a0:	e113      	b.n	801f9ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 801f7a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f7a4:	f7fb fe05 	bl	801b3b2 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 801f7a8:	4603      	mov	r3, r0
 801f7aa:	2b00      	cmp	r3, #0
 801f7ac:	bfd4      	ite	le
 801f7ae:	2301      	movle	r3, #1
 801f7b0:	2300      	movgt	r3, #0
 801f7b2:	b2db      	uxtb	r3, r3
 801f7b4:	2b00      	cmp	r3, #0
 801f7b6:	d00a      	beq.n	801f7ce <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 801f7b8:	687b      	ldr	r3, [r7, #4]
 801f7ba:	695c      	ldr	r4, [r3, #20]
 801f7bc:	4b5d      	ldr	r3, [pc, #372]	; (801f934 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801f7be:	9300      	str	r3, [sp, #0]
 801f7c0:	2361      	movs	r3, #97	; 0x61
 801f7c2:	4a57      	ldr	r2, [pc, #348]	; (801f920 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f7c4:	495a      	ldr	r1, [pc, #360]	; (801f930 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f7c6:	6878      	ldr	r0, [r7, #4]
 801f7c8:	47a0      	blx	r4
 801f7ca:	2301      	movs	r3, #1
 801f7cc:	e0fd      	b.n	801f9ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 801f7ce:	2200      	movs	r2, #0
 801f7d0:	6839      	ldr	r1, [r7, #0]
 801f7d2:	6878      	ldr	r0, [r7, #4]
 801f7d4:	f7fb fe7a 	bl	801b4cc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801f7d8:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 801f7da:	6a3b      	ldr	r3, [r7, #32]
 801f7dc:	2b00      	cmp	r3, #0
 801f7de:	d10a      	bne.n	801f7f6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	695c      	ldr	r4, [r3, #20]
 801f7e4:	4b54      	ldr	r3, [pc, #336]	; (801f938 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801f7e6:	9300      	str	r3, [sp, #0]
 801f7e8:	2363      	movs	r3, #99	; 0x63
 801f7ea:	4a4d      	ldr	r2, [pc, #308]	; (801f920 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f7ec:	4950      	ldr	r1, [pc, #320]	; (801f930 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f7ee:	6878      	ldr	r0, [r7, #4]
 801f7f0:	47a0      	blx	r4
 801f7f2:	2301      	movs	r3, #1
 801f7f4:	e0e9      	b.n	801f9ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 801f7f6:	683b      	ldr	r3, [r7, #0]
 801f7f8:	691b      	ldr	r3, [r3, #16]
 801f7fa:	2b00      	cmp	r3, #0
 801f7fc:	d10a      	bne.n	801f814 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	695c      	ldr	r4, [r3, #20]
 801f802:	4b4e      	ldr	r3, [pc, #312]	; (801f93c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801f804:	9300      	str	r3, [sp, #0]
 801f806:	2365      	movs	r3, #101	; 0x65
 801f808:	4a45      	ldr	r2, [pc, #276]	; (801f920 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f80a:	4949      	ldr	r1, [pc, #292]	; (801f930 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f80c:	6878      	ldr	r0, [r7, #4]
 801f80e:	47a0      	blx	r4
 801f810:	2301      	movs	r3, #1
 801f812:	e0da      	b.n	801f9ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 801f814:	683b      	ldr	r3, [r7, #0]
 801f816:	691b      	ldr	r3, [r3, #16]
 801f818:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 801f81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f81c:	781b      	ldrb	r3, [r3, #0]
 801f81e:	2b07      	cmp	r3, #7
 801f820:	d12f      	bne.n	801f882 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 801f822:	687b      	ldr	r3, [r7, #4]
 801f824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f826:	f240 4102 	movw	r1, #1026	; 0x402
 801f82a:	6878      	ldr	r0, [r7, #4]
 801f82c:	4798      	blx	r3
 801f82e:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 801f830:	69bb      	ldr	r3, [r7, #24]
 801f832:	2b00      	cmp	r3, #0
 801f834:	d10a      	bne.n	801f84c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	695c      	ldr	r4, [r3, #20]
 801f83a:	4b41      	ldr	r3, [pc, #260]	; (801f940 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801f83c:	9300      	str	r3, [sp, #0]
 801f83e:	236b      	movs	r3, #107	; 0x6b
 801f840:	4a37      	ldr	r2, [pc, #220]	; (801f920 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f842:	493b      	ldr	r1, [pc, #236]	; (801f930 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f844:	6878      	ldr	r0, [r7, #4]
 801f846:	47a0      	blx	r4
 801f848:	2301      	movs	r3, #1
 801f84a:	e0be      	b.n	801f9ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 801f84c:	69fb      	ldr	r3, [r7, #28]
 801f84e:	69ba      	ldr	r2, [r7, #24]
 801f850:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f856:	f240 4102 	movw	r1, #1026	; 0x402
 801f85a:	6878      	ldr	r0, [r7, #4]
 801f85c:	4798      	blx	r3
 801f85e:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 801f860:	697b      	ldr	r3, [r7, #20]
 801f862:	2b00      	cmp	r3, #0
 801f864:	d10a      	bne.n	801f87c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	695c      	ldr	r4, [r3, #20]
 801f86a:	4b36      	ldr	r3, [pc, #216]	; (801f944 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801f86c:	9300      	str	r3, [sp, #0]
 801f86e:	236f      	movs	r3, #111	; 0x6f
 801f870:	4a2b      	ldr	r2, [pc, #172]	; (801f920 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f872:	492f      	ldr	r1, [pc, #188]	; (801f930 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f874:	6878      	ldr	r0, [r7, #4]
 801f876:	47a0      	blx	r4
 801f878:	2301      	movs	r3, #1
 801f87a:	e0a6      	b.n	801f9ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 801f87c:	69fb      	ldr	r3, [r7, #28]
 801f87e:	697a      	ldr	r2, [r7, #20]
 801f880:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 801f882:	6a3b      	ldr	r3, [r7, #32]
 801f884:	781b      	ldrb	r3, [r3, #0]
 801f886:	2b07      	cmp	r3, #7
 801f888:	d112      	bne.n	801f8b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 801f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f88c:	781b      	ldrb	r3, [r3, #0]
 801f88e:	2b09      	cmp	r3, #9
 801f890:	d028      	beq.n	801f8e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801f892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f894:	781b      	ldrb	r3, [r3, #0]
 801f896:	2b07      	cmp	r3, #7
 801f898:	d024      	beq.n	801f8e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	695c      	ldr	r4, [r3, #20]
 801f89e:	4b2a      	ldr	r3, [pc, #168]	; (801f948 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801f8a0:	9300      	str	r3, [sp, #0]
 801f8a2:	2375      	movs	r3, #117	; 0x75
 801f8a4:	4a1e      	ldr	r2, [pc, #120]	; (801f920 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f8a6:	4922      	ldr	r1, [pc, #136]	; (801f930 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f8a8:	6878      	ldr	r0, [r7, #4]
 801f8aa:	47a0      	blx	r4
 801f8ac:	2301      	movs	r3, #1
 801f8ae:	e08c      	b.n	801f9ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 801f8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8b2:	781a      	ldrb	r2, [r3, #0]
 801f8b4:	6a3b      	ldr	r3, [r7, #32]
 801f8b6:	781b      	ldrb	r3, [r3, #0]
 801f8b8:	429a      	cmp	r2, r3
 801f8ba:	d013      	beq.n	801f8e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801f8bc:	687b      	ldr	r3, [r7, #4]
 801f8be:	695c      	ldr	r4, [r3, #20]
 801f8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8c2:	781b      	ldrb	r3, [r3, #0]
 801f8c4:	461a      	mov	r2, r3
 801f8c6:	6a3b      	ldr	r3, [r7, #32]
 801f8c8:	781b      	ldrb	r3, [r3, #0]
 801f8ca:	9303      	str	r3, [sp, #12]
 801f8cc:	9202      	str	r2, [sp, #8]
 801f8ce:	4b1f      	ldr	r3, [pc, #124]	; (801f94c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801f8d0:	9301      	str	r3, [sp, #4]
 801f8d2:	4b1f      	ldr	r3, [pc, #124]	; (801f950 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801f8d4:	9300      	str	r3, [sp, #0]
 801f8d6:	2378      	movs	r3, #120	; 0x78
 801f8d8:	4a11      	ldr	r2, [pc, #68]	; (801f920 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f8da:	4912      	ldr	r1, [pc, #72]	; (801f924 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801f8dc:	6878      	ldr	r0, [r7, #4]
 801f8de:	47a0      	blx	r4
 801f8e0:	2301      	movs	r3, #1
 801f8e2:	e072      	b.n	801f9ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 801f8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8e6:	781b      	ldrb	r3, [r3, #0]
 801f8e8:	2b07      	cmp	r3, #7
 801f8ea:	d161      	bne.n	801f9b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801f8ec:	6a3b      	ldr	r3, [r7, #32]
 801f8ee:	691b      	ldr	r3, [r3, #16]
 801f8f0:	2b00      	cmp	r3, #0
 801f8f2:	d035      	beq.n	801f960 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 801f8f4:	687b      	ldr	r3, [r7, #4]
 801f8f6:	695c      	ldr	r4, [r3, #20]
 801f8f8:	6a3b      	ldr	r3, [r7, #32]
 801f8fa:	691b      	ldr	r3, [r3, #16]
 801f8fc:	2200      	movs	r2, #0
 801f8fe:	9203      	str	r2, [sp, #12]
 801f900:	9302      	str	r3, [sp, #8]
 801f902:	4b14      	ldr	r3, [pc, #80]	; (801f954 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801f904:	9301      	str	r3, [sp, #4]
 801f906:	4b14      	ldr	r3, [pc, #80]	; (801f958 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801f908:	9300      	str	r3, [sp, #0]
 801f90a:	237d      	movs	r3, #125	; 0x7d
 801f90c:	4a04      	ldr	r2, [pc, #16]	; (801f920 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f90e:	4905      	ldr	r1, [pc, #20]	; (801f924 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801f910:	6878      	ldr	r0, [r7, #4]
 801f912:	47a0      	blx	r4
 801f914:	2301      	movs	r3, #1
 801f916:	e058      	b.n	801f9ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 801f918:	08029398 	.word	0x08029398
 801f91c:	0802939c 	.word	0x0802939c
 801f920:	080291e0 	.word	0x080291e0
 801f924:	0802926c 	.word	0x0802926c
 801f928:	080293ac 	.word	0x080293ac
 801f92c:	080293c0 	.word	0x080293c0
 801f930:	0802934c 	.word	0x0802934c
 801f934:	080293d4 	.word	0x080293d4
 801f938:	080293f0 	.word	0x080293f0
 801f93c:	08029404 	.word	0x08029404
 801f940:	08029420 	.word	0x08029420
 801f944:	08029438 	.word	0x08029438
 801f948:	0802945c 	.word	0x0802945c
 801f94c:	08029334 	.word	0x08029334
 801f950:	08029314 	.word	0x08029314
 801f954:	08029288 	.word	0x08029288
 801f958:	0802928c 	.word	0x0802928c
 801f95c:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801f960:	f107 0308 	add.w	r3, r7, #8
 801f964:	4618      	mov	r0, r3
 801f966:	f7ff fe7f 	bl	801f668 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 801f96a:	69fb      	ldr	r3, [r7, #28]
 801f96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f96e:	f240 2201 	movw	r2, #513	; 0x201
 801f972:	4619      	mov	r1, r3
 801f974:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 801f95c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801f978:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 801f97c:	f7ff faf4 	bl	801ef68 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801f980:	f107 030c 	add.w	r3, r7, #12
 801f984:	4618      	mov	r0, r3
 801f986:	f7ff fea7 	bl	801f6d8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 801f98a:	69fb      	ldr	r3, [r7, #28]
 801f98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f98e:	f240 2201 	movw	r2, #513	; 0x201
 801f992:	4619      	mov	r1, r3
 801f994:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801f998:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 801f95c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801f99c:	f7ff fae4 	bl	801ef68 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 801f9a0:	6a3b      	ldr	r3, [r7, #32]
 801f9a2:	691a      	ldr	r2, [r3, #16]
 801f9a4:	69fb      	ldr	r3, [r7, #28]
 801f9a6:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 801f9a8:	6a3b      	ldr	r3, [r7, #32]
 801f9aa:	68da      	ldr	r2, [r3, #12]
 801f9ac:	69fb      	ldr	r3, [r7, #28]
 801f9ae:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 801f9b0:	683b      	ldr	r3, [r7, #0]
 801f9b2:	695b      	ldr	r3, [r3, #20]
 801f9b4:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 801f9b6:	69fb      	ldr	r3, [r7, #28]
 801f9b8:	9300      	str	r3, [sp, #0]
 801f9ba:	693b      	ldr	r3, [r7, #16]
 801f9bc:	6a3a      	ldr	r2, [r7, #32]
 801f9be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f9c0:	6878      	ldr	r0, [r7, #4]
 801f9c2:	f7ff fbfd 	bl	801f1c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801f9c6:	4603      	mov	r3, r0
 801f9c8:	bf00      	nop
}
 801f9ca:	4618      	mov	r0, r3
 801f9cc:	372c      	adds	r7, #44	; 0x2c
 801f9ce:	46bd      	mov	sp, r7
 801f9d0:	bd90      	pop	{r4, r7, pc}
 801f9d2:	bf00      	nop

0801f9d4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 801f9d4:	b580      	push	{r7, lr}
 801f9d6:	b084      	sub	sp, #16
 801f9d8:	af00      	add	r7, sp, #0
 801f9da:	6078      	str	r0, [r7, #4]
 801f9dc:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 801f9de:	4b21      	ldr	r3, [pc, #132]	; (801fa64 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801f9e0:	681a      	ldr	r2, [r3, #0]
 801f9e2:	683b      	ldr	r3, [r7, #0]
 801f9e4:	425b      	negs	r3, r3
 801f9e6:	441a      	add	r2, r3
 801f9e8:	4b1f      	ldr	r3, [pc, #124]	; (801fa68 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x94>)
 801f9ea:	681b      	ldr	r3, [r3, #0]
 801f9ec:	429a      	cmp	r2, r3
 801f9ee:	d224      	bcs.n	801fa3a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x66>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 801f9f0:	4b1e      	ldr	r3, [pc, #120]	; (801fa6c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801f9f2:	681b      	ldr	r3, [r3, #0]
 801f9f4:	2b09      	cmp	r3, #9
 801f9f6:	d906      	bls.n	801fa06 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 801f9f8:	683b      	ldr	r3, [r7, #0]
 801f9fa:	4619      	mov	r1, r3
 801f9fc:	481c      	ldr	r0, [pc, #112]	; (801fa70 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x9c>)
 801f9fe:	f7e6 fa8d 	bl	8005f1c <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 801fa02:	2300      	movs	r3, #0
 801fa04:	e029      	b.n	801fa5a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 801fa06:	2101      	movs	r1, #1
 801fa08:	6838      	ldr	r0, [r7, #0]
 801fa0a:	f7fb fa29 	bl	801ae60 <_Z9ei_callocjj>
 801fa0e:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL) {
 801fa10:	68fb      	ldr	r3, [r7, #12]
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	d106      	bne.n	801fa24 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 801fa16:	683b      	ldr	r3, [r7, #0]
 801fa18:	4619      	mov	r1, r3
 801fa1a:	4816      	ldr	r0, [pc, #88]	; (801fa74 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa0>)
 801fa1c:	f7e6 fa7e 	bl	8005f1c <_Z9ei_printfPKcz>
      return NULL;
 801fa20:	2300      	movs	r3, #0
 801fa22:	e01a      	b.n	801fa5a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 801fa24:	4b11      	ldr	r3, [pc, #68]	; (801fa6c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801fa26:	681b      	ldr	r3, [r3, #0]
 801fa28:	1c5a      	adds	r2, r3, #1
 801fa2a:	4910      	ldr	r1, [pc, #64]	; (801fa6c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801fa2c:	600a      	str	r2, [r1, #0]
 801fa2e:	4912      	ldr	r1, [pc, #72]	; (801fa78 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa4>)
 801fa30:	68fa      	ldr	r2, [r7, #12]
 801fa32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 801fa36:	68fb      	ldr	r3, [r7, #12]
 801fa38:	e00f      	b.n	801fa5a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
  }

  current_location -= bytes;
 801fa3a:	4b0a      	ldr	r3, [pc, #40]	; (801fa64 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801fa3c:	681a      	ldr	r2, [r3, #0]
 801fa3e:	683b      	ldr	r3, [r7, #0]
 801fa40:	425b      	negs	r3, r3
 801fa42:	4413      	add	r3, r2
 801fa44:	4a07      	ldr	r2, [pc, #28]	; (801fa64 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801fa46:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 801fa48:	4b06      	ldr	r3, [pc, #24]	; (801fa64 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801fa4a:	681b      	ldr	r3, [r3, #0]
 801fa4c:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 801fa4e:	683a      	ldr	r2, [r7, #0]
 801fa50:	2100      	movs	r1, #0
 801fa52:	68f8      	ldr	r0, [r7, #12]
 801fa54:	f003 febc 	bl	80237d0 <memset>

  return ptr;
 801fa58:	68fb      	ldr	r3, [r7, #12]
}
 801fa5a:	4618      	mov	r0, r3
 801fa5c:	3710      	adds	r7, #16
 801fa5e:	46bd      	mov	sp, r7
 801fa60:	bd80      	pop	{r7, pc}
 801fa62:	bf00      	nop
 801fa64:	20002c1c 	.word	0x20002c1c
 801fa68:	20002c18 	.word	0x20002c18
 801fa6c:	200030b4 	.word	0x200030b4
 801fa70:	080294ac 	.word	0x080294ac
 801fa74:	0802952c 	.word	0x0802952c
 801fa78:	2000308c 	.word	0x2000308c

0801fa7c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 801fa7c:	b580      	push	{r7, lr}
 801fa7e:	b086      	sub	sp, #24
 801fa80:	af00      	add	r7, sp, #0
 801fa82:	60f8      	str	r0, [r7, #12]
 801fa84:	60b9      	str	r1, [r7, #8]
 801fa86:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 801fa88:	4b1b      	ldr	r3, [pc, #108]	; (801faf8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801fa8a:	681b      	ldr	r3, [r3, #0]
 801fa8c:	2b03      	cmp	r3, #3
 801fa8e:	d906      	bls.n	801fa9e <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 801fa90:	68bb      	ldr	r3, [r7, #8]
 801fa92:	4619      	mov	r1, r3
 801fa94:	4819      	ldr	r0, [pc, #100]	; (801fafc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x80>)
 801fa96:	f7e6 fa41 	bl	8005f1c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801fa9a:	2301      	movs	r3, #1
 801fa9c:	e028      	b.n	801faf0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 801fa9e:	68bb      	ldr	r3, [r7, #8]
 801faa0:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 801faa2:	693b      	ldr	r3, [r7, #16]
 801faa4:	4619      	mov	r1, r3
 801faa6:	68f8      	ldr	r0, [r7, #12]
 801faa8:	f7ff ff94 	bl	801f9d4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 801faac:	4603      	mov	r3, r0
 801faae:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 801fab0:	697b      	ldr	r3, [r7, #20]
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	d106      	bne.n	801fac4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 801fab6:	68bb      	ldr	r3, [r7, #8]
 801fab8:	4619      	mov	r1, r3
 801faba:	4811      	ldr	r0, [pc, #68]	; (801fb00 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x84>)
 801fabc:	f7e6 fa2e 	bl	8005f1c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801fac0:	2301      	movs	r3, #1
 801fac2:	e015      	b.n	801faf0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 801fac4:	4b0c      	ldr	r3, [pc, #48]	; (801faf8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801fac6:	681b      	ldr	r3, [r3, #0]
 801fac8:	4a0e      	ldr	r2, [pc, #56]	; (801fb04 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x88>)
 801faca:	00db      	lsls	r3, r3, #3
 801facc:	4413      	add	r3, r2
 801face:	f107 0210 	add.w	r2, r7, #16
 801fad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fad6:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 801fada:	4b07      	ldr	r3, [pc, #28]	; (801faf8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801fadc:	681b      	ldr	r3, [r3, #0]
 801fade:	461a      	mov	r2, r3
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 801fae4:	4b04      	ldr	r3, [pc, #16]	; (801faf8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801fae6:	681b      	ldr	r3, [r3, #0]
 801fae8:	3301      	adds	r3, #1
 801faea:	4a03      	ldr	r2, [pc, #12]	; (801faf8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801faec:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 801faee:	2300      	movs	r3, #0
}
 801faf0:	4618      	mov	r0, r3
 801faf2:	3718      	adds	r7, #24
 801faf4:	46bd      	mov	sp, r7
 801faf6:	bd80      	pop	{r7, pc}
 801faf8:	200030d8 	.word	0x200030d8
 801fafc:	08029564 	.word	0x08029564
 801fb00:	080295bc 	.word	0x080295bc
 801fb04:	200030b8 	.word	0x200030b8

0801fb08 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 801fb08:	b480      	push	{r7}
 801fb0a:	b083      	sub	sp, #12
 801fb0c:	af00      	add	r7, sp, #0
 801fb0e:	6078      	str	r0, [r7, #4]
 801fb10:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 801fb12:	4b09      	ldr	r3, [pc, #36]	; (801fb38 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x30>)
 801fb14:	681b      	ldr	r3, [r3, #0]
 801fb16:	461a      	mov	r2, r3
 801fb18:	683b      	ldr	r3, [r7, #0]
 801fb1a:	4293      	cmp	r3, r2
 801fb1c:	dd01      	ble.n	801fb22 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x1a>
    return NULL;
 801fb1e:	2300      	movs	r3, #0
 801fb20:	e004      	b.n	801fb2c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 801fb22:	4a06      	ldr	r2, [pc, #24]	; (801fb3c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x34>)
 801fb24:	683b      	ldr	r3, [r7, #0]
 801fb26:	00db      	lsls	r3, r3, #3
 801fb28:	4413      	add	r3, r2
 801fb2a:	685b      	ldr	r3, [r3, #4]
}
 801fb2c:	4618      	mov	r0, r3
 801fb2e:	370c      	adds	r7, #12
 801fb30:	46bd      	mov	sp, r7
 801fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb36:	4770      	bx	lr
 801fb38:	200030d8 	.word	0x200030d8
 801fb3c:	200030b8 	.word	0x200030b8

0801fb40 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 801fb40:	b480      	push	{r7}
 801fb42:	b083      	sub	sp, #12
 801fb44:	af00      	add	r7, sp, #0
 801fb46:	6078      	str	r0, [r7, #4]
 801fb48:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 801fb4a:	683b      	ldr	r3, [r7, #0]
 801fb4c:	019b      	lsls	r3, r3, #6
 801fb4e:	4a04      	ldr	r2, [pc, #16]	; (801fb60 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 801fb50:	4413      	add	r3, r2
}
 801fb52:	4618      	mov	r0, r3
 801fb54:	370c      	adds	r7, #12
 801fb56:	46bd      	mov	sp, r7
 801fb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb5c:	4770      	bx	lr
 801fb5e:	bf00      	nop
 801fb60:	20002c78 	.word	0x20002c78

0801fb64 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 801fb64:	b480      	push	{r7}
 801fb66:	b083      	sub	sp, #12
 801fb68:	af00      	add	r7, sp, #0
 801fb6a:	6078      	str	r0, [r7, #4]
 801fb6c:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 801fb6e:	683a      	ldr	r2, [r7, #0]
 801fb70:	4613      	mov	r3, r2
 801fb72:	005b      	lsls	r3, r3, #1
 801fb74:	4413      	add	r3, r2
 801fb76:	009b      	lsls	r3, r3, #2
 801fb78:	4a03      	ldr	r2, [pc, #12]	; (801fb88 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 801fb7a:	4413      	add	r3, r2
}
 801fb7c:	4618      	mov	r0, r3
 801fb7e:	370c      	adds	r7, #12
 801fb80:	46bd      	mov	sp, r7
 801fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb86:	4770      	bx	lr
 801fb88:	20002f38 	.word	0x20002f38

0801fb8c <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 801fb8c:	b5b0      	push	{r4, r5, r7, lr}
 801fb8e:	b092      	sub	sp, #72	; 0x48
 801fb90:	af00      	add	r7, sp, #0
 801fb92:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 801fb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb96:	f44f 7188 	mov.w	r1, #272	; 0x110
 801fb9a:	2010      	movs	r0, #16
 801fb9c:	4798      	blx	r3
 801fb9e:	4603      	mov	r3, r0
 801fba0:	4aa3      	ldr	r2, [pc, #652]	; (801fe30 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801fba2:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 801fba4:	4ba2      	ldr	r3, [pc, #648]	; (801fe30 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801fba6:	681b      	ldr	r3, [r3, #0]
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	d104      	bne.n	801fbb6 <_Z18trained_model_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 801fbac:	48a1      	ldr	r0, [pc, #644]	; (801fe34 <_Z18trained_model_initPFPvjjE+0x2a8>)
 801fbae:	f7e6 f9b5 	bl	8005f1c <_Z9ei_printfPKcz>
    return kTfLiteError;
 801fbb2:	2301      	movs	r3, #1
 801fbb4:	e21d      	b.n	801fff2 <_Z18trained_model_initPFPvjjE+0x466>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 801fbb6:	4b9e      	ldr	r3, [pc, #632]	; (801fe30 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801fbb8:	681b      	ldr	r3, [r3, #0]
 801fbba:	4a9f      	ldr	r2, [pc, #636]	; (801fe38 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801fbbc:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 801fbbe:	4b9c      	ldr	r3, [pc, #624]	; (801fe30 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801fbc0:	681b      	ldr	r3, [r3, #0]
 801fbc2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801fbc6:	4a9d      	ldr	r2, [pc, #628]	; (801fe3c <_Z18trained_model_initPFPvjjE+0x2b0>)
 801fbc8:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 801fbca:	4b9d      	ldr	r3, [pc, #628]	; (801fe40 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fbcc:	4a9d      	ldr	r2, [pc, #628]	; (801fe44 <_Z18trained_model_initPFPvjjE+0x2b8>)
 801fbce:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 801fbd0:	4b9b      	ldr	r3, [pc, #620]	; (801fe40 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fbd2:	4a9d      	ldr	r2, [pc, #628]	; (801fe48 <_Z18trained_model_initPFPvjjE+0x2bc>)
 801fbd4:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 801fbd6:	4b9a      	ldr	r3, [pc, #616]	; (801fe40 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fbd8:	4a9c      	ldr	r2, [pc, #624]	; (801fe4c <_Z18trained_model_initPFPvjjE+0x2c0>)
 801fbda:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 801fbdc:	4b98      	ldr	r3, [pc, #608]	; (801fe40 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fbde:	4a9c      	ldr	r2, [pc, #624]	; (801fe50 <_Z18trained_model_initPFPvjjE+0x2c4>)
 801fbe0:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 801fbe2:	4b97      	ldr	r3, [pc, #604]	; (801fe40 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fbe4:	4a9b      	ldr	r2, [pc, #620]	; (801fe54 <_Z18trained_model_initPFPvjjE+0x2c8>)
 801fbe6:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 801fbe8:	4b95      	ldr	r3, [pc, #596]	; (801fe40 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fbea:	4a9b      	ldr	r2, [pc, #620]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fbec:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 801fbee:	4b94      	ldr	r3, [pc, #592]	; (801fe40 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fbf0:	220b      	movs	r2, #11
 801fbf2:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 801fbf4:	2300      	movs	r3, #0
 801fbf6:	647b      	str	r3, [r7, #68]	; 0x44
 801fbf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fbfa:	2b0a      	cmp	r3, #10
 801fbfc:	f200 810c 	bhi.w	801fe18 <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 801fc00:	4996      	ldr	r1, [pc, #600]	; (801fe5c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fc02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fc04:	4613      	mov	r3, r2
 801fc06:	005b      	lsls	r3, r3, #1
 801fc08:	4413      	add	r3, r2
 801fc0a:	00db      	lsls	r3, r3, #3
 801fc0c:	440b      	add	r3, r1
 801fc0e:	3301      	adds	r3, #1
 801fc10:	7819      	ldrb	r1, [r3, #0]
 801fc12:	4a91      	ldr	r2, [pc, #580]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fc14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fc16:	019b      	lsls	r3, r3, #6
 801fc18:	4413      	add	r3, r2
 801fc1a:	460a      	mov	r2, r1
 801fc1c:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 801fc1e:	498f      	ldr	r1, [pc, #572]	; (801fe5c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fc20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fc22:	4613      	mov	r3, r2
 801fc24:	005b      	lsls	r3, r3, #1
 801fc26:	4413      	add	r3, r2
 801fc28:	00db      	lsls	r3, r3, #3
 801fc2a:	440b      	add	r3, r1
 801fc2c:	3301      	adds	r3, #1
 801fc2e:	7818      	ldrb	r0, [r3, #0]
 801fc30:	498b      	ldr	r1, [pc, #556]	; (801fe60 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801fc32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fc34:	4613      	mov	r3, r2
 801fc36:	005b      	lsls	r3, r3, #1
 801fc38:	4413      	add	r3, r2
 801fc3a:	009b      	lsls	r3, r3, #2
 801fc3c:	440b      	add	r3, r1
 801fc3e:	3308      	adds	r3, #8
 801fc40:	4602      	mov	r2, r0
 801fc42:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 801fc44:	4a84      	ldr	r2, [pc, #528]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fc46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fc48:	019b      	lsls	r3, r3, #6
 801fc4a:	4413      	add	r3, r2
 801fc4c:	332d      	adds	r3, #45	; 0x2d
 801fc4e:	2200      	movs	r2, #0
 801fc50:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 801fc52:	4982      	ldr	r1, [pc, #520]	; (801fe5c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fc54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fc56:	4613      	mov	r3, r2
 801fc58:	005b      	lsls	r3, r3, #1
 801fc5a:	4413      	add	r3, r2
 801fc5c:	00db      	lsls	r3, r3, #3
 801fc5e:	440b      	add	r3, r1
 801fc60:	7819      	ldrb	r1, [r3, #0]
 801fc62:	4a7d      	ldr	r2, [pc, #500]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fc64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fc66:	019b      	lsls	r3, r3, #6
 801fc68:	4413      	add	r3, r2
 801fc6a:	3314      	adds	r3, #20
 801fc6c:	460a      	mov	r2, r1
 801fc6e:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 801fc70:	497a      	ldr	r1, [pc, #488]	; (801fe5c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fc72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fc74:	4613      	mov	r3, r2
 801fc76:	005b      	lsls	r3, r3, #1
 801fc78:	4413      	add	r3, r2
 801fc7a:	00db      	lsls	r3, r3, #3
 801fc7c:	440b      	add	r3, r1
 801fc7e:	330c      	adds	r3, #12
 801fc80:	681a      	ldr	r2, [r3, #0]
 801fc82:	4975      	ldr	r1, [pc, #468]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fc84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fc86:	019b      	lsls	r3, r3, #6
 801fc88:	440b      	add	r3, r1
 801fc8a:	3318      	adds	r3, #24
 801fc8c:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 801fc8e:	4973      	ldr	r1, [pc, #460]	; (801fe5c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fc90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fc92:	4613      	mov	r3, r2
 801fc94:	005b      	lsls	r3, r3, #1
 801fc96:	4413      	add	r3, r2
 801fc98:	00db      	lsls	r3, r3, #3
 801fc9a:	440b      	add	r3, r1
 801fc9c:	3308      	adds	r3, #8
 801fc9e:	681a      	ldr	r2, [r3, #0]
 801fca0:	496d      	ldr	r1, [pc, #436]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fca4:	019b      	lsls	r3, r3, #6
 801fca6:	440b      	add	r3, r1
 801fca8:	3308      	adds	r3, #8
 801fcaa:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 801fcac:	496b      	ldr	r1, [pc, #428]	; (801fe5c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fcae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fcb0:	4613      	mov	r3, r2
 801fcb2:	005b      	lsls	r3, r3, #1
 801fcb4:	4413      	add	r3, r2
 801fcb6:	00db      	lsls	r3, r3, #3
 801fcb8:	440b      	add	r3, r1
 801fcba:	3308      	adds	r3, #8
 801fcbc:	6819      	ldr	r1, [r3, #0]
 801fcbe:	4868      	ldr	r0, [pc, #416]	; (801fe60 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801fcc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fcc2:	4613      	mov	r3, r2
 801fcc4:	005b      	lsls	r3, r3, #1
 801fcc6:	4413      	add	r3, r2
 801fcc8:	009b      	lsls	r3, r3, #2
 801fcca:	4403      	add	r3, r0
 801fccc:	3304      	adds	r3, #4
 801fcce:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 801fcd0:	4a61      	ldr	r2, [pc, #388]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fcd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fcd4:	019b      	lsls	r3, r3, #6
 801fcd6:	4413      	add	r3, r2
 801fcd8:	3314      	adds	r3, #20
 801fcda:	781b      	ldrb	r3, [r3, #0]
 801fcdc:	2b02      	cmp	r3, #2
 801fcde:	d11e      	bne.n	801fd1e <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 801fce0:	495e      	ldr	r1, [pc, #376]	; (801fe5c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fce4:	4613      	mov	r3, r2
 801fce6:	005b      	lsls	r3, r3, #1
 801fce8:	4413      	add	r3, r2
 801fcea:	00db      	lsls	r3, r3, #3
 801fcec:	440b      	add	r3, r1
 801fcee:	3304      	adds	r3, #4
 801fcf0:	681b      	ldr	r3, [r3, #0]
 801fcf2:	461a      	mov	r2, r3
 801fcf4:	4b4e      	ldr	r3, [pc, #312]	; (801fe30 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801fcf6:	681b      	ldr	r3, [r3, #0]
 801fcf8:	4413      	add	r3, r2
 801fcfa:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 801fcfc:	4a56      	ldr	r2, [pc, #344]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fcfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fd00:	019b      	lsls	r3, r3, #6
 801fd02:	4413      	add	r3, r2
 801fd04:	3304      	adds	r3, #4
 801fd06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fd08:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 801fd0a:	4955      	ldr	r1, [pc, #340]	; (801fe60 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801fd0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fd0e:	4613      	mov	r3, r2
 801fd10:	005b      	lsls	r3, r3, #1
 801fd12:	4413      	add	r3, r2
 801fd14:	009b      	lsls	r3, r3, #2
 801fd16:	440b      	add	r3, r1
 801fd18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fd1a:	601a      	str	r2, [r3, #0]
 801fd1c:	e01f      	b.n	801fd5e <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
 801fd1e:	494f      	ldr	r1, [pc, #316]	; (801fe5c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fd20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fd22:	4613      	mov	r3, r2
 801fd24:	005b      	lsls	r3, r3, #1
 801fd26:	4413      	add	r3, r2
 801fd28:	00db      	lsls	r3, r3, #3
 801fd2a:	440b      	add	r3, r1
 801fd2c:	3304      	adds	r3, #4
 801fd2e:	681a      	ldr	r2, [r3, #0]
 801fd30:	4949      	ldr	r1, [pc, #292]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fd32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fd34:	019b      	lsls	r3, r3, #6
 801fd36:	440b      	add	r3, r1
 801fd38:	3304      	adds	r3, #4
 801fd3a:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 801fd3c:	4947      	ldr	r1, [pc, #284]	; (801fe5c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fd3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fd40:	4613      	mov	r3, r2
 801fd42:	005b      	lsls	r3, r3, #1
 801fd44:	4413      	add	r3, r2
 801fd46:	00db      	lsls	r3, r3, #3
 801fd48:	440b      	add	r3, r1
 801fd4a:	3304      	adds	r3, #4
 801fd4c:	6819      	ldr	r1, [r3, #0]
 801fd4e:	4844      	ldr	r0, [pc, #272]	; (801fe60 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801fd50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fd52:	4613      	mov	r3, r2
 801fd54:	005b      	lsls	r3, r3, #1
 801fd56:	4413      	add	r3, r2
 801fd58:	009b      	lsls	r3, r3, #2
 801fd5a:	4403      	add	r3, r0
 801fd5c:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 801fd5e:	4a3e      	ldr	r2, [pc, #248]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fd60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fd62:	019b      	lsls	r3, r3, #6
 801fd64:	4413      	add	r3, r2
 801fd66:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801fd6a:	493c      	ldr	r1, [pc, #240]	; (801fe5c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fd6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fd6e:	4613      	mov	r3, r2
 801fd70:	005b      	lsls	r3, r3, #1
 801fd72:	4413      	add	r3, r2
 801fd74:	00db      	lsls	r3, r3, #3
 801fd76:	440b      	add	r3, r1
 801fd78:	f103 0210 	add.w	r2, r3, #16
 801fd7c:	4603      	mov	r3, r0
 801fd7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fd82:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 801fd86:	4a34      	ldr	r2, [pc, #208]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fd88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fd8a:	019b      	lsls	r3, r3, #6
 801fd8c:	4413      	add	r3, r2
 801fd8e:	3330      	adds	r3, #48	; 0x30
 801fd90:	781b      	ldrb	r3, [r3, #0]
 801fd92:	2b01      	cmp	r3, #1
 801fd94:	d11b      	bne.n	801fdce <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 801fd96:	4931      	ldr	r1, [pc, #196]	; (801fe5c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fd98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fd9a:	4613      	mov	r3, r2
 801fd9c:	005b      	lsls	r3, r3, #1
 801fd9e:	4413      	add	r3, r2
 801fda0:	00db      	lsls	r3, r3, #3
 801fda2:	440b      	add	r3, r1
 801fda4:	3314      	adds	r3, #20
 801fda6:	681b      	ldr	r3, [r3, #0]
 801fda8:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 801fdaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fdac:	681b      	ldr	r3, [r3, #0]
 801fdae:	685a      	ldr	r2, [r3, #4]
 801fdb0:	4929      	ldr	r1, [pc, #164]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fdb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fdb4:	019b      	lsls	r3, r3, #6
 801fdb6:	440b      	add	r3, r1
 801fdb8:	330c      	adds	r3, #12
 801fdba:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 801fdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fdbe:	685b      	ldr	r3, [r3, #4]
 801fdc0:	685a      	ldr	r2, [r3, #4]
 801fdc2:	4925      	ldr	r1, [pc, #148]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fdc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fdc6:	019b      	lsls	r3, r3, #6
 801fdc8:	440b      	add	r3, r1
 801fdca:	3310      	adds	r3, #16
 801fdcc:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 801fdce:	4a22      	ldr	r2, [pc, #136]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fdd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fdd2:	019b      	lsls	r3, r3, #6
 801fdd4:	4413      	add	r3, r2
 801fdd6:	3314      	adds	r3, #20
 801fdd8:	781b      	ldrb	r3, [r3, #0]
 801fdda:	2b02      	cmp	r3, #2
 801fddc:	d118      	bne.n	801fe10 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 801fdde:	4a1e      	ldr	r2, [pc, #120]	; (801fe58 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fde0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fde2:	019b      	lsls	r3, r3, #6
 801fde4:	4413      	add	r3, r2
 801fde6:	3304      	adds	r3, #4
 801fde8:	6819      	ldr	r1, [r3, #0]
 801fdea:	481c      	ldr	r0, [pc, #112]	; (801fe5c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fdec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fdee:	4613      	mov	r3, r2
 801fdf0:	005b      	lsls	r3, r3, #1
 801fdf2:	4413      	add	r3, r2
 801fdf4:	00db      	lsls	r3, r3, #3
 801fdf6:	4403      	add	r3, r0
 801fdf8:	330c      	adds	r3, #12
 801fdfa:	681b      	ldr	r3, [r3, #0]
 801fdfc:	440b      	add	r3, r1
 801fdfe:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 801fe00:	4b0d      	ldr	r3, [pc, #52]	; (801fe38 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801fe02:	681b      	ldr	r3, [r3, #0]
 801fe04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fe06:	429a      	cmp	r2, r3
 801fe08:	d902      	bls.n	801fe10 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 801fe0a:	4a0b      	ldr	r2, [pc, #44]	; (801fe38 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801fe0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fe0e:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 11; ++i) {
 801fe10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fe12:	3301      	adds	r3, #1
 801fe14:	647b      	str	r3, [r7, #68]	; 0x44
 801fe16:	e6ef      	b.n	801fbf8 <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 801fe18:	4b07      	ldr	r3, [pc, #28]	; (801fe38 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801fe1a:	681a      	ldr	r2, [r3, #0]
 801fe1c:	4b07      	ldr	r3, [pc, #28]	; (801fe3c <_Z18trained_model_initPFPvjjE+0x2b0>)
 801fe1e:	681b      	ldr	r3, [r3, #0]
 801fe20:	429a      	cmp	r2, r3
 801fe22:	d921      	bls.n	801fe68 <_Z18trained_model_initPFPvjjE+0x2dc>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 801fe24:	480f      	ldr	r0, [pc, #60]	; (801fe64 <_Z18trained_model_initPFPvjjE+0x2d8>)
 801fe26:	f7e6 f879 	bl	8005f1c <_Z9ei_printfPKcz>
    return kTfLiteError;
 801fe2a:	2301      	movs	r3, #1
 801fe2c:	e0e1      	b.n	801fff2 <_Z18trained_model_initPFPvjjE+0x466>
 801fe2e:	bf00      	nop
 801fe30:	20002c14 	.word	0x20002c14
 801fe34:	080295f0 	.word	0x080295f0
 801fe38:	20002c18 	.word	0x20002c18
 801fe3c:	20002c1c 	.word	0x20002c1c
 801fe40:	20002c20 	.word	0x20002c20
 801fe44:	0801f9d5 	.word	0x0801f9d5
 801fe48:	0801fa7d 	.word	0x0801fa7d
 801fe4c:	0801fb09 	.word	0x0801fb09
 801fe50:	0801fb41 	.word	0x0801fb41
 801fe54:	0801fb65 	.word	0x0801fb65
 801fe58:	20002c78 	.word	0x20002c78
 801fe5c:	20000114 	.word	0x20000114
 801fe60:	20002f38 	.word	0x20002f38
 801fe64:	08029618 	.word	0x08029618
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 801fe68:	4c64      	ldr	r4, [pc, #400]	; (801fffc <_Z18trained_model_initPFPvjjE+0x470>)
 801fe6a:	463b      	mov	r3, r7
 801fe6c:	4618      	mov	r0, r3
 801fe6e:	f7fd fe59 	bl	801db24 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 801fe72:	4625      	mov	r5, r4
 801fe74:	463c      	mov	r4, r7
 801fe76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801fe78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801fe7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801fe7e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 801fe82:	4c5e      	ldr	r4, [pc, #376]	; (801fffc <_Z18trained_model_initPFPvjjE+0x470>)
 801fe84:	463b      	mov	r3, r7
 801fe86:	4618      	mov	r0, r3
 801fe88:	f7fe fc7c 	bl	801e784 <_ZN6tflite16Register_SOFTMAXEv>
 801fe8c:	3420      	adds	r4, #32
 801fe8e:	463d      	mov	r5, r7
 801fe90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801fe92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801fe94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801fe98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for (size_t i = 0; i < 4; ++i) {
 801fe9c:	2300      	movs	r3, #0
 801fe9e:	643b      	str	r3, [r7, #64]	; 0x40
 801fea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fea2:	2b03      	cmp	r3, #3
 801fea4:	d86f      	bhi.n	801ff86 <_Z18trained_model_initPFPvjjE+0x3fa>
    tflNodes[i].inputs = nodeData[i].inputs;
 801fea6:	4a56      	ldr	r2, [pc, #344]	; (8020000 <_Z18trained_model_initPFPvjjE+0x474>)
 801fea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801feaa:	011b      	lsls	r3, r3, #4
 801feac:	4413      	add	r3, r2
 801feae:	6819      	ldr	r1, [r3, #0]
 801feb0:	4854      	ldr	r0, [pc, #336]	; (8020004 <_Z18trained_model_initPFPvjjE+0x478>)
 801feb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801feb4:	4613      	mov	r3, r2
 801feb6:	00db      	lsls	r3, r3, #3
 801feb8:	4413      	add	r3, r2
 801feba:	009b      	lsls	r3, r3, #2
 801febc:	4403      	add	r3, r0
 801febe:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 801fec0:	4a4f      	ldr	r2, [pc, #316]	; (8020000 <_Z18trained_model_initPFPvjjE+0x474>)
 801fec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fec4:	011b      	lsls	r3, r3, #4
 801fec6:	4413      	add	r3, r2
 801fec8:	3304      	adds	r3, #4
 801feca:	6819      	ldr	r1, [r3, #0]
 801fecc:	484d      	ldr	r0, [pc, #308]	; (8020004 <_Z18trained_model_initPFPvjjE+0x478>)
 801fece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fed0:	4613      	mov	r3, r2
 801fed2:	00db      	lsls	r3, r3, #3
 801fed4:	4413      	add	r3, r2
 801fed6:	009b      	lsls	r3, r3, #2
 801fed8:	4403      	add	r3, r0
 801feda:	3304      	adds	r3, #4
 801fedc:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 801fede:	4a48      	ldr	r2, [pc, #288]	; (8020000 <_Z18trained_model_initPFPvjjE+0x474>)
 801fee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fee2:	011b      	lsls	r3, r3, #4
 801fee4:	4413      	add	r3, r2
 801fee6:	3308      	adds	r3, #8
 801fee8:	6819      	ldr	r1, [r3, #0]
 801feea:	4846      	ldr	r0, [pc, #280]	; (8020004 <_Z18trained_model_initPFPvjjE+0x478>)
 801feec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801feee:	4613      	mov	r3, r2
 801fef0:	00db      	lsls	r3, r3, #3
 801fef2:	4413      	add	r3, r2
 801fef4:	009b      	lsls	r3, r3, #2
 801fef6:	4403      	add	r3, r0
 801fef8:	3314      	adds	r3, #20
 801fefa:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 801fefc:	4941      	ldr	r1, [pc, #260]	; (8020004 <_Z18trained_model_initPFPvjjE+0x478>)
 801fefe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ff00:	4613      	mov	r3, r2
 801ff02:	00db      	lsls	r3, r3, #3
 801ff04:	4413      	add	r3, r2
 801ff06:	009b      	lsls	r3, r3, #2
 801ff08:	440b      	add	r3, r1
 801ff0a:	3318      	adds	r3, #24
 801ff0c:	2200      	movs	r2, #0
 801ff0e:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 801ff10:	493c      	ldr	r1, [pc, #240]	; (8020004 <_Z18trained_model_initPFPvjjE+0x478>)
 801ff12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ff14:	4613      	mov	r3, r2
 801ff16:	00db      	lsls	r3, r3, #3
 801ff18:	4413      	add	r3, r2
 801ff1a:	009b      	lsls	r3, r3, #2
 801ff1c:	440b      	add	r3, r1
 801ff1e:	331c      	adds	r3, #28
 801ff20:	2200      	movs	r2, #0
 801ff22:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 801ff24:	4a36      	ldr	r2, [pc, #216]	; (8020000 <_Z18trained_model_initPFPvjjE+0x474>)
 801ff26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ff28:	011b      	lsls	r3, r3, #4
 801ff2a:	4413      	add	r3, r2
 801ff2c:	330c      	adds	r3, #12
 801ff2e:	781b      	ldrb	r3, [r3, #0]
 801ff30:	4a32      	ldr	r2, [pc, #200]	; (801fffc <_Z18trained_model_initPFPvjjE+0x470>)
 801ff32:	015b      	lsls	r3, r3, #5
 801ff34:	4413      	add	r3, r2
 801ff36:	681b      	ldr	r3, [r3, #0]
 801ff38:	2b00      	cmp	r3, #0
 801ff3a:	d020      	beq.n	801ff7e <_Z18trained_model_initPFPvjjE+0x3f2>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 801ff3c:	4a30      	ldr	r2, [pc, #192]	; (8020000 <_Z18trained_model_initPFPvjjE+0x474>)
 801ff3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ff40:	011b      	lsls	r3, r3, #4
 801ff42:	4413      	add	r3, r2
 801ff44:	330c      	adds	r3, #12
 801ff46:	781b      	ldrb	r3, [r3, #0]
 801ff48:	4a2c      	ldr	r2, [pc, #176]	; (801fffc <_Z18trained_model_initPFPvjjE+0x470>)
 801ff4a:	015b      	lsls	r3, r3, #5
 801ff4c:	4413      	add	r3, r2
 801ff4e:	681c      	ldr	r4, [r3, #0]
 801ff50:	492c      	ldr	r1, [pc, #176]	; (8020004 <_Z18trained_model_initPFPvjjE+0x478>)
 801ff52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ff54:	4613      	mov	r3, r2
 801ff56:	00db      	lsls	r3, r3, #3
 801ff58:	4413      	add	r3, r2
 801ff5a:	009b      	lsls	r3, r3, #2
 801ff5c:	440b      	add	r3, r1
 801ff5e:	3314      	adds	r3, #20
 801ff60:	681b      	ldr	r3, [r3, #0]
 801ff62:	2200      	movs	r2, #0
 801ff64:	4619      	mov	r1, r3
 801ff66:	4828      	ldr	r0, [pc, #160]	; (8020008 <_Z18trained_model_initPFPvjjE+0x47c>)
 801ff68:	47a0      	blx	r4
 801ff6a:	4601      	mov	r1, r0
 801ff6c:	4825      	ldr	r0, [pc, #148]	; (8020004 <_Z18trained_model_initPFPvjjE+0x478>)
 801ff6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ff70:	4613      	mov	r3, r2
 801ff72:	00db      	lsls	r3, r3, #3
 801ff74:	4413      	add	r3, r2
 801ff76:	009b      	lsls	r3, r3, #2
 801ff78:	4403      	add	r3, r0
 801ff7a:	3310      	adds	r3, #16
 801ff7c:	6019      	str	r1, [r3, #0]
  for (size_t i = 0; i < 4; ++i) {
 801ff7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ff80:	3301      	adds	r3, #1
 801ff82:	643b      	str	r3, [r7, #64]	; 0x40
 801ff84:	e78c      	b.n	801fea0 <_Z18trained_model_initPFPvjjE+0x314>
    }
  }
  for (size_t i = 0; i < 4; ++i) {
 801ff86:	2300      	movs	r3, #0
 801ff88:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ff8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ff8c:	2b03      	cmp	r3, #3
 801ff8e:	d82f      	bhi.n	801fff0 <_Z18trained_model_initPFPvjjE+0x464>
    if (registrations[nodeData[i].used_op_index].prepare) {
 801ff90:	4a1b      	ldr	r2, [pc, #108]	; (8020000 <_Z18trained_model_initPFPvjjE+0x474>)
 801ff92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ff94:	011b      	lsls	r3, r3, #4
 801ff96:	4413      	add	r3, r2
 801ff98:	330c      	adds	r3, #12
 801ff9a:	781b      	ldrb	r3, [r3, #0]
 801ff9c:	4a17      	ldr	r2, [pc, #92]	; (801fffc <_Z18trained_model_initPFPvjjE+0x470>)
 801ff9e:	015b      	lsls	r3, r3, #5
 801ffa0:	4413      	add	r3, r2
 801ffa2:	3308      	adds	r3, #8
 801ffa4:	681b      	ldr	r3, [r3, #0]
 801ffa6:	2b00      	cmp	r3, #0
 801ffa8:	d01e      	beq.n	801ffe8 <_Z18trained_model_initPFPvjjE+0x45c>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 801ffaa:	4a15      	ldr	r2, [pc, #84]	; (8020000 <_Z18trained_model_initPFPvjjE+0x474>)
 801ffac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ffae:	011b      	lsls	r3, r3, #4
 801ffb0:	4413      	add	r3, r2
 801ffb2:	330c      	adds	r3, #12
 801ffb4:	781b      	ldrb	r3, [r3, #0]
 801ffb6:	4a11      	ldr	r2, [pc, #68]	; (801fffc <_Z18trained_model_initPFPvjjE+0x470>)
 801ffb8:	015b      	lsls	r3, r3, #5
 801ffba:	4413      	add	r3, r2
 801ffbc:	3308      	adds	r3, #8
 801ffbe:	681c      	ldr	r4, [r3, #0]
 801ffc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ffc2:	4613      	mov	r3, r2
 801ffc4:	00db      	lsls	r3, r3, #3
 801ffc6:	4413      	add	r3, r2
 801ffc8:	009b      	lsls	r3, r3, #2
 801ffca:	4a0e      	ldr	r2, [pc, #56]	; (8020004 <_Z18trained_model_initPFPvjjE+0x478>)
 801ffcc:	4413      	add	r3, r2
 801ffce:	4619      	mov	r1, r3
 801ffd0:	480d      	ldr	r0, [pc, #52]	; (8020008 <_Z18trained_model_initPFPvjjE+0x47c>)
 801ffd2:	47a0      	blx	r4
 801ffd4:	4603      	mov	r3, r0
 801ffd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 801ffda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	d002      	beq.n	801ffe8 <_Z18trained_model_initPFPvjjE+0x45c>
        return status;
 801ffe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ffe6:	e004      	b.n	801fff2 <_Z18trained_model_initPFPvjjE+0x466>
  for (size_t i = 0; i < 4; ++i) {
 801ffe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ffea:	3301      	adds	r3, #1
 801ffec:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ffee:	e7cc      	b.n	801ff8a <_Z18trained_model_initPFPvjjE+0x3fe>
      }
    }
  }
  return kTfLiteOk;
 801fff0:	2300      	movs	r3, #0
}
 801fff2:	4618      	mov	r0, r3
 801fff4:	3748      	adds	r7, #72	; 0x48
 801fff6:	46bd      	mov	sp, r7
 801fff8:	bdb0      	pop	{r4, r5, r7, pc}
 801fffa:	bf00      	nop
 801fffc:	20002fbc 	.word	0x20002fbc
 8020000:	08029d00 	.word	0x08029d00
 8020004:	20002ffc 	.word	0x20002ffc
 8020008:	20002c20 	.word	0x20002c20

0802000c <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 802000c:	b480      	push	{r7}
 802000e:	b083      	sub	sp, #12
 8020010:	af00      	add	r7, sp, #0
 8020012:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 8020014:	4b05      	ldr	r3, [pc, #20]	; (802002c <_Z19trained_model_inputi+0x20>)
 8020016:	689a      	ldr	r2, [r3, #8]
 8020018:	2300      	movs	r3, #0
 802001a:	019b      	lsls	r3, r3, #6
 802001c:	4413      	add	r3, r2
}
 802001e:	4618      	mov	r0, r3
 8020020:	370c      	adds	r7, #12
 8020022:	46bd      	mov	sp, r7
 8020024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020028:	4770      	bx	lr
 802002a:	bf00      	nop
 802002c:	20002c20 	.word	0x20002c20

08020030 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 8020030:	b480      	push	{r7}
 8020032:	b083      	sub	sp, #12
 8020034:	af00      	add	r7, sp, #0
 8020036:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 8020038:	4b05      	ldr	r3, [pc, #20]	; (8020050 <_Z20trained_model_outputi+0x20>)
 802003a:	689a      	ldr	r2, [r3, #8]
 802003c:	230a      	movs	r3, #10
 802003e:	019b      	lsls	r3, r3, #6
 8020040:	4413      	add	r3, r2
}
 8020042:	4618      	mov	r0, r3
 8020044:	370c      	adds	r7, #12
 8020046:	46bd      	mov	sp, r7
 8020048:	f85d 7b04 	ldr.w	r7, [sp], #4
 802004c:	4770      	bx	lr
 802004e:	bf00      	nop
 8020050:	20002c20 	.word	0x20002c20

08020054 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 8020054:	b590      	push	{r4, r7, lr}
 8020056:	b083      	sub	sp, #12
 8020058:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 4; ++i) {
 802005a:	2300      	movs	r3, #0
 802005c:	607b      	str	r3, [r7, #4]
 802005e:	687b      	ldr	r3, [r7, #4]
 8020060:	2b03      	cmp	r3, #3
 8020062:	d81f      	bhi.n	80200a4 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 8020064:	4a12      	ldr	r2, [pc, #72]	; (80200b0 <_Z20trained_model_invokev+0x5c>)
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	011b      	lsls	r3, r3, #4
 802006a:	4413      	add	r3, r2
 802006c:	330c      	adds	r3, #12
 802006e:	781b      	ldrb	r3, [r3, #0]
 8020070:	4a10      	ldr	r2, [pc, #64]	; (80200b4 <_Z20trained_model_invokev+0x60>)
 8020072:	015b      	lsls	r3, r3, #5
 8020074:	4413      	add	r3, r2
 8020076:	330c      	adds	r3, #12
 8020078:	681c      	ldr	r4, [r3, #0]
 802007a:	687a      	ldr	r2, [r7, #4]
 802007c:	4613      	mov	r3, r2
 802007e:	00db      	lsls	r3, r3, #3
 8020080:	4413      	add	r3, r2
 8020082:	009b      	lsls	r3, r3, #2
 8020084:	4a0c      	ldr	r2, [pc, #48]	; (80200b8 <_Z20trained_model_invokev+0x64>)
 8020086:	4413      	add	r3, r2
 8020088:	4619      	mov	r1, r3
 802008a:	480c      	ldr	r0, [pc, #48]	; (80200bc <_Z20trained_model_invokev+0x68>)
 802008c:	47a0      	blx	r4
 802008e:	4603      	mov	r3, r0
 8020090:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 8020092:	78fb      	ldrb	r3, [r7, #3]
 8020094:	2b00      	cmp	r3, #0
 8020096:	d001      	beq.n	802009c <_Z20trained_model_invokev+0x48>
      return status;
 8020098:	78fb      	ldrb	r3, [r7, #3]
 802009a:	e004      	b.n	80200a6 <_Z20trained_model_invokev+0x52>
  for (size_t i = 0; i < 4; ++i) {
 802009c:	687b      	ldr	r3, [r7, #4]
 802009e:	3301      	adds	r3, #1
 80200a0:	607b      	str	r3, [r7, #4]
 80200a2:	e7dc      	b.n	802005e <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 80200a4:	2300      	movs	r3, #0
}
 80200a6:	4618      	mov	r0, r3
 80200a8:	370c      	adds	r7, #12
 80200aa:	46bd      	mov	sp, r7
 80200ac:	bd90      	pop	{r4, r7, pc}
 80200ae:	bf00      	nop
 80200b0:	08029d00 	.word	0x08029d00
 80200b4:	20002fbc 	.word	0x20002fbc
 80200b8:	20002ffc 	.word	0x20002ffc
 80200bc:	20002c20 	.word	0x20002c20

080200c0 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 80200c0:	b580      	push	{r7, lr}
 80200c2:	b084      	sub	sp, #16
 80200c4:	af00      	add	r7, sp, #0
 80200c6:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 80200c8:	4b10      	ldr	r3, [pc, #64]	; (802010c <_Z19trained_model_resetPFvPvE+0x4c>)
 80200ca:	681a      	ldr	r2, [r3, #0]
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	4610      	mov	r0, r2
 80200d0:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 80200d2:	4b0f      	ldr	r3, [pc, #60]	; (8020110 <_Z19trained_model_resetPFvPvE+0x50>)
 80200d4:	2200      	movs	r2, #0
 80200d6:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 80200d8:	2300      	movs	r3, #0
 80200da:	60fb      	str	r3, [r7, #12]
 80200dc:	4b0d      	ldr	r3, [pc, #52]	; (8020114 <_Z19trained_model_resetPFvPvE+0x54>)
 80200de:	681b      	ldr	r3, [r3, #0]
 80200e0:	68fa      	ldr	r2, [r7, #12]
 80200e2:	429a      	cmp	r2, r3
 80200e4:	d20a      	bcs.n	80200fc <_Z19trained_model_resetPFvPvE+0x3c>
    ei_free(overflow_buffers[ix]);
 80200e6:	4a0c      	ldr	r2, [pc, #48]	; (8020118 <_Z19trained_model_resetPFvPvE+0x58>)
 80200e8:	68fb      	ldr	r3, [r7, #12]
 80200ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80200ee:	4618      	mov	r0, r3
 80200f0:	f7fa fec4 	bl	801ae7c <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 80200f4:	68fb      	ldr	r3, [r7, #12]
 80200f6:	3301      	adds	r3, #1
 80200f8:	60fb      	str	r3, [r7, #12]
 80200fa:	e7ef      	b.n	80200dc <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers_ix = 0;
 80200fc:	4b05      	ldr	r3, [pc, #20]	; (8020114 <_Z19trained_model_resetPFvPvE+0x54>)
 80200fe:	2200      	movs	r2, #0
 8020100:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8020102:	2300      	movs	r3, #0
}
 8020104:	4618      	mov	r0, r3
 8020106:	3710      	adds	r7, #16
 8020108:	46bd      	mov	sp, r7
 802010a:	bd80      	pop	{r7, pc}
 802010c:	20002c14 	.word	0x20002c14
 8020110:	200030d8 	.word	0x200030d8
 8020114:	200030b4 	.word	0x200030b4
 8020118:	2000308c 	.word	0x2000308c

0802011c <_Z41__static_initialization_and_destruction_0ii>:
 802011c:	b480      	push	{r7}
 802011e:	b083      	sub	sp, #12
 8020120:	af00      	add	r7, sp, #0
 8020122:	6078      	str	r0, [r7, #4]
 8020124:	6039      	str	r1, [r7, #0]
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	2b01      	cmp	r3, #1
 802012a:	d11e      	bne.n	802016a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 802012c:	683b      	ldr	r3, [r7, #0]
 802012e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020132:	4293      	cmp	r3, r2
 8020134:	d119      	bne.n	802016a <_Z41__static_initialization_and_destruction_0ii+0x4e>
};const NodeInfo_t nodeData[] = {
 8020136:	4b10      	ldr	r3, [pc, #64]	; (8020178 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8020138:	681b      	ldr	r3, [r3, #0]
 802013a:	4a10      	ldr	r2, [pc, #64]	; (802017c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 802013c:	6053      	str	r3, [r2, #4]
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
 802013e:	4b0e      	ldr	r3, [pc, #56]	; (8020178 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8020140:	681b      	ldr	r3, [r3, #0]
 8020142:	3330      	adds	r3, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 8020144:	4a0d      	ldr	r2, [pc, #52]	; (802017c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8020146:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 802014a:	4b0b      	ldr	r3, [pc, #44]	; (8020178 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 802014c:	681b      	ldr	r3, [r3, #0]
 802014e:	4a0b      	ldr	r2, [pc, #44]	; (802017c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8020150:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 8020154:	4b08      	ldr	r3, [pc, #32]	; (8020178 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 802015a:	4a08      	ldr	r2, [pc, #32]	; (802017c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 802015c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8020160:	4b05      	ldr	r3, [pc, #20]	; (8020178 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8020162:	681b      	ldr	r3, [r3, #0]
 8020164:	4a05      	ldr	r2, [pc, #20]	; (802017c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8020166:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 802016a:	bf00      	nop
 802016c:	370c      	adds	r7, #12
 802016e:	46bd      	mov	sp, r7
 8020170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020174:	4770      	bx	lr
 8020176:	bf00      	nop
 8020178:	20002c14 	.word	0x20002c14
 802017c:	20000114 	.word	0x20000114

08020180 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8020180:	b580      	push	{r7, lr}
 8020182:	af00      	add	r7, sp, #0
 8020184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8020188:	2001      	movs	r0, #1
 802018a:	f7ff ffc7 	bl	802011c <_Z41__static_initialization_and_destruction_0ii>
 802018e:	bd80      	pop	{r7, pc}

08020190 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8020190:	b580      	push	{r7, lr}
 8020192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8020194:	2200      	movs	r2, #0
 8020196:	4912      	ldr	r1, [pc, #72]	; (80201e0 <MX_USB_DEVICE_Init+0x50>)
 8020198:	4812      	ldr	r0, [pc, #72]	; (80201e4 <MX_USB_DEVICE_Init+0x54>)
 802019a:	f7ee fb41 	bl	800e820 <USBD_Init>
 802019e:	4603      	mov	r3, r0
 80201a0:	2b00      	cmp	r3, #0
 80201a2:	d001      	beq.n	80201a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80201a4:	f7e6 f9b8 	bl	8006518 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80201a8:	490f      	ldr	r1, [pc, #60]	; (80201e8 <MX_USB_DEVICE_Init+0x58>)
 80201aa:	480e      	ldr	r0, [pc, #56]	; (80201e4 <MX_USB_DEVICE_Init+0x54>)
 80201ac:	f7ee fb68 	bl	800e880 <USBD_RegisterClass>
 80201b0:	4603      	mov	r3, r0
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	d001      	beq.n	80201ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80201b6:	f7e6 f9af 	bl	8006518 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80201ba:	490c      	ldr	r1, [pc, #48]	; (80201ec <MX_USB_DEVICE_Init+0x5c>)
 80201bc:	4809      	ldr	r0, [pc, #36]	; (80201e4 <MX_USB_DEVICE_Init+0x54>)
 80201be:	f7ee fa59 	bl	800e674 <USBD_CDC_RegisterInterface>
 80201c2:	4603      	mov	r3, r0
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d001      	beq.n	80201cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80201c8:	f7e6 f9a6 	bl	8006518 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80201cc:	4805      	ldr	r0, [pc, #20]	; (80201e4 <MX_USB_DEVICE_Init+0x54>)
 80201ce:	f7ee fb8d 	bl	800e8ec <USBD_Start>
 80201d2:	4603      	mov	r3, r0
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d001      	beq.n	80201dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80201d8:	f7e6 f99e 	bl	8006518 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80201dc:	bf00      	nop
 80201de:	bd80      	pop	{r7, pc}
 80201e0:	20000230 	.word	0x20000230
 80201e4:	200030dc 	.word	0x200030dc
 80201e8:	20000088 	.word	0x20000088
 80201ec:	2000021c 	.word	0x2000021c

080201f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80201f0:	b580      	push	{r7, lr}
 80201f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80201f4:	2200      	movs	r2, #0
 80201f6:	4905      	ldr	r1, [pc, #20]	; (802020c <CDC_Init_FS+0x1c>)
 80201f8:	4805      	ldr	r0, [pc, #20]	; (8020210 <CDC_Init_FS+0x20>)
 80201fa:	f7ee fa55 	bl	800e6a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80201fe:	4905      	ldr	r1, [pc, #20]	; (8020214 <CDC_Init_FS+0x24>)
 8020200:	4803      	ldr	r0, [pc, #12]	; (8020210 <CDC_Init_FS+0x20>)
 8020202:	f7ee fa73 	bl	800e6ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8020206:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8020208:	4618      	mov	r0, r3
 802020a:	bd80      	pop	{r7, pc}
 802020c:	20003bb8 	.word	0x20003bb8
 8020210:	200030dc 	.word	0x200030dc
 8020214:	200033b8 	.word	0x200033b8

08020218 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8020218:	b480      	push	{r7}
 802021a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 802021c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802021e:	4618      	mov	r0, r3
 8020220:	46bd      	mov	sp, r7
 8020222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020226:	4770      	bx	lr

08020228 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8020228:	b480      	push	{r7}
 802022a:	b083      	sub	sp, #12
 802022c:	af00      	add	r7, sp, #0
 802022e:	4603      	mov	r3, r0
 8020230:	6039      	str	r1, [r7, #0]
 8020232:	71fb      	strb	r3, [r7, #7]
 8020234:	4613      	mov	r3, r2
 8020236:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8020238:	79fb      	ldrb	r3, [r7, #7]
 802023a:	2b23      	cmp	r3, #35	; 0x23
 802023c:	d84a      	bhi.n	80202d4 <CDC_Control_FS+0xac>
 802023e:	a201      	add	r2, pc, #4	; (adr r2, 8020244 <CDC_Control_FS+0x1c>)
 8020240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020244:	080202d5 	.word	0x080202d5
 8020248:	080202d5 	.word	0x080202d5
 802024c:	080202d5 	.word	0x080202d5
 8020250:	080202d5 	.word	0x080202d5
 8020254:	080202d5 	.word	0x080202d5
 8020258:	080202d5 	.word	0x080202d5
 802025c:	080202d5 	.word	0x080202d5
 8020260:	080202d5 	.word	0x080202d5
 8020264:	080202d5 	.word	0x080202d5
 8020268:	080202d5 	.word	0x080202d5
 802026c:	080202d5 	.word	0x080202d5
 8020270:	080202d5 	.word	0x080202d5
 8020274:	080202d5 	.word	0x080202d5
 8020278:	080202d5 	.word	0x080202d5
 802027c:	080202d5 	.word	0x080202d5
 8020280:	080202d5 	.word	0x080202d5
 8020284:	080202d5 	.word	0x080202d5
 8020288:	080202d5 	.word	0x080202d5
 802028c:	080202d5 	.word	0x080202d5
 8020290:	080202d5 	.word	0x080202d5
 8020294:	080202d5 	.word	0x080202d5
 8020298:	080202d5 	.word	0x080202d5
 802029c:	080202d5 	.word	0x080202d5
 80202a0:	080202d5 	.word	0x080202d5
 80202a4:	080202d5 	.word	0x080202d5
 80202a8:	080202d5 	.word	0x080202d5
 80202ac:	080202d5 	.word	0x080202d5
 80202b0:	080202d5 	.word	0x080202d5
 80202b4:	080202d5 	.word	0x080202d5
 80202b8:	080202d5 	.word	0x080202d5
 80202bc:	080202d5 	.word	0x080202d5
 80202c0:	080202d5 	.word	0x080202d5
 80202c4:	080202d5 	.word	0x080202d5
 80202c8:	080202d5 	.word	0x080202d5
 80202cc:	080202d5 	.word	0x080202d5
 80202d0:	080202d5 	.word	0x080202d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80202d4:	bf00      	nop
  }

  return (USBD_OK);
 80202d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80202d8:	4618      	mov	r0, r3
 80202da:	370c      	adds	r7, #12
 80202dc:	46bd      	mov	sp, r7
 80202de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202e2:	4770      	bx	lr

080202e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80202e4:	b580      	push	{r7, lr}
 80202e6:	b082      	sub	sp, #8
 80202e8:	af00      	add	r7, sp, #0
 80202ea:	6078      	str	r0, [r7, #4]
 80202ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80202ee:	6879      	ldr	r1, [r7, #4]
 80202f0:	4805      	ldr	r0, [pc, #20]	; (8020308 <CDC_Receive_FS+0x24>)
 80202f2:	f7ee f9fb 	bl	800e6ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80202f6:	4804      	ldr	r0, [pc, #16]	; (8020308 <CDC_Receive_FS+0x24>)
 80202f8:	f7ee fa5c 	bl	800e7b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80202fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80202fe:	4618      	mov	r0, r3
 8020300:	3708      	adds	r7, #8
 8020302:	46bd      	mov	sp, r7
 8020304:	bd80      	pop	{r7, pc}
 8020306:	bf00      	nop
 8020308:	200030dc 	.word	0x200030dc

0802030c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 802030c:	b580      	push	{r7, lr}
 802030e:	b084      	sub	sp, #16
 8020310:	af00      	add	r7, sp, #0
 8020312:	6078      	str	r0, [r7, #4]
 8020314:	460b      	mov	r3, r1
 8020316:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8020318:	2300      	movs	r3, #0
 802031a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 802031c:	4b0d      	ldr	r3, [pc, #52]	; (8020354 <CDC_Transmit_FS+0x48>)
 802031e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020322:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8020324:	68bb      	ldr	r3, [r7, #8]
 8020326:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 802032a:	2b00      	cmp	r3, #0
 802032c:	d001      	beq.n	8020332 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 802032e:	2301      	movs	r3, #1
 8020330:	e00b      	b.n	802034a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8020332:	887b      	ldrh	r3, [r7, #2]
 8020334:	461a      	mov	r2, r3
 8020336:	6879      	ldr	r1, [r7, #4]
 8020338:	4806      	ldr	r0, [pc, #24]	; (8020354 <CDC_Transmit_FS+0x48>)
 802033a:	f7ee f9b5 	bl	800e6a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802033e:	4805      	ldr	r0, [pc, #20]	; (8020354 <CDC_Transmit_FS+0x48>)
 8020340:	f7ee f9f2 	bl	800e728 <USBD_CDC_TransmitPacket>
 8020344:	4603      	mov	r3, r0
 8020346:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8020348:	7bfb      	ldrb	r3, [r7, #15]
}
 802034a:	4618      	mov	r0, r3
 802034c:	3710      	adds	r7, #16
 802034e:	46bd      	mov	sp, r7
 8020350:	bd80      	pop	{r7, pc}
 8020352:	bf00      	nop
 8020354:	200030dc 	.word	0x200030dc

08020358 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8020358:	b480      	push	{r7}
 802035a:	b087      	sub	sp, #28
 802035c:	af00      	add	r7, sp, #0
 802035e:	60f8      	str	r0, [r7, #12]
 8020360:	60b9      	str	r1, [r7, #8]
 8020362:	4613      	mov	r3, r2
 8020364:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8020366:	2300      	movs	r3, #0
 8020368:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 802036a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802036e:	4618      	mov	r0, r3
 8020370:	371c      	adds	r7, #28
 8020372:	46bd      	mov	sp, r7
 8020374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020378:	4770      	bx	lr
	...

0802037c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802037c:	b480      	push	{r7}
 802037e:	b083      	sub	sp, #12
 8020380:	af00      	add	r7, sp, #0
 8020382:	4603      	mov	r3, r0
 8020384:	6039      	str	r1, [r7, #0]
 8020386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8020388:	683b      	ldr	r3, [r7, #0]
 802038a:	2212      	movs	r2, #18
 802038c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802038e:	4b03      	ldr	r3, [pc, #12]	; (802039c <USBD_FS_DeviceDescriptor+0x20>)
}
 8020390:	4618      	mov	r0, r3
 8020392:	370c      	adds	r7, #12
 8020394:	46bd      	mov	sp, r7
 8020396:	f85d 7b04 	ldr.w	r7, [sp], #4
 802039a:	4770      	bx	lr
 802039c:	2000024c 	.word	0x2000024c

080203a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80203a0:	b480      	push	{r7}
 80203a2:	b083      	sub	sp, #12
 80203a4:	af00      	add	r7, sp, #0
 80203a6:	4603      	mov	r3, r0
 80203a8:	6039      	str	r1, [r7, #0]
 80203aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80203ac:	683b      	ldr	r3, [r7, #0]
 80203ae:	2204      	movs	r2, #4
 80203b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80203b2:	4b03      	ldr	r3, [pc, #12]	; (80203c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80203b4:	4618      	mov	r0, r3
 80203b6:	370c      	adds	r7, #12
 80203b8:	46bd      	mov	sp, r7
 80203ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203be:	4770      	bx	lr
 80203c0:	20000260 	.word	0x20000260

080203c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80203c4:	b580      	push	{r7, lr}
 80203c6:	b082      	sub	sp, #8
 80203c8:	af00      	add	r7, sp, #0
 80203ca:	4603      	mov	r3, r0
 80203cc:	6039      	str	r1, [r7, #0]
 80203ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80203d0:	79fb      	ldrb	r3, [r7, #7]
 80203d2:	2b00      	cmp	r3, #0
 80203d4:	d105      	bne.n	80203e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80203d6:	683a      	ldr	r2, [r7, #0]
 80203d8:	4907      	ldr	r1, [pc, #28]	; (80203f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80203da:	4808      	ldr	r0, [pc, #32]	; (80203fc <USBD_FS_ProductStrDescriptor+0x38>)
 80203dc:	f7ef fc32 	bl	800fc44 <USBD_GetString>
 80203e0:	e004      	b.n	80203ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80203e2:	683a      	ldr	r2, [r7, #0]
 80203e4:	4904      	ldr	r1, [pc, #16]	; (80203f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80203e6:	4805      	ldr	r0, [pc, #20]	; (80203fc <USBD_FS_ProductStrDescriptor+0x38>)
 80203e8:	f7ef fc2c 	bl	800fc44 <USBD_GetString>
  }
  return USBD_StrDesc;
 80203ec:	4b02      	ldr	r3, [pc, #8]	; (80203f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80203ee:	4618      	mov	r0, r3
 80203f0:	3708      	adds	r7, #8
 80203f2:	46bd      	mov	sp, r7
 80203f4:	bd80      	pop	{r7, pc}
 80203f6:	bf00      	nop
 80203f8:	200043b8 	.word	0x200043b8
 80203fc:	0802966c 	.word	0x0802966c

08020400 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020400:	b580      	push	{r7, lr}
 8020402:	b082      	sub	sp, #8
 8020404:	af00      	add	r7, sp, #0
 8020406:	4603      	mov	r3, r0
 8020408:	6039      	str	r1, [r7, #0]
 802040a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802040c:	683a      	ldr	r2, [r7, #0]
 802040e:	4904      	ldr	r1, [pc, #16]	; (8020420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8020410:	4804      	ldr	r0, [pc, #16]	; (8020424 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8020412:	f7ef fc17 	bl	800fc44 <USBD_GetString>
  return USBD_StrDesc;
 8020416:	4b02      	ldr	r3, [pc, #8]	; (8020420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8020418:	4618      	mov	r0, r3
 802041a:	3708      	adds	r7, #8
 802041c:	46bd      	mov	sp, r7
 802041e:	bd80      	pop	{r7, pc}
 8020420:	200043b8 	.word	0x200043b8
 8020424:	08029684 	.word	0x08029684

08020428 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020428:	b580      	push	{r7, lr}
 802042a:	b082      	sub	sp, #8
 802042c:	af00      	add	r7, sp, #0
 802042e:	4603      	mov	r3, r0
 8020430:	6039      	str	r1, [r7, #0]
 8020432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8020434:	683b      	ldr	r3, [r7, #0]
 8020436:	221a      	movs	r2, #26
 8020438:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802043a:	f000 f843 	bl	80204c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 802043e:	4b02      	ldr	r3, [pc, #8]	; (8020448 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8020440:	4618      	mov	r0, r3
 8020442:	3708      	adds	r7, #8
 8020444:	46bd      	mov	sp, r7
 8020446:	bd80      	pop	{r7, pc}
 8020448:	20000264 	.word	0x20000264

0802044c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802044c:	b580      	push	{r7, lr}
 802044e:	b082      	sub	sp, #8
 8020450:	af00      	add	r7, sp, #0
 8020452:	4603      	mov	r3, r0
 8020454:	6039      	str	r1, [r7, #0]
 8020456:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8020458:	79fb      	ldrb	r3, [r7, #7]
 802045a:	2b00      	cmp	r3, #0
 802045c:	d105      	bne.n	802046a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802045e:	683a      	ldr	r2, [r7, #0]
 8020460:	4907      	ldr	r1, [pc, #28]	; (8020480 <USBD_FS_ConfigStrDescriptor+0x34>)
 8020462:	4808      	ldr	r0, [pc, #32]	; (8020484 <USBD_FS_ConfigStrDescriptor+0x38>)
 8020464:	f7ef fbee 	bl	800fc44 <USBD_GetString>
 8020468:	e004      	b.n	8020474 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802046a:	683a      	ldr	r2, [r7, #0]
 802046c:	4904      	ldr	r1, [pc, #16]	; (8020480 <USBD_FS_ConfigStrDescriptor+0x34>)
 802046e:	4805      	ldr	r0, [pc, #20]	; (8020484 <USBD_FS_ConfigStrDescriptor+0x38>)
 8020470:	f7ef fbe8 	bl	800fc44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8020474:	4b02      	ldr	r3, [pc, #8]	; (8020480 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8020476:	4618      	mov	r0, r3
 8020478:	3708      	adds	r7, #8
 802047a:	46bd      	mov	sp, r7
 802047c:	bd80      	pop	{r7, pc}
 802047e:	bf00      	nop
 8020480:	200043b8 	.word	0x200043b8
 8020484:	08029698 	.word	0x08029698

08020488 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020488:	b580      	push	{r7, lr}
 802048a:	b082      	sub	sp, #8
 802048c:	af00      	add	r7, sp, #0
 802048e:	4603      	mov	r3, r0
 8020490:	6039      	str	r1, [r7, #0]
 8020492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8020494:	79fb      	ldrb	r3, [r7, #7]
 8020496:	2b00      	cmp	r3, #0
 8020498:	d105      	bne.n	80204a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802049a:	683a      	ldr	r2, [r7, #0]
 802049c:	4907      	ldr	r1, [pc, #28]	; (80204bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 802049e:	4808      	ldr	r0, [pc, #32]	; (80204c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80204a0:	f7ef fbd0 	bl	800fc44 <USBD_GetString>
 80204a4:	e004      	b.n	80204b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80204a6:	683a      	ldr	r2, [r7, #0]
 80204a8:	4904      	ldr	r1, [pc, #16]	; (80204bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80204aa:	4805      	ldr	r0, [pc, #20]	; (80204c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80204ac:	f7ef fbca 	bl	800fc44 <USBD_GetString>
  }
  return USBD_StrDesc;
 80204b0:	4b02      	ldr	r3, [pc, #8]	; (80204bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80204b2:	4618      	mov	r0, r3
 80204b4:	3708      	adds	r7, #8
 80204b6:	46bd      	mov	sp, r7
 80204b8:	bd80      	pop	{r7, pc}
 80204ba:	bf00      	nop
 80204bc:	200043b8 	.word	0x200043b8
 80204c0:	080296a4 	.word	0x080296a4

080204c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80204c4:	b580      	push	{r7, lr}
 80204c6:	b084      	sub	sp, #16
 80204c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80204ca:	4b0f      	ldr	r3, [pc, #60]	; (8020508 <Get_SerialNum+0x44>)
 80204cc:	681b      	ldr	r3, [r3, #0]
 80204ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80204d0:	4b0e      	ldr	r3, [pc, #56]	; (802050c <Get_SerialNum+0x48>)
 80204d2:	681b      	ldr	r3, [r3, #0]
 80204d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80204d6:	4b0e      	ldr	r3, [pc, #56]	; (8020510 <Get_SerialNum+0x4c>)
 80204d8:	681b      	ldr	r3, [r3, #0]
 80204da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80204dc:	68fa      	ldr	r2, [r7, #12]
 80204de:	687b      	ldr	r3, [r7, #4]
 80204e0:	4413      	add	r3, r2
 80204e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80204e4:	68fb      	ldr	r3, [r7, #12]
 80204e6:	2b00      	cmp	r3, #0
 80204e8:	d009      	beq.n	80204fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80204ea:	2208      	movs	r2, #8
 80204ec:	4909      	ldr	r1, [pc, #36]	; (8020514 <Get_SerialNum+0x50>)
 80204ee:	68f8      	ldr	r0, [r7, #12]
 80204f0:	f000 f814 	bl	802051c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80204f4:	2204      	movs	r2, #4
 80204f6:	4908      	ldr	r1, [pc, #32]	; (8020518 <Get_SerialNum+0x54>)
 80204f8:	68b8      	ldr	r0, [r7, #8]
 80204fa:	f000 f80f 	bl	802051c <IntToUnicode>
  }
}
 80204fe:	bf00      	nop
 8020500:	3710      	adds	r7, #16
 8020502:	46bd      	mov	sp, r7
 8020504:	bd80      	pop	{r7, pc}
 8020506:	bf00      	nop
 8020508:	1fff7a10 	.word	0x1fff7a10
 802050c:	1fff7a14 	.word	0x1fff7a14
 8020510:	1fff7a18 	.word	0x1fff7a18
 8020514:	20000266 	.word	0x20000266
 8020518:	20000276 	.word	0x20000276

0802051c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 802051c:	b480      	push	{r7}
 802051e:	b087      	sub	sp, #28
 8020520:	af00      	add	r7, sp, #0
 8020522:	60f8      	str	r0, [r7, #12]
 8020524:	60b9      	str	r1, [r7, #8]
 8020526:	4613      	mov	r3, r2
 8020528:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 802052a:	2300      	movs	r3, #0
 802052c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 802052e:	2300      	movs	r3, #0
 8020530:	75fb      	strb	r3, [r7, #23]
 8020532:	e027      	b.n	8020584 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8020534:	68fb      	ldr	r3, [r7, #12]
 8020536:	0f1b      	lsrs	r3, r3, #28
 8020538:	2b09      	cmp	r3, #9
 802053a:	d80b      	bhi.n	8020554 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802053c:	68fb      	ldr	r3, [r7, #12]
 802053e:	0f1b      	lsrs	r3, r3, #28
 8020540:	b2da      	uxtb	r2, r3
 8020542:	7dfb      	ldrb	r3, [r7, #23]
 8020544:	005b      	lsls	r3, r3, #1
 8020546:	4619      	mov	r1, r3
 8020548:	68bb      	ldr	r3, [r7, #8]
 802054a:	440b      	add	r3, r1
 802054c:	3230      	adds	r2, #48	; 0x30
 802054e:	b2d2      	uxtb	r2, r2
 8020550:	701a      	strb	r2, [r3, #0]
 8020552:	e00a      	b.n	802056a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8020554:	68fb      	ldr	r3, [r7, #12]
 8020556:	0f1b      	lsrs	r3, r3, #28
 8020558:	b2da      	uxtb	r2, r3
 802055a:	7dfb      	ldrb	r3, [r7, #23]
 802055c:	005b      	lsls	r3, r3, #1
 802055e:	4619      	mov	r1, r3
 8020560:	68bb      	ldr	r3, [r7, #8]
 8020562:	440b      	add	r3, r1
 8020564:	3237      	adds	r2, #55	; 0x37
 8020566:	b2d2      	uxtb	r2, r2
 8020568:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802056a:	68fb      	ldr	r3, [r7, #12]
 802056c:	011b      	lsls	r3, r3, #4
 802056e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8020570:	7dfb      	ldrb	r3, [r7, #23]
 8020572:	005b      	lsls	r3, r3, #1
 8020574:	3301      	adds	r3, #1
 8020576:	68ba      	ldr	r2, [r7, #8]
 8020578:	4413      	add	r3, r2
 802057a:	2200      	movs	r2, #0
 802057c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 802057e:	7dfb      	ldrb	r3, [r7, #23]
 8020580:	3301      	adds	r3, #1
 8020582:	75fb      	strb	r3, [r7, #23]
 8020584:	7dfa      	ldrb	r2, [r7, #23]
 8020586:	79fb      	ldrb	r3, [r7, #7]
 8020588:	429a      	cmp	r2, r3
 802058a:	d3d3      	bcc.n	8020534 <IntToUnicode+0x18>
  }
}
 802058c:	bf00      	nop
 802058e:	bf00      	nop
 8020590:	371c      	adds	r7, #28
 8020592:	46bd      	mov	sp, r7
 8020594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020598:	4770      	bx	lr
	...

0802059c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802059c:	b580      	push	{r7, lr}
 802059e:	b08a      	sub	sp, #40	; 0x28
 80205a0:	af00      	add	r7, sp, #0
 80205a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80205a4:	f107 0314 	add.w	r3, r7, #20
 80205a8:	2200      	movs	r2, #0
 80205aa:	601a      	str	r2, [r3, #0]
 80205ac:	605a      	str	r2, [r3, #4]
 80205ae:	609a      	str	r2, [r3, #8]
 80205b0:	60da      	str	r2, [r3, #12]
 80205b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80205b4:	687b      	ldr	r3, [r7, #4]
 80205b6:	681b      	ldr	r3, [r3, #0]
 80205b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80205bc:	d13a      	bne.n	8020634 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80205be:	2300      	movs	r3, #0
 80205c0:	613b      	str	r3, [r7, #16]
 80205c2:	4b1e      	ldr	r3, [pc, #120]	; (802063c <HAL_PCD_MspInit+0xa0>)
 80205c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205c6:	4a1d      	ldr	r2, [pc, #116]	; (802063c <HAL_PCD_MspInit+0xa0>)
 80205c8:	f043 0301 	orr.w	r3, r3, #1
 80205cc:	6313      	str	r3, [r2, #48]	; 0x30
 80205ce:	4b1b      	ldr	r3, [pc, #108]	; (802063c <HAL_PCD_MspInit+0xa0>)
 80205d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205d2:	f003 0301 	and.w	r3, r3, #1
 80205d6:	613b      	str	r3, [r7, #16]
 80205d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80205da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80205de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80205e0:	2302      	movs	r3, #2
 80205e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80205e4:	2300      	movs	r3, #0
 80205e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80205e8:	2303      	movs	r3, #3
 80205ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80205ec:	230a      	movs	r3, #10
 80205ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80205f0:	f107 0314 	add.w	r3, r7, #20
 80205f4:	4619      	mov	r1, r3
 80205f6:	4812      	ldr	r0, [pc, #72]	; (8020640 <HAL_PCD_MspInit+0xa4>)
 80205f8:	f7e9 f804 	bl	8009604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80205fc:	4b0f      	ldr	r3, [pc, #60]	; (802063c <HAL_PCD_MspInit+0xa0>)
 80205fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020600:	4a0e      	ldr	r2, [pc, #56]	; (802063c <HAL_PCD_MspInit+0xa0>)
 8020602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020606:	6353      	str	r3, [r2, #52]	; 0x34
 8020608:	2300      	movs	r3, #0
 802060a:	60fb      	str	r3, [r7, #12]
 802060c:	4b0b      	ldr	r3, [pc, #44]	; (802063c <HAL_PCD_MspInit+0xa0>)
 802060e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020610:	4a0a      	ldr	r2, [pc, #40]	; (802063c <HAL_PCD_MspInit+0xa0>)
 8020612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020616:	6453      	str	r3, [r2, #68]	; 0x44
 8020618:	4b08      	ldr	r3, [pc, #32]	; (802063c <HAL_PCD_MspInit+0xa0>)
 802061a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802061c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020620:	60fb      	str	r3, [r7, #12]
 8020622:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8020624:	2200      	movs	r2, #0
 8020626:	2100      	movs	r1, #0
 8020628:	2043      	movs	r0, #67	; 0x43
 802062a:	f7e8 ff98 	bl	800955e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802062e:	2043      	movs	r0, #67	; 0x43
 8020630:	f7e8 ffb1 	bl	8009596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8020634:	bf00      	nop
 8020636:	3728      	adds	r7, #40	; 0x28
 8020638:	46bd      	mov	sp, r7
 802063a:	bd80      	pop	{r7, pc}
 802063c:	40023800 	.word	0x40023800
 8020640:	40020000 	.word	0x40020000

08020644 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020644:	b580      	push	{r7, lr}
 8020646:	b082      	sub	sp, #8
 8020648:	af00      	add	r7, sp, #0
 802064a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802064c:	687b      	ldr	r3, [r7, #4]
 802064e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8020652:	687b      	ldr	r3, [r7, #4]
 8020654:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8020658:	4619      	mov	r1, r3
 802065a:	4610      	mov	r0, r2
 802065c:	f7ee f993 	bl	800e986 <USBD_LL_SetupStage>
}
 8020660:	bf00      	nop
 8020662:	3708      	adds	r7, #8
 8020664:	46bd      	mov	sp, r7
 8020666:	bd80      	pop	{r7, pc}

08020668 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020668:	b580      	push	{r7, lr}
 802066a:	b082      	sub	sp, #8
 802066c:	af00      	add	r7, sp, #0
 802066e:	6078      	str	r0, [r7, #4]
 8020670:	460b      	mov	r3, r1
 8020672:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8020674:	687b      	ldr	r3, [r7, #4]
 8020676:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 802067a:	78fa      	ldrb	r2, [r7, #3]
 802067c:	6879      	ldr	r1, [r7, #4]
 802067e:	4613      	mov	r3, r2
 8020680:	00db      	lsls	r3, r3, #3
 8020682:	4413      	add	r3, r2
 8020684:	009b      	lsls	r3, r3, #2
 8020686:	440b      	add	r3, r1
 8020688:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 802068c:	681a      	ldr	r2, [r3, #0]
 802068e:	78fb      	ldrb	r3, [r7, #3]
 8020690:	4619      	mov	r1, r3
 8020692:	f7ee f9cd 	bl	800ea30 <USBD_LL_DataOutStage>
}
 8020696:	bf00      	nop
 8020698:	3708      	adds	r7, #8
 802069a:	46bd      	mov	sp, r7
 802069c:	bd80      	pop	{r7, pc}

0802069e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802069e:	b580      	push	{r7, lr}
 80206a0:	b082      	sub	sp, #8
 80206a2:	af00      	add	r7, sp, #0
 80206a4:	6078      	str	r0, [r7, #4]
 80206a6:	460b      	mov	r3, r1
 80206a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80206b0:	78fa      	ldrb	r2, [r7, #3]
 80206b2:	6879      	ldr	r1, [r7, #4]
 80206b4:	4613      	mov	r3, r2
 80206b6:	00db      	lsls	r3, r3, #3
 80206b8:	4413      	add	r3, r2
 80206ba:	009b      	lsls	r3, r3, #2
 80206bc:	440b      	add	r3, r1
 80206be:	334c      	adds	r3, #76	; 0x4c
 80206c0:	681a      	ldr	r2, [r3, #0]
 80206c2:	78fb      	ldrb	r3, [r7, #3]
 80206c4:	4619      	mov	r1, r3
 80206c6:	f7ee fa66 	bl	800eb96 <USBD_LL_DataInStage>
}
 80206ca:	bf00      	nop
 80206cc:	3708      	adds	r7, #8
 80206ce:	46bd      	mov	sp, r7
 80206d0:	bd80      	pop	{r7, pc}

080206d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80206d2:	b580      	push	{r7, lr}
 80206d4:	b082      	sub	sp, #8
 80206d6:	af00      	add	r7, sp, #0
 80206d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80206da:	687b      	ldr	r3, [r7, #4]
 80206dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80206e0:	4618      	mov	r0, r3
 80206e2:	f7ee fb9a 	bl	800ee1a <USBD_LL_SOF>
}
 80206e6:	bf00      	nop
 80206e8:	3708      	adds	r7, #8
 80206ea:	46bd      	mov	sp, r7
 80206ec:	bd80      	pop	{r7, pc}

080206ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80206ee:	b580      	push	{r7, lr}
 80206f0:	b084      	sub	sp, #16
 80206f2:	af00      	add	r7, sp, #0
 80206f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80206f6:	2301      	movs	r3, #1
 80206f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80206fa:	687b      	ldr	r3, [r7, #4]
 80206fc:	68db      	ldr	r3, [r3, #12]
 80206fe:	2b00      	cmp	r3, #0
 8020700:	d102      	bne.n	8020708 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8020702:	2300      	movs	r3, #0
 8020704:	73fb      	strb	r3, [r7, #15]
 8020706:	e008      	b.n	802071a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8020708:	687b      	ldr	r3, [r7, #4]
 802070a:	68db      	ldr	r3, [r3, #12]
 802070c:	2b02      	cmp	r3, #2
 802070e:	d102      	bne.n	8020716 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8020710:	2301      	movs	r3, #1
 8020712:	73fb      	strb	r3, [r7, #15]
 8020714:	e001      	b.n	802071a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8020716:	f7e5 feff 	bl	8006518 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802071a:	687b      	ldr	r3, [r7, #4]
 802071c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020720:	7bfa      	ldrb	r2, [r7, #15]
 8020722:	4611      	mov	r1, r2
 8020724:	4618      	mov	r0, r3
 8020726:	f7ee fb3a 	bl	800ed9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802072a:	687b      	ldr	r3, [r7, #4]
 802072c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020730:	4618      	mov	r0, r3
 8020732:	f7ee fae2 	bl	800ecfa <USBD_LL_Reset>
}
 8020736:	bf00      	nop
 8020738:	3710      	adds	r7, #16
 802073a:	46bd      	mov	sp, r7
 802073c:	bd80      	pop	{r7, pc}
	...

08020740 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020740:	b580      	push	{r7, lr}
 8020742:	b082      	sub	sp, #8
 8020744:	af00      	add	r7, sp, #0
 8020746:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8020748:	687b      	ldr	r3, [r7, #4]
 802074a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 802074e:	4618      	mov	r0, r3
 8020750:	f7ee fb35 	bl	800edbe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8020754:	687b      	ldr	r3, [r7, #4]
 8020756:	681b      	ldr	r3, [r3, #0]
 8020758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802075c:	681b      	ldr	r3, [r3, #0]
 802075e:	687a      	ldr	r2, [r7, #4]
 8020760:	6812      	ldr	r2, [r2, #0]
 8020762:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8020766:	f043 0301 	orr.w	r3, r3, #1
 802076a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802076c:	687b      	ldr	r3, [r7, #4]
 802076e:	6a1b      	ldr	r3, [r3, #32]
 8020770:	2b00      	cmp	r3, #0
 8020772:	d005      	beq.n	8020780 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020774:	4b04      	ldr	r3, [pc, #16]	; (8020788 <HAL_PCD_SuspendCallback+0x48>)
 8020776:	691b      	ldr	r3, [r3, #16]
 8020778:	4a03      	ldr	r2, [pc, #12]	; (8020788 <HAL_PCD_SuspendCallback+0x48>)
 802077a:	f043 0306 	orr.w	r3, r3, #6
 802077e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8020780:	bf00      	nop
 8020782:	3708      	adds	r7, #8
 8020784:	46bd      	mov	sp, r7
 8020786:	bd80      	pop	{r7, pc}
 8020788:	e000ed00 	.word	0xe000ed00

0802078c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802078c:	b580      	push	{r7, lr}
 802078e:	b082      	sub	sp, #8
 8020790:	af00      	add	r7, sp, #0
 8020792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8020794:	687b      	ldr	r3, [r7, #4]
 8020796:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 802079a:	4618      	mov	r0, r3
 802079c:	f7ee fb25 	bl	800edea <USBD_LL_Resume>
}
 80207a0:	bf00      	nop
 80207a2:	3708      	adds	r7, #8
 80207a4:	46bd      	mov	sp, r7
 80207a6:	bd80      	pop	{r7, pc}

080207a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80207a8:	b580      	push	{r7, lr}
 80207aa:	b082      	sub	sp, #8
 80207ac:	af00      	add	r7, sp, #0
 80207ae:	6078      	str	r0, [r7, #4]
 80207b0:	460b      	mov	r3, r1
 80207b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80207b4:	687b      	ldr	r3, [r7, #4]
 80207b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80207ba:	78fa      	ldrb	r2, [r7, #3]
 80207bc:	4611      	mov	r1, r2
 80207be:	4618      	mov	r0, r3
 80207c0:	f7ee fb7d 	bl	800eebe <USBD_LL_IsoOUTIncomplete>
}
 80207c4:	bf00      	nop
 80207c6:	3708      	adds	r7, #8
 80207c8:	46bd      	mov	sp, r7
 80207ca:	bd80      	pop	{r7, pc}

080207cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80207cc:	b580      	push	{r7, lr}
 80207ce:	b082      	sub	sp, #8
 80207d0:	af00      	add	r7, sp, #0
 80207d2:	6078      	str	r0, [r7, #4]
 80207d4:	460b      	mov	r3, r1
 80207d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80207d8:	687b      	ldr	r3, [r7, #4]
 80207da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80207de:	78fa      	ldrb	r2, [r7, #3]
 80207e0:	4611      	mov	r1, r2
 80207e2:	4618      	mov	r0, r3
 80207e4:	f7ee fb39 	bl	800ee5a <USBD_LL_IsoINIncomplete>
}
 80207e8:	bf00      	nop
 80207ea:	3708      	adds	r7, #8
 80207ec:	46bd      	mov	sp, r7
 80207ee:	bd80      	pop	{r7, pc}

080207f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80207f0:	b580      	push	{r7, lr}
 80207f2:	b082      	sub	sp, #8
 80207f4:	af00      	add	r7, sp, #0
 80207f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80207f8:	687b      	ldr	r3, [r7, #4]
 80207fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80207fe:	4618      	mov	r0, r3
 8020800:	f7ee fb8f 	bl	800ef22 <USBD_LL_DevConnected>
}
 8020804:	bf00      	nop
 8020806:	3708      	adds	r7, #8
 8020808:	46bd      	mov	sp, r7
 802080a:	bd80      	pop	{r7, pc}

0802080c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802080c:	b580      	push	{r7, lr}
 802080e:	b082      	sub	sp, #8
 8020810:	af00      	add	r7, sp, #0
 8020812:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8020814:	687b      	ldr	r3, [r7, #4]
 8020816:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 802081a:	4618      	mov	r0, r3
 802081c:	f7ee fb8c 	bl	800ef38 <USBD_LL_DevDisconnected>
}
 8020820:	bf00      	nop
 8020822:	3708      	adds	r7, #8
 8020824:	46bd      	mov	sp, r7
 8020826:	bd80      	pop	{r7, pc}

08020828 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8020828:	b580      	push	{r7, lr}
 802082a:	b082      	sub	sp, #8
 802082c:	af00      	add	r7, sp, #0
 802082e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8020830:	687b      	ldr	r3, [r7, #4]
 8020832:	781b      	ldrb	r3, [r3, #0]
 8020834:	2b00      	cmp	r3, #0
 8020836:	d13c      	bne.n	80208b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8020838:	4a20      	ldr	r2, [pc, #128]	; (80208bc <USBD_LL_Init+0x94>)
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	4a1e      	ldr	r2, [pc, #120]	; (80208bc <USBD_LL_Init+0x94>)
 8020844:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8020848:	4b1c      	ldr	r3, [pc, #112]	; (80208bc <USBD_LL_Init+0x94>)
 802084a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 802084e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8020850:	4b1a      	ldr	r3, [pc, #104]	; (80208bc <USBD_LL_Init+0x94>)
 8020852:	2204      	movs	r2, #4
 8020854:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8020856:	4b19      	ldr	r3, [pc, #100]	; (80208bc <USBD_LL_Init+0x94>)
 8020858:	2202      	movs	r2, #2
 802085a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 802085c:	4b17      	ldr	r3, [pc, #92]	; (80208bc <USBD_LL_Init+0x94>)
 802085e:	2200      	movs	r2, #0
 8020860:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8020862:	4b16      	ldr	r3, [pc, #88]	; (80208bc <USBD_LL_Init+0x94>)
 8020864:	2202      	movs	r2, #2
 8020866:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8020868:	4b14      	ldr	r3, [pc, #80]	; (80208bc <USBD_LL_Init+0x94>)
 802086a:	2200      	movs	r2, #0
 802086c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 802086e:	4b13      	ldr	r3, [pc, #76]	; (80208bc <USBD_LL_Init+0x94>)
 8020870:	2200      	movs	r2, #0
 8020872:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8020874:	4b11      	ldr	r3, [pc, #68]	; (80208bc <USBD_LL_Init+0x94>)
 8020876:	2200      	movs	r2, #0
 8020878:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 802087a:	4b10      	ldr	r3, [pc, #64]	; (80208bc <USBD_LL_Init+0x94>)
 802087c:	2200      	movs	r2, #0
 802087e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8020880:	4b0e      	ldr	r3, [pc, #56]	; (80208bc <USBD_LL_Init+0x94>)
 8020882:	2200      	movs	r2, #0
 8020884:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8020886:	480d      	ldr	r0, [pc, #52]	; (80208bc <USBD_LL_Init+0x94>)
 8020888:	f7e9 f8a4 	bl	80099d4 <HAL_PCD_Init>
 802088c:	4603      	mov	r3, r0
 802088e:	2b00      	cmp	r3, #0
 8020890:	d001      	beq.n	8020896 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8020892:	f7e5 fe41 	bl	8006518 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8020896:	2180      	movs	r1, #128	; 0x80
 8020898:	4808      	ldr	r0, [pc, #32]	; (80208bc <USBD_LL_Init+0x94>)
 802089a:	f7ea fafc 	bl	800ae96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 802089e:	2240      	movs	r2, #64	; 0x40
 80208a0:	2100      	movs	r1, #0
 80208a2:	4806      	ldr	r0, [pc, #24]	; (80208bc <USBD_LL_Init+0x94>)
 80208a4:	f7ea fab0 	bl	800ae08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80208a8:	2280      	movs	r2, #128	; 0x80
 80208aa:	2101      	movs	r1, #1
 80208ac:	4803      	ldr	r0, [pc, #12]	; (80208bc <USBD_LL_Init+0x94>)
 80208ae:	f7ea faab 	bl	800ae08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80208b2:	2300      	movs	r3, #0
}
 80208b4:	4618      	mov	r0, r3
 80208b6:	3708      	adds	r7, #8
 80208b8:	46bd      	mov	sp, r7
 80208ba:	bd80      	pop	{r7, pc}
 80208bc:	200045b8 	.word	0x200045b8

080208c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80208c0:	b580      	push	{r7, lr}
 80208c2:	b084      	sub	sp, #16
 80208c4:	af00      	add	r7, sp, #0
 80208c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80208c8:	2300      	movs	r3, #0
 80208ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80208cc:	2300      	movs	r3, #0
 80208ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80208d0:	687b      	ldr	r3, [r7, #4]
 80208d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80208d6:	4618      	mov	r0, r3
 80208d8:	f7e9 f999 	bl	8009c0e <HAL_PCD_Start>
 80208dc:	4603      	mov	r3, r0
 80208de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80208e0:	7bfb      	ldrb	r3, [r7, #15]
 80208e2:	4618      	mov	r0, r3
 80208e4:	f000 f942 	bl	8020b6c <USBD_Get_USB_Status>
 80208e8:	4603      	mov	r3, r0
 80208ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80208ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80208ee:	4618      	mov	r0, r3
 80208f0:	3710      	adds	r7, #16
 80208f2:	46bd      	mov	sp, r7
 80208f4:	bd80      	pop	{r7, pc}

080208f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80208f6:	b580      	push	{r7, lr}
 80208f8:	b084      	sub	sp, #16
 80208fa:	af00      	add	r7, sp, #0
 80208fc:	6078      	str	r0, [r7, #4]
 80208fe:	4608      	mov	r0, r1
 8020900:	4611      	mov	r1, r2
 8020902:	461a      	mov	r2, r3
 8020904:	4603      	mov	r3, r0
 8020906:	70fb      	strb	r3, [r7, #3]
 8020908:	460b      	mov	r3, r1
 802090a:	70bb      	strb	r3, [r7, #2]
 802090c:	4613      	mov	r3, r2
 802090e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020910:	2300      	movs	r3, #0
 8020912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020914:	2300      	movs	r3, #0
 8020916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8020918:	687b      	ldr	r3, [r7, #4]
 802091a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 802091e:	78bb      	ldrb	r3, [r7, #2]
 8020920:	883a      	ldrh	r2, [r7, #0]
 8020922:	78f9      	ldrb	r1, [r7, #3]
 8020924:	f7e9 fe6a 	bl	800a5fc <HAL_PCD_EP_Open>
 8020928:	4603      	mov	r3, r0
 802092a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802092c:	7bfb      	ldrb	r3, [r7, #15]
 802092e:	4618      	mov	r0, r3
 8020930:	f000 f91c 	bl	8020b6c <USBD_Get_USB_Status>
 8020934:	4603      	mov	r3, r0
 8020936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020938:	7bbb      	ldrb	r3, [r7, #14]
}
 802093a:	4618      	mov	r0, r3
 802093c:	3710      	adds	r7, #16
 802093e:	46bd      	mov	sp, r7
 8020940:	bd80      	pop	{r7, pc}

08020942 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020942:	b580      	push	{r7, lr}
 8020944:	b084      	sub	sp, #16
 8020946:	af00      	add	r7, sp, #0
 8020948:	6078      	str	r0, [r7, #4]
 802094a:	460b      	mov	r3, r1
 802094c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802094e:	2300      	movs	r3, #0
 8020950:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020952:	2300      	movs	r3, #0
 8020954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8020956:	687b      	ldr	r3, [r7, #4]
 8020958:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802095c:	78fa      	ldrb	r2, [r7, #3]
 802095e:	4611      	mov	r1, r2
 8020960:	4618      	mov	r0, r3
 8020962:	f7e9 feb3 	bl	800a6cc <HAL_PCD_EP_Close>
 8020966:	4603      	mov	r3, r0
 8020968:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802096a:	7bfb      	ldrb	r3, [r7, #15]
 802096c:	4618      	mov	r0, r3
 802096e:	f000 f8fd 	bl	8020b6c <USBD_Get_USB_Status>
 8020972:	4603      	mov	r3, r0
 8020974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020976:	7bbb      	ldrb	r3, [r7, #14]
}
 8020978:	4618      	mov	r0, r3
 802097a:	3710      	adds	r7, #16
 802097c:	46bd      	mov	sp, r7
 802097e:	bd80      	pop	{r7, pc}

08020980 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020980:	b580      	push	{r7, lr}
 8020982:	b084      	sub	sp, #16
 8020984:	af00      	add	r7, sp, #0
 8020986:	6078      	str	r0, [r7, #4]
 8020988:	460b      	mov	r3, r1
 802098a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802098c:	2300      	movs	r3, #0
 802098e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020990:	2300      	movs	r3, #0
 8020992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802099a:	78fa      	ldrb	r2, [r7, #3]
 802099c:	4611      	mov	r1, r2
 802099e:	4618      	mov	r0, r3
 80209a0:	f7e9 ff8b 	bl	800a8ba <HAL_PCD_EP_SetStall>
 80209a4:	4603      	mov	r3, r0
 80209a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80209a8:	7bfb      	ldrb	r3, [r7, #15]
 80209aa:	4618      	mov	r0, r3
 80209ac:	f000 f8de 	bl	8020b6c <USBD_Get_USB_Status>
 80209b0:	4603      	mov	r3, r0
 80209b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80209b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80209b6:	4618      	mov	r0, r3
 80209b8:	3710      	adds	r7, #16
 80209ba:	46bd      	mov	sp, r7
 80209bc:	bd80      	pop	{r7, pc}

080209be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80209be:	b580      	push	{r7, lr}
 80209c0:	b084      	sub	sp, #16
 80209c2:	af00      	add	r7, sp, #0
 80209c4:	6078      	str	r0, [r7, #4]
 80209c6:	460b      	mov	r3, r1
 80209c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80209ca:	2300      	movs	r3, #0
 80209cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80209ce:	2300      	movs	r3, #0
 80209d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80209d2:	687b      	ldr	r3, [r7, #4]
 80209d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80209d8:	78fa      	ldrb	r2, [r7, #3]
 80209da:	4611      	mov	r1, r2
 80209dc:	4618      	mov	r0, r3
 80209de:	f7e9 ffd0 	bl	800a982 <HAL_PCD_EP_ClrStall>
 80209e2:	4603      	mov	r3, r0
 80209e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80209e6:	7bfb      	ldrb	r3, [r7, #15]
 80209e8:	4618      	mov	r0, r3
 80209ea:	f000 f8bf 	bl	8020b6c <USBD_Get_USB_Status>
 80209ee:	4603      	mov	r3, r0
 80209f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80209f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80209f4:	4618      	mov	r0, r3
 80209f6:	3710      	adds	r7, #16
 80209f8:	46bd      	mov	sp, r7
 80209fa:	bd80      	pop	{r7, pc}

080209fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80209fc:	b480      	push	{r7}
 80209fe:	b085      	sub	sp, #20
 8020a00:	af00      	add	r7, sp, #0
 8020a02:	6078      	str	r0, [r7, #4]
 8020a04:	460b      	mov	r3, r1
 8020a06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8020a08:	687b      	ldr	r3, [r7, #4]
 8020a0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020a0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8020a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8020a14:	2b00      	cmp	r3, #0
 8020a16:	da0b      	bge.n	8020a30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8020a18:	78fb      	ldrb	r3, [r7, #3]
 8020a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8020a1e:	68f9      	ldr	r1, [r7, #12]
 8020a20:	4613      	mov	r3, r2
 8020a22:	00db      	lsls	r3, r3, #3
 8020a24:	4413      	add	r3, r2
 8020a26:	009b      	lsls	r3, r3, #2
 8020a28:	440b      	add	r3, r1
 8020a2a:	333e      	adds	r3, #62	; 0x3e
 8020a2c:	781b      	ldrb	r3, [r3, #0]
 8020a2e:	e00b      	b.n	8020a48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8020a30:	78fb      	ldrb	r3, [r7, #3]
 8020a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8020a36:	68f9      	ldr	r1, [r7, #12]
 8020a38:	4613      	mov	r3, r2
 8020a3a:	00db      	lsls	r3, r3, #3
 8020a3c:	4413      	add	r3, r2
 8020a3e:	009b      	lsls	r3, r3, #2
 8020a40:	440b      	add	r3, r1
 8020a42:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8020a46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020a48:	4618      	mov	r0, r3
 8020a4a:	3714      	adds	r7, #20
 8020a4c:	46bd      	mov	sp, r7
 8020a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a52:	4770      	bx	lr

08020a54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8020a54:	b580      	push	{r7, lr}
 8020a56:	b084      	sub	sp, #16
 8020a58:	af00      	add	r7, sp, #0
 8020a5a:	6078      	str	r0, [r7, #4]
 8020a5c:	460b      	mov	r3, r1
 8020a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020a60:	2300      	movs	r3, #0
 8020a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020a64:	2300      	movs	r3, #0
 8020a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020a6e:	78fa      	ldrb	r2, [r7, #3]
 8020a70:	4611      	mov	r1, r2
 8020a72:	4618      	mov	r0, r3
 8020a74:	f7e9 fd9d 	bl	800a5b2 <HAL_PCD_SetAddress>
 8020a78:	4603      	mov	r3, r0
 8020a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020a7c:	7bfb      	ldrb	r3, [r7, #15]
 8020a7e:	4618      	mov	r0, r3
 8020a80:	f000 f874 	bl	8020b6c <USBD_Get_USB_Status>
 8020a84:	4603      	mov	r3, r0
 8020a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8020a8a:	4618      	mov	r0, r3
 8020a8c:	3710      	adds	r7, #16
 8020a8e:	46bd      	mov	sp, r7
 8020a90:	bd80      	pop	{r7, pc}

08020a92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8020a92:	b580      	push	{r7, lr}
 8020a94:	b086      	sub	sp, #24
 8020a96:	af00      	add	r7, sp, #0
 8020a98:	60f8      	str	r0, [r7, #12]
 8020a9a:	607a      	str	r2, [r7, #4]
 8020a9c:	603b      	str	r3, [r7, #0]
 8020a9e:	460b      	mov	r3, r1
 8020aa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020aa2:	2300      	movs	r3, #0
 8020aa4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020aa6:	2300      	movs	r3, #0
 8020aa8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8020aaa:	68fb      	ldr	r3, [r7, #12]
 8020aac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8020ab0:	7af9      	ldrb	r1, [r7, #11]
 8020ab2:	683b      	ldr	r3, [r7, #0]
 8020ab4:	687a      	ldr	r2, [r7, #4]
 8020ab6:	f7e9 feb6 	bl	800a826 <HAL_PCD_EP_Transmit>
 8020aba:	4603      	mov	r3, r0
 8020abc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020abe:	7dfb      	ldrb	r3, [r7, #23]
 8020ac0:	4618      	mov	r0, r3
 8020ac2:	f000 f853 	bl	8020b6c <USBD_Get_USB_Status>
 8020ac6:	4603      	mov	r3, r0
 8020ac8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8020aca:	7dbb      	ldrb	r3, [r7, #22]
}
 8020acc:	4618      	mov	r0, r3
 8020ace:	3718      	adds	r7, #24
 8020ad0:	46bd      	mov	sp, r7
 8020ad2:	bd80      	pop	{r7, pc}

08020ad4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8020ad4:	b580      	push	{r7, lr}
 8020ad6:	b086      	sub	sp, #24
 8020ad8:	af00      	add	r7, sp, #0
 8020ada:	60f8      	str	r0, [r7, #12]
 8020adc:	607a      	str	r2, [r7, #4]
 8020ade:	603b      	str	r3, [r7, #0]
 8020ae0:	460b      	mov	r3, r1
 8020ae2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020ae8:	2300      	movs	r3, #0
 8020aea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8020aec:	68fb      	ldr	r3, [r7, #12]
 8020aee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8020af2:	7af9      	ldrb	r1, [r7, #11]
 8020af4:	683b      	ldr	r3, [r7, #0]
 8020af6:	687a      	ldr	r2, [r7, #4]
 8020af8:	f7e9 fe32 	bl	800a760 <HAL_PCD_EP_Receive>
 8020afc:	4603      	mov	r3, r0
 8020afe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020b00:	7dfb      	ldrb	r3, [r7, #23]
 8020b02:	4618      	mov	r0, r3
 8020b04:	f000 f832 	bl	8020b6c <USBD_Get_USB_Status>
 8020b08:	4603      	mov	r3, r0
 8020b0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8020b0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8020b0e:	4618      	mov	r0, r3
 8020b10:	3718      	adds	r7, #24
 8020b12:	46bd      	mov	sp, r7
 8020b14:	bd80      	pop	{r7, pc}

08020b16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020b16:	b580      	push	{r7, lr}
 8020b18:	b082      	sub	sp, #8
 8020b1a:	af00      	add	r7, sp, #0
 8020b1c:	6078      	str	r0, [r7, #4]
 8020b1e:	460b      	mov	r3, r1
 8020b20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8020b22:	687b      	ldr	r3, [r7, #4]
 8020b24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020b28:	78fa      	ldrb	r2, [r7, #3]
 8020b2a:	4611      	mov	r1, r2
 8020b2c:	4618      	mov	r0, r3
 8020b2e:	f7e9 fe62 	bl	800a7f6 <HAL_PCD_EP_GetRxCount>
 8020b32:	4603      	mov	r3, r0
}
 8020b34:	4618      	mov	r0, r3
 8020b36:	3708      	adds	r7, #8
 8020b38:	46bd      	mov	sp, r7
 8020b3a:	bd80      	pop	{r7, pc}

08020b3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8020b3c:	b480      	push	{r7}
 8020b3e:	b083      	sub	sp, #12
 8020b40:	af00      	add	r7, sp, #0
 8020b42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8020b44:	4b03      	ldr	r3, [pc, #12]	; (8020b54 <USBD_static_malloc+0x18>)
}
 8020b46:	4618      	mov	r0, r3
 8020b48:	370c      	adds	r7, #12
 8020b4a:	46bd      	mov	sp, r7
 8020b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b50:	4770      	bx	lr
 8020b52:	bf00      	nop
 8020b54:	20004ac4 	.word	0x20004ac4

08020b58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8020b58:	b480      	push	{r7}
 8020b5a:	b083      	sub	sp, #12
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	6078      	str	r0, [r7, #4]

}
 8020b60:	bf00      	nop
 8020b62:	370c      	adds	r7, #12
 8020b64:	46bd      	mov	sp, r7
 8020b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b6a:	4770      	bx	lr

08020b6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8020b6c:	b480      	push	{r7}
 8020b6e:	b085      	sub	sp, #20
 8020b70:	af00      	add	r7, sp, #0
 8020b72:	4603      	mov	r3, r0
 8020b74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020b76:	2300      	movs	r3, #0
 8020b78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8020b7a:	79fb      	ldrb	r3, [r7, #7]
 8020b7c:	2b03      	cmp	r3, #3
 8020b7e:	d817      	bhi.n	8020bb0 <USBD_Get_USB_Status+0x44>
 8020b80:	a201      	add	r2, pc, #4	; (adr r2, 8020b88 <USBD_Get_USB_Status+0x1c>)
 8020b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020b86:	bf00      	nop
 8020b88:	08020b99 	.word	0x08020b99
 8020b8c:	08020b9f 	.word	0x08020b9f
 8020b90:	08020ba5 	.word	0x08020ba5
 8020b94:	08020bab 	.word	0x08020bab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8020b98:	2300      	movs	r3, #0
 8020b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8020b9c:	e00b      	b.n	8020bb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8020b9e:	2303      	movs	r3, #3
 8020ba0:	73fb      	strb	r3, [r7, #15]
    break;
 8020ba2:	e008      	b.n	8020bb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8020ba4:	2301      	movs	r3, #1
 8020ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8020ba8:	e005      	b.n	8020bb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8020baa:	2303      	movs	r3, #3
 8020bac:	73fb      	strb	r3, [r7, #15]
    break;
 8020bae:	e002      	b.n	8020bb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8020bb0:	2303      	movs	r3, #3
 8020bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8020bb4:	bf00      	nop
  }
  return usb_status;
 8020bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8020bb8:	4618      	mov	r0, r3
 8020bba:	3714      	adds	r7, #20
 8020bbc:	46bd      	mov	sp, r7
 8020bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bc2:	4770      	bx	lr

08020bc4 <_ZdaPv>:
 8020bc4:	f000 b816 	b.w	8020bf4 <_ZdlPv>

08020bc8 <_Znwj>:
 8020bc8:	2801      	cmp	r0, #1
 8020bca:	bf38      	it	cc
 8020bcc:	2001      	movcc	r0, #1
 8020bce:	b510      	push	{r4, lr}
 8020bd0:	4604      	mov	r4, r0
 8020bd2:	4620      	mov	r0, r4
 8020bd4:	f002 fdc4 	bl	8023760 <malloc>
 8020bd8:	b930      	cbnz	r0, 8020be8 <_Znwj+0x20>
 8020bda:	f000 f80d 	bl	8020bf8 <_ZSt15get_new_handlerv>
 8020bde:	b908      	cbnz	r0, 8020be4 <_Znwj+0x1c>
 8020be0:	f002 fd4c 	bl	802367c <abort>
 8020be4:	4780      	blx	r0
 8020be6:	e7f4      	b.n	8020bd2 <_Znwj+0xa>
 8020be8:	bd10      	pop	{r4, pc}

08020bea <_Znaj>:
 8020bea:	f7ff bfed 	b.w	8020bc8 <_Znwj>

08020bee <_ZSt20__throw_length_errorPKc>:
 8020bee:	b508      	push	{r3, lr}
 8020bf0:	f002 fd44 	bl	802367c <abort>

08020bf4 <_ZdlPv>:
 8020bf4:	f002 bdbc 	b.w	8023770 <free>

08020bf8 <_ZSt15get_new_handlerv>:
 8020bf8:	4b02      	ldr	r3, [pc, #8]	; (8020c04 <_ZSt15get_new_handlerv+0xc>)
 8020bfa:	6818      	ldr	r0, [r3, #0]
 8020bfc:	f3bf 8f5b 	dmb	ish
 8020c00:	4770      	bx	lr
 8020c02:	bf00      	nop
 8020c04:	20004ce4 	.word	0x20004ce4

08020c08 <cos>:
 8020c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020c0a:	ec53 2b10 	vmov	r2, r3, d0
 8020c0e:	4826      	ldr	r0, [pc, #152]	; (8020ca8 <cos+0xa0>)
 8020c10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020c14:	4281      	cmp	r1, r0
 8020c16:	dc06      	bgt.n	8020c26 <cos+0x1e>
 8020c18:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8020ca0 <cos+0x98>
 8020c1c:	b005      	add	sp, #20
 8020c1e:	f85d eb04 	ldr.w	lr, [sp], #4
 8020c22:	f001 bd41 	b.w	80226a8 <__kernel_cos>
 8020c26:	4821      	ldr	r0, [pc, #132]	; (8020cac <cos+0xa4>)
 8020c28:	4281      	cmp	r1, r0
 8020c2a:	dd09      	ble.n	8020c40 <cos+0x38>
 8020c2c:	ee10 0a10 	vmov	r0, s0
 8020c30:	4619      	mov	r1, r3
 8020c32:	f7df fb33 	bl	800029c <__aeabi_dsub>
 8020c36:	ec41 0b10 	vmov	d0, r0, r1
 8020c3a:	b005      	add	sp, #20
 8020c3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8020c40:	4668      	mov	r0, sp
 8020c42:	f001 f859 	bl	8021cf8 <__ieee754_rem_pio2>
 8020c46:	f000 0003 	and.w	r0, r0, #3
 8020c4a:	2801      	cmp	r0, #1
 8020c4c:	d00b      	beq.n	8020c66 <cos+0x5e>
 8020c4e:	2802      	cmp	r0, #2
 8020c50:	d016      	beq.n	8020c80 <cos+0x78>
 8020c52:	b9e0      	cbnz	r0, 8020c8e <cos+0x86>
 8020c54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020c58:	ed9d 0b00 	vldr	d0, [sp]
 8020c5c:	f001 fd24 	bl	80226a8 <__kernel_cos>
 8020c60:	ec51 0b10 	vmov	r0, r1, d0
 8020c64:	e7e7      	b.n	8020c36 <cos+0x2e>
 8020c66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020c6a:	ed9d 0b00 	vldr	d0, [sp]
 8020c6e:	f002 f933 	bl	8022ed8 <__kernel_sin>
 8020c72:	ec53 2b10 	vmov	r2, r3, d0
 8020c76:	ee10 0a10 	vmov	r0, s0
 8020c7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020c7e:	e7da      	b.n	8020c36 <cos+0x2e>
 8020c80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020c84:	ed9d 0b00 	vldr	d0, [sp]
 8020c88:	f001 fd0e 	bl	80226a8 <__kernel_cos>
 8020c8c:	e7f1      	b.n	8020c72 <cos+0x6a>
 8020c8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020c92:	ed9d 0b00 	vldr	d0, [sp]
 8020c96:	2001      	movs	r0, #1
 8020c98:	f002 f91e 	bl	8022ed8 <__kernel_sin>
 8020c9c:	e7e0      	b.n	8020c60 <cos+0x58>
 8020c9e:	bf00      	nop
	...
 8020ca8:	3fe921fb 	.word	0x3fe921fb
 8020cac:	7fefffff 	.word	0x7fefffff

08020cb0 <floor>:
 8020cb0:	ec51 0b10 	vmov	r0, r1, d0
 8020cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020cb8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8020cbc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8020cc0:	2e13      	cmp	r6, #19
 8020cc2:	ee10 5a10 	vmov	r5, s0
 8020cc6:	ee10 8a10 	vmov	r8, s0
 8020cca:	460c      	mov	r4, r1
 8020ccc:	dc32      	bgt.n	8020d34 <floor+0x84>
 8020cce:	2e00      	cmp	r6, #0
 8020cd0:	da14      	bge.n	8020cfc <floor+0x4c>
 8020cd2:	a333      	add	r3, pc, #204	; (adr r3, 8020da0 <floor+0xf0>)
 8020cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cd8:	f7df fae2 	bl	80002a0 <__adddf3>
 8020cdc:	2200      	movs	r2, #0
 8020cde:	2300      	movs	r3, #0
 8020ce0:	f7df ff24 	bl	8000b2c <__aeabi_dcmpgt>
 8020ce4:	b138      	cbz	r0, 8020cf6 <floor+0x46>
 8020ce6:	2c00      	cmp	r4, #0
 8020ce8:	da57      	bge.n	8020d9a <floor+0xea>
 8020cea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8020cee:	431d      	orrs	r5, r3
 8020cf0:	d001      	beq.n	8020cf6 <floor+0x46>
 8020cf2:	4c2d      	ldr	r4, [pc, #180]	; (8020da8 <floor+0xf8>)
 8020cf4:	2500      	movs	r5, #0
 8020cf6:	4621      	mov	r1, r4
 8020cf8:	4628      	mov	r0, r5
 8020cfa:	e025      	b.n	8020d48 <floor+0x98>
 8020cfc:	4f2b      	ldr	r7, [pc, #172]	; (8020dac <floor+0xfc>)
 8020cfe:	4137      	asrs	r7, r6
 8020d00:	ea01 0307 	and.w	r3, r1, r7
 8020d04:	4303      	orrs	r3, r0
 8020d06:	d01f      	beq.n	8020d48 <floor+0x98>
 8020d08:	a325      	add	r3, pc, #148	; (adr r3, 8020da0 <floor+0xf0>)
 8020d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d0e:	f7df fac7 	bl	80002a0 <__adddf3>
 8020d12:	2200      	movs	r2, #0
 8020d14:	2300      	movs	r3, #0
 8020d16:	f7df ff09 	bl	8000b2c <__aeabi_dcmpgt>
 8020d1a:	2800      	cmp	r0, #0
 8020d1c:	d0eb      	beq.n	8020cf6 <floor+0x46>
 8020d1e:	2c00      	cmp	r4, #0
 8020d20:	bfbe      	ittt	lt
 8020d22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8020d26:	fa43 f606 	asrlt.w	r6, r3, r6
 8020d2a:	19a4      	addlt	r4, r4, r6
 8020d2c:	ea24 0407 	bic.w	r4, r4, r7
 8020d30:	2500      	movs	r5, #0
 8020d32:	e7e0      	b.n	8020cf6 <floor+0x46>
 8020d34:	2e33      	cmp	r6, #51	; 0x33
 8020d36:	dd0b      	ble.n	8020d50 <floor+0xa0>
 8020d38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8020d3c:	d104      	bne.n	8020d48 <floor+0x98>
 8020d3e:	ee10 2a10 	vmov	r2, s0
 8020d42:	460b      	mov	r3, r1
 8020d44:	f7df faac 	bl	80002a0 <__adddf3>
 8020d48:	ec41 0b10 	vmov	d0, r0, r1
 8020d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d50:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8020d54:	f04f 33ff 	mov.w	r3, #4294967295
 8020d58:	fa23 f707 	lsr.w	r7, r3, r7
 8020d5c:	4207      	tst	r7, r0
 8020d5e:	d0f3      	beq.n	8020d48 <floor+0x98>
 8020d60:	a30f      	add	r3, pc, #60	; (adr r3, 8020da0 <floor+0xf0>)
 8020d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d66:	f7df fa9b 	bl	80002a0 <__adddf3>
 8020d6a:	2200      	movs	r2, #0
 8020d6c:	2300      	movs	r3, #0
 8020d6e:	f7df fedd 	bl	8000b2c <__aeabi_dcmpgt>
 8020d72:	2800      	cmp	r0, #0
 8020d74:	d0bf      	beq.n	8020cf6 <floor+0x46>
 8020d76:	2c00      	cmp	r4, #0
 8020d78:	da02      	bge.n	8020d80 <floor+0xd0>
 8020d7a:	2e14      	cmp	r6, #20
 8020d7c:	d103      	bne.n	8020d86 <floor+0xd6>
 8020d7e:	3401      	adds	r4, #1
 8020d80:	ea25 0507 	bic.w	r5, r5, r7
 8020d84:	e7b7      	b.n	8020cf6 <floor+0x46>
 8020d86:	2301      	movs	r3, #1
 8020d88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8020d8c:	fa03 f606 	lsl.w	r6, r3, r6
 8020d90:	4435      	add	r5, r6
 8020d92:	4545      	cmp	r5, r8
 8020d94:	bf38      	it	cc
 8020d96:	18e4      	addcc	r4, r4, r3
 8020d98:	e7f2      	b.n	8020d80 <floor+0xd0>
 8020d9a:	2500      	movs	r5, #0
 8020d9c:	462c      	mov	r4, r5
 8020d9e:	e7aa      	b.n	8020cf6 <floor+0x46>
 8020da0:	8800759c 	.word	0x8800759c
 8020da4:	7e37e43c 	.word	0x7e37e43c
 8020da8:	bff00000 	.word	0xbff00000
 8020dac:	000fffff 	.word	0x000fffff

08020db0 <frexp>:
 8020db0:	b570      	push	{r4, r5, r6, lr}
 8020db2:	2100      	movs	r1, #0
 8020db4:	ec55 4b10 	vmov	r4, r5, d0
 8020db8:	6001      	str	r1, [r0, #0]
 8020dba:	4916      	ldr	r1, [pc, #88]	; (8020e14 <frexp+0x64>)
 8020dbc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8020dc0:	428a      	cmp	r2, r1
 8020dc2:	4606      	mov	r6, r0
 8020dc4:	462b      	mov	r3, r5
 8020dc6:	dc22      	bgt.n	8020e0e <frexp+0x5e>
 8020dc8:	ee10 1a10 	vmov	r1, s0
 8020dcc:	4311      	orrs	r1, r2
 8020dce:	d01e      	beq.n	8020e0e <frexp+0x5e>
 8020dd0:	4911      	ldr	r1, [pc, #68]	; (8020e18 <frexp+0x68>)
 8020dd2:	4029      	ands	r1, r5
 8020dd4:	b969      	cbnz	r1, 8020df2 <frexp+0x42>
 8020dd6:	4b11      	ldr	r3, [pc, #68]	; (8020e1c <frexp+0x6c>)
 8020dd8:	2200      	movs	r2, #0
 8020dda:	ee10 0a10 	vmov	r0, s0
 8020dde:	4629      	mov	r1, r5
 8020de0:	f7df fc14 	bl	800060c <__aeabi_dmul>
 8020de4:	460b      	mov	r3, r1
 8020de6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8020dea:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8020dee:	4604      	mov	r4, r0
 8020df0:	6031      	str	r1, [r6, #0]
 8020df2:	6831      	ldr	r1, [r6, #0]
 8020df4:	1512      	asrs	r2, r2, #20
 8020df6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020dfa:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8020dfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020e02:	440a      	add	r2, r1
 8020e04:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8020e08:	6032      	str	r2, [r6, #0]
 8020e0a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8020e0e:	ec45 4b10 	vmov	d0, r4, r5
 8020e12:	bd70      	pop	{r4, r5, r6, pc}
 8020e14:	7fefffff 	.word	0x7fefffff
 8020e18:	7ff00000 	.word	0x7ff00000
 8020e1c:	43500000 	.word	0x43500000

08020e20 <round>:
 8020e20:	ec51 0b10 	vmov	r0, r1, d0
 8020e24:	b570      	push	{r4, r5, r6, lr}
 8020e26:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8020e2a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8020e2e:	2c13      	cmp	r4, #19
 8020e30:	ee10 2a10 	vmov	r2, s0
 8020e34:	460b      	mov	r3, r1
 8020e36:	dc19      	bgt.n	8020e6c <round+0x4c>
 8020e38:	2c00      	cmp	r4, #0
 8020e3a:	da09      	bge.n	8020e50 <round+0x30>
 8020e3c:	3401      	adds	r4, #1
 8020e3e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8020e42:	d103      	bne.n	8020e4c <round+0x2c>
 8020e44:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8020e48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8020e4c:	2200      	movs	r2, #0
 8020e4e:	e028      	b.n	8020ea2 <round+0x82>
 8020e50:	4d15      	ldr	r5, [pc, #84]	; (8020ea8 <round+0x88>)
 8020e52:	4125      	asrs	r5, r4
 8020e54:	ea01 0605 	and.w	r6, r1, r5
 8020e58:	4332      	orrs	r2, r6
 8020e5a:	d00e      	beq.n	8020e7a <round+0x5a>
 8020e5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8020e60:	fa42 f404 	asr.w	r4, r2, r4
 8020e64:	4423      	add	r3, r4
 8020e66:	ea23 0305 	bic.w	r3, r3, r5
 8020e6a:	e7ef      	b.n	8020e4c <round+0x2c>
 8020e6c:	2c33      	cmp	r4, #51	; 0x33
 8020e6e:	dd07      	ble.n	8020e80 <round+0x60>
 8020e70:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8020e74:	d101      	bne.n	8020e7a <round+0x5a>
 8020e76:	f7df fa13 	bl	80002a0 <__adddf3>
 8020e7a:	ec41 0b10 	vmov	d0, r0, r1
 8020e7e:	bd70      	pop	{r4, r5, r6, pc}
 8020e80:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8020e84:	f04f 35ff 	mov.w	r5, #4294967295
 8020e88:	40f5      	lsrs	r5, r6
 8020e8a:	4228      	tst	r0, r5
 8020e8c:	d0f5      	beq.n	8020e7a <round+0x5a>
 8020e8e:	2101      	movs	r1, #1
 8020e90:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8020e94:	fa01 f404 	lsl.w	r4, r1, r4
 8020e98:	1912      	adds	r2, r2, r4
 8020e9a:	bf28      	it	cs
 8020e9c:	185b      	addcs	r3, r3, r1
 8020e9e:	ea22 0205 	bic.w	r2, r2, r5
 8020ea2:	4619      	mov	r1, r3
 8020ea4:	4610      	mov	r0, r2
 8020ea6:	e7e8      	b.n	8020e7a <round+0x5a>
 8020ea8:	000fffff 	.word	0x000fffff
 8020eac:	00000000 	.word	0x00000000

08020eb0 <sin>:
 8020eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020eb2:	ec53 2b10 	vmov	r2, r3, d0
 8020eb6:	4828      	ldr	r0, [pc, #160]	; (8020f58 <sin+0xa8>)
 8020eb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020ebc:	4281      	cmp	r1, r0
 8020ebe:	dc07      	bgt.n	8020ed0 <sin+0x20>
 8020ec0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8020f50 <sin+0xa0>
 8020ec4:	2000      	movs	r0, #0
 8020ec6:	b005      	add	sp, #20
 8020ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ecc:	f002 b804 	b.w	8022ed8 <__kernel_sin>
 8020ed0:	4822      	ldr	r0, [pc, #136]	; (8020f5c <sin+0xac>)
 8020ed2:	4281      	cmp	r1, r0
 8020ed4:	dd09      	ble.n	8020eea <sin+0x3a>
 8020ed6:	ee10 0a10 	vmov	r0, s0
 8020eda:	4619      	mov	r1, r3
 8020edc:	f7df f9de 	bl	800029c <__aeabi_dsub>
 8020ee0:	ec41 0b10 	vmov	d0, r0, r1
 8020ee4:	b005      	add	sp, #20
 8020ee6:	f85d fb04 	ldr.w	pc, [sp], #4
 8020eea:	4668      	mov	r0, sp
 8020eec:	f000 ff04 	bl	8021cf8 <__ieee754_rem_pio2>
 8020ef0:	f000 0003 	and.w	r0, r0, #3
 8020ef4:	2801      	cmp	r0, #1
 8020ef6:	d00c      	beq.n	8020f12 <sin+0x62>
 8020ef8:	2802      	cmp	r0, #2
 8020efa:	d011      	beq.n	8020f20 <sin+0x70>
 8020efc:	b9f0      	cbnz	r0, 8020f3c <sin+0x8c>
 8020efe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020f02:	ed9d 0b00 	vldr	d0, [sp]
 8020f06:	2001      	movs	r0, #1
 8020f08:	f001 ffe6 	bl	8022ed8 <__kernel_sin>
 8020f0c:	ec51 0b10 	vmov	r0, r1, d0
 8020f10:	e7e6      	b.n	8020ee0 <sin+0x30>
 8020f12:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020f16:	ed9d 0b00 	vldr	d0, [sp]
 8020f1a:	f001 fbc5 	bl	80226a8 <__kernel_cos>
 8020f1e:	e7f5      	b.n	8020f0c <sin+0x5c>
 8020f20:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020f24:	ed9d 0b00 	vldr	d0, [sp]
 8020f28:	2001      	movs	r0, #1
 8020f2a:	f001 ffd5 	bl	8022ed8 <__kernel_sin>
 8020f2e:	ec53 2b10 	vmov	r2, r3, d0
 8020f32:	ee10 0a10 	vmov	r0, s0
 8020f36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020f3a:	e7d1      	b.n	8020ee0 <sin+0x30>
 8020f3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020f40:	ed9d 0b00 	vldr	d0, [sp]
 8020f44:	f001 fbb0 	bl	80226a8 <__kernel_cos>
 8020f48:	e7f1      	b.n	8020f2e <sin+0x7e>
 8020f4a:	bf00      	nop
 8020f4c:	f3af 8000 	nop.w
	...
 8020f58:	3fe921fb 	.word	0x3fe921fb
 8020f5c:	7fefffff 	.word	0x7fefffff

08020f60 <tan>:
 8020f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020f62:	ec53 2b10 	vmov	r2, r3, d0
 8020f66:	4816      	ldr	r0, [pc, #88]	; (8020fc0 <tan+0x60>)
 8020f68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020f6c:	4281      	cmp	r1, r0
 8020f6e:	dc07      	bgt.n	8020f80 <tan+0x20>
 8020f70:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8020fb8 <tan+0x58>
 8020f74:	2001      	movs	r0, #1
 8020f76:	b005      	add	sp, #20
 8020f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8020f7c:	f002 b86c 	b.w	8023058 <__kernel_tan>
 8020f80:	4810      	ldr	r0, [pc, #64]	; (8020fc4 <tan+0x64>)
 8020f82:	4281      	cmp	r1, r0
 8020f84:	dd09      	ble.n	8020f9a <tan+0x3a>
 8020f86:	ee10 0a10 	vmov	r0, s0
 8020f8a:	4619      	mov	r1, r3
 8020f8c:	f7df f986 	bl	800029c <__aeabi_dsub>
 8020f90:	ec41 0b10 	vmov	d0, r0, r1
 8020f94:	b005      	add	sp, #20
 8020f96:	f85d fb04 	ldr.w	pc, [sp], #4
 8020f9a:	4668      	mov	r0, sp
 8020f9c:	f000 feac 	bl	8021cf8 <__ieee754_rem_pio2>
 8020fa0:	0040      	lsls	r0, r0, #1
 8020fa2:	f000 0002 	and.w	r0, r0, #2
 8020fa6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020faa:	ed9d 0b00 	vldr	d0, [sp]
 8020fae:	f1c0 0001 	rsb	r0, r0, #1
 8020fb2:	f002 f851 	bl	8023058 <__kernel_tan>
 8020fb6:	e7ed      	b.n	8020f94 <tan+0x34>
	...
 8020fc0:	3fe921fb 	.word	0x3fe921fb
 8020fc4:	7fefffff 	.word	0x7fefffff

08020fc8 <frexpf>:
 8020fc8:	ee10 3a10 	vmov	r3, s0
 8020fcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020fd0:	2100      	movs	r1, #0
 8020fd2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8020fd6:	6001      	str	r1, [r0, #0]
 8020fd8:	da19      	bge.n	802100e <frexpf+0x46>
 8020fda:	b1c2      	cbz	r2, 802100e <frexpf+0x46>
 8020fdc:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8020fe0:	d10a      	bne.n	8020ff8 <frexpf+0x30>
 8020fe2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8021010 <frexpf+0x48>
 8020fe6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8020fea:	f06f 0118 	mvn.w	r1, #24
 8020fee:	ee17 3a90 	vmov	r3, s15
 8020ff2:	6001      	str	r1, [r0, #0]
 8020ff4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020ff8:	6801      	ldr	r1, [r0, #0]
 8020ffa:	15d2      	asrs	r2, r2, #23
 8020ffc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8021000:	3a7e      	subs	r2, #126	; 0x7e
 8021002:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8021006:	440a      	add	r2, r1
 8021008:	ee00 3a10 	vmov	s0, r3
 802100c:	6002      	str	r2, [r0, #0]
 802100e:	4770      	bx	lr
 8021010:	4c000000 	.word	0x4c000000

08021014 <roundf>:
 8021014:	ee10 0a10 	vmov	r0, s0
 8021018:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 802101c:	3a7f      	subs	r2, #127	; 0x7f
 802101e:	2a16      	cmp	r2, #22
 8021020:	dc15      	bgt.n	802104e <roundf+0x3a>
 8021022:	2a00      	cmp	r2, #0
 8021024:	da08      	bge.n	8021038 <roundf+0x24>
 8021026:	3201      	adds	r2, #1
 8021028:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 802102c:	d101      	bne.n	8021032 <roundf+0x1e>
 802102e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8021032:	ee00 3a10 	vmov	s0, r3
 8021036:	4770      	bx	lr
 8021038:	4907      	ldr	r1, [pc, #28]	; (8021058 <roundf+0x44>)
 802103a:	4111      	asrs	r1, r2
 802103c:	4208      	tst	r0, r1
 802103e:	d0fa      	beq.n	8021036 <roundf+0x22>
 8021040:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021044:	4113      	asrs	r3, r2
 8021046:	4403      	add	r3, r0
 8021048:	ea23 0301 	bic.w	r3, r3, r1
 802104c:	e7f1      	b.n	8021032 <roundf+0x1e>
 802104e:	2a80      	cmp	r2, #128	; 0x80
 8021050:	d1f1      	bne.n	8021036 <roundf+0x22>
 8021052:	ee30 0a00 	vadd.f32	s0, s0, s0
 8021056:	4770      	bx	lr
 8021058:	007fffff 	.word	0x007fffff

0802105c <pow>:
 802105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802105e:	ed2d 8b02 	vpush	{d8}
 8021062:	eeb0 8a40 	vmov.f32	s16, s0
 8021066:	eef0 8a60 	vmov.f32	s17, s1
 802106a:	ec55 4b11 	vmov	r4, r5, d1
 802106e:	f000 f913 	bl	8021298 <__ieee754_pow>
 8021072:	4622      	mov	r2, r4
 8021074:	462b      	mov	r3, r5
 8021076:	4620      	mov	r0, r4
 8021078:	4629      	mov	r1, r5
 802107a:	ec57 6b10 	vmov	r6, r7, d0
 802107e:	f7df fd5f 	bl	8000b40 <__aeabi_dcmpun>
 8021082:	2800      	cmp	r0, #0
 8021084:	d13b      	bne.n	80210fe <pow+0xa2>
 8021086:	ec51 0b18 	vmov	r0, r1, d8
 802108a:	2200      	movs	r2, #0
 802108c:	2300      	movs	r3, #0
 802108e:	f7df fd25 	bl	8000adc <__aeabi_dcmpeq>
 8021092:	b1b8      	cbz	r0, 80210c4 <pow+0x68>
 8021094:	2200      	movs	r2, #0
 8021096:	2300      	movs	r3, #0
 8021098:	4620      	mov	r0, r4
 802109a:	4629      	mov	r1, r5
 802109c:	f7df fd1e 	bl	8000adc <__aeabi_dcmpeq>
 80210a0:	2800      	cmp	r0, #0
 80210a2:	d146      	bne.n	8021132 <pow+0xd6>
 80210a4:	ec45 4b10 	vmov	d0, r4, r5
 80210a8:	f002 fa3b 	bl	8023522 <finite>
 80210ac:	b338      	cbz	r0, 80210fe <pow+0xa2>
 80210ae:	2200      	movs	r2, #0
 80210b0:	2300      	movs	r3, #0
 80210b2:	4620      	mov	r0, r4
 80210b4:	4629      	mov	r1, r5
 80210b6:	f7df fd1b 	bl	8000af0 <__aeabi_dcmplt>
 80210ba:	b300      	cbz	r0, 80210fe <pow+0xa2>
 80210bc:	f002 fb10 	bl	80236e0 <__errno>
 80210c0:	2322      	movs	r3, #34	; 0x22
 80210c2:	e01b      	b.n	80210fc <pow+0xa0>
 80210c4:	ec47 6b10 	vmov	d0, r6, r7
 80210c8:	f002 fa2b 	bl	8023522 <finite>
 80210cc:	b9e0      	cbnz	r0, 8021108 <pow+0xac>
 80210ce:	eeb0 0a48 	vmov.f32	s0, s16
 80210d2:	eef0 0a68 	vmov.f32	s1, s17
 80210d6:	f002 fa24 	bl	8023522 <finite>
 80210da:	b1a8      	cbz	r0, 8021108 <pow+0xac>
 80210dc:	ec45 4b10 	vmov	d0, r4, r5
 80210e0:	f002 fa1f 	bl	8023522 <finite>
 80210e4:	b180      	cbz	r0, 8021108 <pow+0xac>
 80210e6:	4632      	mov	r2, r6
 80210e8:	463b      	mov	r3, r7
 80210ea:	4630      	mov	r0, r6
 80210ec:	4639      	mov	r1, r7
 80210ee:	f7df fd27 	bl	8000b40 <__aeabi_dcmpun>
 80210f2:	2800      	cmp	r0, #0
 80210f4:	d0e2      	beq.n	80210bc <pow+0x60>
 80210f6:	f002 faf3 	bl	80236e0 <__errno>
 80210fa:	2321      	movs	r3, #33	; 0x21
 80210fc:	6003      	str	r3, [r0, #0]
 80210fe:	ecbd 8b02 	vpop	{d8}
 8021102:	ec47 6b10 	vmov	d0, r6, r7
 8021106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021108:	2200      	movs	r2, #0
 802110a:	2300      	movs	r3, #0
 802110c:	4630      	mov	r0, r6
 802110e:	4639      	mov	r1, r7
 8021110:	f7df fce4 	bl	8000adc <__aeabi_dcmpeq>
 8021114:	2800      	cmp	r0, #0
 8021116:	d0f2      	beq.n	80210fe <pow+0xa2>
 8021118:	eeb0 0a48 	vmov.f32	s0, s16
 802111c:	eef0 0a68 	vmov.f32	s1, s17
 8021120:	f002 f9ff 	bl	8023522 <finite>
 8021124:	2800      	cmp	r0, #0
 8021126:	d0ea      	beq.n	80210fe <pow+0xa2>
 8021128:	ec45 4b10 	vmov	d0, r4, r5
 802112c:	f002 f9f9 	bl	8023522 <finite>
 8021130:	e7c3      	b.n	80210ba <pow+0x5e>
 8021132:	4f01      	ldr	r7, [pc, #4]	; (8021138 <pow+0xdc>)
 8021134:	2600      	movs	r6, #0
 8021136:	e7e2      	b.n	80210fe <pow+0xa2>
 8021138:	3ff00000 	.word	0x3ff00000

0802113c <sqrt>:
 802113c:	b538      	push	{r3, r4, r5, lr}
 802113e:	ed2d 8b02 	vpush	{d8}
 8021142:	ec55 4b10 	vmov	r4, r5, d0
 8021146:	f000 ffe3 	bl	8022110 <__ieee754_sqrt>
 802114a:	4622      	mov	r2, r4
 802114c:	462b      	mov	r3, r5
 802114e:	4620      	mov	r0, r4
 8021150:	4629      	mov	r1, r5
 8021152:	eeb0 8a40 	vmov.f32	s16, s0
 8021156:	eef0 8a60 	vmov.f32	s17, s1
 802115a:	f7df fcf1 	bl	8000b40 <__aeabi_dcmpun>
 802115e:	b990      	cbnz	r0, 8021186 <sqrt+0x4a>
 8021160:	2200      	movs	r2, #0
 8021162:	2300      	movs	r3, #0
 8021164:	4620      	mov	r0, r4
 8021166:	4629      	mov	r1, r5
 8021168:	f7df fcc2 	bl	8000af0 <__aeabi_dcmplt>
 802116c:	b158      	cbz	r0, 8021186 <sqrt+0x4a>
 802116e:	f002 fab7 	bl	80236e0 <__errno>
 8021172:	2321      	movs	r3, #33	; 0x21
 8021174:	6003      	str	r3, [r0, #0]
 8021176:	2200      	movs	r2, #0
 8021178:	2300      	movs	r3, #0
 802117a:	4610      	mov	r0, r2
 802117c:	4619      	mov	r1, r3
 802117e:	f7df fb6f 	bl	8000860 <__aeabi_ddiv>
 8021182:	ec41 0b18 	vmov	d8, r0, r1
 8021186:	eeb0 0a48 	vmov.f32	s0, s16
 802118a:	eef0 0a68 	vmov.f32	s1, s17
 802118e:	ecbd 8b02 	vpop	{d8}
 8021192:	bd38      	pop	{r3, r4, r5, pc}

08021194 <expf>:
 8021194:	b508      	push	{r3, lr}
 8021196:	ed2d 8b02 	vpush	{d8}
 802119a:	eef0 8a40 	vmov.f32	s17, s0
 802119e:	f001 f869 	bl	8022274 <__ieee754_expf>
 80211a2:	eeb0 8a40 	vmov.f32	s16, s0
 80211a6:	eeb0 0a68 	vmov.f32	s0, s17
 80211aa:	f002 fa53 	bl	8023654 <finitef>
 80211ae:	b160      	cbz	r0, 80211ca <expf+0x36>
 80211b0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80211f0 <expf+0x5c>
 80211b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80211b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211bc:	dd0a      	ble.n	80211d4 <expf+0x40>
 80211be:	f002 fa8f 	bl	80236e0 <__errno>
 80211c2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80211f4 <expf+0x60>
 80211c6:	2322      	movs	r3, #34	; 0x22
 80211c8:	6003      	str	r3, [r0, #0]
 80211ca:	eeb0 0a48 	vmov.f32	s0, s16
 80211ce:	ecbd 8b02 	vpop	{d8}
 80211d2:	bd08      	pop	{r3, pc}
 80211d4:	eddf 7a08 	vldr	s15, [pc, #32]	; 80211f8 <expf+0x64>
 80211d8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80211dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211e0:	d5f3      	bpl.n	80211ca <expf+0x36>
 80211e2:	f002 fa7d 	bl	80236e0 <__errno>
 80211e6:	2322      	movs	r3, #34	; 0x22
 80211e8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80211fc <expf+0x68>
 80211ec:	6003      	str	r3, [r0, #0]
 80211ee:	e7ec      	b.n	80211ca <expf+0x36>
 80211f0:	42b17180 	.word	0x42b17180
 80211f4:	7f800000 	.word	0x7f800000
 80211f8:	c2cff1b5 	.word	0xc2cff1b5
 80211fc:	00000000 	.word	0x00000000

08021200 <log10f>:
 8021200:	b508      	push	{r3, lr}
 8021202:	ed2d 8b02 	vpush	{d8}
 8021206:	eeb0 8a40 	vmov.f32	s16, s0
 802120a:	f001 f9f1 	bl	80225f0 <__ieee754_log10f>
 802120e:	eeb4 8a48 	vcmp.f32	s16, s16
 8021212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021216:	d60f      	bvs.n	8021238 <log10f+0x38>
 8021218:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021220:	d80a      	bhi.n	8021238 <log10f+0x38>
 8021222:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8021226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802122a:	d108      	bne.n	802123e <log10f+0x3e>
 802122c:	f002 fa58 	bl	80236e0 <__errno>
 8021230:	2322      	movs	r3, #34	; 0x22
 8021232:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8021254 <log10f+0x54>
 8021236:	6003      	str	r3, [r0, #0]
 8021238:	ecbd 8b02 	vpop	{d8}
 802123c:	bd08      	pop	{r3, pc}
 802123e:	f002 fa4f 	bl	80236e0 <__errno>
 8021242:	ecbd 8b02 	vpop	{d8}
 8021246:	2321      	movs	r3, #33	; 0x21
 8021248:	6003      	str	r3, [r0, #0]
 802124a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802124e:	4802      	ldr	r0, [pc, #8]	; (8021258 <log10f+0x58>)
 8021250:	f002 ba0e 	b.w	8023670 <nanf>
 8021254:	ff800000 	.word	0xff800000
 8021258:	08029f9b 	.word	0x08029f9b

0802125c <sqrtf>:
 802125c:	b508      	push	{r3, lr}
 802125e:	ed2d 8b02 	vpush	{d8}
 8021262:	eeb0 8a40 	vmov.f32	s16, s0
 8021266:	f001 fa1b 	bl	80226a0 <__ieee754_sqrtf>
 802126a:	eeb4 8a48 	vcmp.f32	s16, s16
 802126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021272:	d60c      	bvs.n	802128e <sqrtf+0x32>
 8021274:	eddf 8a07 	vldr	s17, [pc, #28]	; 8021294 <sqrtf+0x38>
 8021278:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021280:	d505      	bpl.n	802128e <sqrtf+0x32>
 8021282:	f002 fa2d 	bl	80236e0 <__errno>
 8021286:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802128a:	2321      	movs	r3, #33	; 0x21
 802128c:	6003      	str	r3, [r0, #0]
 802128e:	ecbd 8b02 	vpop	{d8}
 8021292:	bd08      	pop	{r3, pc}
 8021294:	00000000 	.word	0x00000000

08021298 <__ieee754_pow>:
 8021298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802129c:	ed2d 8b06 	vpush	{d8-d10}
 80212a0:	b089      	sub	sp, #36	; 0x24
 80212a2:	ed8d 1b00 	vstr	d1, [sp]
 80212a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80212aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80212ae:	ea58 0102 	orrs.w	r1, r8, r2
 80212b2:	ec57 6b10 	vmov	r6, r7, d0
 80212b6:	d115      	bne.n	80212e4 <__ieee754_pow+0x4c>
 80212b8:	19b3      	adds	r3, r6, r6
 80212ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80212be:	4152      	adcs	r2, r2
 80212c0:	4299      	cmp	r1, r3
 80212c2:	4b89      	ldr	r3, [pc, #548]	; (80214e8 <__ieee754_pow+0x250>)
 80212c4:	4193      	sbcs	r3, r2
 80212c6:	f080 84d2 	bcs.w	8021c6e <__ieee754_pow+0x9d6>
 80212ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80212ce:	4630      	mov	r0, r6
 80212d0:	4639      	mov	r1, r7
 80212d2:	f7de ffe5 	bl	80002a0 <__adddf3>
 80212d6:	ec41 0b10 	vmov	d0, r0, r1
 80212da:	b009      	add	sp, #36	; 0x24
 80212dc:	ecbd 8b06 	vpop	{d8-d10}
 80212e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212e4:	4b81      	ldr	r3, [pc, #516]	; (80214ec <__ieee754_pow+0x254>)
 80212e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80212ea:	429c      	cmp	r4, r3
 80212ec:	ee10 aa10 	vmov	sl, s0
 80212f0:	463d      	mov	r5, r7
 80212f2:	dc06      	bgt.n	8021302 <__ieee754_pow+0x6a>
 80212f4:	d101      	bne.n	80212fa <__ieee754_pow+0x62>
 80212f6:	2e00      	cmp	r6, #0
 80212f8:	d1e7      	bne.n	80212ca <__ieee754_pow+0x32>
 80212fa:	4598      	cmp	r8, r3
 80212fc:	dc01      	bgt.n	8021302 <__ieee754_pow+0x6a>
 80212fe:	d10f      	bne.n	8021320 <__ieee754_pow+0x88>
 8021300:	b172      	cbz	r2, 8021320 <__ieee754_pow+0x88>
 8021302:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8021306:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 802130a:	ea55 050a 	orrs.w	r5, r5, sl
 802130e:	d1dc      	bne.n	80212ca <__ieee754_pow+0x32>
 8021310:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021314:	18db      	adds	r3, r3, r3
 8021316:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 802131a:	4152      	adcs	r2, r2
 802131c:	429d      	cmp	r5, r3
 802131e:	e7d0      	b.n	80212c2 <__ieee754_pow+0x2a>
 8021320:	2d00      	cmp	r5, #0
 8021322:	da3b      	bge.n	802139c <__ieee754_pow+0x104>
 8021324:	4b72      	ldr	r3, [pc, #456]	; (80214f0 <__ieee754_pow+0x258>)
 8021326:	4598      	cmp	r8, r3
 8021328:	dc51      	bgt.n	80213ce <__ieee754_pow+0x136>
 802132a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802132e:	4598      	cmp	r8, r3
 8021330:	f340 84ac 	ble.w	8021c8c <__ieee754_pow+0x9f4>
 8021334:	ea4f 5328 	mov.w	r3, r8, asr #20
 8021338:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802133c:	2b14      	cmp	r3, #20
 802133e:	dd0f      	ble.n	8021360 <__ieee754_pow+0xc8>
 8021340:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8021344:	fa22 f103 	lsr.w	r1, r2, r3
 8021348:	fa01 f303 	lsl.w	r3, r1, r3
 802134c:	4293      	cmp	r3, r2
 802134e:	f040 849d 	bne.w	8021c8c <__ieee754_pow+0x9f4>
 8021352:	f001 0101 	and.w	r1, r1, #1
 8021356:	f1c1 0302 	rsb	r3, r1, #2
 802135a:	9304      	str	r3, [sp, #16]
 802135c:	b182      	cbz	r2, 8021380 <__ieee754_pow+0xe8>
 802135e:	e05f      	b.n	8021420 <__ieee754_pow+0x188>
 8021360:	2a00      	cmp	r2, #0
 8021362:	d15b      	bne.n	802141c <__ieee754_pow+0x184>
 8021364:	f1c3 0314 	rsb	r3, r3, #20
 8021368:	fa48 f103 	asr.w	r1, r8, r3
 802136c:	fa01 f303 	lsl.w	r3, r1, r3
 8021370:	4543      	cmp	r3, r8
 8021372:	f040 8488 	bne.w	8021c86 <__ieee754_pow+0x9ee>
 8021376:	f001 0101 	and.w	r1, r1, #1
 802137a:	f1c1 0302 	rsb	r3, r1, #2
 802137e:	9304      	str	r3, [sp, #16]
 8021380:	4b5c      	ldr	r3, [pc, #368]	; (80214f4 <__ieee754_pow+0x25c>)
 8021382:	4598      	cmp	r8, r3
 8021384:	d132      	bne.n	80213ec <__ieee754_pow+0x154>
 8021386:	f1b9 0f00 	cmp.w	r9, #0
 802138a:	f280 8478 	bge.w	8021c7e <__ieee754_pow+0x9e6>
 802138e:	4959      	ldr	r1, [pc, #356]	; (80214f4 <__ieee754_pow+0x25c>)
 8021390:	4632      	mov	r2, r6
 8021392:	463b      	mov	r3, r7
 8021394:	2000      	movs	r0, #0
 8021396:	f7df fa63 	bl	8000860 <__aeabi_ddiv>
 802139a:	e79c      	b.n	80212d6 <__ieee754_pow+0x3e>
 802139c:	2300      	movs	r3, #0
 802139e:	9304      	str	r3, [sp, #16]
 80213a0:	2a00      	cmp	r2, #0
 80213a2:	d13d      	bne.n	8021420 <__ieee754_pow+0x188>
 80213a4:	4b51      	ldr	r3, [pc, #324]	; (80214ec <__ieee754_pow+0x254>)
 80213a6:	4598      	cmp	r8, r3
 80213a8:	d1ea      	bne.n	8021380 <__ieee754_pow+0xe8>
 80213aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80213ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80213b2:	ea53 030a 	orrs.w	r3, r3, sl
 80213b6:	f000 845a 	beq.w	8021c6e <__ieee754_pow+0x9d6>
 80213ba:	4b4f      	ldr	r3, [pc, #316]	; (80214f8 <__ieee754_pow+0x260>)
 80213bc:	429c      	cmp	r4, r3
 80213be:	dd08      	ble.n	80213d2 <__ieee754_pow+0x13a>
 80213c0:	f1b9 0f00 	cmp.w	r9, #0
 80213c4:	f2c0 8457 	blt.w	8021c76 <__ieee754_pow+0x9de>
 80213c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80213cc:	e783      	b.n	80212d6 <__ieee754_pow+0x3e>
 80213ce:	2302      	movs	r3, #2
 80213d0:	e7e5      	b.n	802139e <__ieee754_pow+0x106>
 80213d2:	f1b9 0f00 	cmp.w	r9, #0
 80213d6:	f04f 0000 	mov.w	r0, #0
 80213da:	f04f 0100 	mov.w	r1, #0
 80213de:	f6bf af7a 	bge.w	80212d6 <__ieee754_pow+0x3e>
 80213e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80213e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80213ea:	e774      	b.n	80212d6 <__ieee754_pow+0x3e>
 80213ec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80213f0:	d106      	bne.n	8021400 <__ieee754_pow+0x168>
 80213f2:	4632      	mov	r2, r6
 80213f4:	463b      	mov	r3, r7
 80213f6:	4630      	mov	r0, r6
 80213f8:	4639      	mov	r1, r7
 80213fa:	f7df f907 	bl	800060c <__aeabi_dmul>
 80213fe:	e76a      	b.n	80212d6 <__ieee754_pow+0x3e>
 8021400:	4b3e      	ldr	r3, [pc, #248]	; (80214fc <__ieee754_pow+0x264>)
 8021402:	4599      	cmp	r9, r3
 8021404:	d10c      	bne.n	8021420 <__ieee754_pow+0x188>
 8021406:	2d00      	cmp	r5, #0
 8021408:	db0a      	blt.n	8021420 <__ieee754_pow+0x188>
 802140a:	ec47 6b10 	vmov	d0, r6, r7
 802140e:	b009      	add	sp, #36	; 0x24
 8021410:	ecbd 8b06 	vpop	{d8-d10}
 8021414:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021418:	f000 be7a 	b.w	8022110 <__ieee754_sqrt>
 802141c:	2300      	movs	r3, #0
 802141e:	9304      	str	r3, [sp, #16]
 8021420:	ec47 6b10 	vmov	d0, r6, r7
 8021424:	f002 f874 	bl	8023510 <fabs>
 8021428:	ec51 0b10 	vmov	r0, r1, d0
 802142c:	f1ba 0f00 	cmp.w	sl, #0
 8021430:	d129      	bne.n	8021486 <__ieee754_pow+0x1ee>
 8021432:	b124      	cbz	r4, 802143e <__ieee754_pow+0x1a6>
 8021434:	4b2f      	ldr	r3, [pc, #188]	; (80214f4 <__ieee754_pow+0x25c>)
 8021436:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 802143a:	429a      	cmp	r2, r3
 802143c:	d123      	bne.n	8021486 <__ieee754_pow+0x1ee>
 802143e:	f1b9 0f00 	cmp.w	r9, #0
 8021442:	da05      	bge.n	8021450 <__ieee754_pow+0x1b8>
 8021444:	4602      	mov	r2, r0
 8021446:	460b      	mov	r3, r1
 8021448:	2000      	movs	r0, #0
 802144a:	492a      	ldr	r1, [pc, #168]	; (80214f4 <__ieee754_pow+0x25c>)
 802144c:	f7df fa08 	bl	8000860 <__aeabi_ddiv>
 8021450:	2d00      	cmp	r5, #0
 8021452:	f6bf af40 	bge.w	80212d6 <__ieee754_pow+0x3e>
 8021456:	9b04      	ldr	r3, [sp, #16]
 8021458:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802145c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8021460:	4323      	orrs	r3, r4
 8021462:	d108      	bne.n	8021476 <__ieee754_pow+0x1de>
 8021464:	4602      	mov	r2, r0
 8021466:	460b      	mov	r3, r1
 8021468:	4610      	mov	r0, r2
 802146a:	4619      	mov	r1, r3
 802146c:	f7de ff16 	bl	800029c <__aeabi_dsub>
 8021470:	4602      	mov	r2, r0
 8021472:	460b      	mov	r3, r1
 8021474:	e78f      	b.n	8021396 <__ieee754_pow+0xfe>
 8021476:	9b04      	ldr	r3, [sp, #16]
 8021478:	2b01      	cmp	r3, #1
 802147a:	f47f af2c 	bne.w	80212d6 <__ieee754_pow+0x3e>
 802147e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021482:	4619      	mov	r1, r3
 8021484:	e727      	b.n	80212d6 <__ieee754_pow+0x3e>
 8021486:	0feb      	lsrs	r3, r5, #31
 8021488:	3b01      	subs	r3, #1
 802148a:	9306      	str	r3, [sp, #24]
 802148c:	9a06      	ldr	r2, [sp, #24]
 802148e:	9b04      	ldr	r3, [sp, #16]
 8021490:	4313      	orrs	r3, r2
 8021492:	d102      	bne.n	802149a <__ieee754_pow+0x202>
 8021494:	4632      	mov	r2, r6
 8021496:	463b      	mov	r3, r7
 8021498:	e7e6      	b.n	8021468 <__ieee754_pow+0x1d0>
 802149a:	4b19      	ldr	r3, [pc, #100]	; (8021500 <__ieee754_pow+0x268>)
 802149c:	4598      	cmp	r8, r3
 802149e:	f340 80fb 	ble.w	8021698 <__ieee754_pow+0x400>
 80214a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80214a6:	4598      	cmp	r8, r3
 80214a8:	4b13      	ldr	r3, [pc, #76]	; (80214f8 <__ieee754_pow+0x260>)
 80214aa:	dd0c      	ble.n	80214c6 <__ieee754_pow+0x22e>
 80214ac:	429c      	cmp	r4, r3
 80214ae:	dc0f      	bgt.n	80214d0 <__ieee754_pow+0x238>
 80214b0:	f1b9 0f00 	cmp.w	r9, #0
 80214b4:	da0f      	bge.n	80214d6 <__ieee754_pow+0x23e>
 80214b6:	2000      	movs	r0, #0
 80214b8:	b009      	add	sp, #36	; 0x24
 80214ba:	ecbd 8b06 	vpop	{d8-d10}
 80214be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214c2:	f001 bffa 	b.w	80234ba <__math_oflow>
 80214c6:	429c      	cmp	r4, r3
 80214c8:	dbf2      	blt.n	80214b0 <__ieee754_pow+0x218>
 80214ca:	4b0a      	ldr	r3, [pc, #40]	; (80214f4 <__ieee754_pow+0x25c>)
 80214cc:	429c      	cmp	r4, r3
 80214ce:	dd19      	ble.n	8021504 <__ieee754_pow+0x26c>
 80214d0:	f1b9 0f00 	cmp.w	r9, #0
 80214d4:	dcef      	bgt.n	80214b6 <__ieee754_pow+0x21e>
 80214d6:	2000      	movs	r0, #0
 80214d8:	b009      	add	sp, #36	; 0x24
 80214da:	ecbd 8b06 	vpop	{d8-d10}
 80214de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214e2:	f001 bfe1 	b.w	80234a8 <__math_uflow>
 80214e6:	bf00      	nop
 80214e8:	fff00000 	.word	0xfff00000
 80214ec:	7ff00000 	.word	0x7ff00000
 80214f0:	433fffff 	.word	0x433fffff
 80214f4:	3ff00000 	.word	0x3ff00000
 80214f8:	3fefffff 	.word	0x3fefffff
 80214fc:	3fe00000 	.word	0x3fe00000
 8021500:	41e00000 	.word	0x41e00000
 8021504:	4b60      	ldr	r3, [pc, #384]	; (8021688 <__ieee754_pow+0x3f0>)
 8021506:	2200      	movs	r2, #0
 8021508:	f7de fec8 	bl	800029c <__aeabi_dsub>
 802150c:	a354      	add	r3, pc, #336	; (adr r3, 8021660 <__ieee754_pow+0x3c8>)
 802150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021512:	4604      	mov	r4, r0
 8021514:	460d      	mov	r5, r1
 8021516:	f7df f879 	bl	800060c <__aeabi_dmul>
 802151a:	a353      	add	r3, pc, #332	; (adr r3, 8021668 <__ieee754_pow+0x3d0>)
 802151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021520:	4606      	mov	r6, r0
 8021522:	460f      	mov	r7, r1
 8021524:	4620      	mov	r0, r4
 8021526:	4629      	mov	r1, r5
 8021528:	f7df f870 	bl	800060c <__aeabi_dmul>
 802152c:	4b57      	ldr	r3, [pc, #348]	; (802168c <__ieee754_pow+0x3f4>)
 802152e:	4682      	mov	sl, r0
 8021530:	468b      	mov	fp, r1
 8021532:	2200      	movs	r2, #0
 8021534:	4620      	mov	r0, r4
 8021536:	4629      	mov	r1, r5
 8021538:	f7df f868 	bl	800060c <__aeabi_dmul>
 802153c:	4602      	mov	r2, r0
 802153e:	460b      	mov	r3, r1
 8021540:	a14b      	add	r1, pc, #300	; (adr r1, 8021670 <__ieee754_pow+0x3d8>)
 8021542:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021546:	f7de fea9 	bl	800029c <__aeabi_dsub>
 802154a:	4622      	mov	r2, r4
 802154c:	462b      	mov	r3, r5
 802154e:	f7df f85d 	bl	800060c <__aeabi_dmul>
 8021552:	4602      	mov	r2, r0
 8021554:	460b      	mov	r3, r1
 8021556:	2000      	movs	r0, #0
 8021558:	494d      	ldr	r1, [pc, #308]	; (8021690 <__ieee754_pow+0x3f8>)
 802155a:	f7de fe9f 	bl	800029c <__aeabi_dsub>
 802155e:	4622      	mov	r2, r4
 8021560:	4680      	mov	r8, r0
 8021562:	4689      	mov	r9, r1
 8021564:	462b      	mov	r3, r5
 8021566:	4620      	mov	r0, r4
 8021568:	4629      	mov	r1, r5
 802156a:	f7df f84f 	bl	800060c <__aeabi_dmul>
 802156e:	4602      	mov	r2, r0
 8021570:	460b      	mov	r3, r1
 8021572:	4640      	mov	r0, r8
 8021574:	4649      	mov	r1, r9
 8021576:	f7df f849 	bl	800060c <__aeabi_dmul>
 802157a:	a33f      	add	r3, pc, #252	; (adr r3, 8021678 <__ieee754_pow+0x3e0>)
 802157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021580:	f7df f844 	bl	800060c <__aeabi_dmul>
 8021584:	4602      	mov	r2, r0
 8021586:	460b      	mov	r3, r1
 8021588:	4650      	mov	r0, sl
 802158a:	4659      	mov	r1, fp
 802158c:	f7de fe86 	bl	800029c <__aeabi_dsub>
 8021590:	4602      	mov	r2, r0
 8021592:	460b      	mov	r3, r1
 8021594:	4680      	mov	r8, r0
 8021596:	4689      	mov	r9, r1
 8021598:	4630      	mov	r0, r6
 802159a:	4639      	mov	r1, r7
 802159c:	f7de fe80 	bl	80002a0 <__adddf3>
 80215a0:	2000      	movs	r0, #0
 80215a2:	4632      	mov	r2, r6
 80215a4:	463b      	mov	r3, r7
 80215a6:	4604      	mov	r4, r0
 80215a8:	460d      	mov	r5, r1
 80215aa:	f7de fe77 	bl	800029c <__aeabi_dsub>
 80215ae:	4602      	mov	r2, r0
 80215b0:	460b      	mov	r3, r1
 80215b2:	4640      	mov	r0, r8
 80215b4:	4649      	mov	r1, r9
 80215b6:	f7de fe71 	bl	800029c <__aeabi_dsub>
 80215ba:	9b04      	ldr	r3, [sp, #16]
 80215bc:	9a06      	ldr	r2, [sp, #24]
 80215be:	3b01      	subs	r3, #1
 80215c0:	4313      	orrs	r3, r2
 80215c2:	4682      	mov	sl, r0
 80215c4:	468b      	mov	fp, r1
 80215c6:	f040 81e7 	bne.w	8021998 <__ieee754_pow+0x700>
 80215ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8021680 <__ieee754_pow+0x3e8>
 80215ce:	eeb0 8a47 	vmov.f32	s16, s14
 80215d2:	eef0 8a67 	vmov.f32	s17, s15
 80215d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80215da:	2600      	movs	r6, #0
 80215dc:	4632      	mov	r2, r6
 80215de:	463b      	mov	r3, r7
 80215e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80215e4:	f7de fe5a 	bl	800029c <__aeabi_dsub>
 80215e8:	4622      	mov	r2, r4
 80215ea:	462b      	mov	r3, r5
 80215ec:	f7df f80e 	bl	800060c <__aeabi_dmul>
 80215f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80215f4:	4680      	mov	r8, r0
 80215f6:	4689      	mov	r9, r1
 80215f8:	4650      	mov	r0, sl
 80215fa:	4659      	mov	r1, fp
 80215fc:	f7df f806 	bl	800060c <__aeabi_dmul>
 8021600:	4602      	mov	r2, r0
 8021602:	460b      	mov	r3, r1
 8021604:	4640      	mov	r0, r8
 8021606:	4649      	mov	r1, r9
 8021608:	f7de fe4a 	bl	80002a0 <__adddf3>
 802160c:	4632      	mov	r2, r6
 802160e:	463b      	mov	r3, r7
 8021610:	4680      	mov	r8, r0
 8021612:	4689      	mov	r9, r1
 8021614:	4620      	mov	r0, r4
 8021616:	4629      	mov	r1, r5
 8021618:	f7de fff8 	bl	800060c <__aeabi_dmul>
 802161c:	460b      	mov	r3, r1
 802161e:	4604      	mov	r4, r0
 8021620:	460d      	mov	r5, r1
 8021622:	4602      	mov	r2, r0
 8021624:	4649      	mov	r1, r9
 8021626:	4640      	mov	r0, r8
 8021628:	f7de fe3a 	bl	80002a0 <__adddf3>
 802162c:	4b19      	ldr	r3, [pc, #100]	; (8021694 <__ieee754_pow+0x3fc>)
 802162e:	4299      	cmp	r1, r3
 8021630:	ec45 4b19 	vmov	d9, r4, r5
 8021634:	4606      	mov	r6, r0
 8021636:	460f      	mov	r7, r1
 8021638:	468b      	mov	fp, r1
 802163a:	f340 82f1 	ble.w	8021c20 <__ieee754_pow+0x988>
 802163e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8021642:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8021646:	4303      	orrs	r3, r0
 8021648:	f000 81e4 	beq.w	8021a14 <__ieee754_pow+0x77c>
 802164c:	ec51 0b18 	vmov	r0, r1, d8
 8021650:	2200      	movs	r2, #0
 8021652:	2300      	movs	r3, #0
 8021654:	f7df fa4c 	bl	8000af0 <__aeabi_dcmplt>
 8021658:	3800      	subs	r0, #0
 802165a:	bf18      	it	ne
 802165c:	2001      	movne	r0, #1
 802165e:	e72b      	b.n	80214b8 <__ieee754_pow+0x220>
 8021660:	60000000 	.word	0x60000000
 8021664:	3ff71547 	.word	0x3ff71547
 8021668:	f85ddf44 	.word	0xf85ddf44
 802166c:	3e54ae0b 	.word	0x3e54ae0b
 8021670:	55555555 	.word	0x55555555
 8021674:	3fd55555 	.word	0x3fd55555
 8021678:	652b82fe 	.word	0x652b82fe
 802167c:	3ff71547 	.word	0x3ff71547
 8021680:	00000000 	.word	0x00000000
 8021684:	bff00000 	.word	0xbff00000
 8021688:	3ff00000 	.word	0x3ff00000
 802168c:	3fd00000 	.word	0x3fd00000
 8021690:	3fe00000 	.word	0x3fe00000
 8021694:	408fffff 	.word	0x408fffff
 8021698:	4bd5      	ldr	r3, [pc, #852]	; (80219f0 <__ieee754_pow+0x758>)
 802169a:	402b      	ands	r3, r5
 802169c:	2200      	movs	r2, #0
 802169e:	b92b      	cbnz	r3, 80216ac <__ieee754_pow+0x414>
 80216a0:	4bd4      	ldr	r3, [pc, #848]	; (80219f4 <__ieee754_pow+0x75c>)
 80216a2:	f7de ffb3 	bl	800060c <__aeabi_dmul>
 80216a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80216aa:	460c      	mov	r4, r1
 80216ac:	1523      	asrs	r3, r4, #20
 80216ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80216b2:	4413      	add	r3, r2
 80216b4:	9305      	str	r3, [sp, #20]
 80216b6:	4bd0      	ldr	r3, [pc, #832]	; (80219f8 <__ieee754_pow+0x760>)
 80216b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80216bc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80216c0:	429c      	cmp	r4, r3
 80216c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80216c6:	dd08      	ble.n	80216da <__ieee754_pow+0x442>
 80216c8:	4bcc      	ldr	r3, [pc, #816]	; (80219fc <__ieee754_pow+0x764>)
 80216ca:	429c      	cmp	r4, r3
 80216cc:	f340 8162 	ble.w	8021994 <__ieee754_pow+0x6fc>
 80216d0:	9b05      	ldr	r3, [sp, #20]
 80216d2:	3301      	adds	r3, #1
 80216d4:	9305      	str	r3, [sp, #20]
 80216d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80216da:	2400      	movs	r4, #0
 80216dc:	00e3      	lsls	r3, r4, #3
 80216de:	9307      	str	r3, [sp, #28]
 80216e0:	4bc7      	ldr	r3, [pc, #796]	; (8021a00 <__ieee754_pow+0x768>)
 80216e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80216e6:	ed93 7b00 	vldr	d7, [r3]
 80216ea:	4629      	mov	r1, r5
 80216ec:	ec53 2b17 	vmov	r2, r3, d7
 80216f0:	eeb0 9a47 	vmov.f32	s18, s14
 80216f4:	eef0 9a67 	vmov.f32	s19, s15
 80216f8:	4682      	mov	sl, r0
 80216fa:	f7de fdcf 	bl	800029c <__aeabi_dsub>
 80216fe:	4652      	mov	r2, sl
 8021700:	4606      	mov	r6, r0
 8021702:	460f      	mov	r7, r1
 8021704:	462b      	mov	r3, r5
 8021706:	ec51 0b19 	vmov	r0, r1, d9
 802170a:	f7de fdc9 	bl	80002a0 <__adddf3>
 802170e:	4602      	mov	r2, r0
 8021710:	460b      	mov	r3, r1
 8021712:	2000      	movs	r0, #0
 8021714:	49bb      	ldr	r1, [pc, #748]	; (8021a04 <__ieee754_pow+0x76c>)
 8021716:	f7df f8a3 	bl	8000860 <__aeabi_ddiv>
 802171a:	ec41 0b1a 	vmov	d10, r0, r1
 802171e:	4602      	mov	r2, r0
 8021720:	460b      	mov	r3, r1
 8021722:	4630      	mov	r0, r6
 8021724:	4639      	mov	r1, r7
 8021726:	f7de ff71 	bl	800060c <__aeabi_dmul>
 802172a:	2300      	movs	r3, #0
 802172c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021730:	9302      	str	r3, [sp, #8]
 8021732:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8021736:	46ab      	mov	fp, r5
 8021738:	106d      	asrs	r5, r5, #1
 802173a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 802173e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8021742:	ec41 0b18 	vmov	d8, r0, r1
 8021746:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 802174a:	2200      	movs	r2, #0
 802174c:	4640      	mov	r0, r8
 802174e:	4649      	mov	r1, r9
 8021750:	4614      	mov	r4, r2
 8021752:	461d      	mov	r5, r3
 8021754:	f7de ff5a 	bl	800060c <__aeabi_dmul>
 8021758:	4602      	mov	r2, r0
 802175a:	460b      	mov	r3, r1
 802175c:	4630      	mov	r0, r6
 802175e:	4639      	mov	r1, r7
 8021760:	f7de fd9c 	bl	800029c <__aeabi_dsub>
 8021764:	ec53 2b19 	vmov	r2, r3, d9
 8021768:	4606      	mov	r6, r0
 802176a:	460f      	mov	r7, r1
 802176c:	4620      	mov	r0, r4
 802176e:	4629      	mov	r1, r5
 8021770:	f7de fd94 	bl	800029c <__aeabi_dsub>
 8021774:	4602      	mov	r2, r0
 8021776:	460b      	mov	r3, r1
 8021778:	4650      	mov	r0, sl
 802177a:	4659      	mov	r1, fp
 802177c:	f7de fd8e 	bl	800029c <__aeabi_dsub>
 8021780:	4642      	mov	r2, r8
 8021782:	464b      	mov	r3, r9
 8021784:	f7de ff42 	bl	800060c <__aeabi_dmul>
 8021788:	4602      	mov	r2, r0
 802178a:	460b      	mov	r3, r1
 802178c:	4630      	mov	r0, r6
 802178e:	4639      	mov	r1, r7
 8021790:	f7de fd84 	bl	800029c <__aeabi_dsub>
 8021794:	ec53 2b1a 	vmov	r2, r3, d10
 8021798:	f7de ff38 	bl	800060c <__aeabi_dmul>
 802179c:	ec53 2b18 	vmov	r2, r3, d8
 80217a0:	ec41 0b19 	vmov	d9, r0, r1
 80217a4:	ec51 0b18 	vmov	r0, r1, d8
 80217a8:	f7de ff30 	bl	800060c <__aeabi_dmul>
 80217ac:	a37c      	add	r3, pc, #496	; (adr r3, 80219a0 <__ieee754_pow+0x708>)
 80217ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217b2:	4604      	mov	r4, r0
 80217b4:	460d      	mov	r5, r1
 80217b6:	f7de ff29 	bl	800060c <__aeabi_dmul>
 80217ba:	a37b      	add	r3, pc, #492	; (adr r3, 80219a8 <__ieee754_pow+0x710>)
 80217bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217c0:	f7de fd6e 	bl	80002a0 <__adddf3>
 80217c4:	4622      	mov	r2, r4
 80217c6:	462b      	mov	r3, r5
 80217c8:	f7de ff20 	bl	800060c <__aeabi_dmul>
 80217cc:	a378      	add	r3, pc, #480	; (adr r3, 80219b0 <__ieee754_pow+0x718>)
 80217ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217d2:	f7de fd65 	bl	80002a0 <__adddf3>
 80217d6:	4622      	mov	r2, r4
 80217d8:	462b      	mov	r3, r5
 80217da:	f7de ff17 	bl	800060c <__aeabi_dmul>
 80217de:	a376      	add	r3, pc, #472	; (adr r3, 80219b8 <__ieee754_pow+0x720>)
 80217e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217e4:	f7de fd5c 	bl	80002a0 <__adddf3>
 80217e8:	4622      	mov	r2, r4
 80217ea:	462b      	mov	r3, r5
 80217ec:	f7de ff0e 	bl	800060c <__aeabi_dmul>
 80217f0:	a373      	add	r3, pc, #460	; (adr r3, 80219c0 <__ieee754_pow+0x728>)
 80217f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217f6:	f7de fd53 	bl	80002a0 <__adddf3>
 80217fa:	4622      	mov	r2, r4
 80217fc:	462b      	mov	r3, r5
 80217fe:	f7de ff05 	bl	800060c <__aeabi_dmul>
 8021802:	a371      	add	r3, pc, #452	; (adr r3, 80219c8 <__ieee754_pow+0x730>)
 8021804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021808:	f7de fd4a 	bl	80002a0 <__adddf3>
 802180c:	4622      	mov	r2, r4
 802180e:	4606      	mov	r6, r0
 8021810:	460f      	mov	r7, r1
 8021812:	462b      	mov	r3, r5
 8021814:	4620      	mov	r0, r4
 8021816:	4629      	mov	r1, r5
 8021818:	f7de fef8 	bl	800060c <__aeabi_dmul>
 802181c:	4602      	mov	r2, r0
 802181e:	460b      	mov	r3, r1
 8021820:	4630      	mov	r0, r6
 8021822:	4639      	mov	r1, r7
 8021824:	f7de fef2 	bl	800060c <__aeabi_dmul>
 8021828:	4642      	mov	r2, r8
 802182a:	4604      	mov	r4, r0
 802182c:	460d      	mov	r5, r1
 802182e:	464b      	mov	r3, r9
 8021830:	ec51 0b18 	vmov	r0, r1, d8
 8021834:	f7de fd34 	bl	80002a0 <__adddf3>
 8021838:	ec53 2b19 	vmov	r2, r3, d9
 802183c:	f7de fee6 	bl	800060c <__aeabi_dmul>
 8021840:	4622      	mov	r2, r4
 8021842:	462b      	mov	r3, r5
 8021844:	f7de fd2c 	bl	80002a0 <__adddf3>
 8021848:	4642      	mov	r2, r8
 802184a:	4682      	mov	sl, r0
 802184c:	468b      	mov	fp, r1
 802184e:	464b      	mov	r3, r9
 8021850:	4640      	mov	r0, r8
 8021852:	4649      	mov	r1, r9
 8021854:	f7de feda 	bl	800060c <__aeabi_dmul>
 8021858:	4b6b      	ldr	r3, [pc, #428]	; (8021a08 <__ieee754_pow+0x770>)
 802185a:	2200      	movs	r2, #0
 802185c:	4606      	mov	r6, r0
 802185e:	460f      	mov	r7, r1
 8021860:	f7de fd1e 	bl	80002a0 <__adddf3>
 8021864:	4652      	mov	r2, sl
 8021866:	465b      	mov	r3, fp
 8021868:	f7de fd1a 	bl	80002a0 <__adddf3>
 802186c:	2000      	movs	r0, #0
 802186e:	4604      	mov	r4, r0
 8021870:	460d      	mov	r5, r1
 8021872:	4602      	mov	r2, r0
 8021874:	460b      	mov	r3, r1
 8021876:	4640      	mov	r0, r8
 8021878:	4649      	mov	r1, r9
 802187a:	f7de fec7 	bl	800060c <__aeabi_dmul>
 802187e:	4b62      	ldr	r3, [pc, #392]	; (8021a08 <__ieee754_pow+0x770>)
 8021880:	4680      	mov	r8, r0
 8021882:	4689      	mov	r9, r1
 8021884:	2200      	movs	r2, #0
 8021886:	4620      	mov	r0, r4
 8021888:	4629      	mov	r1, r5
 802188a:	f7de fd07 	bl	800029c <__aeabi_dsub>
 802188e:	4632      	mov	r2, r6
 8021890:	463b      	mov	r3, r7
 8021892:	f7de fd03 	bl	800029c <__aeabi_dsub>
 8021896:	4602      	mov	r2, r0
 8021898:	460b      	mov	r3, r1
 802189a:	4650      	mov	r0, sl
 802189c:	4659      	mov	r1, fp
 802189e:	f7de fcfd 	bl	800029c <__aeabi_dsub>
 80218a2:	ec53 2b18 	vmov	r2, r3, d8
 80218a6:	f7de feb1 	bl	800060c <__aeabi_dmul>
 80218aa:	4622      	mov	r2, r4
 80218ac:	4606      	mov	r6, r0
 80218ae:	460f      	mov	r7, r1
 80218b0:	462b      	mov	r3, r5
 80218b2:	ec51 0b19 	vmov	r0, r1, d9
 80218b6:	f7de fea9 	bl	800060c <__aeabi_dmul>
 80218ba:	4602      	mov	r2, r0
 80218bc:	460b      	mov	r3, r1
 80218be:	4630      	mov	r0, r6
 80218c0:	4639      	mov	r1, r7
 80218c2:	f7de fced 	bl	80002a0 <__adddf3>
 80218c6:	4606      	mov	r6, r0
 80218c8:	460f      	mov	r7, r1
 80218ca:	4602      	mov	r2, r0
 80218cc:	460b      	mov	r3, r1
 80218ce:	4640      	mov	r0, r8
 80218d0:	4649      	mov	r1, r9
 80218d2:	f7de fce5 	bl	80002a0 <__adddf3>
 80218d6:	a33e      	add	r3, pc, #248	; (adr r3, 80219d0 <__ieee754_pow+0x738>)
 80218d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218dc:	2000      	movs	r0, #0
 80218de:	4604      	mov	r4, r0
 80218e0:	460d      	mov	r5, r1
 80218e2:	f7de fe93 	bl	800060c <__aeabi_dmul>
 80218e6:	4642      	mov	r2, r8
 80218e8:	ec41 0b18 	vmov	d8, r0, r1
 80218ec:	464b      	mov	r3, r9
 80218ee:	4620      	mov	r0, r4
 80218f0:	4629      	mov	r1, r5
 80218f2:	f7de fcd3 	bl	800029c <__aeabi_dsub>
 80218f6:	4602      	mov	r2, r0
 80218f8:	460b      	mov	r3, r1
 80218fa:	4630      	mov	r0, r6
 80218fc:	4639      	mov	r1, r7
 80218fe:	f7de fccd 	bl	800029c <__aeabi_dsub>
 8021902:	a335      	add	r3, pc, #212	; (adr r3, 80219d8 <__ieee754_pow+0x740>)
 8021904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021908:	f7de fe80 	bl	800060c <__aeabi_dmul>
 802190c:	a334      	add	r3, pc, #208	; (adr r3, 80219e0 <__ieee754_pow+0x748>)
 802190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021912:	4606      	mov	r6, r0
 8021914:	460f      	mov	r7, r1
 8021916:	4620      	mov	r0, r4
 8021918:	4629      	mov	r1, r5
 802191a:	f7de fe77 	bl	800060c <__aeabi_dmul>
 802191e:	4602      	mov	r2, r0
 8021920:	460b      	mov	r3, r1
 8021922:	4630      	mov	r0, r6
 8021924:	4639      	mov	r1, r7
 8021926:	f7de fcbb 	bl	80002a0 <__adddf3>
 802192a:	9a07      	ldr	r2, [sp, #28]
 802192c:	4b37      	ldr	r3, [pc, #220]	; (8021a0c <__ieee754_pow+0x774>)
 802192e:	4413      	add	r3, r2
 8021930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021934:	f7de fcb4 	bl	80002a0 <__adddf3>
 8021938:	4682      	mov	sl, r0
 802193a:	9805      	ldr	r0, [sp, #20]
 802193c:	468b      	mov	fp, r1
 802193e:	f7de fdfb 	bl	8000538 <__aeabi_i2d>
 8021942:	9a07      	ldr	r2, [sp, #28]
 8021944:	4b32      	ldr	r3, [pc, #200]	; (8021a10 <__ieee754_pow+0x778>)
 8021946:	4413      	add	r3, r2
 8021948:	e9d3 8900 	ldrd	r8, r9, [r3]
 802194c:	4606      	mov	r6, r0
 802194e:	460f      	mov	r7, r1
 8021950:	4652      	mov	r2, sl
 8021952:	465b      	mov	r3, fp
 8021954:	ec51 0b18 	vmov	r0, r1, d8
 8021958:	f7de fca2 	bl	80002a0 <__adddf3>
 802195c:	4642      	mov	r2, r8
 802195e:	464b      	mov	r3, r9
 8021960:	f7de fc9e 	bl	80002a0 <__adddf3>
 8021964:	4632      	mov	r2, r6
 8021966:	463b      	mov	r3, r7
 8021968:	f7de fc9a 	bl	80002a0 <__adddf3>
 802196c:	2000      	movs	r0, #0
 802196e:	4632      	mov	r2, r6
 8021970:	463b      	mov	r3, r7
 8021972:	4604      	mov	r4, r0
 8021974:	460d      	mov	r5, r1
 8021976:	f7de fc91 	bl	800029c <__aeabi_dsub>
 802197a:	4642      	mov	r2, r8
 802197c:	464b      	mov	r3, r9
 802197e:	f7de fc8d 	bl	800029c <__aeabi_dsub>
 8021982:	ec53 2b18 	vmov	r2, r3, d8
 8021986:	f7de fc89 	bl	800029c <__aeabi_dsub>
 802198a:	4602      	mov	r2, r0
 802198c:	460b      	mov	r3, r1
 802198e:	4650      	mov	r0, sl
 8021990:	4659      	mov	r1, fp
 8021992:	e610      	b.n	80215b6 <__ieee754_pow+0x31e>
 8021994:	2401      	movs	r4, #1
 8021996:	e6a1      	b.n	80216dc <__ieee754_pow+0x444>
 8021998:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80219e8 <__ieee754_pow+0x750>
 802199c:	e617      	b.n	80215ce <__ieee754_pow+0x336>
 802199e:	bf00      	nop
 80219a0:	4a454eef 	.word	0x4a454eef
 80219a4:	3fca7e28 	.word	0x3fca7e28
 80219a8:	93c9db65 	.word	0x93c9db65
 80219ac:	3fcd864a 	.word	0x3fcd864a
 80219b0:	a91d4101 	.word	0xa91d4101
 80219b4:	3fd17460 	.word	0x3fd17460
 80219b8:	518f264d 	.word	0x518f264d
 80219bc:	3fd55555 	.word	0x3fd55555
 80219c0:	db6fabff 	.word	0xdb6fabff
 80219c4:	3fdb6db6 	.word	0x3fdb6db6
 80219c8:	33333303 	.word	0x33333303
 80219cc:	3fe33333 	.word	0x3fe33333
 80219d0:	e0000000 	.word	0xe0000000
 80219d4:	3feec709 	.word	0x3feec709
 80219d8:	dc3a03fd 	.word	0xdc3a03fd
 80219dc:	3feec709 	.word	0x3feec709
 80219e0:	145b01f5 	.word	0x145b01f5
 80219e4:	be3e2fe0 	.word	0xbe3e2fe0
 80219e8:	00000000 	.word	0x00000000
 80219ec:	3ff00000 	.word	0x3ff00000
 80219f0:	7ff00000 	.word	0x7ff00000
 80219f4:	43400000 	.word	0x43400000
 80219f8:	0003988e 	.word	0x0003988e
 80219fc:	000bb679 	.word	0x000bb679
 8021a00:	08029d40 	.word	0x08029d40
 8021a04:	3ff00000 	.word	0x3ff00000
 8021a08:	40080000 	.word	0x40080000
 8021a0c:	08029d60 	.word	0x08029d60
 8021a10:	08029d50 	.word	0x08029d50
 8021a14:	a3b5      	add	r3, pc, #724	; (adr r3, 8021cec <__ieee754_pow+0xa54>)
 8021a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a1a:	4640      	mov	r0, r8
 8021a1c:	4649      	mov	r1, r9
 8021a1e:	f7de fc3f 	bl	80002a0 <__adddf3>
 8021a22:	4622      	mov	r2, r4
 8021a24:	ec41 0b1a 	vmov	d10, r0, r1
 8021a28:	462b      	mov	r3, r5
 8021a2a:	4630      	mov	r0, r6
 8021a2c:	4639      	mov	r1, r7
 8021a2e:	f7de fc35 	bl	800029c <__aeabi_dsub>
 8021a32:	4602      	mov	r2, r0
 8021a34:	460b      	mov	r3, r1
 8021a36:	ec51 0b1a 	vmov	r0, r1, d10
 8021a3a:	f7df f877 	bl	8000b2c <__aeabi_dcmpgt>
 8021a3e:	2800      	cmp	r0, #0
 8021a40:	f47f ae04 	bne.w	802164c <__ieee754_pow+0x3b4>
 8021a44:	4aa4      	ldr	r2, [pc, #656]	; (8021cd8 <__ieee754_pow+0xa40>)
 8021a46:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021a4a:	4293      	cmp	r3, r2
 8021a4c:	f340 8108 	ble.w	8021c60 <__ieee754_pow+0x9c8>
 8021a50:	151b      	asrs	r3, r3, #20
 8021a52:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8021a56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8021a5a:	fa4a f303 	asr.w	r3, sl, r3
 8021a5e:	445b      	add	r3, fp
 8021a60:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8021a64:	4e9d      	ldr	r6, [pc, #628]	; (8021cdc <__ieee754_pow+0xa44>)
 8021a66:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8021a6a:	4116      	asrs	r6, r2
 8021a6c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8021a70:	2000      	movs	r0, #0
 8021a72:	ea23 0106 	bic.w	r1, r3, r6
 8021a76:	f1c2 0214 	rsb	r2, r2, #20
 8021a7a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8021a7e:	fa4a fa02 	asr.w	sl, sl, r2
 8021a82:	f1bb 0f00 	cmp.w	fp, #0
 8021a86:	4602      	mov	r2, r0
 8021a88:	460b      	mov	r3, r1
 8021a8a:	4620      	mov	r0, r4
 8021a8c:	4629      	mov	r1, r5
 8021a8e:	bfb8      	it	lt
 8021a90:	f1ca 0a00 	rsblt	sl, sl, #0
 8021a94:	f7de fc02 	bl	800029c <__aeabi_dsub>
 8021a98:	ec41 0b19 	vmov	d9, r0, r1
 8021a9c:	4642      	mov	r2, r8
 8021a9e:	464b      	mov	r3, r9
 8021aa0:	ec51 0b19 	vmov	r0, r1, d9
 8021aa4:	f7de fbfc 	bl	80002a0 <__adddf3>
 8021aa8:	a37b      	add	r3, pc, #492	; (adr r3, 8021c98 <__ieee754_pow+0xa00>)
 8021aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021aae:	2000      	movs	r0, #0
 8021ab0:	4604      	mov	r4, r0
 8021ab2:	460d      	mov	r5, r1
 8021ab4:	f7de fdaa 	bl	800060c <__aeabi_dmul>
 8021ab8:	ec53 2b19 	vmov	r2, r3, d9
 8021abc:	4606      	mov	r6, r0
 8021abe:	460f      	mov	r7, r1
 8021ac0:	4620      	mov	r0, r4
 8021ac2:	4629      	mov	r1, r5
 8021ac4:	f7de fbea 	bl	800029c <__aeabi_dsub>
 8021ac8:	4602      	mov	r2, r0
 8021aca:	460b      	mov	r3, r1
 8021acc:	4640      	mov	r0, r8
 8021ace:	4649      	mov	r1, r9
 8021ad0:	f7de fbe4 	bl	800029c <__aeabi_dsub>
 8021ad4:	a372      	add	r3, pc, #456	; (adr r3, 8021ca0 <__ieee754_pow+0xa08>)
 8021ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ada:	f7de fd97 	bl	800060c <__aeabi_dmul>
 8021ade:	a372      	add	r3, pc, #456	; (adr r3, 8021ca8 <__ieee754_pow+0xa10>)
 8021ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ae4:	4680      	mov	r8, r0
 8021ae6:	4689      	mov	r9, r1
 8021ae8:	4620      	mov	r0, r4
 8021aea:	4629      	mov	r1, r5
 8021aec:	f7de fd8e 	bl	800060c <__aeabi_dmul>
 8021af0:	4602      	mov	r2, r0
 8021af2:	460b      	mov	r3, r1
 8021af4:	4640      	mov	r0, r8
 8021af6:	4649      	mov	r1, r9
 8021af8:	f7de fbd2 	bl	80002a0 <__adddf3>
 8021afc:	4604      	mov	r4, r0
 8021afe:	460d      	mov	r5, r1
 8021b00:	4602      	mov	r2, r0
 8021b02:	460b      	mov	r3, r1
 8021b04:	4630      	mov	r0, r6
 8021b06:	4639      	mov	r1, r7
 8021b08:	f7de fbca 	bl	80002a0 <__adddf3>
 8021b0c:	4632      	mov	r2, r6
 8021b0e:	463b      	mov	r3, r7
 8021b10:	4680      	mov	r8, r0
 8021b12:	4689      	mov	r9, r1
 8021b14:	f7de fbc2 	bl	800029c <__aeabi_dsub>
 8021b18:	4602      	mov	r2, r0
 8021b1a:	460b      	mov	r3, r1
 8021b1c:	4620      	mov	r0, r4
 8021b1e:	4629      	mov	r1, r5
 8021b20:	f7de fbbc 	bl	800029c <__aeabi_dsub>
 8021b24:	4642      	mov	r2, r8
 8021b26:	4606      	mov	r6, r0
 8021b28:	460f      	mov	r7, r1
 8021b2a:	464b      	mov	r3, r9
 8021b2c:	4640      	mov	r0, r8
 8021b2e:	4649      	mov	r1, r9
 8021b30:	f7de fd6c 	bl	800060c <__aeabi_dmul>
 8021b34:	a35e      	add	r3, pc, #376	; (adr r3, 8021cb0 <__ieee754_pow+0xa18>)
 8021b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b3a:	4604      	mov	r4, r0
 8021b3c:	460d      	mov	r5, r1
 8021b3e:	f7de fd65 	bl	800060c <__aeabi_dmul>
 8021b42:	a35d      	add	r3, pc, #372	; (adr r3, 8021cb8 <__ieee754_pow+0xa20>)
 8021b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b48:	f7de fba8 	bl	800029c <__aeabi_dsub>
 8021b4c:	4622      	mov	r2, r4
 8021b4e:	462b      	mov	r3, r5
 8021b50:	f7de fd5c 	bl	800060c <__aeabi_dmul>
 8021b54:	a35a      	add	r3, pc, #360	; (adr r3, 8021cc0 <__ieee754_pow+0xa28>)
 8021b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b5a:	f7de fba1 	bl	80002a0 <__adddf3>
 8021b5e:	4622      	mov	r2, r4
 8021b60:	462b      	mov	r3, r5
 8021b62:	f7de fd53 	bl	800060c <__aeabi_dmul>
 8021b66:	a358      	add	r3, pc, #352	; (adr r3, 8021cc8 <__ieee754_pow+0xa30>)
 8021b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b6c:	f7de fb96 	bl	800029c <__aeabi_dsub>
 8021b70:	4622      	mov	r2, r4
 8021b72:	462b      	mov	r3, r5
 8021b74:	f7de fd4a 	bl	800060c <__aeabi_dmul>
 8021b78:	a355      	add	r3, pc, #340	; (adr r3, 8021cd0 <__ieee754_pow+0xa38>)
 8021b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b7e:	f7de fb8f 	bl	80002a0 <__adddf3>
 8021b82:	4622      	mov	r2, r4
 8021b84:	462b      	mov	r3, r5
 8021b86:	f7de fd41 	bl	800060c <__aeabi_dmul>
 8021b8a:	4602      	mov	r2, r0
 8021b8c:	460b      	mov	r3, r1
 8021b8e:	4640      	mov	r0, r8
 8021b90:	4649      	mov	r1, r9
 8021b92:	f7de fb83 	bl	800029c <__aeabi_dsub>
 8021b96:	4604      	mov	r4, r0
 8021b98:	460d      	mov	r5, r1
 8021b9a:	4602      	mov	r2, r0
 8021b9c:	460b      	mov	r3, r1
 8021b9e:	4640      	mov	r0, r8
 8021ba0:	4649      	mov	r1, r9
 8021ba2:	f7de fd33 	bl	800060c <__aeabi_dmul>
 8021ba6:	2200      	movs	r2, #0
 8021ba8:	ec41 0b19 	vmov	d9, r0, r1
 8021bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021bb0:	4620      	mov	r0, r4
 8021bb2:	4629      	mov	r1, r5
 8021bb4:	f7de fb72 	bl	800029c <__aeabi_dsub>
 8021bb8:	4602      	mov	r2, r0
 8021bba:	460b      	mov	r3, r1
 8021bbc:	ec51 0b19 	vmov	r0, r1, d9
 8021bc0:	f7de fe4e 	bl	8000860 <__aeabi_ddiv>
 8021bc4:	4632      	mov	r2, r6
 8021bc6:	4604      	mov	r4, r0
 8021bc8:	460d      	mov	r5, r1
 8021bca:	463b      	mov	r3, r7
 8021bcc:	4640      	mov	r0, r8
 8021bce:	4649      	mov	r1, r9
 8021bd0:	f7de fd1c 	bl	800060c <__aeabi_dmul>
 8021bd4:	4632      	mov	r2, r6
 8021bd6:	463b      	mov	r3, r7
 8021bd8:	f7de fb62 	bl	80002a0 <__adddf3>
 8021bdc:	4602      	mov	r2, r0
 8021bde:	460b      	mov	r3, r1
 8021be0:	4620      	mov	r0, r4
 8021be2:	4629      	mov	r1, r5
 8021be4:	f7de fb5a 	bl	800029c <__aeabi_dsub>
 8021be8:	4642      	mov	r2, r8
 8021bea:	464b      	mov	r3, r9
 8021bec:	f7de fb56 	bl	800029c <__aeabi_dsub>
 8021bf0:	460b      	mov	r3, r1
 8021bf2:	4602      	mov	r2, r0
 8021bf4:	493a      	ldr	r1, [pc, #232]	; (8021ce0 <__ieee754_pow+0xa48>)
 8021bf6:	2000      	movs	r0, #0
 8021bf8:	f7de fb50 	bl	800029c <__aeabi_dsub>
 8021bfc:	ec41 0b10 	vmov	d0, r0, r1
 8021c00:	ee10 3a90 	vmov	r3, s1
 8021c04:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8021c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021c0c:	da2b      	bge.n	8021c66 <__ieee754_pow+0x9ce>
 8021c0e:	4650      	mov	r0, sl
 8021c10:	f001 fc9a 	bl	8023548 <scalbn>
 8021c14:	ec51 0b10 	vmov	r0, r1, d0
 8021c18:	ec53 2b18 	vmov	r2, r3, d8
 8021c1c:	f7ff bbed 	b.w	80213fa <__ieee754_pow+0x162>
 8021c20:	4b30      	ldr	r3, [pc, #192]	; (8021ce4 <__ieee754_pow+0xa4c>)
 8021c22:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8021c26:	429e      	cmp	r6, r3
 8021c28:	f77f af0c 	ble.w	8021a44 <__ieee754_pow+0x7ac>
 8021c2c:	4b2e      	ldr	r3, [pc, #184]	; (8021ce8 <__ieee754_pow+0xa50>)
 8021c2e:	440b      	add	r3, r1
 8021c30:	4303      	orrs	r3, r0
 8021c32:	d009      	beq.n	8021c48 <__ieee754_pow+0x9b0>
 8021c34:	ec51 0b18 	vmov	r0, r1, d8
 8021c38:	2200      	movs	r2, #0
 8021c3a:	2300      	movs	r3, #0
 8021c3c:	f7de ff58 	bl	8000af0 <__aeabi_dcmplt>
 8021c40:	3800      	subs	r0, #0
 8021c42:	bf18      	it	ne
 8021c44:	2001      	movne	r0, #1
 8021c46:	e447      	b.n	80214d8 <__ieee754_pow+0x240>
 8021c48:	4622      	mov	r2, r4
 8021c4a:	462b      	mov	r3, r5
 8021c4c:	f7de fb26 	bl	800029c <__aeabi_dsub>
 8021c50:	4642      	mov	r2, r8
 8021c52:	464b      	mov	r3, r9
 8021c54:	f7de ff60 	bl	8000b18 <__aeabi_dcmpge>
 8021c58:	2800      	cmp	r0, #0
 8021c5a:	f43f aef3 	beq.w	8021a44 <__ieee754_pow+0x7ac>
 8021c5e:	e7e9      	b.n	8021c34 <__ieee754_pow+0x99c>
 8021c60:	f04f 0a00 	mov.w	sl, #0
 8021c64:	e71a      	b.n	8021a9c <__ieee754_pow+0x804>
 8021c66:	ec51 0b10 	vmov	r0, r1, d0
 8021c6a:	4619      	mov	r1, r3
 8021c6c:	e7d4      	b.n	8021c18 <__ieee754_pow+0x980>
 8021c6e:	491c      	ldr	r1, [pc, #112]	; (8021ce0 <__ieee754_pow+0xa48>)
 8021c70:	2000      	movs	r0, #0
 8021c72:	f7ff bb30 	b.w	80212d6 <__ieee754_pow+0x3e>
 8021c76:	2000      	movs	r0, #0
 8021c78:	2100      	movs	r1, #0
 8021c7a:	f7ff bb2c 	b.w	80212d6 <__ieee754_pow+0x3e>
 8021c7e:	4630      	mov	r0, r6
 8021c80:	4639      	mov	r1, r7
 8021c82:	f7ff bb28 	b.w	80212d6 <__ieee754_pow+0x3e>
 8021c86:	9204      	str	r2, [sp, #16]
 8021c88:	f7ff bb7a 	b.w	8021380 <__ieee754_pow+0xe8>
 8021c8c:	2300      	movs	r3, #0
 8021c8e:	f7ff bb64 	b.w	802135a <__ieee754_pow+0xc2>
 8021c92:	bf00      	nop
 8021c94:	f3af 8000 	nop.w
 8021c98:	00000000 	.word	0x00000000
 8021c9c:	3fe62e43 	.word	0x3fe62e43
 8021ca0:	fefa39ef 	.word	0xfefa39ef
 8021ca4:	3fe62e42 	.word	0x3fe62e42
 8021ca8:	0ca86c39 	.word	0x0ca86c39
 8021cac:	be205c61 	.word	0xbe205c61
 8021cb0:	72bea4d0 	.word	0x72bea4d0
 8021cb4:	3e663769 	.word	0x3e663769
 8021cb8:	c5d26bf1 	.word	0xc5d26bf1
 8021cbc:	3ebbbd41 	.word	0x3ebbbd41
 8021cc0:	af25de2c 	.word	0xaf25de2c
 8021cc4:	3f11566a 	.word	0x3f11566a
 8021cc8:	16bebd93 	.word	0x16bebd93
 8021ccc:	3f66c16c 	.word	0x3f66c16c
 8021cd0:	5555553e 	.word	0x5555553e
 8021cd4:	3fc55555 	.word	0x3fc55555
 8021cd8:	3fe00000 	.word	0x3fe00000
 8021cdc:	000fffff 	.word	0x000fffff
 8021ce0:	3ff00000 	.word	0x3ff00000
 8021ce4:	4090cbff 	.word	0x4090cbff
 8021ce8:	3f6f3400 	.word	0x3f6f3400
 8021cec:	652b82fe 	.word	0x652b82fe
 8021cf0:	3c971547 	.word	0x3c971547
 8021cf4:	00000000 	.word	0x00000000

08021cf8 <__ieee754_rem_pio2>:
 8021cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cfc:	ed2d 8b02 	vpush	{d8}
 8021d00:	ec55 4b10 	vmov	r4, r5, d0
 8021d04:	4bca      	ldr	r3, [pc, #808]	; (8022030 <__ieee754_rem_pio2+0x338>)
 8021d06:	b08b      	sub	sp, #44	; 0x2c
 8021d08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8021d0c:	4598      	cmp	r8, r3
 8021d0e:	4682      	mov	sl, r0
 8021d10:	9502      	str	r5, [sp, #8]
 8021d12:	dc08      	bgt.n	8021d26 <__ieee754_rem_pio2+0x2e>
 8021d14:	2200      	movs	r2, #0
 8021d16:	2300      	movs	r3, #0
 8021d18:	ed80 0b00 	vstr	d0, [r0]
 8021d1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8021d20:	f04f 0b00 	mov.w	fp, #0
 8021d24:	e028      	b.n	8021d78 <__ieee754_rem_pio2+0x80>
 8021d26:	4bc3      	ldr	r3, [pc, #780]	; (8022034 <__ieee754_rem_pio2+0x33c>)
 8021d28:	4598      	cmp	r8, r3
 8021d2a:	dc78      	bgt.n	8021e1e <__ieee754_rem_pio2+0x126>
 8021d2c:	9b02      	ldr	r3, [sp, #8]
 8021d2e:	4ec2      	ldr	r6, [pc, #776]	; (8022038 <__ieee754_rem_pio2+0x340>)
 8021d30:	2b00      	cmp	r3, #0
 8021d32:	ee10 0a10 	vmov	r0, s0
 8021d36:	a3b0      	add	r3, pc, #704	; (adr r3, 8021ff8 <__ieee754_rem_pio2+0x300>)
 8021d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d3c:	4629      	mov	r1, r5
 8021d3e:	dd39      	ble.n	8021db4 <__ieee754_rem_pio2+0xbc>
 8021d40:	f7de faac 	bl	800029c <__aeabi_dsub>
 8021d44:	45b0      	cmp	r8, r6
 8021d46:	4604      	mov	r4, r0
 8021d48:	460d      	mov	r5, r1
 8021d4a:	d01b      	beq.n	8021d84 <__ieee754_rem_pio2+0x8c>
 8021d4c:	a3ac      	add	r3, pc, #688	; (adr r3, 8022000 <__ieee754_rem_pio2+0x308>)
 8021d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d52:	f7de faa3 	bl	800029c <__aeabi_dsub>
 8021d56:	4602      	mov	r2, r0
 8021d58:	460b      	mov	r3, r1
 8021d5a:	e9ca 2300 	strd	r2, r3, [sl]
 8021d5e:	4620      	mov	r0, r4
 8021d60:	4629      	mov	r1, r5
 8021d62:	f7de fa9b 	bl	800029c <__aeabi_dsub>
 8021d66:	a3a6      	add	r3, pc, #664	; (adr r3, 8022000 <__ieee754_rem_pio2+0x308>)
 8021d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d6c:	f7de fa96 	bl	800029c <__aeabi_dsub>
 8021d70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021d74:	f04f 0b01 	mov.w	fp, #1
 8021d78:	4658      	mov	r0, fp
 8021d7a:	b00b      	add	sp, #44	; 0x2c
 8021d7c:	ecbd 8b02 	vpop	{d8}
 8021d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d84:	a3a0      	add	r3, pc, #640	; (adr r3, 8022008 <__ieee754_rem_pio2+0x310>)
 8021d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d8a:	f7de fa87 	bl	800029c <__aeabi_dsub>
 8021d8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8022010 <__ieee754_rem_pio2+0x318>)
 8021d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d94:	4604      	mov	r4, r0
 8021d96:	460d      	mov	r5, r1
 8021d98:	f7de fa80 	bl	800029c <__aeabi_dsub>
 8021d9c:	4602      	mov	r2, r0
 8021d9e:	460b      	mov	r3, r1
 8021da0:	e9ca 2300 	strd	r2, r3, [sl]
 8021da4:	4620      	mov	r0, r4
 8021da6:	4629      	mov	r1, r5
 8021da8:	f7de fa78 	bl	800029c <__aeabi_dsub>
 8021dac:	a398      	add	r3, pc, #608	; (adr r3, 8022010 <__ieee754_rem_pio2+0x318>)
 8021dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021db2:	e7db      	b.n	8021d6c <__ieee754_rem_pio2+0x74>
 8021db4:	f7de fa74 	bl	80002a0 <__adddf3>
 8021db8:	45b0      	cmp	r8, r6
 8021dba:	4604      	mov	r4, r0
 8021dbc:	460d      	mov	r5, r1
 8021dbe:	d016      	beq.n	8021dee <__ieee754_rem_pio2+0xf6>
 8021dc0:	a38f      	add	r3, pc, #572	; (adr r3, 8022000 <__ieee754_rem_pio2+0x308>)
 8021dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021dc6:	f7de fa6b 	bl	80002a0 <__adddf3>
 8021dca:	4602      	mov	r2, r0
 8021dcc:	460b      	mov	r3, r1
 8021dce:	e9ca 2300 	strd	r2, r3, [sl]
 8021dd2:	4620      	mov	r0, r4
 8021dd4:	4629      	mov	r1, r5
 8021dd6:	f7de fa61 	bl	800029c <__aeabi_dsub>
 8021dda:	a389      	add	r3, pc, #548	; (adr r3, 8022000 <__ieee754_rem_pio2+0x308>)
 8021ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021de0:	f7de fa5e 	bl	80002a0 <__adddf3>
 8021de4:	f04f 3bff 	mov.w	fp, #4294967295
 8021de8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021dec:	e7c4      	b.n	8021d78 <__ieee754_rem_pio2+0x80>
 8021dee:	a386      	add	r3, pc, #536	; (adr r3, 8022008 <__ieee754_rem_pio2+0x310>)
 8021df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021df4:	f7de fa54 	bl	80002a0 <__adddf3>
 8021df8:	a385      	add	r3, pc, #532	; (adr r3, 8022010 <__ieee754_rem_pio2+0x318>)
 8021dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021dfe:	4604      	mov	r4, r0
 8021e00:	460d      	mov	r5, r1
 8021e02:	f7de fa4d 	bl	80002a0 <__adddf3>
 8021e06:	4602      	mov	r2, r0
 8021e08:	460b      	mov	r3, r1
 8021e0a:	e9ca 2300 	strd	r2, r3, [sl]
 8021e0e:	4620      	mov	r0, r4
 8021e10:	4629      	mov	r1, r5
 8021e12:	f7de fa43 	bl	800029c <__aeabi_dsub>
 8021e16:	a37e      	add	r3, pc, #504	; (adr r3, 8022010 <__ieee754_rem_pio2+0x318>)
 8021e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e1c:	e7e0      	b.n	8021de0 <__ieee754_rem_pio2+0xe8>
 8021e1e:	4b87      	ldr	r3, [pc, #540]	; (802203c <__ieee754_rem_pio2+0x344>)
 8021e20:	4598      	cmp	r8, r3
 8021e22:	f300 80d9 	bgt.w	8021fd8 <__ieee754_rem_pio2+0x2e0>
 8021e26:	f001 fb73 	bl	8023510 <fabs>
 8021e2a:	ec55 4b10 	vmov	r4, r5, d0
 8021e2e:	ee10 0a10 	vmov	r0, s0
 8021e32:	a379      	add	r3, pc, #484	; (adr r3, 8022018 <__ieee754_rem_pio2+0x320>)
 8021e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e38:	4629      	mov	r1, r5
 8021e3a:	f7de fbe7 	bl	800060c <__aeabi_dmul>
 8021e3e:	4b80      	ldr	r3, [pc, #512]	; (8022040 <__ieee754_rem_pio2+0x348>)
 8021e40:	2200      	movs	r2, #0
 8021e42:	f7de fa2d 	bl	80002a0 <__adddf3>
 8021e46:	f7de fe91 	bl	8000b6c <__aeabi_d2iz>
 8021e4a:	4683      	mov	fp, r0
 8021e4c:	f7de fb74 	bl	8000538 <__aeabi_i2d>
 8021e50:	4602      	mov	r2, r0
 8021e52:	460b      	mov	r3, r1
 8021e54:	ec43 2b18 	vmov	d8, r2, r3
 8021e58:	a367      	add	r3, pc, #412	; (adr r3, 8021ff8 <__ieee754_rem_pio2+0x300>)
 8021e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e5e:	f7de fbd5 	bl	800060c <__aeabi_dmul>
 8021e62:	4602      	mov	r2, r0
 8021e64:	460b      	mov	r3, r1
 8021e66:	4620      	mov	r0, r4
 8021e68:	4629      	mov	r1, r5
 8021e6a:	f7de fa17 	bl	800029c <__aeabi_dsub>
 8021e6e:	a364      	add	r3, pc, #400	; (adr r3, 8022000 <__ieee754_rem_pio2+0x308>)
 8021e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e74:	4606      	mov	r6, r0
 8021e76:	460f      	mov	r7, r1
 8021e78:	ec51 0b18 	vmov	r0, r1, d8
 8021e7c:	f7de fbc6 	bl	800060c <__aeabi_dmul>
 8021e80:	f1bb 0f1f 	cmp.w	fp, #31
 8021e84:	4604      	mov	r4, r0
 8021e86:	460d      	mov	r5, r1
 8021e88:	dc0d      	bgt.n	8021ea6 <__ieee754_rem_pio2+0x1ae>
 8021e8a:	4b6e      	ldr	r3, [pc, #440]	; (8022044 <__ieee754_rem_pio2+0x34c>)
 8021e8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8021e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021e94:	4543      	cmp	r3, r8
 8021e96:	d006      	beq.n	8021ea6 <__ieee754_rem_pio2+0x1ae>
 8021e98:	4622      	mov	r2, r4
 8021e9a:	462b      	mov	r3, r5
 8021e9c:	4630      	mov	r0, r6
 8021e9e:	4639      	mov	r1, r7
 8021ea0:	f7de f9fc 	bl	800029c <__aeabi_dsub>
 8021ea4:	e00f      	b.n	8021ec6 <__ieee754_rem_pio2+0x1ce>
 8021ea6:	462b      	mov	r3, r5
 8021ea8:	4622      	mov	r2, r4
 8021eaa:	4630      	mov	r0, r6
 8021eac:	4639      	mov	r1, r7
 8021eae:	f7de f9f5 	bl	800029c <__aeabi_dsub>
 8021eb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8021eb6:	9303      	str	r3, [sp, #12]
 8021eb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021ebc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8021ec0:	f1b8 0f10 	cmp.w	r8, #16
 8021ec4:	dc02      	bgt.n	8021ecc <__ieee754_rem_pio2+0x1d4>
 8021ec6:	e9ca 0100 	strd	r0, r1, [sl]
 8021eca:	e039      	b.n	8021f40 <__ieee754_rem_pio2+0x248>
 8021ecc:	a34e      	add	r3, pc, #312	; (adr r3, 8022008 <__ieee754_rem_pio2+0x310>)
 8021ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ed2:	ec51 0b18 	vmov	r0, r1, d8
 8021ed6:	f7de fb99 	bl	800060c <__aeabi_dmul>
 8021eda:	4604      	mov	r4, r0
 8021edc:	460d      	mov	r5, r1
 8021ede:	4602      	mov	r2, r0
 8021ee0:	460b      	mov	r3, r1
 8021ee2:	4630      	mov	r0, r6
 8021ee4:	4639      	mov	r1, r7
 8021ee6:	f7de f9d9 	bl	800029c <__aeabi_dsub>
 8021eea:	4602      	mov	r2, r0
 8021eec:	460b      	mov	r3, r1
 8021eee:	4680      	mov	r8, r0
 8021ef0:	4689      	mov	r9, r1
 8021ef2:	4630      	mov	r0, r6
 8021ef4:	4639      	mov	r1, r7
 8021ef6:	f7de f9d1 	bl	800029c <__aeabi_dsub>
 8021efa:	4622      	mov	r2, r4
 8021efc:	462b      	mov	r3, r5
 8021efe:	f7de f9cd 	bl	800029c <__aeabi_dsub>
 8021f02:	a343      	add	r3, pc, #268	; (adr r3, 8022010 <__ieee754_rem_pio2+0x318>)
 8021f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f08:	4604      	mov	r4, r0
 8021f0a:	460d      	mov	r5, r1
 8021f0c:	ec51 0b18 	vmov	r0, r1, d8
 8021f10:	f7de fb7c 	bl	800060c <__aeabi_dmul>
 8021f14:	4622      	mov	r2, r4
 8021f16:	462b      	mov	r3, r5
 8021f18:	f7de f9c0 	bl	800029c <__aeabi_dsub>
 8021f1c:	4602      	mov	r2, r0
 8021f1e:	460b      	mov	r3, r1
 8021f20:	4604      	mov	r4, r0
 8021f22:	460d      	mov	r5, r1
 8021f24:	4640      	mov	r0, r8
 8021f26:	4649      	mov	r1, r9
 8021f28:	f7de f9b8 	bl	800029c <__aeabi_dsub>
 8021f2c:	9a03      	ldr	r2, [sp, #12]
 8021f2e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021f32:	1ad3      	subs	r3, r2, r3
 8021f34:	2b31      	cmp	r3, #49	; 0x31
 8021f36:	dc24      	bgt.n	8021f82 <__ieee754_rem_pio2+0x28a>
 8021f38:	e9ca 0100 	strd	r0, r1, [sl]
 8021f3c:	4646      	mov	r6, r8
 8021f3e:	464f      	mov	r7, r9
 8021f40:	e9da 8900 	ldrd	r8, r9, [sl]
 8021f44:	4630      	mov	r0, r6
 8021f46:	4642      	mov	r2, r8
 8021f48:	464b      	mov	r3, r9
 8021f4a:	4639      	mov	r1, r7
 8021f4c:	f7de f9a6 	bl	800029c <__aeabi_dsub>
 8021f50:	462b      	mov	r3, r5
 8021f52:	4622      	mov	r2, r4
 8021f54:	f7de f9a2 	bl	800029c <__aeabi_dsub>
 8021f58:	9b02      	ldr	r3, [sp, #8]
 8021f5a:	2b00      	cmp	r3, #0
 8021f5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021f60:	f6bf af0a 	bge.w	8021d78 <__ieee754_rem_pio2+0x80>
 8021f64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8021f68:	f8ca 3004 	str.w	r3, [sl, #4]
 8021f6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021f70:	f8ca 8000 	str.w	r8, [sl]
 8021f74:	f8ca 0008 	str.w	r0, [sl, #8]
 8021f78:	f8ca 300c 	str.w	r3, [sl, #12]
 8021f7c:	f1cb 0b00 	rsb	fp, fp, #0
 8021f80:	e6fa      	b.n	8021d78 <__ieee754_rem_pio2+0x80>
 8021f82:	a327      	add	r3, pc, #156	; (adr r3, 8022020 <__ieee754_rem_pio2+0x328>)
 8021f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f88:	ec51 0b18 	vmov	r0, r1, d8
 8021f8c:	f7de fb3e 	bl	800060c <__aeabi_dmul>
 8021f90:	4604      	mov	r4, r0
 8021f92:	460d      	mov	r5, r1
 8021f94:	4602      	mov	r2, r0
 8021f96:	460b      	mov	r3, r1
 8021f98:	4640      	mov	r0, r8
 8021f9a:	4649      	mov	r1, r9
 8021f9c:	f7de f97e 	bl	800029c <__aeabi_dsub>
 8021fa0:	4602      	mov	r2, r0
 8021fa2:	460b      	mov	r3, r1
 8021fa4:	4606      	mov	r6, r0
 8021fa6:	460f      	mov	r7, r1
 8021fa8:	4640      	mov	r0, r8
 8021faa:	4649      	mov	r1, r9
 8021fac:	f7de f976 	bl	800029c <__aeabi_dsub>
 8021fb0:	4622      	mov	r2, r4
 8021fb2:	462b      	mov	r3, r5
 8021fb4:	f7de f972 	bl	800029c <__aeabi_dsub>
 8021fb8:	a31b      	add	r3, pc, #108	; (adr r3, 8022028 <__ieee754_rem_pio2+0x330>)
 8021fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fbe:	4604      	mov	r4, r0
 8021fc0:	460d      	mov	r5, r1
 8021fc2:	ec51 0b18 	vmov	r0, r1, d8
 8021fc6:	f7de fb21 	bl	800060c <__aeabi_dmul>
 8021fca:	4622      	mov	r2, r4
 8021fcc:	462b      	mov	r3, r5
 8021fce:	f7de f965 	bl	800029c <__aeabi_dsub>
 8021fd2:	4604      	mov	r4, r0
 8021fd4:	460d      	mov	r5, r1
 8021fd6:	e75f      	b.n	8021e98 <__ieee754_rem_pio2+0x1a0>
 8021fd8:	4b1b      	ldr	r3, [pc, #108]	; (8022048 <__ieee754_rem_pio2+0x350>)
 8021fda:	4598      	cmp	r8, r3
 8021fdc:	dd36      	ble.n	802204c <__ieee754_rem_pio2+0x354>
 8021fde:	ee10 2a10 	vmov	r2, s0
 8021fe2:	462b      	mov	r3, r5
 8021fe4:	4620      	mov	r0, r4
 8021fe6:	4629      	mov	r1, r5
 8021fe8:	f7de f958 	bl	800029c <__aeabi_dsub>
 8021fec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021ff0:	e9ca 0100 	strd	r0, r1, [sl]
 8021ff4:	e694      	b.n	8021d20 <__ieee754_rem_pio2+0x28>
 8021ff6:	bf00      	nop
 8021ff8:	54400000 	.word	0x54400000
 8021ffc:	3ff921fb 	.word	0x3ff921fb
 8022000:	1a626331 	.word	0x1a626331
 8022004:	3dd0b461 	.word	0x3dd0b461
 8022008:	1a600000 	.word	0x1a600000
 802200c:	3dd0b461 	.word	0x3dd0b461
 8022010:	2e037073 	.word	0x2e037073
 8022014:	3ba3198a 	.word	0x3ba3198a
 8022018:	6dc9c883 	.word	0x6dc9c883
 802201c:	3fe45f30 	.word	0x3fe45f30
 8022020:	2e000000 	.word	0x2e000000
 8022024:	3ba3198a 	.word	0x3ba3198a
 8022028:	252049c1 	.word	0x252049c1
 802202c:	397b839a 	.word	0x397b839a
 8022030:	3fe921fb 	.word	0x3fe921fb
 8022034:	4002d97b 	.word	0x4002d97b
 8022038:	3ff921fb 	.word	0x3ff921fb
 802203c:	413921fb 	.word	0x413921fb
 8022040:	3fe00000 	.word	0x3fe00000
 8022044:	08029d70 	.word	0x08029d70
 8022048:	7fefffff 	.word	0x7fefffff
 802204c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8022050:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8022054:	ee10 0a10 	vmov	r0, s0
 8022058:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 802205c:	ee10 6a10 	vmov	r6, s0
 8022060:	460f      	mov	r7, r1
 8022062:	f7de fd83 	bl	8000b6c <__aeabi_d2iz>
 8022066:	f7de fa67 	bl	8000538 <__aeabi_i2d>
 802206a:	4602      	mov	r2, r0
 802206c:	460b      	mov	r3, r1
 802206e:	4630      	mov	r0, r6
 8022070:	4639      	mov	r1, r7
 8022072:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022076:	f7de f911 	bl	800029c <__aeabi_dsub>
 802207a:	4b23      	ldr	r3, [pc, #140]	; (8022108 <__ieee754_rem_pio2+0x410>)
 802207c:	2200      	movs	r2, #0
 802207e:	f7de fac5 	bl	800060c <__aeabi_dmul>
 8022082:	460f      	mov	r7, r1
 8022084:	4606      	mov	r6, r0
 8022086:	f7de fd71 	bl	8000b6c <__aeabi_d2iz>
 802208a:	f7de fa55 	bl	8000538 <__aeabi_i2d>
 802208e:	4602      	mov	r2, r0
 8022090:	460b      	mov	r3, r1
 8022092:	4630      	mov	r0, r6
 8022094:	4639      	mov	r1, r7
 8022096:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802209a:	f7de f8ff 	bl	800029c <__aeabi_dsub>
 802209e:	4b1a      	ldr	r3, [pc, #104]	; (8022108 <__ieee754_rem_pio2+0x410>)
 80220a0:	2200      	movs	r2, #0
 80220a2:	f7de fab3 	bl	800060c <__aeabi_dmul>
 80220a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80220aa:	ad04      	add	r5, sp, #16
 80220ac:	f04f 0803 	mov.w	r8, #3
 80220b0:	46a9      	mov	r9, r5
 80220b2:	2600      	movs	r6, #0
 80220b4:	2700      	movs	r7, #0
 80220b6:	4632      	mov	r2, r6
 80220b8:	463b      	mov	r3, r7
 80220ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80220be:	46c3      	mov	fp, r8
 80220c0:	3d08      	subs	r5, #8
 80220c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80220c6:	f7de fd09 	bl	8000adc <__aeabi_dcmpeq>
 80220ca:	2800      	cmp	r0, #0
 80220cc:	d1f3      	bne.n	80220b6 <__ieee754_rem_pio2+0x3be>
 80220ce:	4b0f      	ldr	r3, [pc, #60]	; (802210c <__ieee754_rem_pio2+0x414>)
 80220d0:	9301      	str	r3, [sp, #4]
 80220d2:	2302      	movs	r3, #2
 80220d4:	9300      	str	r3, [sp, #0]
 80220d6:	4622      	mov	r2, r4
 80220d8:	465b      	mov	r3, fp
 80220da:	4651      	mov	r1, sl
 80220dc:	4648      	mov	r0, r9
 80220de:	f000 fbab 	bl	8022838 <__kernel_rem_pio2>
 80220e2:	9b02      	ldr	r3, [sp, #8]
 80220e4:	2b00      	cmp	r3, #0
 80220e6:	4683      	mov	fp, r0
 80220e8:	f6bf ae46 	bge.w	8021d78 <__ieee754_rem_pio2+0x80>
 80220ec:	e9da 2100 	ldrd	r2, r1, [sl]
 80220f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80220f4:	e9ca 2300 	strd	r2, r3, [sl]
 80220f8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80220fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022100:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8022104:	e73a      	b.n	8021f7c <__ieee754_rem_pio2+0x284>
 8022106:	bf00      	nop
 8022108:	41700000 	.word	0x41700000
 802210c:	08029df0 	.word	0x08029df0

08022110 <__ieee754_sqrt>:
 8022110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022114:	ec55 4b10 	vmov	r4, r5, d0
 8022118:	4e55      	ldr	r6, [pc, #340]	; (8022270 <__ieee754_sqrt+0x160>)
 802211a:	43ae      	bics	r6, r5
 802211c:	ee10 0a10 	vmov	r0, s0
 8022120:	ee10 3a10 	vmov	r3, s0
 8022124:	462a      	mov	r2, r5
 8022126:	4629      	mov	r1, r5
 8022128:	d110      	bne.n	802214c <__ieee754_sqrt+0x3c>
 802212a:	ee10 2a10 	vmov	r2, s0
 802212e:	462b      	mov	r3, r5
 8022130:	f7de fa6c 	bl	800060c <__aeabi_dmul>
 8022134:	4602      	mov	r2, r0
 8022136:	460b      	mov	r3, r1
 8022138:	4620      	mov	r0, r4
 802213a:	4629      	mov	r1, r5
 802213c:	f7de f8b0 	bl	80002a0 <__adddf3>
 8022140:	4604      	mov	r4, r0
 8022142:	460d      	mov	r5, r1
 8022144:	ec45 4b10 	vmov	d0, r4, r5
 8022148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802214c:	2d00      	cmp	r5, #0
 802214e:	dc10      	bgt.n	8022172 <__ieee754_sqrt+0x62>
 8022150:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8022154:	4330      	orrs	r0, r6
 8022156:	d0f5      	beq.n	8022144 <__ieee754_sqrt+0x34>
 8022158:	b15d      	cbz	r5, 8022172 <__ieee754_sqrt+0x62>
 802215a:	ee10 2a10 	vmov	r2, s0
 802215e:	462b      	mov	r3, r5
 8022160:	ee10 0a10 	vmov	r0, s0
 8022164:	f7de f89a 	bl	800029c <__aeabi_dsub>
 8022168:	4602      	mov	r2, r0
 802216a:	460b      	mov	r3, r1
 802216c:	f7de fb78 	bl	8000860 <__aeabi_ddiv>
 8022170:	e7e6      	b.n	8022140 <__ieee754_sqrt+0x30>
 8022172:	1512      	asrs	r2, r2, #20
 8022174:	d074      	beq.n	8022260 <__ieee754_sqrt+0x150>
 8022176:	07d4      	lsls	r4, r2, #31
 8022178:	f3c1 0113 	ubfx	r1, r1, #0, #20
 802217c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8022180:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8022184:	bf5e      	ittt	pl
 8022186:	0fda      	lsrpl	r2, r3, #31
 8022188:	005b      	lslpl	r3, r3, #1
 802218a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 802218e:	2400      	movs	r4, #0
 8022190:	0fda      	lsrs	r2, r3, #31
 8022192:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8022196:	107f      	asrs	r7, r7, #1
 8022198:	005b      	lsls	r3, r3, #1
 802219a:	2516      	movs	r5, #22
 802219c:	4620      	mov	r0, r4
 802219e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80221a2:	1886      	adds	r6, r0, r2
 80221a4:	428e      	cmp	r6, r1
 80221a6:	bfde      	ittt	le
 80221a8:	1b89      	suble	r1, r1, r6
 80221aa:	18b0      	addle	r0, r6, r2
 80221ac:	18a4      	addle	r4, r4, r2
 80221ae:	0049      	lsls	r1, r1, #1
 80221b0:	3d01      	subs	r5, #1
 80221b2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80221b6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80221ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80221be:	d1f0      	bne.n	80221a2 <__ieee754_sqrt+0x92>
 80221c0:	462a      	mov	r2, r5
 80221c2:	f04f 0e20 	mov.w	lr, #32
 80221c6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80221ca:	4281      	cmp	r1, r0
 80221cc:	eb06 0c05 	add.w	ip, r6, r5
 80221d0:	dc02      	bgt.n	80221d8 <__ieee754_sqrt+0xc8>
 80221d2:	d113      	bne.n	80221fc <__ieee754_sqrt+0xec>
 80221d4:	459c      	cmp	ip, r3
 80221d6:	d811      	bhi.n	80221fc <__ieee754_sqrt+0xec>
 80221d8:	f1bc 0f00 	cmp.w	ip, #0
 80221dc:	eb0c 0506 	add.w	r5, ip, r6
 80221e0:	da43      	bge.n	802226a <__ieee754_sqrt+0x15a>
 80221e2:	2d00      	cmp	r5, #0
 80221e4:	db41      	blt.n	802226a <__ieee754_sqrt+0x15a>
 80221e6:	f100 0801 	add.w	r8, r0, #1
 80221ea:	1a09      	subs	r1, r1, r0
 80221ec:	459c      	cmp	ip, r3
 80221ee:	bf88      	it	hi
 80221f0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80221f4:	eba3 030c 	sub.w	r3, r3, ip
 80221f8:	4432      	add	r2, r6
 80221fa:	4640      	mov	r0, r8
 80221fc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8022200:	f1be 0e01 	subs.w	lr, lr, #1
 8022204:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8022208:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802220c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8022210:	d1db      	bne.n	80221ca <__ieee754_sqrt+0xba>
 8022212:	430b      	orrs	r3, r1
 8022214:	d006      	beq.n	8022224 <__ieee754_sqrt+0x114>
 8022216:	1c50      	adds	r0, r2, #1
 8022218:	bf13      	iteet	ne
 802221a:	3201      	addne	r2, #1
 802221c:	3401      	addeq	r4, #1
 802221e:	4672      	moveq	r2, lr
 8022220:	f022 0201 	bicne.w	r2, r2, #1
 8022224:	1063      	asrs	r3, r4, #1
 8022226:	0852      	lsrs	r2, r2, #1
 8022228:	07e1      	lsls	r1, r4, #31
 802222a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 802222e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8022232:	bf48      	it	mi
 8022234:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8022238:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 802223c:	4614      	mov	r4, r2
 802223e:	e781      	b.n	8022144 <__ieee754_sqrt+0x34>
 8022240:	0ad9      	lsrs	r1, r3, #11
 8022242:	3815      	subs	r0, #21
 8022244:	055b      	lsls	r3, r3, #21
 8022246:	2900      	cmp	r1, #0
 8022248:	d0fa      	beq.n	8022240 <__ieee754_sqrt+0x130>
 802224a:	02cd      	lsls	r5, r1, #11
 802224c:	d50a      	bpl.n	8022264 <__ieee754_sqrt+0x154>
 802224e:	f1c2 0420 	rsb	r4, r2, #32
 8022252:	fa23 f404 	lsr.w	r4, r3, r4
 8022256:	1e55      	subs	r5, r2, #1
 8022258:	4093      	lsls	r3, r2
 802225a:	4321      	orrs	r1, r4
 802225c:	1b42      	subs	r2, r0, r5
 802225e:	e78a      	b.n	8022176 <__ieee754_sqrt+0x66>
 8022260:	4610      	mov	r0, r2
 8022262:	e7f0      	b.n	8022246 <__ieee754_sqrt+0x136>
 8022264:	0049      	lsls	r1, r1, #1
 8022266:	3201      	adds	r2, #1
 8022268:	e7ef      	b.n	802224a <__ieee754_sqrt+0x13a>
 802226a:	4680      	mov	r8, r0
 802226c:	e7bd      	b.n	80221ea <__ieee754_sqrt+0xda>
 802226e:	bf00      	nop
 8022270:	7ff00000 	.word	0x7ff00000

08022274 <__ieee754_expf>:
 8022274:	ee10 2a10 	vmov	r2, s0
 8022278:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 802227c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022280:	d902      	bls.n	8022288 <__ieee754_expf+0x14>
 8022282:	ee30 0a00 	vadd.f32	s0, s0, s0
 8022286:	4770      	bx	lr
 8022288:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 802228c:	d106      	bne.n	802229c <__ieee754_expf+0x28>
 802228e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80223c8 <__ieee754_expf+0x154>
 8022292:	2b00      	cmp	r3, #0
 8022294:	bf18      	it	ne
 8022296:	eeb0 0a67 	vmovne.f32	s0, s15
 802229a:	4770      	bx	lr
 802229c:	484b      	ldr	r0, [pc, #300]	; (80223cc <__ieee754_expf+0x158>)
 802229e:	4282      	cmp	r2, r0
 80222a0:	dd02      	ble.n	80222a8 <__ieee754_expf+0x34>
 80222a2:	2000      	movs	r0, #0
 80222a4:	f001 b92e 	b.w	8023504 <__math_oflowf>
 80222a8:	2a00      	cmp	r2, #0
 80222aa:	da05      	bge.n	80222b8 <__ieee754_expf+0x44>
 80222ac:	4a48      	ldr	r2, [pc, #288]	; (80223d0 <__ieee754_expf+0x15c>)
 80222ae:	4291      	cmp	r1, r2
 80222b0:	d902      	bls.n	80222b8 <__ieee754_expf+0x44>
 80222b2:	2000      	movs	r0, #0
 80222b4:	f001 b920 	b.w	80234f8 <__math_uflowf>
 80222b8:	4a46      	ldr	r2, [pc, #280]	; (80223d4 <__ieee754_expf+0x160>)
 80222ba:	4291      	cmp	r1, r2
 80222bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80222c0:	d952      	bls.n	8022368 <__ieee754_expf+0xf4>
 80222c2:	4a45      	ldr	r2, [pc, #276]	; (80223d8 <__ieee754_expf+0x164>)
 80222c4:	4291      	cmp	r1, r2
 80222c6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80222ca:	d834      	bhi.n	8022336 <__ieee754_expf+0xc2>
 80222cc:	4943      	ldr	r1, [pc, #268]	; (80223dc <__ieee754_expf+0x168>)
 80222ce:	4411      	add	r1, r2
 80222d0:	ed91 7a00 	vldr	s14, [r1]
 80222d4:	4942      	ldr	r1, [pc, #264]	; (80223e0 <__ieee754_expf+0x16c>)
 80222d6:	440a      	add	r2, r1
 80222d8:	edd2 7a00 	vldr	s15, [r2]
 80222dc:	ee30 7a47 	vsub.f32	s14, s0, s14
 80222e0:	f1c3 0201 	rsb	r2, r3, #1
 80222e4:	1ad2      	subs	r2, r2, r3
 80222e6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80222ea:	ee20 6a00 	vmul.f32	s12, s0, s0
 80222ee:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80223e4 <__ieee754_expf+0x170>
 80222f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80223e8 <__ieee754_expf+0x174>
 80222f6:	eee6 6a05 	vfma.f32	s13, s12, s10
 80222fa:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80223ec <__ieee754_expf+0x178>
 80222fe:	eea6 5a86 	vfma.f32	s10, s13, s12
 8022302:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80223f0 <__ieee754_expf+0x17c>
 8022306:	eee5 6a06 	vfma.f32	s13, s10, s12
 802230a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80223f4 <__ieee754_expf+0x180>
 802230e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8022312:	eef0 6a40 	vmov.f32	s13, s0
 8022316:	eee5 6a46 	vfms.f32	s13, s10, s12
 802231a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 802231e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8022322:	bb92      	cbnz	r2, 802238a <__ieee754_expf+0x116>
 8022324:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8022328:	eec5 7a26 	vdiv.f32	s15, s10, s13
 802232c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8022330:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8022334:	4770      	bx	lr
 8022336:	4b30      	ldr	r3, [pc, #192]	; (80223f8 <__ieee754_expf+0x184>)
 8022338:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80223fc <__ieee754_expf+0x188>
 802233c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8022400 <__ieee754_expf+0x18c>
 8022340:	4413      	add	r3, r2
 8022342:	edd3 7a00 	vldr	s15, [r3]
 8022346:	eee0 7a07 	vfma.f32	s15, s0, s14
 802234a:	eeb0 7a40 	vmov.f32	s14, s0
 802234e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022352:	ee17 2a90 	vmov	r2, s15
 8022356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802235a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802235e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8022404 <__ieee754_expf+0x190>
 8022362:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022366:	e7be      	b.n	80222e6 <__ieee754_expf+0x72>
 8022368:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 802236c:	d20b      	bcs.n	8022386 <__ieee754_expf+0x112>
 802236e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8022408 <__ieee754_expf+0x194>
 8022372:	ee70 6a26 	vadd.f32	s13, s0, s13
 8022376:	eef4 6ae5 	vcmpe.f32	s13, s11
 802237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802237e:	dd02      	ble.n	8022386 <__ieee754_expf+0x112>
 8022380:	ee30 0a25 	vadd.f32	s0, s0, s11
 8022384:	4770      	bx	lr
 8022386:	2200      	movs	r2, #0
 8022388:	e7af      	b.n	80222ea <__ieee754_expf+0x76>
 802238a:	ee76 6a66 	vsub.f32	s13, s12, s13
 802238e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8022392:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8022396:	bfb8      	it	lt
 8022398:	3264      	addlt	r2, #100	; 0x64
 802239a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802239e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80223a2:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80223a6:	ee17 3a90 	vmov	r3, s15
 80223aa:	bfab      	itete	ge
 80223ac:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80223b0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80223b4:	ee00 3a10 	vmovge	s0, r3
 80223b8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 802240c <__ieee754_expf+0x198>
 80223bc:	bfbc      	itt	lt
 80223be:	ee00 3a10 	vmovlt	s0, r3
 80223c2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80223c6:	4770      	bx	lr
 80223c8:	00000000 	.word	0x00000000
 80223cc:	42b17217 	.word	0x42b17217
 80223d0:	42cff1b5 	.word	0x42cff1b5
 80223d4:	3eb17218 	.word	0x3eb17218
 80223d8:	3f851591 	.word	0x3f851591
 80223dc:	08029f00 	.word	0x08029f00
 80223e0:	08029f08 	.word	0x08029f08
 80223e4:	3331bb4c 	.word	0x3331bb4c
 80223e8:	b5ddea0e 	.word	0xb5ddea0e
 80223ec:	388ab355 	.word	0x388ab355
 80223f0:	bb360b61 	.word	0xbb360b61
 80223f4:	3e2aaaab 	.word	0x3e2aaaab
 80223f8:	08029ef8 	.word	0x08029ef8
 80223fc:	3fb8aa3b 	.word	0x3fb8aa3b
 8022400:	3f317180 	.word	0x3f317180
 8022404:	3717f7d1 	.word	0x3717f7d1
 8022408:	7149f2ca 	.word	0x7149f2ca
 802240c:	0d800000 	.word	0x0d800000

08022410 <__ieee754_logf>:
 8022410:	ee10 3a10 	vmov	r3, s0
 8022414:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8022418:	d106      	bne.n	8022428 <__ieee754_logf+0x18>
 802241a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80225b0 <__ieee754_logf+0x1a0>
 802241e:	eddf 7a65 	vldr	s15, [pc, #404]	; 80225b4 <__ieee754_logf+0x1a4>
 8022422:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8022426:	4770      	bx	lr
 8022428:	2b00      	cmp	r3, #0
 802242a:	da02      	bge.n	8022432 <__ieee754_logf+0x22>
 802242c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8022430:	e7f5      	b.n	802241e <__ieee754_logf+0xe>
 8022432:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022436:	db02      	blt.n	802243e <__ieee754_logf+0x2e>
 8022438:	ee30 0a00 	vadd.f32	s0, s0, s0
 802243c:	4770      	bx	lr
 802243e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8022442:	bfb8      	it	lt
 8022444:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80225b8 <__ieee754_logf+0x1a8>
 8022448:	485c      	ldr	r0, [pc, #368]	; (80225bc <__ieee754_logf+0x1ac>)
 802244a:	bfbe      	ittt	lt
 802244c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8022450:	f06f 0118 	mvnlt.w	r1, #24
 8022454:	ee17 3a90 	vmovlt	r3, s15
 8022458:	ea4f 52e3 	mov.w	r2, r3, asr #23
 802245c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8022460:	4418      	add	r0, r3
 8022462:	bfa8      	it	ge
 8022464:	2100      	movge	r1, #0
 8022466:	3a7f      	subs	r2, #127	; 0x7f
 8022468:	440a      	add	r2, r1
 802246a:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 802246e:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8022472:	4319      	orrs	r1, r3
 8022474:	ee00 1a10 	vmov	s0, r1
 8022478:	4951      	ldr	r1, [pc, #324]	; (80225c0 <__ieee754_logf+0x1b0>)
 802247a:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 802247e:	f103 000f 	add.w	r0, r3, #15
 8022482:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022486:	4001      	ands	r1, r0
 8022488:	ee30 0a67 	vsub.f32	s0, s0, s15
 802248c:	bb89      	cbnz	r1, 80224f2 <__ieee754_logf+0xe2>
 802248e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8022492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022496:	d10f      	bne.n	80224b8 <__ieee754_logf+0xa8>
 8022498:	2a00      	cmp	r2, #0
 802249a:	f000 8085 	beq.w	80225a8 <__ieee754_logf+0x198>
 802249e:	ee07 2a90 	vmov	s15, r2
 80224a2:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80225c4 <__ieee754_logf+0x1b4>
 80224a6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80225c8 <__ieee754_logf+0x1b8>
 80224aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80224ae:	ee27 0a80 	vmul.f32	s0, s15, s0
 80224b2:	eea7 0a87 	vfma.f32	s0, s15, s14
 80224b6:	4770      	bx	lr
 80224b8:	eddf 6a44 	vldr	s13, [pc, #272]	; 80225cc <__ieee754_logf+0x1bc>
 80224bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80224c0:	eee0 7a66 	vfms.f32	s15, s0, s13
 80224c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80224c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80224cc:	b912      	cbnz	r2, 80224d4 <__ieee754_logf+0xc4>
 80224ce:	ee30 0a47 	vsub.f32	s0, s0, s14
 80224d2:	4770      	bx	lr
 80224d4:	ee07 2a90 	vmov	s15, r2
 80224d8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80225c4 <__ieee754_logf+0x1b4>
 80224dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80224e0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80224e4:	ee37 0a40 	vsub.f32	s0, s14, s0
 80224e8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80225c8 <__ieee754_logf+0x1b8>
 80224ec:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80224f0:	4770      	bx	lr
 80224f2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80224f6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80224fa:	eddf 5a35 	vldr	s11, [pc, #212]	; 80225d0 <__ieee754_logf+0x1c0>
 80224fe:	eddf 4a35 	vldr	s9, [pc, #212]	; 80225d4 <__ieee754_logf+0x1c4>
 8022502:	4935      	ldr	r1, [pc, #212]	; (80225d8 <__ieee754_logf+0x1c8>)
 8022504:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8022508:	4419      	add	r1, r3
 802250a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 802250e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8022512:	430b      	orrs	r3, r1
 8022514:	2b00      	cmp	r3, #0
 8022516:	ee07 2a90 	vmov	s15, r2
 802251a:	ee26 5a06 	vmul.f32	s10, s12, s12
 802251e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8022522:	ee25 7a05 	vmul.f32	s14, s10, s10
 8022526:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80225dc <__ieee754_logf+0x1cc>
 802252a:	eee7 7a25 	vfma.f32	s15, s14, s11
 802252e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80225e0 <__ieee754_logf+0x1d0>
 8022532:	eee7 5a87 	vfma.f32	s11, s15, s14
 8022536:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80225e4 <__ieee754_logf+0x1d4>
 802253a:	eee7 7a24 	vfma.f32	s15, s14, s9
 802253e:	eddf 4a2a 	vldr	s9, [pc, #168]	; 80225e8 <__ieee754_logf+0x1d8>
 8022542:	eee7 4a87 	vfma.f32	s9, s15, s14
 8022546:	eddf 7a29 	vldr	s15, [pc, #164]	; 80225ec <__ieee754_logf+0x1dc>
 802254a:	eee4 7a87 	vfma.f32	s15, s9, s14
 802254e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8022552:	eee5 7a87 	vfma.f32	s15, s11, s14
 8022556:	dd1c      	ble.n	8022592 <__ieee754_logf+0x182>
 8022558:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802255c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8022560:	ee27 7a00 	vmul.f32	s14, s14, s0
 8022564:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022568:	ee67 7a86 	vmul.f32	s15, s15, s12
 802256c:	b922      	cbnz	r2, 8022578 <__ieee754_logf+0x168>
 802256e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022572:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022576:	4770      	bx	lr
 8022578:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80225c4 <__ieee754_logf+0x1b4>
 802257c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8022580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022584:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8022588:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80225c8 <__ieee754_logf+0x1b8>
 802258c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8022590:	4770      	bx	lr
 8022592:	ee70 7a67 	vsub.f32	s15, s0, s15
 8022596:	ee67 7a86 	vmul.f32	s15, s15, s12
 802259a:	2a00      	cmp	r2, #0
 802259c:	d0e9      	beq.n	8022572 <__ieee754_logf+0x162>
 802259e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80225c4 <__ieee754_logf+0x1b4>
 80225a2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80225a6:	e7ed      	b.n	8022584 <__ieee754_logf+0x174>
 80225a8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80225b4 <__ieee754_logf+0x1a4>
 80225ac:	4770      	bx	lr
 80225ae:	bf00      	nop
 80225b0:	cc000000 	.word	0xcc000000
 80225b4:	00000000 	.word	0x00000000
 80225b8:	4c000000 	.word	0x4c000000
 80225bc:	004afb20 	.word	0x004afb20
 80225c0:	007ffff0 	.word	0x007ffff0
 80225c4:	3717f7d1 	.word	0x3717f7d1
 80225c8:	3f317180 	.word	0x3f317180
 80225cc:	3eaaaaab 	.word	0x3eaaaaab
 80225d0:	3e1cd04f 	.word	0x3e1cd04f
 80225d4:	3e178897 	.word	0x3e178897
 80225d8:	ffcf5c30 	.word	0xffcf5c30
 80225dc:	3e638e29 	.word	0x3e638e29
 80225e0:	3ecccccd 	.word	0x3ecccccd
 80225e4:	3e3a3325 	.word	0x3e3a3325
 80225e8:	3e924925 	.word	0x3e924925
 80225ec:	3f2aaaab 	.word	0x3f2aaaab

080225f0 <__ieee754_log10f>:
 80225f0:	b508      	push	{r3, lr}
 80225f2:	ee10 2a10 	vmov	r2, s0
 80225f6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80225fa:	ed2d 8b02 	vpush	{d8}
 80225fe:	d108      	bne.n	8022612 <__ieee754_log10f+0x22>
 8022600:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8022688 <__ieee754_log10f+0x98>
 8022604:	eddf 7a21 	vldr	s15, [pc, #132]	; 802268c <__ieee754_log10f+0x9c>
 8022608:	ee87 0a27 	vdiv.f32	s0, s14, s15
 802260c:	ecbd 8b02 	vpop	{d8}
 8022610:	bd08      	pop	{r3, pc}
 8022612:	2a00      	cmp	r2, #0
 8022614:	da02      	bge.n	802261c <__ieee754_log10f+0x2c>
 8022616:	ee30 7a40 	vsub.f32	s14, s0, s0
 802261a:	e7f3      	b.n	8022604 <__ieee754_log10f+0x14>
 802261c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8022620:	db02      	blt.n	8022628 <__ieee754_log10f+0x38>
 8022622:	ee30 0a00 	vadd.f32	s0, s0, s0
 8022626:	e7f1      	b.n	802260c <__ieee754_log10f+0x1c>
 8022628:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 802262c:	bfbf      	itttt	lt
 802262e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8022690 <__ieee754_log10f+0xa0>
 8022632:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8022636:	f06f 0118 	mvnlt.w	r1, #24
 802263a:	ee17 2a90 	vmovlt	r2, s15
 802263e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8022642:	bfa8      	it	ge
 8022644:	2100      	movge	r1, #0
 8022646:	3b7f      	subs	r3, #127	; 0x7f
 8022648:	440b      	add	r3, r1
 802264a:	0fd9      	lsrs	r1, r3, #31
 802264c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8022650:	ee07 3a90 	vmov	s15, r3
 8022654:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8022658:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 802265c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8022660:	ee00 3a10 	vmov	s0, r3
 8022664:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8022668:	f7ff fed2 	bl	8022410 <__ieee754_logf>
 802266c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8022694 <__ieee754_log10f+0xa4>
 8022670:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022674:	eddf 7a08 	vldr	s15, [pc, #32]	; 8022698 <__ieee754_log10f+0xa8>
 8022678:	eea8 0a27 	vfma.f32	s0, s16, s15
 802267c:	eddf 7a07 	vldr	s15, [pc, #28]	; 802269c <__ieee754_log10f+0xac>
 8022680:	eea8 0a27 	vfma.f32	s0, s16, s15
 8022684:	e7c2      	b.n	802260c <__ieee754_log10f+0x1c>
 8022686:	bf00      	nop
 8022688:	cc000000 	.word	0xcc000000
 802268c:	00000000 	.word	0x00000000
 8022690:	4c000000 	.word	0x4c000000
 8022694:	3ede5bd9 	.word	0x3ede5bd9
 8022698:	355427db 	.word	0x355427db
 802269c:	3e9a2080 	.word	0x3e9a2080

080226a0 <__ieee754_sqrtf>:
 80226a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80226a4:	4770      	bx	lr
	...

080226a8 <__kernel_cos>:
 80226a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226ac:	ec57 6b10 	vmov	r6, r7, d0
 80226b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80226b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80226b8:	ed8d 1b00 	vstr	d1, [sp]
 80226bc:	da07      	bge.n	80226ce <__kernel_cos+0x26>
 80226be:	ee10 0a10 	vmov	r0, s0
 80226c2:	4639      	mov	r1, r7
 80226c4:	f7de fa52 	bl	8000b6c <__aeabi_d2iz>
 80226c8:	2800      	cmp	r0, #0
 80226ca:	f000 8088 	beq.w	80227de <__kernel_cos+0x136>
 80226ce:	4632      	mov	r2, r6
 80226d0:	463b      	mov	r3, r7
 80226d2:	4630      	mov	r0, r6
 80226d4:	4639      	mov	r1, r7
 80226d6:	f7dd ff99 	bl	800060c <__aeabi_dmul>
 80226da:	4b51      	ldr	r3, [pc, #324]	; (8022820 <__kernel_cos+0x178>)
 80226dc:	2200      	movs	r2, #0
 80226de:	4604      	mov	r4, r0
 80226e0:	460d      	mov	r5, r1
 80226e2:	f7dd ff93 	bl	800060c <__aeabi_dmul>
 80226e6:	a340      	add	r3, pc, #256	; (adr r3, 80227e8 <__kernel_cos+0x140>)
 80226e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226ec:	4682      	mov	sl, r0
 80226ee:	468b      	mov	fp, r1
 80226f0:	4620      	mov	r0, r4
 80226f2:	4629      	mov	r1, r5
 80226f4:	f7dd ff8a 	bl	800060c <__aeabi_dmul>
 80226f8:	a33d      	add	r3, pc, #244	; (adr r3, 80227f0 <__kernel_cos+0x148>)
 80226fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226fe:	f7dd fdcf 	bl	80002a0 <__adddf3>
 8022702:	4622      	mov	r2, r4
 8022704:	462b      	mov	r3, r5
 8022706:	f7dd ff81 	bl	800060c <__aeabi_dmul>
 802270a:	a33b      	add	r3, pc, #236	; (adr r3, 80227f8 <__kernel_cos+0x150>)
 802270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022710:	f7dd fdc4 	bl	800029c <__aeabi_dsub>
 8022714:	4622      	mov	r2, r4
 8022716:	462b      	mov	r3, r5
 8022718:	f7dd ff78 	bl	800060c <__aeabi_dmul>
 802271c:	a338      	add	r3, pc, #224	; (adr r3, 8022800 <__kernel_cos+0x158>)
 802271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022722:	f7dd fdbd 	bl	80002a0 <__adddf3>
 8022726:	4622      	mov	r2, r4
 8022728:	462b      	mov	r3, r5
 802272a:	f7dd ff6f 	bl	800060c <__aeabi_dmul>
 802272e:	a336      	add	r3, pc, #216	; (adr r3, 8022808 <__kernel_cos+0x160>)
 8022730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022734:	f7dd fdb2 	bl	800029c <__aeabi_dsub>
 8022738:	4622      	mov	r2, r4
 802273a:	462b      	mov	r3, r5
 802273c:	f7dd ff66 	bl	800060c <__aeabi_dmul>
 8022740:	a333      	add	r3, pc, #204	; (adr r3, 8022810 <__kernel_cos+0x168>)
 8022742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022746:	f7dd fdab 	bl	80002a0 <__adddf3>
 802274a:	4622      	mov	r2, r4
 802274c:	462b      	mov	r3, r5
 802274e:	f7dd ff5d 	bl	800060c <__aeabi_dmul>
 8022752:	4622      	mov	r2, r4
 8022754:	462b      	mov	r3, r5
 8022756:	f7dd ff59 	bl	800060c <__aeabi_dmul>
 802275a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802275e:	4604      	mov	r4, r0
 8022760:	460d      	mov	r5, r1
 8022762:	4630      	mov	r0, r6
 8022764:	4639      	mov	r1, r7
 8022766:	f7dd ff51 	bl	800060c <__aeabi_dmul>
 802276a:	460b      	mov	r3, r1
 802276c:	4602      	mov	r2, r0
 802276e:	4629      	mov	r1, r5
 8022770:	4620      	mov	r0, r4
 8022772:	f7dd fd93 	bl	800029c <__aeabi_dsub>
 8022776:	4b2b      	ldr	r3, [pc, #172]	; (8022824 <__kernel_cos+0x17c>)
 8022778:	4598      	cmp	r8, r3
 802277a:	4606      	mov	r6, r0
 802277c:	460f      	mov	r7, r1
 802277e:	dc10      	bgt.n	80227a2 <__kernel_cos+0xfa>
 8022780:	4602      	mov	r2, r0
 8022782:	460b      	mov	r3, r1
 8022784:	4650      	mov	r0, sl
 8022786:	4659      	mov	r1, fp
 8022788:	f7dd fd88 	bl	800029c <__aeabi_dsub>
 802278c:	460b      	mov	r3, r1
 802278e:	4926      	ldr	r1, [pc, #152]	; (8022828 <__kernel_cos+0x180>)
 8022790:	4602      	mov	r2, r0
 8022792:	2000      	movs	r0, #0
 8022794:	f7dd fd82 	bl	800029c <__aeabi_dsub>
 8022798:	ec41 0b10 	vmov	d0, r0, r1
 802279c:	b003      	add	sp, #12
 802279e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227a2:	4b22      	ldr	r3, [pc, #136]	; (802282c <__kernel_cos+0x184>)
 80227a4:	4920      	ldr	r1, [pc, #128]	; (8022828 <__kernel_cos+0x180>)
 80227a6:	4598      	cmp	r8, r3
 80227a8:	bfcc      	ite	gt
 80227aa:	4d21      	ldrgt	r5, [pc, #132]	; (8022830 <__kernel_cos+0x188>)
 80227ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80227b0:	2400      	movs	r4, #0
 80227b2:	4622      	mov	r2, r4
 80227b4:	462b      	mov	r3, r5
 80227b6:	2000      	movs	r0, #0
 80227b8:	f7dd fd70 	bl	800029c <__aeabi_dsub>
 80227bc:	4622      	mov	r2, r4
 80227be:	4680      	mov	r8, r0
 80227c0:	4689      	mov	r9, r1
 80227c2:	462b      	mov	r3, r5
 80227c4:	4650      	mov	r0, sl
 80227c6:	4659      	mov	r1, fp
 80227c8:	f7dd fd68 	bl	800029c <__aeabi_dsub>
 80227cc:	4632      	mov	r2, r6
 80227ce:	463b      	mov	r3, r7
 80227d0:	f7dd fd64 	bl	800029c <__aeabi_dsub>
 80227d4:	4602      	mov	r2, r0
 80227d6:	460b      	mov	r3, r1
 80227d8:	4640      	mov	r0, r8
 80227da:	4649      	mov	r1, r9
 80227dc:	e7da      	b.n	8022794 <__kernel_cos+0xec>
 80227de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8022818 <__kernel_cos+0x170>
 80227e2:	e7db      	b.n	802279c <__kernel_cos+0xf4>
 80227e4:	f3af 8000 	nop.w
 80227e8:	be8838d4 	.word	0xbe8838d4
 80227ec:	bda8fae9 	.word	0xbda8fae9
 80227f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80227f4:	3e21ee9e 	.word	0x3e21ee9e
 80227f8:	809c52ad 	.word	0x809c52ad
 80227fc:	3e927e4f 	.word	0x3e927e4f
 8022800:	19cb1590 	.word	0x19cb1590
 8022804:	3efa01a0 	.word	0x3efa01a0
 8022808:	16c15177 	.word	0x16c15177
 802280c:	3f56c16c 	.word	0x3f56c16c
 8022810:	5555554c 	.word	0x5555554c
 8022814:	3fa55555 	.word	0x3fa55555
 8022818:	00000000 	.word	0x00000000
 802281c:	3ff00000 	.word	0x3ff00000
 8022820:	3fe00000 	.word	0x3fe00000
 8022824:	3fd33332 	.word	0x3fd33332
 8022828:	3ff00000 	.word	0x3ff00000
 802282c:	3fe90000 	.word	0x3fe90000
 8022830:	3fd20000 	.word	0x3fd20000
 8022834:	00000000 	.word	0x00000000

08022838 <__kernel_rem_pio2>:
 8022838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802283c:	ed2d 8b02 	vpush	{d8}
 8022840:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8022844:	f112 0f14 	cmn.w	r2, #20
 8022848:	9308      	str	r3, [sp, #32]
 802284a:	9101      	str	r1, [sp, #4]
 802284c:	4bc4      	ldr	r3, [pc, #784]	; (8022b60 <__kernel_rem_pio2+0x328>)
 802284e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8022850:	900b      	str	r0, [sp, #44]	; 0x2c
 8022852:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022856:	9302      	str	r3, [sp, #8]
 8022858:	9b08      	ldr	r3, [sp, #32]
 802285a:	f103 33ff 	add.w	r3, r3, #4294967295
 802285e:	bfa8      	it	ge
 8022860:	1ed4      	subge	r4, r2, #3
 8022862:	9306      	str	r3, [sp, #24]
 8022864:	bfb2      	itee	lt
 8022866:	2400      	movlt	r4, #0
 8022868:	2318      	movge	r3, #24
 802286a:	fb94 f4f3 	sdivge	r4, r4, r3
 802286e:	f06f 0317 	mvn.w	r3, #23
 8022872:	fb04 3303 	mla	r3, r4, r3, r3
 8022876:	eb03 0a02 	add.w	sl, r3, r2
 802287a:	9b02      	ldr	r3, [sp, #8]
 802287c:	9a06      	ldr	r2, [sp, #24]
 802287e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8022b50 <__kernel_rem_pio2+0x318>
 8022882:	eb03 0802 	add.w	r8, r3, r2
 8022886:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8022888:	1aa7      	subs	r7, r4, r2
 802288a:	ae22      	add	r6, sp, #136	; 0x88
 802288c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8022890:	2500      	movs	r5, #0
 8022892:	4545      	cmp	r5, r8
 8022894:	dd13      	ble.n	80228be <__kernel_rem_pio2+0x86>
 8022896:	9b08      	ldr	r3, [sp, #32]
 8022898:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8022b50 <__kernel_rem_pio2+0x318>
 802289c:	aa22      	add	r2, sp, #136	; 0x88
 802289e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80228a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80228a6:	f04f 0800 	mov.w	r8, #0
 80228aa:	9b02      	ldr	r3, [sp, #8]
 80228ac:	4598      	cmp	r8, r3
 80228ae:	dc2f      	bgt.n	8022910 <__kernel_rem_pio2+0xd8>
 80228b0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80228b4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80228b8:	462f      	mov	r7, r5
 80228ba:	2600      	movs	r6, #0
 80228bc:	e01b      	b.n	80228f6 <__kernel_rem_pio2+0xbe>
 80228be:	42ef      	cmn	r7, r5
 80228c0:	d407      	bmi.n	80228d2 <__kernel_rem_pio2+0x9a>
 80228c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80228c6:	f7dd fe37 	bl	8000538 <__aeabi_i2d>
 80228ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80228ce:	3501      	adds	r5, #1
 80228d0:	e7df      	b.n	8022892 <__kernel_rem_pio2+0x5a>
 80228d2:	ec51 0b18 	vmov	r0, r1, d8
 80228d6:	e7f8      	b.n	80228ca <__kernel_rem_pio2+0x92>
 80228d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80228dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80228e0:	f7dd fe94 	bl	800060c <__aeabi_dmul>
 80228e4:	4602      	mov	r2, r0
 80228e6:	460b      	mov	r3, r1
 80228e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80228ec:	f7dd fcd8 	bl	80002a0 <__adddf3>
 80228f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80228f4:	3601      	adds	r6, #1
 80228f6:	9b06      	ldr	r3, [sp, #24]
 80228f8:	429e      	cmp	r6, r3
 80228fa:	f1a7 0708 	sub.w	r7, r7, #8
 80228fe:	ddeb      	ble.n	80228d8 <__kernel_rem_pio2+0xa0>
 8022900:	ed9d 7b04 	vldr	d7, [sp, #16]
 8022904:	f108 0801 	add.w	r8, r8, #1
 8022908:	ecab 7b02 	vstmia	fp!, {d7}
 802290c:	3508      	adds	r5, #8
 802290e:	e7cc      	b.n	80228aa <__kernel_rem_pio2+0x72>
 8022910:	9b02      	ldr	r3, [sp, #8]
 8022912:	aa0e      	add	r2, sp, #56	; 0x38
 8022914:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022918:	930d      	str	r3, [sp, #52]	; 0x34
 802291a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 802291c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8022920:	9c02      	ldr	r4, [sp, #8]
 8022922:	930c      	str	r3, [sp, #48]	; 0x30
 8022924:	00e3      	lsls	r3, r4, #3
 8022926:	930a      	str	r3, [sp, #40]	; 0x28
 8022928:	ab9a      	add	r3, sp, #616	; 0x268
 802292a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802292e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8022932:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8022936:	ab72      	add	r3, sp, #456	; 0x1c8
 8022938:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 802293c:	46c3      	mov	fp, r8
 802293e:	46a1      	mov	r9, r4
 8022940:	f1b9 0f00 	cmp.w	r9, #0
 8022944:	f1a5 0508 	sub.w	r5, r5, #8
 8022948:	dc77      	bgt.n	8022a3a <__kernel_rem_pio2+0x202>
 802294a:	ec47 6b10 	vmov	d0, r6, r7
 802294e:	4650      	mov	r0, sl
 8022950:	f000 fdfa 	bl	8023548 <scalbn>
 8022954:	ec57 6b10 	vmov	r6, r7, d0
 8022958:	2200      	movs	r2, #0
 802295a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 802295e:	ee10 0a10 	vmov	r0, s0
 8022962:	4639      	mov	r1, r7
 8022964:	f7dd fe52 	bl	800060c <__aeabi_dmul>
 8022968:	ec41 0b10 	vmov	d0, r0, r1
 802296c:	f7fe f9a0 	bl	8020cb0 <floor>
 8022970:	4b7c      	ldr	r3, [pc, #496]	; (8022b64 <__kernel_rem_pio2+0x32c>)
 8022972:	ec51 0b10 	vmov	r0, r1, d0
 8022976:	2200      	movs	r2, #0
 8022978:	f7dd fe48 	bl	800060c <__aeabi_dmul>
 802297c:	4602      	mov	r2, r0
 802297e:	460b      	mov	r3, r1
 8022980:	4630      	mov	r0, r6
 8022982:	4639      	mov	r1, r7
 8022984:	f7dd fc8a 	bl	800029c <__aeabi_dsub>
 8022988:	460f      	mov	r7, r1
 802298a:	4606      	mov	r6, r0
 802298c:	f7de f8ee 	bl	8000b6c <__aeabi_d2iz>
 8022990:	9004      	str	r0, [sp, #16]
 8022992:	f7dd fdd1 	bl	8000538 <__aeabi_i2d>
 8022996:	4602      	mov	r2, r0
 8022998:	460b      	mov	r3, r1
 802299a:	4630      	mov	r0, r6
 802299c:	4639      	mov	r1, r7
 802299e:	f7dd fc7d 	bl	800029c <__aeabi_dsub>
 80229a2:	f1ba 0f00 	cmp.w	sl, #0
 80229a6:	4606      	mov	r6, r0
 80229a8:	460f      	mov	r7, r1
 80229aa:	dd6d      	ble.n	8022a88 <__kernel_rem_pio2+0x250>
 80229ac:	1e62      	subs	r2, r4, #1
 80229ae:	ab0e      	add	r3, sp, #56	; 0x38
 80229b0:	9d04      	ldr	r5, [sp, #16]
 80229b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80229b6:	f1ca 0118 	rsb	r1, sl, #24
 80229ba:	fa40 f301 	asr.w	r3, r0, r1
 80229be:	441d      	add	r5, r3
 80229c0:	408b      	lsls	r3, r1
 80229c2:	1ac0      	subs	r0, r0, r3
 80229c4:	ab0e      	add	r3, sp, #56	; 0x38
 80229c6:	9504      	str	r5, [sp, #16]
 80229c8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80229cc:	f1ca 0317 	rsb	r3, sl, #23
 80229d0:	fa40 fb03 	asr.w	fp, r0, r3
 80229d4:	f1bb 0f00 	cmp.w	fp, #0
 80229d8:	dd65      	ble.n	8022aa6 <__kernel_rem_pio2+0x26e>
 80229da:	9b04      	ldr	r3, [sp, #16]
 80229dc:	2200      	movs	r2, #0
 80229de:	3301      	adds	r3, #1
 80229e0:	9304      	str	r3, [sp, #16]
 80229e2:	4615      	mov	r5, r2
 80229e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80229e8:	4294      	cmp	r4, r2
 80229ea:	f300 809c 	bgt.w	8022b26 <__kernel_rem_pio2+0x2ee>
 80229ee:	f1ba 0f00 	cmp.w	sl, #0
 80229f2:	dd07      	ble.n	8022a04 <__kernel_rem_pio2+0x1cc>
 80229f4:	f1ba 0f01 	cmp.w	sl, #1
 80229f8:	f000 80c0 	beq.w	8022b7c <__kernel_rem_pio2+0x344>
 80229fc:	f1ba 0f02 	cmp.w	sl, #2
 8022a00:	f000 80c6 	beq.w	8022b90 <__kernel_rem_pio2+0x358>
 8022a04:	f1bb 0f02 	cmp.w	fp, #2
 8022a08:	d14d      	bne.n	8022aa6 <__kernel_rem_pio2+0x26e>
 8022a0a:	4632      	mov	r2, r6
 8022a0c:	463b      	mov	r3, r7
 8022a0e:	4956      	ldr	r1, [pc, #344]	; (8022b68 <__kernel_rem_pio2+0x330>)
 8022a10:	2000      	movs	r0, #0
 8022a12:	f7dd fc43 	bl	800029c <__aeabi_dsub>
 8022a16:	4606      	mov	r6, r0
 8022a18:	460f      	mov	r7, r1
 8022a1a:	2d00      	cmp	r5, #0
 8022a1c:	d043      	beq.n	8022aa6 <__kernel_rem_pio2+0x26e>
 8022a1e:	4650      	mov	r0, sl
 8022a20:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8022b58 <__kernel_rem_pio2+0x320>
 8022a24:	f000 fd90 	bl	8023548 <scalbn>
 8022a28:	4630      	mov	r0, r6
 8022a2a:	4639      	mov	r1, r7
 8022a2c:	ec53 2b10 	vmov	r2, r3, d0
 8022a30:	f7dd fc34 	bl	800029c <__aeabi_dsub>
 8022a34:	4606      	mov	r6, r0
 8022a36:	460f      	mov	r7, r1
 8022a38:	e035      	b.n	8022aa6 <__kernel_rem_pio2+0x26e>
 8022a3a:	4b4c      	ldr	r3, [pc, #304]	; (8022b6c <__kernel_rem_pio2+0x334>)
 8022a3c:	2200      	movs	r2, #0
 8022a3e:	4630      	mov	r0, r6
 8022a40:	4639      	mov	r1, r7
 8022a42:	f7dd fde3 	bl	800060c <__aeabi_dmul>
 8022a46:	f7de f891 	bl	8000b6c <__aeabi_d2iz>
 8022a4a:	f7dd fd75 	bl	8000538 <__aeabi_i2d>
 8022a4e:	4602      	mov	r2, r0
 8022a50:	460b      	mov	r3, r1
 8022a52:	ec43 2b18 	vmov	d8, r2, r3
 8022a56:	4b46      	ldr	r3, [pc, #280]	; (8022b70 <__kernel_rem_pio2+0x338>)
 8022a58:	2200      	movs	r2, #0
 8022a5a:	f7dd fdd7 	bl	800060c <__aeabi_dmul>
 8022a5e:	4602      	mov	r2, r0
 8022a60:	460b      	mov	r3, r1
 8022a62:	4630      	mov	r0, r6
 8022a64:	4639      	mov	r1, r7
 8022a66:	f7dd fc19 	bl	800029c <__aeabi_dsub>
 8022a6a:	f7de f87f 	bl	8000b6c <__aeabi_d2iz>
 8022a6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022a72:	f84b 0b04 	str.w	r0, [fp], #4
 8022a76:	ec51 0b18 	vmov	r0, r1, d8
 8022a7a:	f7dd fc11 	bl	80002a0 <__adddf3>
 8022a7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8022a82:	4606      	mov	r6, r0
 8022a84:	460f      	mov	r7, r1
 8022a86:	e75b      	b.n	8022940 <__kernel_rem_pio2+0x108>
 8022a88:	d106      	bne.n	8022a98 <__kernel_rem_pio2+0x260>
 8022a8a:	1e63      	subs	r3, r4, #1
 8022a8c:	aa0e      	add	r2, sp, #56	; 0x38
 8022a8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8022a92:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8022a96:	e79d      	b.n	80229d4 <__kernel_rem_pio2+0x19c>
 8022a98:	4b36      	ldr	r3, [pc, #216]	; (8022b74 <__kernel_rem_pio2+0x33c>)
 8022a9a:	2200      	movs	r2, #0
 8022a9c:	f7de f83c 	bl	8000b18 <__aeabi_dcmpge>
 8022aa0:	2800      	cmp	r0, #0
 8022aa2:	d13d      	bne.n	8022b20 <__kernel_rem_pio2+0x2e8>
 8022aa4:	4683      	mov	fp, r0
 8022aa6:	2200      	movs	r2, #0
 8022aa8:	2300      	movs	r3, #0
 8022aaa:	4630      	mov	r0, r6
 8022aac:	4639      	mov	r1, r7
 8022aae:	f7de f815 	bl	8000adc <__aeabi_dcmpeq>
 8022ab2:	2800      	cmp	r0, #0
 8022ab4:	f000 80c0 	beq.w	8022c38 <__kernel_rem_pio2+0x400>
 8022ab8:	1e65      	subs	r5, r4, #1
 8022aba:	462b      	mov	r3, r5
 8022abc:	2200      	movs	r2, #0
 8022abe:	9902      	ldr	r1, [sp, #8]
 8022ac0:	428b      	cmp	r3, r1
 8022ac2:	da6c      	bge.n	8022b9e <__kernel_rem_pio2+0x366>
 8022ac4:	2a00      	cmp	r2, #0
 8022ac6:	f000 8089 	beq.w	8022bdc <__kernel_rem_pio2+0x3a4>
 8022aca:	ab0e      	add	r3, sp, #56	; 0x38
 8022acc:	f1aa 0a18 	sub.w	sl, sl, #24
 8022ad0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8022ad4:	2b00      	cmp	r3, #0
 8022ad6:	f000 80ad 	beq.w	8022c34 <__kernel_rem_pio2+0x3fc>
 8022ada:	4650      	mov	r0, sl
 8022adc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8022b58 <__kernel_rem_pio2+0x320>
 8022ae0:	f000 fd32 	bl	8023548 <scalbn>
 8022ae4:	ab9a      	add	r3, sp, #616	; 0x268
 8022ae6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8022aea:	ec57 6b10 	vmov	r6, r7, d0
 8022aee:	00ec      	lsls	r4, r5, #3
 8022af0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8022af4:	46aa      	mov	sl, r5
 8022af6:	f1ba 0f00 	cmp.w	sl, #0
 8022afa:	f280 80d6 	bge.w	8022caa <__kernel_rem_pio2+0x472>
 8022afe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8022b50 <__kernel_rem_pio2+0x318>
 8022b02:	462e      	mov	r6, r5
 8022b04:	2e00      	cmp	r6, #0
 8022b06:	f2c0 8104 	blt.w	8022d12 <__kernel_rem_pio2+0x4da>
 8022b0a:	ab72      	add	r3, sp, #456	; 0x1c8
 8022b0c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8022b10:	f8df a064 	ldr.w	sl, [pc, #100]	; 8022b78 <__kernel_rem_pio2+0x340>
 8022b14:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8022b18:	f04f 0800 	mov.w	r8, #0
 8022b1c:	1baf      	subs	r7, r5, r6
 8022b1e:	e0ea      	b.n	8022cf6 <__kernel_rem_pio2+0x4be>
 8022b20:	f04f 0b02 	mov.w	fp, #2
 8022b24:	e759      	b.n	80229da <__kernel_rem_pio2+0x1a2>
 8022b26:	f8d8 3000 	ldr.w	r3, [r8]
 8022b2a:	b955      	cbnz	r5, 8022b42 <__kernel_rem_pio2+0x30a>
 8022b2c:	b123      	cbz	r3, 8022b38 <__kernel_rem_pio2+0x300>
 8022b2e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8022b32:	f8c8 3000 	str.w	r3, [r8]
 8022b36:	2301      	movs	r3, #1
 8022b38:	3201      	adds	r2, #1
 8022b3a:	f108 0804 	add.w	r8, r8, #4
 8022b3e:	461d      	mov	r5, r3
 8022b40:	e752      	b.n	80229e8 <__kernel_rem_pio2+0x1b0>
 8022b42:	1acb      	subs	r3, r1, r3
 8022b44:	f8c8 3000 	str.w	r3, [r8]
 8022b48:	462b      	mov	r3, r5
 8022b4a:	e7f5      	b.n	8022b38 <__kernel_rem_pio2+0x300>
 8022b4c:	f3af 8000 	nop.w
	...
 8022b5c:	3ff00000 	.word	0x3ff00000
 8022b60:	08029f50 	.word	0x08029f50
 8022b64:	40200000 	.word	0x40200000
 8022b68:	3ff00000 	.word	0x3ff00000
 8022b6c:	3e700000 	.word	0x3e700000
 8022b70:	41700000 	.word	0x41700000
 8022b74:	3fe00000 	.word	0x3fe00000
 8022b78:	08029f10 	.word	0x08029f10
 8022b7c:	1e62      	subs	r2, r4, #1
 8022b7e:	ab0e      	add	r3, sp, #56	; 0x38
 8022b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022b84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8022b88:	a90e      	add	r1, sp, #56	; 0x38
 8022b8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8022b8e:	e739      	b.n	8022a04 <__kernel_rem_pio2+0x1cc>
 8022b90:	1e62      	subs	r2, r4, #1
 8022b92:	ab0e      	add	r3, sp, #56	; 0x38
 8022b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022b98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8022b9c:	e7f4      	b.n	8022b88 <__kernel_rem_pio2+0x350>
 8022b9e:	a90e      	add	r1, sp, #56	; 0x38
 8022ba0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8022ba4:	3b01      	subs	r3, #1
 8022ba6:	430a      	orrs	r2, r1
 8022ba8:	e789      	b.n	8022abe <__kernel_rem_pio2+0x286>
 8022baa:	3301      	adds	r3, #1
 8022bac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8022bb0:	2900      	cmp	r1, #0
 8022bb2:	d0fa      	beq.n	8022baa <__kernel_rem_pio2+0x372>
 8022bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022bb6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8022bba:	446a      	add	r2, sp
 8022bbc:	3a98      	subs	r2, #152	; 0x98
 8022bbe:	920a      	str	r2, [sp, #40]	; 0x28
 8022bc0:	9a08      	ldr	r2, [sp, #32]
 8022bc2:	18e3      	adds	r3, r4, r3
 8022bc4:	18a5      	adds	r5, r4, r2
 8022bc6:	aa22      	add	r2, sp, #136	; 0x88
 8022bc8:	f104 0801 	add.w	r8, r4, #1
 8022bcc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8022bd0:	9304      	str	r3, [sp, #16]
 8022bd2:	9b04      	ldr	r3, [sp, #16]
 8022bd4:	4543      	cmp	r3, r8
 8022bd6:	da04      	bge.n	8022be2 <__kernel_rem_pio2+0x3aa>
 8022bd8:	461c      	mov	r4, r3
 8022bda:	e6a3      	b.n	8022924 <__kernel_rem_pio2+0xec>
 8022bdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022bde:	2301      	movs	r3, #1
 8022be0:	e7e4      	b.n	8022bac <__kernel_rem_pio2+0x374>
 8022be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022be4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8022be8:	f7dd fca6 	bl	8000538 <__aeabi_i2d>
 8022bec:	e8e5 0102 	strd	r0, r1, [r5], #8
 8022bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022bf2:	46ab      	mov	fp, r5
 8022bf4:	461c      	mov	r4, r3
 8022bf6:	f04f 0900 	mov.w	r9, #0
 8022bfa:	2600      	movs	r6, #0
 8022bfc:	2700      	movs	r7, #0
 8022bfe:	9b06      	ldr	r3, [sp, #24]
 8022c00:	4599      	cmp	r9, r3
 8022c02:	dd06      	ble.n	8022c12 <__kernel_rem_pio2+0x3da>
 8022c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c06:	e8e3 6702 	strd	r6, r7, [r3], #8
 8022c0a:	f108 0801 	add.w	r8, r8, #1
 8022c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8022c10:	e7df      	b.n	8022bd2 <__kernel_rem_pio2+0x39a>
 8022c12:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8022c16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8022c1a:	f7dd fcf7 	bl	800060c <__aeabi_dmul>
 8022c1e:	4602      	mov	r2, r0
 8022c20:	460b      	mov	r3, r1
 8022c22:	4630      	mov	r0, r6
 8022c24:	4639      	mov	r1, r7
 8022c26:	f7dd fb3b 	bl	80002a0 <__adddf3>
 8022c2a:	f109 0901 	add.w	r9, r9, #1
 8022c2e:	4606      	mov	r6, r0
 8022c30:	460f      	mov	r7, r1
 8022c32:	e7e4      	b.n	8022bfe <__kernel_rem_pio2+0x3c6>
 8022c34:	3d01      	subs	r5, #1
 8022c36:	e748      	b.n	8022aca <__kernel_rem_pio2+0x292>
 8022c38:	ec47 6b10 	vmov	d0, r6, r7
 8022c3c:	f1ca 0000 	rsb	r0, sl, #0
 8022c40:	f000 fc82 	bl	8023548 <scalbn>
 8022c44:	ec57 6b10 	vmov	r6, r7, d0
 8022c48:	4ba0      	ldr	r3, [pc, #640]	; (8022ecc <__kernel_rem_pio2+0x694>)
 8022c4a:	ee10 0a10 	vmov	r0, s0
 8022c4e:	2200      	movs	r2, #0
 8022c50:	4639      	mov	r1, r7
 8022c52:	f7dd ff61 	bl	8000b18 <__aeabi_dcmpge>
 8022c56:	b1f8      	cbz	r0, 8022c98 <__kernel_rem_pio2+0x460>
 8022c58:	4b9d      	ldr	r3, [pc, #628]	; (8022ed0 <__kernel_rem_pio2+0x698>)
 8022c5a:	2200      	movs	r2, #0
 8022c5c:	4630      	mov	r0, r6
 8022c5e:	4639      	mov	r1, r7
 8022c60:	f7dd fcd4 	bl	800060c <__aeabi_dmul>
 8022c64:	f7dd ff82 	bl	8000b6c <__aeabi_d2iz>
 8022c68:	4680      	mov	r8, r0
 8022c6a:	f7dd fc65 	bl	8000538 <__aeabi_i2d>
 8022c6e:	4b97      	ldr	r3, [pc, #604]	; (8022ecc <__kernel_rem_pio2+0x694>)
 8022c70:	2200      	movs	r2, #0
 8022c72:	f7dd fccb 	bl	800060c <__aeabi_dmul>
 8022c76:	460b      	mov	r3, r1
 8022c78:	4602      	mov	r2, r0
 8022c7a:	4639      	mov	r1, r7
 8022c7c:	4630      	mov	r0, r6
 8022c7e:	f7dd fb0d 	bl	800029c <__aeabi_dsub>
 8022c82:	f7dd ff73 	bl	8000b6c <__aeabi_d2iz>
 8022c86:	1c65      	adds	r5, r4, #1
 8022c88:	ab0e      	add	r3, sp, #56	; 0x38
 8022c8a:	f10a 0a18 	add.w	sl, sl, #24
 8022c8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8022c92:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8022c96:	e720      	b.n	8022ada <__kernel_rem_pio2+0x2a2>
 8022c98:	4630      	mov	r0, r6
 8022c9a:	4639      	mov	r1, r7
 8022c9c:	f7dd ff66 	bl	8000b6c <__aeabi_d2iz>
 8022ca0:	ab0e      	add	r3, sp, #56	; 0x38
 8022ca2:	4625      	mov	r5, r4
 8022ca4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8022ca8:	e717      	b.n	8022ada <__kernel_rem_pio2+0x2a2>
 8022caa:	ab0e      	add	r3, sp, #56	; 0x38
 8022cac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8022cb0:	f7dd fc42 	bl	8000538 <__aeabi_i2d>
 8022cb4:	4632      	mov	r2, r6
 8022cb6:	463b      	mov	r3, r7
 8022cb8:	f7dd fca8 	bl	800060c <__aeabi_dmul>
 8022cbc:	4b84      	ldr	r3, [pc, #528]	; (8022ed0 <__kernel_rem_pio2+0x698>)
 8022cbe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8022cc2:	2200      	movs	r2, #0
 8022cc4:	4630      	mov	r0, r6
 8022cc6:	4639      	mov	r1, r7
 8022cc8:	f7dd fca0 	bl	800060c <__aeabi_dmul>
 8022ccc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022cd0:	4606      	mov	r6, r0
 8022cd2:	460f      	mov	r7, r1
 8022cd4:	e70f      	b.n	8022af6 <__kernel_rem_pio2+0x2be>
 8022cd6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8022cda:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8022cde:	f7dd fc95 	bl	800060c <__aeabi_dmul>
 8022ce2:	4602      	mov	r2, r0
 8022ce4:	460b      	mov	r3, r1
 8022ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022cea:	f7dd fad9 	bl	80002a0 <__adddf3>
 8022cee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022cf2:	f108 0801 	add.w	r8, r8, #1
 8022cf6:	9b02      	ldr	r3, [sp, #8]
 8022cf8:	4598      	cmp	r8, r3
 8022cfa:	dc01      	bgt.n	8022d00 <__kernel_rem_pio2+0x4c8>
 8022cfc:	45b8      	cmp	r8, r7
 8022cfe:	ddea      	ble.n	8022cd6 <__kernel_rem_pio2+0x49e>
 8022d00:	ed9d 7b06 	vldr	d7, [sp, #24]
 8022d04:	ab4a      	add	r3, sp, #296	; 0x128
 8022d06:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8022d0a:	ed87 7b00 	vstr	d7, [r7]
 8022d0e:	3e01      	subs	r6, #1
 8022d10:	e6f8      	b.n	8022b04 <__kernel_rem_pio2+0x2cc>
 8022d12:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8022d14:	2b02      	cmp	r3, #2
 8022d16:	dc0b      	bgt.n	8022d30 <__kernel_rem_pio2+0x4f8>
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	dc35      	bgt.n	8022d88 <__kernel_rem_pio2+0x550>
 8022d1c:	d059      	beq.n	8022dd2 <__kernel_rem_pio2+0x59a>
 8022d1e:	9b04      	ldr	r3, [sp, #16]
 8022d20:	f003 0007 	and.w	r0, r3, #7
 8022d24:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8022d28:	ecbd 8b02 	vpop	{d8}
 8022d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d30:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8022d32:	2b03      	cmp	r3, #3
 8022d34:	d1f3      	bne.n	8022d1e <__kernel_rem_pio2+0x4e6>
 8022d36:	ab4a      	add	r3, sp, #296	; 0x128
 8022d38:	4423      	add	r3, r4
 8022d3a:	9306      	str	r3, [sp, #24]
 8022d3c:	461c      	mov	r4, r3
 8022d3e:	469a      	mov	sl, r3
 8022d40:	9502      	str	r5, [sp, #8]
 8022d42:	9b02      	ldr	r3, [sp, #8]
 8022d44:	2b00      	cmp	r3, #0
 8022d46:	f1aa 0a08 	sub.w	sl, sl, #8
 8022d4a:	dc6b      	bgt.n	8022e24 <__kernel_rem_pio2+0x5ec>
 8022d4c:	46aa      	mov	sl, r5
 8022d4e:	f1ba 0f01 	cmp.w	sl, #1
 8022d52:	f1a4 0408 	sub.w	r4, r4, #8
 8022d56:	f300 8085 	bgt.w	8022e64 <__kernel_rem_pio2+0x62c>
 8022d5a:	9c06      	ldr	r4, [sp, #24]
 8022d5c:	2000      	movs	r0, #0
 8022d5e:	3408      	adds	r4, #8
 8022d60:	2100      	movs	r1, #0
 8022d62:	2d01      	cmp	r5, #1
 8022d64:	f300 809d 	bgt.w	8022ea2 <__kernel_rem_pio2+0x66a>
 8022d68:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8022d6c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8022d70:	f1bb 0f00 	cmp.w	fp, #0
 8022d74:	f040 809b 	bne.w	8022eae <__kernel_rem_pio2+0x676>
 8022d78:	9b01      	ldr	r3, [sp, #4]
 8022d7a:	e9c3 5600 	strd	r5, r6, [r3]
 8022d7e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8022d82:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8022d86:	e7ca      	b.n	8022d1e <__kernel_rem_pio2+0x4e6>
 8022d88:	3408      	adds	r4, #8
 8022d8a:	ab4a      	add	r3, sp, #296	; 0x128
 8022d8c:	441c      	add	r4, r3
 8022d8e:	462e      	mov	r6, r5
 8022d90:	2000      	movs	r0, #0
 8022d92:	2100      	movs	r1, #0
 8022d94:	2e00      	cmp	r6, #0
 8022d96:	da36      	bge.n	8022e06 <__kernel_rem_pio2+0x5ce>
 8022d98:	f1bb 0f00 	cmp.w	fp, #0
 8022d9c:	d039      	beq.n	8022e12 <__kernel_rem_pio2+0x5da>
 8022d9e:	4602      	mov	r2, r0
 8022da0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022da4:	9c01      	ldr	r4, [sp, #4]
 8022da6:	e9c4 2300 	strd	r2, r3, [r4]
 8022daa:	4602      	mov	r2, r0
 8022dac:	460b      	mov	r3, r1
 8022dae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8022db2:	f7dd fa73 	bl	800029c <__aeabi_dsub>
 8022db6:	ae4c      	add	r6, sp, #304	; 0x130
 8022db8:	2401      	movs	r4, #1
 8022dba:	42a5      	cmp	r5, r4
 8022dbc:	da2c      	bge.n	8022e18 <__kernel_rem_pio2+0x5e0>
 8022dbe:	f1bb 0f00 	cmp.w	fp, #0
 8022dc2:	d002      	beq.n	8022dca <__kernel_rem_pio2+0x592>
 8022dc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022dc8:	4619      	mov	r1, r3
 8022dca:	9b01      	ldr	r3, [sp, #4]
 8022dcc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8022dd0:	e7a5      	b.n	8022d1e <__kernel_rem_pio2+0x4e6>
 8022dd2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8022dd6:	eb0d 0403 	add.w	r4, sp, r3
 8022dda:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8022dde:	2000      	movs	r0, #0
 8022de0:	2100      	movs	r1, #0
 8022de2:	2d00      	cmp	r5, #0
 8022de4:	da09      	bge.n	8022dfa <__kernel_rem_pio2+0x5c2>
 8022de6:	f1bb 0f00 	cmp.w	fp, #0
 8022dea:	d002      	beq.n	8022df2 <__kernel_rem_pio2+0x5ba>
 8022dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022df0:	4619      	mov	r1, r3
 8022df2:	9b01      	ldr	r3, [sp, #4]
 8022df4:	e9c3 0100 	strd	r0, r1, [r3]
 8022df8:	e791      	b.n	8022d1e <__kernel_rem_pio2+0x4e6>
 8022dfa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8022dfe:	f7dd fa4f 	bl	80002a0 <__adddf3>
 8022e02:	3d01      	subs	r5, #1
 8022e04:	e7ed      	b.n	8022de2 <__kernel_rem_pio2+0x5aa>
 8022e06:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8022e0a:	f7dd fa49 	bl	80002a0 <__adddf3>
 8022e0e:	3e01      	subs	r6, #1
 8022e10:	e7c0      	b.n	8022d94 <__kernel_rem_pio2+0x55c>
 8022e12:	4602      	mov	r2, r0
 8022e14:	460b      	mov	r3, r1
 8022e16:	e7c5      	b.n	8022da4 <__kernel_rem_pio2+0x56c>
 8022e18:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8022e1c:	f7dd fa40 	bl	80002a0 <__adddf3>
 8022e20:	3401      	adds	r4, #1
 8022e22:	e7ca      	b.n	8022dba <__kernel_rem_pio2+0x582>
 8022e24:	e9da 8900 	ldrd	r8, r9, [sl]
 8022e28:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8022e2c:	9b02      	ldr	r3, [sp, #8]
 8022e2e:	3b01      	subs	r3, #1
 8022e30:	9302      	str	r3, [sp, #8]
 8022e32:	4632      	mov	r2, r6
 8022e34:	463b      	mov	r3, r7
 8022e36:	4640      	mov	r0, r8
 8022e38:	4649      	mov	r1, r9
 8022e3a:	f7dd fa31 	bl	80002a0 <__adddf3>
 8022e3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022e42:	4602      	mov	r2, r0
 8022e44:	460b      	mov	r3, r1
 8022e46:	4640      	mov	r0, r8
 8022e48:	4649      	mov	r1, r9
 8022e4a:	f7dd fa27 	bl	800029c <__aeabi_dsub>
 8022e4e:	4632      	mov	r2, r6
 8022e50:	463b      	mov	r3, r7
 8022e52:	f7dd fa25 	bl	80002a0 <__adddf3>
 8022e56:	ed9d 7b08 	vldr	d7, [sp, #32]
 8022e5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022e5e:	ed8a 7b00 	vstr	d7, [sl]
 8022e62:	e76e      	b.n	8022d42 <__kernel_rem_pio2+0x50a>
 8022e64:	e9d4 8900 	ldrd	r8, r9, [r4]
 8022e68:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8022e6c:	4640      	mov	r0, r8
 8022e6e:	4632      	mov	r2, r6
 8022e70:	463b      	mov	r3, r7
 8022e72:	4649      	mov	r1, r9
 8022e74:	f7dd fa14 	bl	80002a0 <__adddf3>
 8022e78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022e7c:	4602      	mov	r2, r0
 8022e7e:	460b      	mov	r3, r1
 8022e80:	4640      	mov	r0, r8
 8022e82:	4649      	mov	r1, r9
 8022e84:	f7dd fa0a 	bl	800029c <__aeabi_dsub>
 8022e88:	4632      	mov	r2, r6
 8022e8a:	463b      	mov	r3, r7
 8022e8c:	f7dd fa08 	bl	80002a0 <__adddf3>
 8022e90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022e94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8022e98:	ed84 7b00 	vstr	d7, [r4]
 8022e9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022ea0:	e755      	b.n	8022d4e <__kernel_rem_pio2+0x516>
 8022ea2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8022ea6:	f7dd f9fb 	bl	80002a0 <__adddf3>
 8022eaa:	3d01      	subs	r5, #1
 8022eac:	e759      	b.n	8022d62 <__kernel_rem_pio2+0x52a>
 8022eae:	9b01      	ldr	r3, [sp, #4]
 8022eb0:	9a01      	ldr	r2, [sp, #4]
 8022eb2:	601d      	str	r5, [r3, #0]
 8022eb4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8022eb8:	605c      	str	r4, [r3, #4]
 8022eba:	609f      	str	r7, [r3, #8]
 8022ebc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8022ec0:	60d3      	str	r3, [r2, #12]
 8022ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022ec6:	6110      	str	r0, [r2, #16]
 8022ec8:	6153      	str	r3, [r2, #20]
 8022eca:	e728      	b.n	8022d1e <__kernel_rem_pio2+0x4e6>
 8022ecc:	41700000 	.word	0x41700000
 8022ed0:	3e700000 	.word	0x3e700000
 8022ed4:	00000000 	.word	0x00000000

08022ed8 <__kernel_sin>:
 8022ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022edc:	ed2d 8b04 	vpush	{d8-d9}
 8022ee0:	eeb0 8a41 	vmov.f32	s16, s2
 8022ee4:	eef0 8a61 	vmov.f32	s17, s3
 8022ee8:	ec55 4b10 	vmov	r4, r5, d0
 8022eec:	b083      	sub	sp, #12
 8022eee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022ef2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8022ef6:	9001      	str	r0, [sp, #4]
 8022ef8:	da06      	bge.n	8022f08 <__kernel_sin+0x30>
 8022efa:	ee10 0a10 	vmov	r0, s0
 8022efe:	4629      	mov	r1, r5
 8022f00:	f7dd fe34 	bl	8000b6c <__aeabi_d2iz>
 8022f04:	2800      	cmp	r0, #0
 8022f06:	d051      	beq.n	8022fac <__kernel_sin+0xd4>
 8022f08:	4622      	mov	r2, r4
 8022f0a:	462b      	mov	r3, r5
 8022f0c:	4620      	mov	r0, r4
 8022f0e:	4629      	mov	r1, r5
 8022f10:	f7dd fb7c 	bl	800060c <__aeabi_dmul>
 8022f14:	4682      	mov	sl, r0
 8022f16:	468b      	mov	fp, r1
 8022f18:	4602      	mov	r2, r0
 8022f1a:	460b      	mov	r3, r1
 8022f1c:	4620      	mov	r0, r4
 8022f1e:	4629      	mov	r1, r5
 8022f20:	f7dd fb74 	bl	800060c <__aeabi_dmul>
 8022f24:	a341      	add	r3, pc, #260	; (adr r3, 802302c <__kernel_sin+0x154>)
 8022f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f2a:	4680      	mov	r8, r0
 8022f2c:	4689      	mov	r9, r1
 8022f2e:	4650      	mov	r0, sl
 8022f30:	4659      	mov	r1, fp
 8022f32:	f7dd fb6b 	bl	800060c <__aeabi_dmul>
 8022f36:	a33f      	add	r3, pc, #252	; (adr r3, 8023034 <__kernel_sin+0x15c>)
 8022f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f3c:	f7dd f9ae 	bl	800029c <__aeabi_dsub>
 8022f40:	4652      	mov	r2, sl
 8022f42:	465b      	mov	r3, fp
 8022f44:	f7dd fb62 	bl	800060c <__aeabi_dmul>
 8022f48:	a33c      	add	r3, pc, #240	; (adr r3, 802303c <__kernel_sin+0x164>)
 8022f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f4e:	f7dd f9a7 	bl	80002a0 <__adddf3>
 8022f52:	4652      	mov	r2, sl
 8022f54:	465b      	mov	r3, fp
 8022f56:	f7dd fb59 	bl	800060c <__aeabi_dmul>
 8022f5a:	a33a      	add	r3, pc, #232	; (adr r3, 8023044 <__kernel_sin+0x16c>)
 8022f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f60:	f7dd f99c 	bl	800029c <__aeabi_dsub>
 8022f64:	4652      	mov	r2, sl
 8022f66:	465b      	mov	r3, fp
 8022f68:	f7dd fb50 	bl	800060c <__aeabi_dmul>
 8022f6c:	a337      	add	r3, pc, #220	; (adr r3, 802304c <__kernel_sin+0x174>)
 8022f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f72:	f7dd f995 	bl	80002a0 <__adddf3>
 8022f76:	9b01      	ldr	r3, [sp, #4]
 8022f78:	4606      	mov	r6, r0
 8022f7a:	460f      	mov	r7, r1
 8022f7c:	b9eb      	cbnz	r3, 8022fba <__kernel_sin+0xe2>
 8022f7e:	4602      	mov	r2, r0
 8022f80:	460b      	mov	r3, r1
 8022f82:	4650      	mov	r0, sl
 8022f84:	4659      	mov	r1, fp
 8022f86:	f7dd fb41 	bl	800060c <__aeabi_dmul>
 8022f8a:	a325      	add	r3, pc, #148	; (adr r3, 8023020 <__kernel_sin+0x148>)
 8022f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f90:	f7dd f984 	bl	800029c <__aeabi_dsub>
 8022f94:	4642      	mov	r2, r8
 8022f96:	464b      	mov	r3, r9
 8022f98:	f7dd fb38 	bl	800060c <__aeabi_dmul>
 8022f9c:	4602      	mov	r2, r0
 8022f9e:	460b      	mov	r3, r1
 8022fa0:	4620      	mov	r0, r4
 8022fa2:	4629      	mov	r1, r5
 8022fa4:	f7dd f97c 	bl	80002a0 <__adddf3>
 8022fa8:	4604      	mov	r4, r0
 8022faa:	460d      	mov	r5, r1
 8022fac:	ec45 4b10 	vmov	d0, r4, r5
 8022fb0:	b003      	add	sp, #12
 8022fb2:	ecbd 8b04 	vpop	{d8-d9}
 8022fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fba:	4b1b      	ldr	r3, [pc, #108]	; (8023028 <__kernel_sin+0x150>)
 8022fbc:	ec51 0b18 	vmov	r0, r1, d8
 8022fc0:	2200      	movs	r2, #0
 8022fc2:	f7dd fb23 	bl	800060c <__aeabi_dmul>
 8022fc6:	4632      	mov	r2, r6
 8022fc8:	ec41 0b19 	vmov	d9, r0, r1
 8022fcc:	463b      	mov	r3, r7
 8022fce:	4640      	mov	r0, r8
 8022fd0:	4649      	mov	r1, r9
 8022fd2:	f7dd fb1b 	bl	800060c <__aeabi_dmul>
 8022fd6:	4602      	mov	r2, r0
 8022fd8:	460b      	mov	r3, r1
 8022fda:	ec51 0b19 	vmov	r0, r1, d9
 8022fde:	f7dd f95d 	bl	800029c <__aeabi_dsub>
 8022fe2:	4652      	mov	r2, sl
 8022fe4:	465b      	mov	r3, fp
 8022fe6:	f7dd fb11 	bl	800060c <__aeabi_dmul>
 8022fea:	ec53 2b18 	vmov	r2, r3, d8
 8022fee:	f7dd f955 	bl	800029c <__aeabi_dsub>
 8022ff2:	a30b      	add	r3, pc, #44	; (adr r3, 8023020 <__kernel_sin+0x148>)
 8022ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ff8:	4606      	mov	r6, r0
 8022ffa:	460f      	mov	r7, r1
 8022ffc:	4640      	mov	r0, r8
 8022ffe:	4649      	mov	r1, r9
 8023000:	f7dd fb04 	bl	800060c <__aeabi_dmul>
 8023004:	4602      	mov	r2, r0
 8023006:	460b      	mov	r3, r1
 8023008:	4630      	mov	r0, r6
 802300a:	4639      	mov	r1, r7
 802300c:	f7dd f948 	bl	80002a0 <__adddf3>
 8023010:	4602      	mov	r2, r0
 8023012:	460b      	mov	r3, r1
 8023014:	4620      	mov	r0, r4
 8023016:	4629      	mov	r1, r5
 8023018:	f7dd f940 	bl	800029c <__aeabi_dsub>
 802301c:	e7c4      	b.n	8022fa8 <__kernel_sin+0xd0>
 802301e:	bf00      	nop
 8023020:	55555549 	.word	0x55555549
 8023024:	3fc55555 	.word	0x3fc55555
 8023028:	3fe00000 	.word	0x3fe00000
 802302c:	5acfd57c 	.word	0x5acfd57c
 8023030:	3de5d93a 	.word	0x3de5d93a
 8023034:	8a2b9ceb 	.word	0x8a2b9ceb
 8023038:	3e5ae5e6 	.word	0x3e5ae5e6
 802303c:	57b1fe7d 	.word	0x57b1fe7d
 8023040:	3ec71de3 	.word	0x3ec71de3
 8023044:	19c161d5 	.word	0x19c161d5
 8023048:	3f2a01a0 	.word	0x3f2a01a0
 802304c:	1110f8a6 	.word	0x1110f8a6
 8023050:	3f811111 	.word	0x3f811111
 8023054:	00000000 	.word	0x00000000

08023058 <__kernel_tan>:
 8023058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802305c:	ed2d 8b06 	vpush	{d8-d10}
 8023060:	ec5b ab10 	vmov	sl, fp, d0
 8023064:	4be0      	ldr	r3, [pc, #896]	; (80233e8 <__kernel_tan+0x390>)
 8023066:	b083      	sub	sp, #12
 8023068:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 802306c:	429f      	cmp	r7, r3
 802306e:	ec59 8b11 	vmov	r8, r9, d1
 8023072:	4606      	mov	r6, r0
 8023074:	f8cd b000 	str.w	fp, [sp]
 8023078:	dc61      	bgt.n	802313e <__kernel_tan+0xe6>
 802307a:	ee10 0a10 	vmov	r0, s0
 802307e:	4659      	mov	r1, fp
 8023080:	f7dd fd74 	bl	8000b6c <__aeabi_d2iz>
 8023084:	4605      	mov	r5, r0
 8023086:	2800      	cmp	r0, #0
 8023088:	f040 8083 	bne.w	8023192 <__kernel_tan+0x13a>
 802308c:	1c73      	adds	r3, r6, #1
 802308e:	4652      	mov	r2, sl
 8023090:	4313      	orrs	r3, r2
 8023092:	433b      	orrs	r3, r7
 8023094:	d112      	bne.n	80230bc <__kernel_tan+0x64>
 8023096:	ec4b ab10 	vmov	d0, sl, fp
 802309a:	f000 fa39 	bl	8023510 <fabs>
 802309e:	49d3      	ldr	r1, [pc, #844]	; (80233ec <__kernel_tan+0x394>)
 80230a0:	ec53 2b10 	vmov	r2, r3, d0
 80230a4:	2000      	movs	r0, #0
 80230a6:	f7dd fbdb 	bl	8000860 <__aeabi_ddiv>
 80230aa:	4682      	mov	sl, r0
 80230ac:	468b      	mov	fp, r1
 80230ae:	ec4b ab10 	vmov	d0, sl, fp
 80230b2:	b003      	add	sp, #12
 80230b4:	ecbd 8b06 	vpop	{d8-d10}
 80230b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230bc:	2e01      	cmp	r6, #1
 80230be:	d0f6      	beq.n	80230ae <__kernel_tan+0x56>
 80230c0:	4642      	mov	r2, r8
 80230c2:	464b      	mov	r3, r9
 80230c4:	4650      	mov	r0, sl
 80230c6:	4659      	mov	r1, fp
 80230c8:	f7dd f8ea 	bl	80002a0 <__adddf3>
 80230cc:	4602      	mov	r2, r0
 80230ce:	460b      	mov	r3, r1
 80230d0:	460f      	mov	r7, r1
 80230d2:	2000      	movs	r0, #0
 80230d4:	49c6      	ldr	r1, [pc, #792]	; (80233f0 <__kernel_tan+0x398>)
 80230d6:	f7dd fbc3 	bl	8000860 <__aeabi_ddiv>
 80230da:	e9cd 0100 	strd	r0, r1, [sp]
 80230de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80230e2:	462e      	mov	r6, r5
 80230e4:	4652      	mov	r2, sl
 80230e6:	462c      	mov	r4, r5
 80230e8:	4630      	mov	r0, r6
 80230ea:	461d      	mov	r5, r3
 80230ec:	4639      	mov	r1, r7
 80230ee:	465b      	mov	r3, fp
 80230f0:	f7dd f8d4 	bl	800029c <__aeabi_dsub>
 80230f4:	4602      	mov	r2, r0
 80230f6:	460b      	mov	r3, r1
 80230f8:	4640      	mov	r0, r8
 80230fa:	4649      	mov	r1, r9
 80230fc:	f7dd f8ce 	bl	800029c <__aeabi_dsub>
 8023100:	4632      	mov	r2, r6
 8023102:	462b      	mov	r3, r5
 8023104:	f7dd fa82 	bl	800060c <__aeabi_dmul>
 8023108:	4632      	mov	r2, r6
 802310a:	4680      	mov	r8, r0
 802310c:	4689      	mov	r9, r1
 802310e:	462b      	mov	r3, r5
 8023110:	4630      	mov	r0, r6
 8023112:	4639      	mov	r1, r7
 8023114:	f7dd fa7a 	bl	800060c <__aeabi_dmul>
 8023118:	4bb4      	ldr	r3, [pc, #720]	; (80233ec <__kernel_tan+0x394>)
 802311a:	2200      	movs	r2, #0
 802311c:	f7dd f8c0 	bl	80002a0 <__adddf3>
 8023120:	4602      	mov	r2, r0
 8023122:	460b      	mov	r3, r1
 8023124:	4640      	mov	r0, r8
 8023126:	4649      	mov	r1, r9
 8023128:	f7dd f8ba 	bl	80002a0 <__adddf3>
 802312c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023130:	f7dd fa6c 	bl	800060c <__aeabi_dmul>
 8023134:	4622      	mov	r2, r4
 8023136:	462b      	mov	r3, r5
 8023138:	f7dd f8b2 	bl	80002a0 <__adddf3>
 802313c:	e7b5      	b.n	80230aa <__kernel_tan+0x52>
 802313e:	4bad      	ldr	r3, [pc, #692]	; (80233f4 <__kernel_tan+0x39c>)
 8023140:	429f      	cmp	r7, r3
 8023142:	dd26      	ble.n	8023192 <__kernel_tan+0x13a>
 8023144:	9b00      	ldr	r3, [sp, #0]
 8023146:	2b00      	cmp	r3, #0
 8023148:	da09      	bge.n	802315e <__kernel_tan+0x106>
 802314a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802314e:	469b      	mov	fp, r3
 8023150:	ee10 aa10 	vmov	sl, s0
 8023154:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8023158:	ee11 8a10 	vmov	r8, s2
 802315c:	4699      	mov	r9, r3
 802315e:	4652      	mov	r2, sl
 8023160:	465b      	mov	r3, fp
 8023162:	a183      	add	r1, pc, #524	; (adr r1, 8023370 <__kernel_tan+0x318>)
 8023164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023168:	f7dd f898 	bl	800029c <__aeabi_dsub>
 802316c:	4642      	mov	r2, r8
 802316e:	464b      	mov	r3, r9
 8023170:	4604      	mov	r4, r0
 8023172:	460d      	mov	r5, r1
 8023174:	a180      	add	r1, pc, #512	; (adr r1, 8023378 <__kernel_tan+0x320>)
 8023176:	e9d1 0100 	ldrd	r0, r1, [r1]
 802317a:	f7dd f88f 	bl	800029c <__aeabi_dsub>
 802317e:	4622      	mov	r2, r4
 8023180:	462b      	mov	r3, r5
 8023182:	f7dd f88d 	bl	80002a0 <__adddf3>
 8023186:	f04f 0800 	mov.w	r8, #0
 802318a:	4682      	mov	sl, r0
 802318c:	468b      	mov	fp, r1
 802318e:	f04f 0900 	mov.w	r9, #0
 8023192:	4652      	mov	r2, sl
 8023194:	465b      	mov	r3, fp
 8023196:	4650      	mov	r0, sl
 8023198:	4659      	mov	r1, fp
 802319a:	f7dd fa37 	bl	800060c <__aeabi_dmul>
 802319e:	4602      	mov	r2, r0
 80231a0:	460b      	mov	r3, r1
 80231a2:	ec43 2b18 	vmov	d8, r2, r3
 80231a6:	f7dd fa31 	bl	800060c <__aeabi_dmul>
 80231aa:	ec53 2b18 	vmov	r2, r3, d8
 80231ae:	4604      	mov	r4, r0
 80231b0:	460d      	mov	r5, r1
 80231b2:	4650      	mov	r0, sl
 80231b4:	4659      	mov	r1, fp
 80231b6:	f7dd fa29 	bl	800060c <__aeabi_dmul>
 80231ba:	a371      	add	r3, pc, #452	; (adr r3, 8023380 <__kernel_tan+0x328>)
 80231bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231c0:	ec41 0b19 	vmov	d9, r0, r1
 80231c4:	4620      	mov	r0, r4
 80231c6:	4629      	mov	r1, r5
 80231c8:	f7dd fa20 	bl	800060c <__aeabi_dmul>
 80231cc:	a36e      	add	r3, pc, #440	; (adr r3, 8023388 <__kernel_tan+0x330>)
 80231ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231d2:	f7dd f865 	bl	80002a0 <__adddf3>
 80231d6:	4622      	mov	r2, r4
 80231d8:	462b      	mov	r3, r5
 80231da:	f7dd fa17 	bl	800060c <__aeabi_dmul>
 80231de:	a36c      	add	r3, pc, #432	; (adr r3, 8023390 <__kernel_tan+0x338>)
 80231e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231e4:	f7dd f85c 	bl	80002a0 <__adddf3>
 80231e8:	4622      	mov	r2, r4
 80231ea:	462b      	mov	r3, r5
 80231ec:	f7dd fa0e 	bl	800060c <__aeabi_dmul>
 80231f0:	a369      	add	r3, pc, #420	; (adr r3, 8023398 <__kernel_tan+0x340>)
 80231f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231f6:	f7dd f853 	bl	80002a0 <__adddf3>
 80231fa:	4622      	mov	r2, r4
 80231fc:	462b      	mov	r3, r5
 80231fe:	f7dd fa05 	bl	800060c <__aeabi_dmul>
 8023202:	a367      	add	r3, pc, #412	; (adr r3, 80233a0 <__kernel_tan+0x348>)
 8023204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023208:	f7dd f84a 	bl	80002a0 <__adddf3>
 802320c:	4622      	mov	r2, r4
 802320e:	462b      	mov	r3, r5
 8023210:	f7dd f9fc 	bl	800060c <__aeabi_dmul>
 8023214:	a364      	add	r3, pc, #400	; (adr r3, 80233a8 <__kernel_tan+0x350>)
 8023216:	e9d3 2300 	ldrd	r2, r3, [r3]
 802321a:	f7dd f841 	bl	80002a0 <__adddf3>
 802321e:	ec53 2b18 	vmov	r2, r3, d8
 8023222:	f7dd f9f3 	bl	800060c <__aeabi_dmul>
 8023226:	a362      	add	r3, pc, #392	; (adr r3, 80233b0 <__kernel_tan+0x358>)
 8023228:	e9d3 2300 	ldrd	r2, r3, [r3]
 802322c:	ec41 0b1a 	vmov	d10, r0, r1
 8023230:	4620      	mov	r0, r4
 8023232:	4629      	mov	r1, r5
 8023234:	f7dd f9ea 	bl	800060c <__aeabi_dmul>
 8023238:	a35f      	add	r3, pc, #380	; (adr r3, 80233b8 <__kernel_tan+0x360>)
 802323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802323e:	f7dd f82f 	bl	80002a0 <__adddf3>
 8023242:	4622      	mov	r2, r4
 8023244:	462b      	mov	r3, r5
 8023246:	f7dd f9e1 	bl	800060c <__aeabi_dmul>
 802324a:	a35d      	add	r3, pc, #372	; (adr r3, 80233c0 <__kernel_tan+0x368>)
 802324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023250:	f7dd f826 	bl	80002a0 <__adddf3>
 8023254:	4622      	mov	r2, r4
 8023256:	462b      	mov	r3, r5
 8023258:	f7dd f9d8 	bl	800060c <__aeabi_dmul>
 802325c:	a35a      	add	r3, pc, #360	; (adr r3, 80233c8 <__kernel_tan+0x370>)
 802325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023262:	f7dd f81d 	bl	80002a0 <__adddf3>
 8023266:	4622      	mov	r2, r4
 8023268:	462b      	mov	r3, r5
 802326a:	f7dd f9cf 	bl	800060c <__aeabi_dmul>
 802326e:	a358      	add	r3, pc, #352	; (adr r3, 80233d0 <__kernel_tan+0x378>)
 8023270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023274:	f7dd f814 	bl	80002a0 <__adddf3>
 8023278:	4622      	mov	r2, r4
 802327a:	462b      	mov	r3, r5
 802327c:	f7dd f9c6 	bl	800060c <__aeabi_dmul>
 8023280:	a355      	add	r3, pc, #340	; (adr r3, 80233d8 <__kernel_tan+0x380>)
 8023282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023286:	f7dd f80b 	bl	80002a0 <__adddf3>
 802328a:	4602      	mov	r2, r0
 802328c:	460b      	mov	r3, r1
 802328e:	ec51 0b1a 	vmov	r0, r1, d10
 8023292:	f7dd f805 	bl	80002a0 <__adddf3>
 8023296:	ec53 2b19 	vmov	r2, r3, d9
 802329a:	f7dd f9b7 	bl	800060c <__aeabi_dmul>
 802329e:	4642      	mov	r2, r8
 80232a0:	464b      	mov	r3, r9
 80232a2:	f7dc fffd 	bl	80002a0 <__adddf3>
 80232a6:	ec53 2b18 	vmov	r2, r3, d8
 80232aa:	f7dd f9af 	bl	800060c <__aeabi_dmul>
 80232ae:	4642      	mov	r2, r8
 80232b0:	464b      	mov	r3, r9
 80232b2:	f7dc fff5 	bl	80002a0 <__adddf3>
 80232b6:	a34a      	add	r3, pc, #296	; (adr r3, 80233e0 <__kernel_tan+0x388>)
 80232b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232bc:	4604      	mov	r4, r0
 80232be:	460d      	mov	r5, r1
 80232c0:	ec51 0b19 	vmov	r0, r1, d9
 80232c4:	f7dd f9a2 	bl	800060c <__aeabi_dmul>
 80232c8:	4622      	mov	r2, r4
 80232ca:	462b      	mov	r3, r5
 80232cc:	f7dc ffe8 	bl	80002a0 <__adddf3>
 80232d0:	460b      	mov	r3, r1
 80232d2:	ec41 0b18 	vmov	d8, r0, r1
 80232d6:	4602      	mov	r2, r0
 80232d8:	4659      	mov	r1, fp
 80232da:	4650      	mov	r0, sl
 80232dc:	f7dc ffe0 	bl	80002a0 <__adddf3>
 80232e0:	4b44      	ldr	r3, [pc, #272]	; (80233f4 <__kernel_tan+0x39c>)
 80232e2:	429f      	cmp	r7, r3
 80232e4:	4604      	mov	r4, r0
 80232e6:	460d      	mov	r5, r1
 80232e8:	f340 8086 	ble.w	80233f8 <__kernel_tan+0x3a0>
 80232ec:	4630      	mov	r0, r6
 80232ee:	f7dd f923 	bl	8000538 <__aeabi_i2d>
 80232f2:	4622      	mov	r2, r4
 80232f4:	4680      	mov	r8, r0
 80232f6:	4689      	mov	r9, r1
 80232f8:	462b      	mov	r3, r5
 80232fa:	4620      	mov	r0, r4
 80232fc:	4629      	mov	r1, r5
 80232fe:	f7dd f985 	bl	800060c <__aeabi_dmul>
 8023302:	4642      	mov	r2, r8
 8023304:	4606      	mov	r6, r0
 8023306:	460f      	mov	r7, r1
 8023308:	464b      	mov	r3, r9
 802330a:	4620      	mov	r0, r4
 802330c:	4629      	mov	r1, r5
 802330e:	f7dc ffc7 	bl	80002a0 <__adddf3>
 8023312:	4602      	mov	r2, r0
 8023314:	460b      	mov	r3, r1
 8023316:	4630      	mov	r0, r6
 8023318:	4639      	mov	r1, r7
 802331a:	f7dd faa1 	bl	8000860 <__aeabi_ddiv>
 802331e:	ec53 2b18 	vmov	r2, r3, d8
 8023322:	f7dc ffbb 	bl	800029c <__aeabi_dsub>
 8023326:	4602      	mov	r2, r0
 8023328:	460b      	mov	r3, r1
 802332a:	4650      	mov	r0, sl
 802332c:	4659      	mov	r1, fp
 802332e:	f7dc ffb5 	bl	800029c <__aeabi_dsub>
 8023332:	4602      	mov	r2, r0
 8023334:	460b      	mov	r3, r1
 8023336:	f7dc ffb3 	bl	80002a0 <__adddf3>
 802333a:	4602      	mov	r2, r0
 802333c:	460b      	mov	r3, r1
 802333e:	4640      	mov	r0, r8
 8023340:	4649      	mov	r1, r9
 8023342:	f7dc ffab 	bl	800029c <__aeabi_dsub>
 8023346:	9b00      	ldr	r3, [sp, #0]
 8023348:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 802334c:	f00a 0a02 	and.w	sl, sl, #2
 8023350:	4604      	mov	r4, r0
 8023352:	f1ca 0001 	rsb	r0, sl, #1
 8023356:	460d      	mov	r5, r1
 8023358:	f7dd f8ee 	bl	8000538 <__aeabi_i2d>
 802335c:	4602      	mov	r2, r0
 802335e:	460b      	mov	r3, r1
 8023360:	4620      	mov	r0, r4
 8023362:	4629      	mov	r1, r5
 8023364:	f7dd f952 	bl	800060c <__aeabi_dmul>
 8023368:	e69f      	b.n	80230aa <__kernel_tan+0x52>
 802336a:	bf00      	nop
 802336c:	f3af 8000 	nop.w
 8023370:	54442d18 	.word	0x54442d18
 8023374:	3fe921fb 	.word	0x3fe921fb
 8023378:	33145c07 	.word	0x33145c07
 802337c:	3c81a626 	.word	0x3c81a626
 8023380:	74bf7ad4 	.word	0x74bf7ad4
 8023384:	3efb2a70 	.word	0x3efb2a70
 8023388:	32f0a7e9 	.word	0x32f0a7e9
 802338c:	3f12b80f 	.word	0x3f12b80f
 8023390:	1a8d1068 	.word	0x1a8d1068
 8023394:	3f3026f7 	.word	0x3f3026f7
 8023398:	fee08315 	.word	0xfee08315
 802339c:	3f57dbc8 	.word	0x3f57dbc8
 80233a0:	e96e8493 	.word	0xe96e8493
 80233a4:	3f8226e3 	.word	0x3f8226e3
 80233a8:	1bb341fe 	.word	0x1bb341fe
 80233ac:	3faba1ba 	.word	0x3faba1ba
 80233b0:	db605373 	.word	0xdb605373
 80233b4:	bef375cb 	.word	0xbef375cb
 80233b8:	a03792a6 	.word	0xa03792a6
 80233bc:	3f147e88 	.word	0x3f147e88
 80233c0:	f2f26501 	.word	0xf2f26501
 80233c4:	3f4344d8 	.word	0x3f4344d8
 80233c8:	c9560328 	.word	0xc9560328
 80233cc:	3f6d6d22 	.word	0x3f6d6d22
 80233d0:	8406d637 	.word	0x8406d637
 80233d4:	3f9664f4 	.word	0x3f9664f4
 80233d8:	1110fe7a 	.word	0x1110fe7a
 80233dc:	3fc11111 	.word	0x3fc11111
 80233e0:	55555563 	.word	0x55555563
 80233e4:	3fd55555 	.word	0x3fd55555
 80233e8:	3e2fffff 	.word	0x3e2fffff
 80233ec:	3ff00000 	.word	0x3ff00000
 80233f0:	bff00000 	.word	0xbff00000
 80233f4:	3fe59427 	.word	0x3fe59427
 80233f8:	2e01      	cmp	r6, #1
 80233fa:	d02f      	beq.n	802345c <__kernel_tan+0x404>
 80233fc:	460f      	mov	r7, r1
 80233fe:	4602      	mov	r2, r0
 8023400:	460b      	mov	r3, r1
 8023402:	4689      	mov	r9, r1
 8023404:	2000      	movs	r0, #0
 8023406:	4917      	ldr	r1, [pc, #92]	; (8023464 <__kernel_tan+0x40c>)
 8023408:	f7dd fa2a 	bl	8000860 <__aeabi_ddiv>
 802340c:	2600      	movs	r6, #0
 802340e:	e9cd 0100 	strd	r0, r1, [sp]
 8023412:	4652      	mov	r2, sl
 8023414:	465b      	mov	r3, fp
 8023416:	4630      	mov	r0, r6
 8023418:	4639      	mov	r1, r7
 802341a:	f7dc ff3f 	bl	800029c <__aeabi_dsub>
 802341e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8023422:	4602      	mov	r2, r0
 8023424:	460b      	mov	r3, r1
 8023426:	ec51 0b18 	vmov	r0, r1, d8
 802342a:	f7dc ff37 	bl	800029c <__aeabi_dsub>
 802342e:	4632      	mov	r2, r6
 8023430:	462b      	mov	r3, r5
 8023432:	f7dd f8eb 	bl	800060c <__aeabi_dmul>
 8023436:	46b0      	mov	r8, r6
 8023438:	460f      	mov	r7, r1
 802343a:	4642      	mov	r2, r8
 802343c:	462b      	mov	r3, r5
 802343e:	4634      	mov	r4, r6
 8023440:	4649      	mov	r1, r9
 8023442:	4606      	mov	r6, r0
 8023444:	4640      	mov	r0, r8
 8023446:	f7dd f8e1 	bl	800060c <__aeabi_dmul>
 802344a:	4b07      	ldr	r3, [pc, #28]	; (8023468 <__kernel_tan+0x410>)
 802344c:	2200      	movs	r2, #0
 802344e:	f7dc ff27 	bl	80002a0 <__adddf3>
 8023452:	4602      	mov	r2, r0
 8023454:	460b      	mov	r3, r1
 8023456:	4630      	mov	r0, r6
 8023458:	4639      	mov	r1, r7
 802345a:	e665      	b.n	8023128 <__kernel_tan+0xd0>
 802345c:	4682      	mov	sl, r0
 802345e:	468b      	mov	fp, r1
 8023460:	e625      	b.n	80230ae <__kernel_tan+0x56>
 8023462:	bf00      	nop
 8023464:	bff00000 	.word	0xbff00000
 8023468:	3ff00000 	.word	0x3ff00000

0802346c <with_errno>:
 802346c:	b570      	push	{r4, r5, r6, lr}
 802346e:	4604      	mov	r4, r0
 8023470:	460d      	mov	r5, r1
 8023472:	4616      	mov	r6, r2
 8023474:	f000 f934 	bl	80236e0 <__errno>
 8023478:	4629      	mov	r1, r5
 802347a:	6006      	str	r6, [r0, #0]
 802347c:	4620      	mov	r0, r4
 802347e:	bd70      	pop	{r4, r5, r6, pc}

08023480 <xflow>:
 8023480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023482:	4614      	mov	r4, r2
 8023484:	461d      	mov	r5, r3
 8023486:	b108      	cbz	r0, 802348c <xflow+0xc>
 8023488:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802348c:	e9cd 2300 	strd	r2, r3, [sp]
 8023490:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023494:	4620      	mov	r0, r4
 8023496:	4629      	mov	r1, r5
 8023498:	f7dd f8b8 	bl	800060c <__aeabi_dmul>
 802349c:	2222      	movs	r2, #34	; 0x22
 802349e:	b003      	add	sp, #12
 80234a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80234a4:	f7ff bfe2 	b.w	802346c <with_errno>

080234a8 <__math_uflow>:
 80234a8:	b508      	push	{r3, lr}
 80234aa:	2200      	movs	r2, #0
 80234ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80234b0:	f7ff ffe6 	bl	8023480 <xflow>
 80234b4:	ec41 0b10 	vmov	d0, r0, r1
 80234b8:	bd08      	pop	{r3, pc}

080234ba <__math_oflow>:
 80234ba:	b508      	push	{r3, lr}
 80234bc:	2200      	movs	r2, #0
 80234be:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80234c2:	f7ff ffdd 	bl	8023480 <xflow>
 80234c6:	ec41 0b10 	vmov	d0, r0, r1
 80234ca:	bd08      	pop	{r3, pc}

080234cc <with_errnof>:
 80234cc:	b513      	push	{r0, r1, r4, lr}
 80234ce:	4604      	mov	r4, r0
 80234d0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80234d4:	f000 f904 	bl	80236e0 <__errno>
 80234d8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80234dc:	6004      	str	r4, [r0, #0]
 80234de:	b002      	add	sp, #8
 80234e0:	bd10      	pop	{r4, pc}

080234e2 <xflowf>:
 80234e2:	b130      	cbz	r0, 80234f2 <xflowf+0x10>
 80234e4:	eef1 7a40 	vneg.f32	s15, s0
 80234e8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80234ec:	2022      	movs	r0, #34	; 0x22
 80234ee:	f7ff bfed 	b.w	80234cc <with_errnof>
 80234f2:	eef0 7a40 	vmov.f32	s15, s0
 80234f6:	e7f7      	b.n	80234e8 <xflowf+0x6>

080234f8 <__math_uflowf>:
 80234f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8023500 <__math_uflowf+0x8>
 80234fc:	f7ff bff1 	b.w	80234e2 <xflowf>
 8023500:	10000000 	.word	0x10000000

08023504 <__math_oflowf>:
 8023504:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802350c <__math_oflowf+0x8>
 8023508:	f7ff bfeb 	b.w	80234e2 <xflowf>
 802350c:	70000000 	.word	0x70000000

08023510 <fabs>:
 8023510:	ec51 0b10 	vmov	r0, r1, d0
 8023514:	ee10 2a10 	vmov	r2, s0
 8023518:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802351c:	ec43 2b10 	vmov	d0, r2, r3
 8023520:	4770      	bx	lr

08023522 <finite>:
 8023522:	b082      	sub	sp, #8
 8023524:	ed8d 0b00 	vstr	d0, [sp]
 8023528:	9801      	ldr	r0, [sp, #4]
 802352a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 802352e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8023532:	0fc0      	lsrs	r0, r0, #31
 8023534:	b002      	add	sp, #8
 8023536:	4770      	bx	lr

08023538 <nan>:
 8023538:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023540 <nan+0x8>
 802353c:	4770      	bx	lr
 802353e:	bf00      	nop
 8023540:	00000000 	.word	0x00000000
 8023544:	7ff80000 	.word	0x7ff80000

08023548 <scalbn>:
 8023548:	b570      	push	{r4, r5, r6, lr}
 802354a:	ec55 4b10 	vmov	r4, r5, d0
 802354e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8023552:	4606      	mov	r6, r0
 8023554:	462b      	mov	r3, r5
 8023556:	b99a      	cbnz	r2, 8023580 <scalbn+0x38>
 8023558:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802355c:	4323      	orrs	r3, r4
 802355e:	d036      	beq.n	80235ce <scalbn+0x86>
 8023560:	4b39      	ldr	r3, [pc, #228]	; (8023648 <scalbn+0x100>)
 8023562:	4629      	mov	r1, r5
 8023564:	ee10 0a10 	vmov	r0, s0
 8023568:	2200      	movs	r2, #0
 802356a:	f7dd f84f 	bl	800060c <__aeabi_dmul>
 802356e:	4b37      	ldr	r3, [pc, #220]	; (802364c <scalbn+0x104>)
 8023570:	429e      	cmp	r6, r3
 8023572:	4604      	mov	r4, r0
 8023574:	460d      	mov	r5, r1
 8023576:	da10      	bge.n	802359a <scalbn+0x52>
 8023578:	a32b      	add	r3, pc, #172	; (adr r3, 8023628 <scalbn+0xe0>)
 802357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802357e:	e03a      	b.n	80235f6 <scalbn+0xae>
 8023580:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8023584:	428a      	cmp	r2, r1
 8023586:	d10c      	bne.n	80235a2 <scalbn+0x5a>
 8023588:	ee10 2a10 	vmov	r2, s0
 802358c:	4620      	mov	r0, r4
 802358e:	4629      	mov	r1, r5
 8023590:	f7dc fe86 	bl	80002a0 <__adddf3>
 8023594:	4604      	mov	r4, r0
 8023596:	460d      	mov	r5, r1
 8023598:	e019      	b.n	80235ce <scalbn+0x86>
 802359a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802359e:	460b      	mov	r3, r1
 80235a0:	3a36      	subs	r2, #54	; 0x36
 80235a2:	4432      	add	r2, r6
 80235a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80235a8:	428a      	cmp	r2, r1
 80235aa:	dd08      	ble.n	80235be <scalbn+0x76>
 80235ac:	2d00      	cmp	r5, #0
 80235ae:	a120      	add	r1, pc, #128	; (adr r1, 8023630 <scalbn+0xe8>)
 80235b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80235b4:	da1c      	bge.n	80235f0 <scalbn+0xa8>
 80235b6:	a120      	add	r1, pc, #128	; (adr r1, 8023638 <scalbn+0xf0>)
 80235b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80235bc:	e018      	b.n	80235f0 <scalbn+0xa8>
 80235be:	2a00      	cmp	r2, #0
 80235c0:	dd08      	ble.n	80235d4 <scalbn+0x8c>
 80235c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80235c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80235ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80235ce:	ec45 4b10 	vmov	d0, r4, r5
 80235d2:	bd70      	pop	{r4, r5, r6, pc}
 80235d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80235d8:	da19      	bge.n	802360e <scalbn+0xc6>
 80235da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80235de:	429e      	cmp	r6, r3
 80235e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80235e4:	dd0a      	ble.n	80235fc <scalbn+0xb4>
 80235e6:	a112      	add	r1, pc, #72	; (adr r1, 8023630 <scalbn+0xe8>)
 80235e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80235ec:	2b00      	cmp	r3, #0
 80235ee:	d1e2      	bne.n	80235b6 <scalbn+0x6e>
 80235f0:	a30f      	add	r3, pc, #60	; (adr r3, 8023630 <scalbn+0xe8>)
 80235f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235f6:	f7dd f809 	bl	800060c <__aeabi_dmul>
 80235fa:	e7cb      	b.n	8023594 <scalbn+0x4c>
 80235fc:	a10a      	add	r1, pc, #40	; (adr r1, 8023628 <scalbn+0xe0>)
 80235fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023602:	2b00      	cmp	r3, #0
 8023604:	d0b8      	beq.n	8023578 <scalbn+0x30>
 8023606:	a10e      	add	r1, pc, #56	; (adr r1, 8023640 <scalbn+0xf8>)
 8023608:	e9d1 0100 	ldrd	r0, r1, [r1]
 802360c:	e7b4      	b.n	8023578 <scalbn+0x30>
 802360e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023612:	3236      	adds	r2, #54	; 0x36
 8023614:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023618:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802361c:	4620      	mov	r0, r4
 802361e:	4b0c      	ldr	r3, [pc, #48]	; (8023650 <scalbn+0x108>)
 8023620:	2200      	movs	r2, #0
 8023622:	e7e8      	b.n	80235f6 <scalbn+0xae>
 8023624:	f3af 8000 	nop.w
 8023628:	c2f8f359 	.word	0xc2f8f359
 802362c:	01a56e1f 	.word	0x01a56e1f
 8023630:	8800759c 	.word	0x8800759c
 8023634:	7e37e43c 	.word	0x7e37e43c
 8023638:	8800759c 	.word	0x8800759c
 802363c:	fe37e43c 	.word	0xfe37e43c
 8023640:	c2f8f359 	.word	0xc2f8f359
 8023644:	81a56e1f 	.word	0x81a56e1f
 8023648:	43500000 	.word	0x43500000
 802364c:	ffff3cb0 	.word	0xffff3cb0
 8023650:	3c900000 	.word	0x3c900000

08023654 <finitef>:
 8023654:	b082      	sub	sp, #8
 8023656:	ed8d 0a01 	vstr	s0, [sp, #4]
 802365a:	9801      	ldr	r0, [sp, #4]
 802365c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8023660:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8023664:	bfac      	ite	ge
 8023666:	2000      	movge	r0, #0
 8023668:	2001      	movlt	r0, #1
 802366a:	b002      	add	sp, #8
 802366c:	4770      	bx	lr
	...

08023670 <nanf>:
 8023670:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8023678 <nanf+0x8>
 8023674:	4770      	bx	lr
 8023676:	bf00      	nop
 8023678:	7fc00000 	.word	0x7fc00000

0802367c <abort>:
 802367c:	b508      	push	{r3, lr}
 802367e:	2006      	movs	r0, #6
 8023680:	f000 ffa0 	bl	80245c4 <raise>
 8023684:	2001      	movs	r0, #1
 8023686:	f7e5 fd0f 	bl	80090a8 <_exit>
	...

0802368c <__assert_func>:
 802368c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802368e:	4614      	mov	r4, r2
 8023690:	461a      	mov	r2, r3
 8023692:	4b09      	ldr	r3, [pc, #36]	; (80236b8 <__assert_func+0x2c>)
 8023694:	681b      	ldr	r3, [r3, #0]
 8023696:	4605      	mov	r5, r0
 8023698:	68d8      	ldr	r0, [r3, #12]
 802369a:	b14c      	cbz	r4, 80236b0 <__assert_func+0x24>
 802369c:	4b07      	ldr	r3, [pc, #28]	; (80236bc <__assert_func+0x30>)
 802369e:	9100      	str	r1, [sp, #0]
 80236a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80236a4:	4906      	ldr	r1, [pc, #24]	; (80236c0 <__assert_func+0x34>)
 80236a6:	462b      	mov	r3, r5
 80236a8:	f000 f820 	bl	80236ec <fiprintf>
 80236ac:	f7ff ffe6 	bl	802367c <abort>
 80236b0:	4b04      	ldr	r3, [pc, #16]	; (80236c4 <__assert_func+0x38>)
 80236b2:	461c      	mov	r4, r3
 80236b4:	e7f3      	b.n	802369e <__assert_func+0x12>
 80236b6:	bf00      	nop
 80236b8:	20000280 	.word	0x20000280
 80236bc:	08029f60 	.word	0x08029f60
 80236c0:	08029f6d 	.word	0x08029f6d
 80236c4:	08029f9b 	.word	0x08029f9b

080236c8 <atof>:
 80236c8:	2100      	movs	r1, #0
 80236ca:	f001 bdcf 	b.w	802526c <strtod>
	...

080236d0 <calloc>:
 80236d0:	4b02      	ldr	r3, [pc, #8]	; (80236dc <calloc+0xc>)
 80236d2:	460a      	mov	r2, r1
 80236d4:	4601      	mov	r1, r0
 80236d6:	6818      	ldr	r0, [r3, #0]
 80236d8:	f000 b882 	b.w	80237e0 <_calloc_r>
 80236dc:	20000280 	.word	0x20000280

080236e0 <__errno>:
 80236e0:	4b01      	ldr	r3, [pc, #4]	; (80236e8 <__errno+0x8>)
 80236e2:	6818      	ldr	r0, [r3, #0]
 80236e4:	4770      	bx	lr
 80236e6:	bf00      	nop
 80236e8:	20000280 	.word	0x20000280

080236ec <fiprintf>:
 80236ec:	b40e      	push	{r1, r2, r3}
 80236ee:	b503      	push	{r0, r1, lr}
 80236f0:	4601      	mov	r1, r0
 80236f2:	ab03      	add	r3, sp, #12
 80236f4:	4805      	ldr	r0, [pc, #20]	; (802370c <fiprintf+0x20>)
 80236f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80236fa:	6800      	ldr	r0, [r0, #0]
 80236fc:	9301      	str	r3, [sp, #4]
 80236fe:	f000 f98f 	bl	8023a20 <_vfiprintf_r>
 8023702:	b002      	add	sp, #8
 8023704:	f85d eb04 	ldr.w	lr, [sp], #4
 8023708:	b003      	add	sp, #12
 802370a:	4770      	bx	lr
 802370c:	20000280 	.word	0x20000280

08023710 <__libc_init_array>:
 8023710:	b570      	push	{r4, r5, r6, lr}
 8023712:	4d0d      	ldr	r5, [pc, #52]	; (8023748 <__libc_init_array+0x38>)
 8023714:	4c0d      	ldr	r4, [pc, #52]	; (802374c <__libc_init_array+0x3c>)
 8023716:	1b64      	subs	r4, r4, r5
 8023718:	10a4      	asrs	r4, r4, #2
 802371a:	2600      	movs	r6, #0
 802371c:	42a6      	cmp	r6, r4
 802371e:	d109      	bne.n	8023734 <__libc_init_array+0x24>
 8023720:	4d0b      	ldr	r5, [pc, #44]	; (8023750 <__libc_init_array+0x40>)
 8023722:	4c0c      	ldr	r4, [pc, #48]	; (8023754 <__libc_init_array+0x44>)
 8023724:	f004 f9c4 	bl	8027ab0 <_init>
 8023728:	1b64      	subs	r4, r4, r5
 802372a:	10a4      	asrs	r4, r4, #2
 802372c:	2600      	movs	r6, #0
 802372e:	42a6      	cmp	r6, r4
 8023730:	d105      	bne.n	802373e <__libc_init_array+0x2e>
 8023732:	bd70      	pop	{r4, r5, r6, pc}
 8023734:	f855 3b04 	ldr.w	r3, [r5], #4
 8023738:	4798      	blx	r3
 802373a:	3601      	adds	r6, #1
 802373c:	e7ee      	b.n	802371c <__libc_init_array+0xc>
 802373e:	f855 3b04 	ldr.w	r3, [r5], #4
 8023742:	4798      	blx	r3
 8023744:	3601      	adds	r6, #1
 8023746:	e7f2      	b.n	802372e <__libc_init_array+0x1e>
 8023748:	0802a40c 	.word	0x0802a40c
 802374c:	0802a40c 	.word	0x0802a40c
 8023750:	0802a40c 	.word	0x0802a40c
 8023754:	0802a414 	.word	0x0802a414

08023758 <__retarget_lock_init_recursive>:
 8023758:	4770      	bx	lr

0802375a <__retarget_lock_acquire_recursive>:
 802375a:	4770      	bx	lr

0802375c <__retarget_lock_release_recursive>:
 802375c:	4770      	bx	lr
	...

08023760 <malloc>:
 8023760:	4b02      	ldr	r3, [pc, #8]	; (802376c <malloc+0xc>)
 8023762:	4601      	mov	r1, r0
 8023764:	6818      	ldr	r0, [r3, #0]
 8023766:	f000 b8bd 	b.w	80238e4 <_malloc_r>
 802376a:	bf00      	nop
 802376c:	20000280 	.word	0x20000280

08023770 <free>:
 8023770:	4b02      	ldr	r3, [pc, #8]	; (802377c <free+0xc>)
 8023772:	4601      	mov	r1, r0
 8023774:	6818      	ldr	r0, [r3, #0]
 8023776:	f000 b849 	b.w	802380c <_free_r>
 802377a:	bf00      	nop
 802377c:	20000280 	.word	0x20000280

08023780 <memcpy>:
 8023780:	440a      	add	r2, r1
 8023782:	4291      	cmp	r1, r2
 8023784:	f100 33ff 	add.w	r3, r0, #4294967295
 8023788:	d100      	bne.n	802378c <memcpy+0xc>
 802378a:	4770      	bx	lr
 802378c:	b510      	push	{r4, lr}
 802378e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023792:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023796:	4291      	cmp	r1, r2
 8023798:	d1f9      	bne.n	802378e <memcpy+0xe>
 802379a:	bd10      	pop	{r4, pc}

0802379c <memmove>:
 802379c:	4288      	cmp	r0, r1
 802379e:	b510      	push	{r4, lr}
 80237a0:	eb01 0402 	add.w	r4, r1, r2
 80237a4:	d902      	bls.n	80237ac <memmove+0x10>
 80237a6:	4284      	cmp	r4, r0
 80237a8:	4623      	mov	r3, r4
 80237aa:	d807      	bhi.n	80237bc <memmove+0x20>
 80237ac:	1e43      	subs	r3, r0, #1
 80237ae:	42a1      	cmp	r1, r4
 80237b0:	d008      	beq.n	80237c4 <memmove+0x28>
 80237b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80237b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80237ba:	e7f8      	b.n	80237ae <memmove+0x12>
 80237bc:	4402      	add	r2, r0
 80237be:	4601      	mov	r1, r0
 80237c0:	428a      	cmp	r2, r1
 80237c2:	d100      	bne.n	80237c6 <memmove+0x2a>
 80237c4:	bd10      	pop	{r4, pc}
 80237c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80237ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80237ce:	e7f7      	b.n	80237c0 <memmove+0x24>

080237d0 <memset>:
 80237d0:	4402      	add	r2, r0
 80237d2:	4603      	mov	r3, r0
 80237d4:	4293      	cmp	r3, r2
 80237d6:	d100      	bne.n	80237da <memset+0xa>
 80237d8:	4770      	bx	lr
 80237da:	f803 1b01 	strb.w	r1, [r3], #1
 80237de:	e7f9      	b.n	80237d4 <memset+0x4>

080237e0 <_calloc_r>:
 80237e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80237e2:	fba1 2402 	umull	r2, r4, r1, r2
 80237e6:	b94c      	cbnz	r4, 80237fc <_calloc_r+0x1c>
 80237e8:	4611      	mov	r1, r2
 80237ea:	9201      	str	r2, [sp, #4]
 80237ec:	f000 f87a 	bl	80238e4 <_malloc_r>
 80237f0:	9a01      	ldr	r2, [sp, #4]
 80237f2:	4605      	mov	r5, r0
 80237f4:	b930      	cbnz	r0, 8023804 <_calloc_r+0x24>
 80237f6:	4628      	mov	r0, r5
 80237f8:	b003      	add	sp, #12
 80237fa:	bd30      	pop	{r4, r5, pc}
 80237fc:	220c      	movs	r2, #12
 80237fe:	6002      	str	r2, [r0, #0]
 8023800:	2500      	movs	r5, #0
 8023802:	e7f8      	b.n	80237f6 <_calloc_r+0x16>
 8023804:	4621      	mov	r1, r4
 8023806:	f7ff ffe3 	bl	80237d0 <memset>
 802380a:	e7f4      	b.n	80237f6 <_calloc_r+0x16>

0802380c <_free_r>:
 802380c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802380e:	2900      	cmp	r1, #0
 8023810:	d044      	beq.n	802389c <_free_r+0x90>
 8023812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023816:	9001      	str	r0, [sp, #4]
 8023818:	2b00      	cmp	r3, #0
 802381a:	f1a1 0404 	sub.w	r4, r1, #4
 802381e:	bfb8      	it	lt
 8023820:	18e4      	addlt	r4, r4, r3
 8023822:	f003 fa2d 	bl	8026c80 <__malloc_lock>
 8023826:	4a1e      	ldr	r2, [pc, #120]	; (80238a0 <_free_r+0x94>)
 8023828:	9801      	ldr	r0, [sp, #4]
 802382a:	6813      	ldr	r3, [r2, #0]
 802382c:	b933      	cbnz	r3, 802383c <_free_r+0x30>
 802382e:	6063      	str	r3, [r4, #4]
 8023830:	6014      	str	r4, [r2, #0]
 8023832:	b003      	add	sp, #12
 8023834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023838:	f003 ba28 	b.w	8026c8c <__malloc_unlock>
 802383c:	42a3      	cmp	r3, r4
 802383e:	d908      	bls.n	8023852 <_free_r+0x46>
 8023840:	6825      	ldr	r5, [r4, #0]
 8023842:	1961      	adds	r1, r4, r5
 8023844:	428b      	cmp	r3, r1
 8023846:	bf01      	itttt	eq
 8023848:	6819      	ldreq	r1, [r3, #0]
 802384a:	685b      	ldreq	r3, [r3, #4]
 802384c:	1949      	addeq	r1, r1, r5
 802384e:	6021      	streq	r1, [r4, #0]
 8023850:	e7ed      	b.n	802382e <_free_r+0x22>
 8023852:	461a      	mov	r2, r3
 8023854:	685b      	ldr	r3, [r3, #4]
 8023856:	b10b      	cbz	r3, 802385c <_free_r+0x50>
 8023858:	42a3      	cmp	r3, r4
 802385a:	d9fa      	bls.n	8023852 <_free_r+0x46>
 802385c:	6811      	ldr	r1, [r2, #0]
 802385e:	1855      	adds	r5, r2, r1
 8023860:	42a5      	cmp	r5, r4
 8023862:	d10b      	bne.n	802387c <_free_r+0x70>
 8023864:	6824      	ldr	r4, [r4, #0]
 8023866:	4421      	add	r1, r4
 8023868:	1854      	adds	r4, r2, r1
 802386a:	42a3      	cmp	r3, r4
 802386c:	6011      	str	r1, [r2, #0]
 802386e:	d1e0      	bne.n	8023832 <_free_r+0x26>
 8023870:	681c      	ldr	r4, [r3, #0]
 8023872:	685b      	ldr	r3, [r3, #4]
 8023874:	6053      	str	r3, [r2, #4]
 8023876:	4421      	add	r1, r4
 8023878:	6011      	str	r1, [r2, #0]
 802387a:	e7da      	b.n	8023832 <_free_r+0x26>
 802387c:	d902      	bls.n	8023884 <_free_r+0x78>
 802387e:	230c      	movs	r3, #12
 8023880:	6003      	str	r3, [r0, #0]
 8023882:	e7d6      	b.n	8023832 <_free_r+0x26>
 8023884:	6825      	ldr	r5, [r4, #0]
 8023886:	1961      	adds	r1, r4, r5
 8023888:	428b      	cmp	r3, r1
 802388a:	bf04      	itt	eq
 802388c:	6819      	ldreq	r1, [r3, #0]
 802388e:	685b      	ldreq	r3, [r3, #4]
 8023890:	6063      	str	r3, [r4, #4]
 8023892:	bf04      	itt	eq
 8023894:	1949      	addeq	r1, r1, r5
 8023896:	6021      	streq	r1, [r4, #0]
 8023898:	6054      	str	r4, [r2, #4]
 802389a:	e7ca      	b.n	8023832 <_free_r+0x26>
 802389c:	b003      	add	sp, #12
 802389e:	bd30      	pop	{r4, r5, pc}
 80238a0:	20004cec 	.word	0x20004cec

080238a4 <sbrk_aligned>:
 80238a4:	b570      	push	{r4, r5, r6, lr}
 80238a6:	4e0e      	ldr	r6, [pc, #56]	; (80238e0 <sbrk_aligned+0x3c>)
 80238a8:	460c      	mov	r4, r1
 80238aa:	6831      	ldr	r1, [r6, #0]
 80238ac:	4605      	mov	r5, r0
 80238ae:	b911      	cbnz	r1, 80238b6 <sbrk_aligned+0x12>
 80238b0:	f000 fe50 	bl	8024554 <_sbrk_r>
 80238b4:	6030      	str	r0, [r6, #0]
 80238b6:	4621      	mov	r1, r4
 80238b8:	4628      	mov	r0, r5
 80238ba:	f000 fe4b 	bl	8024554 <_sbrk_r>
 80238be:	1c43      	adds	r3, r0, #1
 80238c0:	d00a      	beq.n	80238d8 <sbrk_aligned+0x34>
 80238c2:	1cc4      	adds	r4, r0, #3
 80238c4:	f024 0403 	bic.w	r4, r4, #3
 80238c8:	42a0      	cmp	r0, r4
 80238ca:	d007      	beq.n	80238dc <sbrk_aligned+0x38>
 80238cc:	1a21      	subs	r1, r4, r0
 80238ce:	4628      	mov	r0, r5
 80238d0:	f000 fe40 	bl	8024554 <_sbrk_r>
 80238d4:	3001      	adds	r0, #1
 80238d6:	d101      	bne.n	80238dc <sbrk_aligned+0x38>
 80238d8:	f04f 34ff 	mov.w	r4, #4294967295
 80238dc:	4620      	mov	r0, r4
 80238de:	bd70      	pop	{r4, r5, r6, pc}
 80238e0:	20004cf0 	.word	0x20004cf0

080238e4 <_malloc_r>:
 80238e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80238e8:	1ccd      	adds	r5, r1, #3
 80238ea:	f025 0503 	bic.w	r5, r5, #3
 80238ee:	3508      	adds	r5, #8
 80238f0:	2d0c      	cmp	r5, #12
 80238f2:	bf38      	it	cc
 80238f4:	250c      	movcc	r5, #12
 80238f6:	2d00      	cmp	r5, #0
 80238f8:	4607      	mov	r7, r0
 80238fa:	db01      	blt.n	8023900 <_malloc_r+0x1c>
 80238fc:	42a9      	cmp	r1, r5
 80238fe:	d905      	bls.n	802390c <_malloc_r+0x28>
 8023900:	230c      	movs	r3, #12
 8023902:	603b      	str	r3, [r7, #0]
 8023904:	2600      	movs	r6, #0
 8023906:	4630      	mov	r0, r6
 8023908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802390c:	4e2e      	ldr	r6, [pc, #184]	; (80239c8 <_malloc_r+0xe4>)
 802390e:	f003 f9b7 	bl	8026c80 <__malloc_lock>
 8023912:	6833      	ldr	r3, [r6, #0]
 8023914:	461c      	mov	r4, r3
 8023916:	bb34      	cbnz	r4, 8023966 <_malloc_r+0x82>
 8023918:	4629      	mov	r1, r5
 802391a:	4638      	mov	r0, r7
 802391c:	f7ff ffc2 	bl	80238a4 <sbrk_aligned>
 8023920:	1c43      	adds	r3, r0, #1
 8023922:	4604      	mov	r4, r0
 8023924:	d14d      	bne.n	80239c2 <_malloc_r+0xde>
 8023926:	6834      	ldr	r4, [r6, #0]
 8023928:	4626      	mov	r6, r4
 802392a:	2e00      	cmp	r6, #0
 802392c:	d140      	bne.n	80239b0 <_malloc_r+0xcc>
 802392e:	6823      	ldr	r3, [r4, #0]
 8023930:	4631      	mov	r1, r6
 8023932:	4638      	mov	r0, r7
 8023934:	eb04 0803 	add.w	r8, r4, r3
 8023938:	f000 fe0c 	bl	8024554 <_sbrk_r>
 802393c:	4580      	cmp	r8, r0
 802393e:	d13a      	bne.n	80239b6 <_malloc_r+0xd2>
 8023940:	6821      	ldr	r1, [r4, #0]
 8023942:	3503      	adds	r5, #3
 8023944:	1a6d      	subs	r5, r5, r1
 8023946:	f025 0503 	bic.w	r5, r5, #3
 802394a:	3508      	adds	r5, #8
 802394c:	2d0c      	cmp	r5, #12
 802394e:	bf38      	it	cc
 8023950:	250c      	movcc	r5, #12
 8023952:	4629      	mov	r1, r5
 8023954:	4638      	mov	r0, r7
 8023956:	f7ff ffa5 	bl	80238a4 <sbrk_aligned>
 802395a:	3001      	adds	r0, #1
 802395c:	d02b      	beq.n	80239b6 <_malloc_r+0xd2>
 802395e:	6823      	ldr	r3, [r4, #0]
 8023960:	442b      	add	r3, r5
 8023962:	6023      	str	r3, [r4, #0]
 8023964:	e00e      	b.n	8023984 <_malloc_r+0xa0>
 8023966:	6822      	ldr	r2, [r4, #0]
 8023968:	1b52      	subs	r2, r2, r5
 802396a:	d41e      	bmi.n	80239aa <_malloc_r+0xc6>
 802396c:	2a0b      	cmp	r2, #11
 802396e:	d916      	bls.n	802399e <_malloc_r+0xba>
 8023970:	1961      	adds	r1, r4, r5
 8023972:	42a3      	cmp	r3, r4
 8023974:	6025      	str	r5, [r4, #0]
 8023976:	bf18      	it	ne
 8023978:	6059      	strne	r1, [r3, #4]
 802397a:	6863      	ldr	r3, [r4, #4]
 802397c:	bf08      	it	eq
 802397e:	6031      	streq	r1, [r6, #0]
 8023980:	5162      	str	r2, [r4, r5]
 8023982:	604b      	str	r3, [r1, #4]
 8023984:	4638      	mov	r0, r7
 8023986:	f104 060b 	add.w	r6, r4, #11
 802398a:	f003 f97f 	bl	8026c8c <__malloc_unlock>
 802398e:	f026 0607 	bic.w	r6, r6, #7
 8023992:	1d23      	adds	r3, r4, #4
 8023994:	1af2      	subs	r2, r6, r3
 8023996:	d0b6      	beq.n	8023906 <_malloc_r+0x22>
 8023998:	1b9b      	subs	r3, r3, r6
 802399a:	50a3      	str	r3, [r4, r2]
 802399c:	e7b3      	b.n	8023906 <_malloc_r+0x22>
 802399e:	6862      	ldr	r2, [r4, #4]
 80239a0:	42a3      	cmp	r3, r4
 80239a2:	bf0c      	ite	eq
 80239a4:	6032      	streq	r2, [r6, #0]
 80239a6:	605a      	strne	r2, [r3, #4]
 80239a8:	e7ec      	b.n	8023984 <_malloc_r+0xa0>
 80239aa:	4623      	mov	r3, r4
 80239ac:	6864      	ldr	r4, [r4, #4]
 80239ae:	e7b2      	b.n	8023916 <_malloc_r+0x32>
 80239b0:	4634      	mov	r4, r6
 80239b2:	6876      	ldr	r6, [r6, #4]
 80239b4:	e7b9      	b.n	802392a <_malloc_r+0x46>
 80239b6:	230c      	movs	r3, #12
 80239b8:	603b      	str	r3, [r7, #0]
 80239ba:	4638      	mov	r0, r7
 80239bc:	f003 f966 	bl	8026c8c <__malloc_unlock>
 80239c0:	e7a1      	b.n	8023906 <_malloc_r+0x22>
 80239c2:	6025      	str	r5, [r4, #0]
 80239c4:	e7de      	b.n	8023984 <_malloc_r+0xa0>
 80239c6:	bf00      	nop
 80239c8:	20004cec 	.word	0x20004cec

080239cc <__sfputc_r>:
 80239cc:	6893      	ldr	r3, [r2, #8]
 80239ce:	3b01      	subs	r3, #1
 80239d0:	2b00      	cmp	r3, #0
 80239d2:	b410      	push	{r4}
 80239d4:	6093      	str	r3, [r2, #8]
 80239d6:	da08      	bge.n	80239ea <__sfputc_r+0x1e>
 80239d8:	6994      	ldr	r4, [r2, #24]
 80239da:	42a3      	cmp	r3, r4
 80239dc:	db01      	blt.n	80239e2 <__sfputc_r+0x16>
 80239de:	290a      	cmp	r1, #10
 80239e0:	d103      	bne.n	80239ea <__sfputc_r+0x1e>
 80239e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80239e6:	f001 bc6d 	b.w	80252c4 <__swbuf_r>
 80239ea:	6813      	ldr	r3, [r2, #0]
 80239ec:	1c58      	adds	r0, r3, #1
 80239ee:	6010      	str	r0, [r2, #0]
 80239f0:	7019      	strb	r1, [r3, #0]
 80239f2:	4608      	mov	r0, r1
 80239f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80239f8:	4770      	bx	lr

080239fa <__sfputs_r>:
 80239fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239fc:	4606      	mov	r6, r0
 80239fe:	460f      	mov	r7, r1
 8023a00:	4614      	mov	r4, r2
 8023a02:	18d5      	adds	r5, r2, r3
 8023a04:	42ac      	cmp	r4, r5
 8023a06:	d101      	bne.n	8023a0c <__sfputs_r+0x12>
 8023a08:	2000      	movs	r0, #0
 8023a0a:	e007      	b.n	8023a1c <__sfputs_r+0x22>
 8023a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023a10:	463a      	mov	r2, r7
 8023a12:	4630      	mov	r0, r6
 8023a14:	f7ff ffda 	bl	80239cc <__sfputc_r>
 8023a18:	1c43      	adds	r3, r0, #1
 8023a1a:	d1f3      	bne.n	8023a04 <__sfputs_r+0xa>
 8023a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023a20 <_vfiprintf_r>:
 8023a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a24:	460d      	mov	r5, r1
 8023a26:	b09d      	sub	sp, #116	; 0x74
 8023a28:	4614      	mov	r4, r2
 8023a2a:	4698      	mov	r8, r3
 8023a2c:	4606      	mov	r6, r0
 8023a2e:	b118      	cbz	r0, 8023a38 <_vfiprintf_r+0x18>
 8023a30:	6983      	ldr	r3, [r0, #24]
 8023a32:	b90b      	cbnz	r3, 8023a38 <_vfiprintf_r+0x18>
 8023a34:	f002 fc9c 	bl	8026370 <__sinit>
 8023a38:	4b89      	ldr	r3, [pc, #548]	; (8023c60 <_vfiprintf_r+0x240>)
 8023a3a:	429d      	cmp	r5, r3
 8023a3c:	d11b      	bne.n	8023a76 <_vfiprintf_r+0x56>
 8023a3e:	6875      	ldr	r5, [r6, #4]
 8023a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023a42:	07d9      	lsls	r1, r3, #31
 8023a44:	d405      	bmi.n	8023a52 <_vfiprintf_r+0x32>
 8023a46:	89ab      	ldrh	r3, [r5, #12]
 8023a48:	059a      	lsls	r2, r3, #22
 8023a4a:	d402      	bmi.n	8023a52 <_vfiprintf_r+0x32>
 8023a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023a4e:	f7ff fe84 	bl	802375a <__retarget_lock_acquire_recursive>
 8023a52:	89ab      	ldrh	r3, [r5, #12]
 8023a54:	071b      	lsls	r3, r3, #28
 8023a56:	d501      	bpl.n	8023a5c <_vfiprintf_r+0x3c>
 8023a58:	692b      	ldr	r3, [r5, #16]
 8023a5a:	b9eb      	cbnz	r3, 8023a98 <_vfiprintf_r+0x78>
 8023a5c:	4629      	mov	r1, r5
 8023a5e:	4630      	mov	r0, r6
 8023a60:	f001 fc82 	bl	8025368 <__swsetup_r>
 8023a64:	b1c0      	cbz	r0, 8023a98 <_vfiprintf_r+0x78>
 8023a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023a68:	07dc      	lsls	r4, r3, #31
 8023a6a:	d50e      	bpl.n	8023a8a <_vfiprintf_r+0x6a>
 8023a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8023a70:	b01d      	add	sp, #116	; 0x74
 8023a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a76:	4b7b      	ldr	r3, [pc, #492]	; (8023c64 <_vfiprintf_r+0x244>)
 8023a78:	429d      	cmp	r5, r3
 8023a7a:	d101      	bne.n	8023a80 <_vfiprintf_r+0x60>
 8023a7c:	68b5      	ldr	r5, [r6, #8]
 8023a7e:	e7df      	b.n	8023a40 <_vfiprintf_r+0x20>
 8023a80:	4b79      	ldr	r3, [pc, #484]	; (8023c68 <_vfiprintf_r+0x248>)
 8023a82:	429d      	cmp	r5, r3
 8023a84:	bf08      	it	eq
 8023a86:	68f5      	ldreq	r5, [r6, #12]
 8023a88:	e7da      	b.n	8023a40 <_vfiprintf_r+0x20>
 8023a8a:	89ab      	ldrh	r3, [r5, #12]
 8023a8c:	0598      	lsls	r0, r3, #22
 8023a8e:	d4ed      	bmi.n	8023a6c <_vfiprintf_r+0x4c>
 8023a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023a92:	f7ff fe63 	bl	802375c <__retarget_lock_release_recursive>
 8023a96:	e7e9      	b.n	8023a6c <_vfiprintf_r+0x4c>
 8023a98:	2300      	movs	r3, #0
 8023a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8023a9c:	2320      	movs	r3, #32
 8023a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8023aa6:	2330      	movs	r3, #48	; 0x30
 8023aa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023c6c <_vfiprintf_r+0x24c>
 8023aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023ab0:	f04f 0901 	mov.w	r9, #1
 8023ab4:	4623      	mov	r3, r4
 8023ab6:	469a      	mov	sl, r3
 8023ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023abc:	b10a      	cbz	r2, 8023ac2 <_vfiprintf_r+0xa2>
 8023abe:	2a25      	cmp	r2, #37	; 0x25
 8023ac0:	d1f9      	bne.n	8023ab6 <_vfiprintf_r+0x96>
 8023ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8023ac6:	d00b      	beq.n	8023ae0 <_vfiprintf_r+0xc0>
 8023ac8:	465b      	mov	r3, fp
 8023aca:	4622      	mov	r2, r4
 8023acc:	4629      	mov	r1, r5
 8023ace:	4630      	mov	r0, r6
 8023ad0:	f7ff ff93 	bl	80239fa <__sfputs_r>
 8023ad4:	3001      	adds	r0, #1
 8023ad6:	f000 80aa 	beq.w	8023c2e <_vfiprintf_r+0x20e>
 8023ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023adc:	445a      	add	r2, fp
 8023ade:	9209      	str	r2, [sp, #36]	; 0x24
 8023ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8023ae4:	2b00      	cmp	r3, #0
 8023ae6:	f000 80a2 	beq.w	8023c2e <_vfiprintf_r+0x20e>
 8023aea:	2300      	movs	r3, #0
 8023aec:	f04f 32ff 	mov.w	r2, #4294967295
 8023af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023af4:	f10a 0a01 	add.w	sl, sl, #1
 8023af8:	9304      	str	r3, [sp, #16]
 8023afa:	9307      	str	r3, [sp, #28]
 8023afc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023b00:	931a      	str	r3, [sp, #104]	; 0x68
 8023b02:	4654      	mov	r4, sl
 8023b04:	2205      	movs	r2, #5
 8023b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023b0a:	4858      	ldr	r0, [pc, #352]	; (8023c6c <_vfiprintf_r+0x24c>)
 8023b0c:	f7dc fb60 	bl	80001d0 <memchr>
 8023b10:	9a04      	ldr	r2, [sp, #16]
 8023b12:	b9d8      	cbnz	r0, 8023b4c <_vfiprintf_r+0x12c>
 8023b14:	06d1      	lsls	r1, r2, #27
 8023b16:	bf44      	itt	mi
 8023b18:	2320      	movmi	r3, #32
 8023b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023b1e:	0713      	lsls	r3, r2, #28
 8023b20:	bf44      	itt	mi
 8023b22:	232b      	movmi	r3, #43	; 0x2b
 8023b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023b28:	f89a 3000 	ldrb.w	r3, [sl]
 8023b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8023b2e:	d015      	beq.n	8023b5c <_vfiprintf_r+0x13c>
 8023b30:	9a07      	ldr	r2, [sp, #28]
 8023b32:	4654      	mov	r4, sl
 8023b34:	2000      	movs	r0, #0
 8023b36:	f04f 0c0a 	mov.w	ip, #10
 8023b3a:	4621      	mov	r1, r4
 8023b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023b40:	3b30      	subs	r3, #48	; 0x30
 8023b42:	2b09      	cmp	r3, #9
 8023b44:	d94e      	bls.n	8023be4 <_vfiprintf_r+0x1c4>
 8023b46:	b1b0      	cbz	r0, 8023b76 <_vfiprintf_r+0x156>
 8023b48:	9207      	str	r2, [sp, #28]
 8023b4a:	e014      	b.n	8023b76 <_vfiprintf_r+0x156>
 8023b4c:	eba0 0308 	sub.w	r3, r0, r8
 8023b50:	fa09 f303 	lsl.w	r3, r9, r3
 8023b54:	4313      	orrs	r3, r2
 8023b56:	9304      	str	r3, [sp, #16]
 8023b58:	46a2      	mov	sl, r4
 8023b5a:	e7d2      	b.n	8023b02 <_vfiprintf_r+0xe2>
 8023b5c:	9b03      	ldr	r3, [sp, #12]
 8023b5e:	1d19      	adds	r1, r3, #4
 8023b60:	681b      	ldr	r3, [r3, #0]
 8023b62:	9103      	str	r1, [sp, #12]
 8023b64:	2b00      	cmp	r3, #0
 8023b66:	bfbb      	ittet	lt
 8023b68:	425b      	neglt	r3, r3
 8023b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8023b6e:	9307      	strge	r3, [sp, #28]
 8023b70:	9307      	strlt	r3, [sp, #28]
 8023b72:	bfb8      	it	lt
 8023b74:	9204      	strlt	r2, [sp, #16]
 8023b76:	7823      	ldrb	r3, [r4, #0]
 8023b78:	2b2e      	cmp	r3, #46	; 0x2e
 8023b7a:	d10c      	bne.n	8023b96 <_vfiprintf_r+0x176>
 8023b7c:	7863      	ldrb	r3, [r4, #1]
 8023b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8023b80:	d135      	bne.n	8023bee <_vfiprintf_r+0x1ce>
 8023b82:	9b03      	ldr	r3, [sp, #12]
 8023b84:	1d1a      	adds	r2, r3, #4
 8023b86:	681b      	ldr	r3, [r3, #0]
 8023b88:	9203      	str	r2, [sp, #12]
 8023b8a:	2b00      	cmp	r3, #0
 8023b8c:	bfb8      	it	lt
 8023b8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8023b92:	3402      	adds	r4, #2
 8023b94:	9305      	str	r3, [sp, #20]
 8023b96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023c7c <_vfiprintf_r+0x25c>
 8023b9a:	7821      	ldrb	r1, [r4, #0]
 8023b9c:	2203      	movs	r2, #3
 8023b9e:	4650      	mov	r0, sl
 8023ba0:	f7dc fb16 	bl	80001d0 <memchr>
 8023ba4:	b140      	cbz	r0, 8023bb8 <_vfiprintf_r+0x198>
 8023ba6:	2340      	movs	r3, #64	; 0x40
 8023ba8:	eba0 000a 	sub.w	r0, r0, sl
 8023bac:	fa03 f000 	lsl.w	r0, r3, r0
 8023bb0:	9b04      	ldr	r3, [sp, #16]
 8023bb2:	4303      	orrs	r3, r0
 8023bb4:	3401      	adds	r4, #1
 8023bb6:	9304      	str	r3, [sp, #16]
 8023bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023bbc:	482c      	ldr	r0, [pc, #176]	; (8023c70 <_vfiprintf_r+0x250>)
 8023bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023bc2:	2206      	movs	r2, #6
 8023bc4:	f7dc fb04 	bl	80001d0 <memchr>
 8023bc8:	2800      	cmp	r0, #0
 8023bca:	d03f      	beq.n	8023c4c <_vfiprintf_r+0x22c>
 8023bcc:	4b29      	ldr	r3, [pc, #164]	; (8023c74 <_vfiprintf_r+0x254>)
 8023bce:	bb1b      	cbnz	r3, 8023c18 <_vfiprintf_r+0x1f8>
 8023bd0:	9b03      	ldr	r3, [sp, #12]
 8023bd2:	3307      	adds	r3, #7
 8023bd4:	f023 0307 	bic.w	r3, r3, #7
 8023bd8:	3308      	adds	r3, #8
 8023bda:	9303      	str	r3, [sp, #12]
 8023bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bde:	443b      	add	r3, r7
 8023be0:	9309      	str	r3, [sp, #36]	; 0x24
 8023be2:	e767      	b.n	8023ab4 <_vfiprintf_r+0x94>
 8023be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8023be8:	460c      	mov	r4, r1
 8023bea:	2001      	movs	r0, #1
 8023bec:	e7a5      	b.n	8023b3a <_vfiprintf_r+0x11a>
 8023bee:	2300      	movs	r3, #0
 8023bf0:	3401      	adds	r4, #1
 8023bf2:	9305      	str	r3, [sp, #20]
 8023bf4:	4619      	mov	r1, r3
 8023bf6:	f04f 0c0a 	mov.w	ip, #10
 8023bfa:	4620      	mov	r0, r4
 8023bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023c00:	3a30      	subs	r2, #48	; 0x30
 8023c02:	2a09      	cmp	r2, #9
 8023c04:	d903      	bls.n	8023c0e <_vfiprintf_r+0x1ee>
 8023c06:	2b00      	cmp	r3, #0
 8023c08:	d0c5      	beq.n	8023b96 <_vfiprintf_r+0x176>
 8023c0a:	9105      	str	r1, [sp, #20]
 8023c0c:	e7c3      	b.n	8023b96 <_vfiprintf_r+0x176>
 8023c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8023c12:	4604      	mov	r4, r0
 8023c14:	2301      	movs	r3, #1
 8023c16:	e7f0      	b.n	8023bfa <_vfiprintf_r+0x1da>
 8023c18:	ab03      	add	r3, sp, #12
 8023c1a:	9300      	str	r3, [sp, #0]
 8023c1c:	462a      	mov	r2, r5
 8023c1e:	4b16      	ldr	r3, [pc, #88]	; (8023c78 <_vfiprintf_r+0x258>)
 8023c20:	a904      	add	r1, sp, #16
 8023c22:	4630      	mov	r0, r6
 8023c24:	f000 f8cc 	bl	8023dc0 <_printf_float>
 8023c28:	4607      	mov	r7, r0
 8023c2a:	1c78      	adds	r0, r7, #1
 8023c2c:	d1d6      	bne.n	8023bdc <_vfiprintf_r+0x1bc>
 8023c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023c30:	07d9      	lsls	r1, r3, #31
 8023c32:	d405      	bmi.n	8023c40 <_vfiprintf_r+0x220>
 8023c34:	89ab      	ldrh	r3, [r5, #12]
 8023c36:	059a      	lsls	r2, r3, #22
 8023c38:	d402      	bmi.n	8023c40 <_vfiprintf_r+0x220>
 8023c3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023c3c:	f7ff fd8e 	bl	802375c <__retarget_lock_release_recursive>
 8023c40:	89ab      	ldrh	r3, [r5, #12]
 8023c42:	065b      	lsls	r3, r3, #25
 8023c44:	f53f af12 	bmi.w	8023a6c <_vfiprintf_r+0x4c>
 8023c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023c4a:	e711      	b.n	8023a70 <_vfiprintf_r+0x50>
 8023c4c:	ab03      	add	r3, sp, #12
 8023c4e:	9300      	str	r3, [sp, #0]
 8023c50:	462a      	mov	r2, r5
 8023c52:	4b09      	ldr	r3, [pc, #36]	; (8023c78 <_vfiprintf_r+0x258>)
 8023c54:	a904      	add	r1, sp, #16
 8023c56:	4630      	mov	r0, r6
 8023c58:	f000 fb56 	bl	8024308 <_printf_i>
 8023c5c:	e7e4      	b.n	8023c28 <_vfiprintf_r+0x208>
 8023c5e:	bf00      	nop
 8023c60:	0802a1ec 	.word	0x0802a1ec
 8023c64:	0802a20c 	.word	0x0802a20c
 8023c68:	0802a1cc 	.word	0x0802a1cc
 8023c6c:	08029fa0 	.word	0x08029fa0
 8023c70:	08029faa 	.word	0x08029faa
 8023c74:	08023dc1 	.word	0x08023dc1
 8023c78:	080239fb 	.word	0x080239fb
 8023c7c:	08029fa6 	.word	0x08029fa6

08023c80 <__cvt>:
 8023c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023c84:	ec55 4b10 	vmov	r4, r5, d0
 8023c88:	2d00      	cmp	r5, #0
 8023c8a:	460e      	mov	r6, r1
 8023c8c:	4619      	mov	r1, r3
 8023c8e:	462b      	mov	r3, r5
 8023c90:	bfbb      	ittet	lt
 8023c92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8023c96:	461d      	movlt	r5, r3
 8023c98:	2300      	movge	r3, #0
 8023c9a:	232d      	movlt	r3, #45	; 0x2d
 8023c9c:	700b      	strb	r3, [r1, #0]
 8023c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023ca0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8023ca4:	4691      	mov	r9, r2
 8023ca6:	f023 0820 	bic.w	r8, r3, #32
 8023caa:	bfbc      	itt	lt
 8023cac:	4622      	movlt	r2, r4
 8023cae:	4614      	movlt	r4, r2
 8023cb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023cb4:	d005      	beq.n	8023cc2 <__cvt+0x42>
 8023cb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8023cba:	d100      	bne.n	8023cbe <__cvt+0x3e>
 8023cbc:	3601      	adds	r6, #1
 8023cbe:	2102      	movs	r1, #2
 8023cc0:	e000      	b.n	8023cc4 <__cvt+0x44>
 8023cc2:	2103      	movs	r1, #3
 8023cc4:	ab03      	add	r3, sp, #12
 8023cc6:	9301      	str	r3, [sp, #4]
 8023cc8:	ab02      	add	r3, sp, #8
 8023cca:	9300      	str	r3, [sp, #0]
 8023ccc:	ec45 4b10 	vmov	d0, r4, r5
 8023cd0:	4653      	mov	r3, sl
 8023cd2:	4632      	mov	r2, r6
 8023cd4:	f001 fc44 	bl	8025560 <_dtoa_r>
 8023cd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8023cdc:	4607      	mov	r7, r0
 8023cde:	d102      	bne.n	8023ce6 <__cvt+0x66>
 8023ce0:	f019 0f01 	tst.w	r9, #1
 8023ce4:	d022      	beq.n	8023d2c <__cvt+0xac>
 8023ce6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023cea:	eb07 0906 	add.w	r9, r7, r6
 8023cee:	d110      	bne.n	8023d12 <__cvt+0x92>
 8023cf0:	783b      	ldrb	r3, [r7, #0]
 8023cf2:	2b30      	cmp	r3, #48	; 0x30
 8023cf4:	d10a      	bne.n	8023d0c <__cvt+0x8c>
 8023cf6:	2200      	movs	r2, #0
 8023cf8:	2300      	movs	r3, #0
 8023cfa:	4620      	mov	r0, r4
 8023cfc:	4629      	mov	r1, r5
 8023cfe:	f7dc feed 	bl	8000adc <__aeabi_dcmpeq>
 8023d02:	b918      	cbnz	r0, 8023d0c <__cvt+0x8c>
 8023d04:	f1c6 0601 	rsb	r6, r6, #1
 8023d08:	f8ca 6000 	str.w	r6, [sl]
 8023d0c:	f8da 3000 	ldr.w	r3, [sl]
 8023d10:	4499      	add	r9, r3
 8023d12:	2200      	movs	r2, #0
 8023d14:	2300      	movs	r3, #0
 8023d16:	4620      	mov	r0, r4
 8023d18:	4629      	mov	r1, r5
 8023d1a:	f7dc fedf 	bl	8000adc <__aeabi_dcmpeq>
 8023d1e:	b108      	cbz	r0, 8023d24 <__cvt+0xa4>
 8023d20:	f8cd 900c 	str.w	r9, [sp, #12]
 8023d24:	2230      	movs	r2, #48	; 0x30
 8023d26:	9b03      	ldr	r3, [sp, #12]
 8023d28:	454b      	cmp	r3, r9
 8023d2a:	d307      	bcc.n	8023d3c <__cvt+0xbc>
 8023d2c:	9b03      	ldr	r3, [sp, #12]
 8023d2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023d30:	1bdb      	subs	r3, r3, r7
 8023d32:	4638      	mov	r0, r7
 8023d34:	6013      	str	r3, [r2, #0]
 8023d36:	b004      	add	sp, #16
 8023d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023d3c:	1c59      	adds	r1, r3, #1
 8023d3e:	9103      	str	r1, [sp, #12]
 8023d40:	701a      	strb	r2, [r3, #0]
 8023d42:	e7f0      	b.n	8023d26 <__cvt+0xa6>

08023d44 <__exponent>:
 8023d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023d46:	4603      	mov	r3, r0
 8023d48:	2900      	cmp	r1, #0
 8023d4a:	bfb8      	it	lt
 8023d4c:	4249      	neglt	r1, r1
 8023d4e:	f803 2b02 	strb.w	r2, [r3], #2
 8023d52:	bfb4      	ite	lt
 8023d54:	222d      	movlt	r2, #45	; 0x2d
 8023d56:	222b      	movge	r2, #43	; 0x2b
 8023d58:	2909      	cmp	r1, #9
 8023d5a:	7042      	strb	r2, [r0, #1]
 8023d5c:	dd2a      	ble.n	8023db4 <__exponent+0x70>
 8023d5e:	f10d 0407 	add.w	r4, sp, #7
 8023d62:	46a4      	mov	ip, r4
 8023d64:	270a      	movs	r7, #10
 8023d66:	46a6      	mov	lr, r4
 8023d68:	460a      	mov	r2, r1
 8023d6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8023d6e:	fb07 1516 	mls	r5, r7, r6, r1
 8023d72:	3530      	adds	r5, #48	; 0x30
 8023d74:	2a63      	cmp	r2, #99	; 0x63
 8023d76:	f104 34ff 	add.w	r4, r4, #4294967295
 8023d7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8023d7e:	4631      	mov	r1, r6
 8023d80:	dcf1      	bgt.n	8023d66 <__exponent+0x22>
 8023d82:	3130      	adds	r1, #48	; 0x30
 8023d84:	f1ae 0502 	sub.w	r5, lr, #2
 8023d88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8023d8c:	1c44      	adds	r4, r0, #1
 8023d8e:	4629      	mov	r1, r5
 8023d90:	4561      	cmp	r1, ip
 8023d92:	d30a      	bcc.n	8023daa <__exponent+0x66>
 8023d94:	f10d 0209 	add.w	r2, sp, #9
 8023d98:	eba2 020e 	sub.w	r2, r2, lr
 8023d9c:	4565      	cmp	r5, ip
 8023d9e:	bf88      	it	hi
 8023da0:	2200      	movhi	r2, #0
 8023da2:	4413      	add	r3, r2
 8023da4:	1a18      	subs	r0, r3, r0
 8023da6:	b003      	add	sp, #12
 8023da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023dae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8023db2:	e7ed      	b.n	8023d90 <__exponent+0x4c>
 8023db4:	2330      	movs	r3, #48	; 0x30
 8023db6:	3130      	adds	r1, #48	; 0x30
 8023db8:	7083      	strb	r3, [r0, #2]
 8023dba:	70c1      	strb	r1, [r0, #3]
 8023dbc:	1d03      	adds	r3, r0, #4
 8023dbe:	e7f1      	b.n	8023da4 <__exponent+0x60>

08023dc0 <_printf_float>:
 8023dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023dc4:	ed2d 8b02 	vpush	{d8}
 8023dc8:	b08d      	sub	sp, #52	; 0x34
 8023dca:	460c      	mov	r4, r1
 8023dcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8023dd0:	4616      	mov	r6, r2
 8023dd2:	461f      	mov	r7, r3
 8023dd4:	4605      	mov	r5, r0
 8023dd6:	f002 fed7 	bl	8026b88 <_localeconv_r>
 8023dda:	f8d0 a000 	ldr.w	sl, [r0]
 8023dde:	4650      	mov	r0, sl
 8023de0:	f7dc fa50 	bl	8000284 <strlen>
 8023de4:	2300      	movs	r3, #0
 8023de6:	930a      	str	r3, [sp, #40]	; 0x28
 8023de8:	6823      	ldr	r3, [r4, #0]
 8023dea:	9305      	str	r3, [sp, #20]
 8023dec:	f8d8 3000 	ldr.w	r3, [r8]
 8023df0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8023df4:	3307      	adds	r3, #7
 8023df6:	f023 0307 	bic.w	r3, r3, #7
 8023dfa:	f103 0208 	add.w	r2, r3, #8
 8023dfe:	f8c8 2000 	str.w	r2, [r8]
 8023e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8023e0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8023e0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8023e12:	9307      	str	r3, [sp, #28]
 8023e14:	f8cd 8018 	str.w	r8, [sp, #24]
 8023e18:	ee08 0a10 	vmov	s16, r0
 8023e1c:	4b9f      	ldr	r3, [pc, #636]	; (802409c <_printf_float+0x2dc>)
 8023e1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023e22:	f04f 32ff 	mov.w	r2, #4294967295
 8023e26:	f7dc fe8b 	bl	8000b40 <__aeabi_dcmpun>
 8023e2a:	bb88      	cbnz	r0, 8023e90 <_printf_float+0xd0>
 8023e2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023e30:	4b9a      	ldr	r3, [pc, #616]	; (802409c <_printf_float+0x2dc>)
 8023e32:	f04f 32ff 	mov.w	r2, #4294967295
 8023e36:	f7dc fe65 	bl	8000b04 <__aeabi_dcmple>
 8023e3a:	bb48      	cbnz	r0, 8023e90 <_printf_float+0xd0>
 8023e3c:	2200      	movs	r2, #0
 8023e3e:	2300      	movs	r3, #0
 8023e40:	4640      	mov	r0, r8
 8023e42:	4649      	mov	r1, r9
 8023e44:	f7dc fe54 	bl	8000af0 <__aeabi_dcmplt>
 8023e48:	b110      	cbz	r0, 8023e50 <_printf_float+0x90>
 8023e4a:	232d      	movs	r3, #45	; 0x2d
 8023e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023e50:	4b93      	ldr	r3, [pc, #588]	; (80240a0 <_printf_float+0x2e0>)
 8023e52:	4894      	ldr	r0, [pc, #592]	; (80240a4 <_printf_float+0x2e4>)
 8023e54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8023e58:	bf94      	ite	ls
 8023e5a:	4698      	movls	r8, r3
 8023e5c:	4680      	movhi	r8, r0
 8023e5e:	2303      	movs	r3, #3
 8023e60:	6123      	str	r3, [r4, #16]
 8023e62:	9b05      	ldr	r3, [sp, #20]
 8023e64:	f023 0204 	bic.w	r2, r3, #4
 8023e68:	6022      	str	r2, [r4, #0]
 8023e6a:	f04f 0900 	mov.w	r9, #0
 8023e6e:	9700      	str	r7, [sp, #0]
 8023e70:	4633      	mov	r3, r6
 8023e72:	aa0b      	add	r2, sp, #44	; 0x2c
 8023e74:	4621      	mov	r1, r4
 8023e76:	4628      	mov	r0, r5
 8023e78:	f000 f9d8 	bl	802422c <_printf_common>
 8023e7c:	3001      	adds	r0, #1
 8023e7e:	f040 8090 	bne.w	8023fa2 <_printf_float+0x1e2>
 8023e82:	f04f 30ff 	mov.w	r0, #4294967295
 8023e86:	b00d      	add	sp, #52	; 0x34
 8023e88:	ecbd 8b02 	vpop	{d8}
 8023e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e90:	4642      	mov	r2, r8
 8023e92:	464b      	mov	r3, r9
 8023e94:	4640      	mov	r0, r8
 8023e96:	4649      	mov	r1, r9
 8023e98:	f7dc fe52 	bl	8000b40 <__aeabi_dcmpun>
 8023e9c:	b140      	cbz	r0, 8023eb0 <_printf_float+0xf0>
 8023e9e:	464b      	mov	r3, r9
 8023ea0:	2b00      	cmp	r3, #0
 8023ea2:	bfbc      	itt	lt
 8023ea4:	232d      	movlt	r3, #45	; 0x2d
 8023ea6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8023eaa:	487f      	ldr	r0, [pc, #508]	; (80240a8 <_printf_float+0x2e8>)
 8023eac:	4b7f      	ldr	r3, [pc, #508]	; (80240ac <_printf_float+0x2ec>)
 8023eae:	e7d1      	b.n	8023e54 <_printf_float+0x94>
 8023eb0:	6863      	ldr	r3, [r4, #4]
 8023eb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8023eb6:	9206      	str	r2, [sp, #24]
 8023eb8:	1c5a      	adds	r2, r3, #1
 8023eba:	d13f      	bne.n	8023f3c <_printf_float+0x17c>
 8023ebc:	2306      	movs	r3, #6
 8023ebe:	6063      	str	r3, [r4, #4]
 8023ec0:	9b05      	ldr	r3, [sp, #20]
 8023ec2:	6861      	ldr	r1, [r4, #4]
 8023ec4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8023ec8:	2300      	movs	r3, #0
 8023eca:	9303      	str	r3, [sp, #12]
 8023ecc:	ab0a      	add	r3, sp, #40	; 0x28
 8023ece:	e9cd b301 	strd	fp, r3, [sp, #4]
 8023ed2:	ab09      	add	r3, sp, #36	; 0x24
 8023ed4:	ec49 8b10 	vmov	d0, r8, r9
 8023ed8:	9300      	str	r3, [sp, #0]
 8023eda:	6022      	str	r2, [r4, #0]
 8023edc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8023ee0:	4628      	mov	r0, r5
 8023ee2:	f7ff fecd 	bl	8023c80 <__cvt>
 8023ee6:	9b06      	ldr	r3, [sp, #24]
 8023ee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023eea:	2b47      	cmp	r3, #71	; 0x47
 8023eec:	4680      	mov	r8, r0
 8023eee:	d108      	bne.n	8023f02 <_printf_float+0x142>
 8023ef0:	1cc8      	adds	r0, r1, #3
 8023ef2:	db02      	blt.n	8023efa <_printf_float+0x13a>
 8023ef4:	6863      	ldr	r3, [r4, #4]
 8023ef6:	4299      	cmp	r1, r3
 8023ef8:	dd41      	ble.n	8023f7e <_printf_float+0x1be>
 8023efa:	f1ab 0b02 	sub.w	fp, fp, #2
 8023efe:	fa5f fb8b 	uxtb.w	fp, fp
 8023f02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023f06:	d820      	bhi.n	8023f4a <_printf_float+0x18a>
 8023f08:	3901      	subs	r1, #1
 8023f0a:	465a      	mov	r2, fp
 8023f0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8023f10:	9109      	str	r1, [sp, #36]	; 0x24
 8023f12:	f7ff ff17 	bl	8023d44 <__exponent>
 8023f16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023f18:	1813      	adds	r3, r2, r0
 8023f1a:	2a01      	cmp	r2, #1
 8023f1c:	4681      	mov	r9, r0
 8023f1e:	6123      	str	r3, [r4, #16]
 8023f20:	dc02      	bgt.n	8023f28 <_printf_float+0x168>
 8023f22:	6822      	ldr	r2, [r4, #0]
 8023f24:	07d2      	lsls	r2, r2, #31
 8023f26:	d501      	bpl.n	8023f2c <_printf_float+0x16c>
 8023f28:	3301      	adds	r3, #1
 8023f2a:	6123      	str	r3, [r4, #16]
 8023f2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8023f30:	2b00      	cmp	r3, #0
 8023f32:	d09c      	beq.n	8023e6e <_printf_float+0xae>
 8023f34:	232d      	movs	r3, #45	; 0x2d
 8023f36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023f3a:	e798      	b.n	8023e6e <_printf_float+0xae>
 8023f3c:	9a06      	ldr	r2, [sp, #24]
 8023f3e:	2a47      	cmp	r2, #71	; 0x47
 8023f40:	d1be      	bne.n	8023ec0 <_printf_float+0x100>
 8023f42:	2b00      	cmp	r3, #0
 8023f44:	d1bc      	bne.n	8023ec0 <_printf_float+0x100>
 8023f46:	2301      	movs	r3, #1
 8023f48:	e7b9      	b.n	8023ebe <_printf_float+0xfe>
 8023f4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8023f4e:	d118      	bne.n	8023f82 <_printf_float+0x1c2>
 8023f50:	2900      	cmp	r1, #0
 8023f52:	6863      	ldr	r3, [r4, #4]
 8023f54:	dd0b      	ble.n	8023f6e <_printf_float+0x1ae>
 8023f56:	6121      	str	r1, [r4, #16]
 8023f58:	b913      	cbnz	r3, 8023f60 <_printf_float+0x1a0>
 8023f5a:	6822      	ldr	r2, [r4, #0]
 8023f5c:	07d0      	lsls	r0, r2, #31
 8023f5e:	d502      	bpl.n	8023f66 <_printf_float+0x1a6>
 8023f60:	3301      	adds	r3, #1
 8023f62:	440b      	add	r3, r1
 8023f64:	6123      	str	r3, [r4, #16]
 8023f66:	65a1      	str	r1, [r4, #88]	; 0x58
 8023f68:	f04f 0900 	mov.w	r9, #0
 8023f6c:	e7de      	b.n	8023f2c <_printf_float+0x16c>
 8023f6e:	b913      	cbnz	r3, 8023f76 <_printf_float+0x1b6>
 8023f70:	6822      	ldr	r2, [r4, #0]
 8023f72:	07d2      	lsls	r2, r2, #31
 8023f74:	d501      	bpl.n	8023f7a <_printf_float+0x1ba>
 8023f76:	3302      	adds	r3, #2
 8023f78:	e7f4      	b.n	8023f64 <_printf_float+0x1a4>
 8023f7a:	2301      	movs	r3, #1
 8023f7c:	e7f2      	b.n	8023f64 <_printf_float+0x1a4>
 8023f7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8023f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f84:	4299      	cmp	r1, r3
 8023f86:	db05      	blt.n	8023f94 <_printf_float+0x1d4>
 8023f88:	6823      	ldr	r3, [r4, #0]
 8023f8a:	6121      	str	r1, [r4, #16]
 8023f8c:	07d8      	lsls	r0, r3, #31
 8023f8e:	d5ea      	bpl.n	8023f66 <_printf_float+0x1a6>
 8023f90:	1c4b      	adds	r3, r1, #1
 8023f92:	e7e7      	b.n	8023f64 <_printf_float+0x1a4>
 8023f94:	2900      	cmp	r1, #0
 8023f96:	bfd4      	ite	le
 8023f98:	f1c1 0202 	rsble	r2, r1, #2
 8023f9c:	2201      	movgt	r2, #1
 8023f9e:	4413      	add	r3, r2
 8023fa0:	e7e0      	b.n	8023f64 <_printf_float+0x1a4>
 8023fa2:	6823      	ldr	r3, [r4, #0]
 8023fa4:	055a      	lsls	r2, r3, #21
 8023fa6:	d407      	bmi.n	8023fb8 <_printf_float+0x1f8>
 8023fa8:	6923      	ldr	r3, [r4, #16]
 8023faa:	4642      	mov	r2, r8
 8023fac:	4631      	mov	r1, r6
 8023fae:	4628      	mov	r0, r5
 8023fb0:	47b8      	blx	r7
 8023fb2:	3001      	adds	r0, #1
 8023fb4:	d12c      	bne.n	8024010 <_printf_float+0x250>
 8023fb6:	e764      	b.n	8023e82 <_printf_float+0xc2>
 8023fb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023fbc:	f240 80e0 	bls.w	8024180 <_printf_float+0x3c0>
 8023fc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023fc4:	2200      	movs	r2, #0
 8023fc6:	2300      	movs	r3, #0
 8023fc8:	f7dc fd88 	bl	8000adc <__aeabi_dcmpeq>
 8023fcc:	2800      	cmp	r0, #0
 8023fce:	d034      	beq.n	802403a <_printf_float+0x27a>
 8023fd0:	4a37      	ldr	r2, [pc, #220]	; (80240b0 <_printf_float+0x2f0>)
 8023fd2:	2301      	movs	r3, #1
 8023fd4:	4631      	mov	r1, r6
 8023fd6:	4628      	mov	r0, r5
 8023fd8:	47b8      	blx	r7
 8023fda:	3001      	adds	r0, #1
 8023fdc:	f43f af51 	beq.w	8023e82 <_printf_float+0xc2>
 8023fe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023fe4:	429a      	cmp	r2, r3
 8023fe6:	db02      	blt.n	8023fee <_printf_float+0x22e>
 8023fe8:	6823      	ldr	r3, [r4, #0]
 8023fea:	07d8      	lsls	r0, r3, #31
 8023fec:	d510      	bpl.n	8024010 <_printf_float+0x250>
 8023fee:	ee18 3a10 	vmov	r3, s16
 8023ff2:	4652      	mov	r2, sl
 8023ff4:	4631      	mov	r1, r6
 8023ff6:	4628      	mov	r0, r5
 8023ff8:	47b8      	blx	r7
 8023ffa:	3001      	adds	r0, #1
 8023ffc:	f43f af41 	beq.w	8023e82 <_printf_float+0xc2>
 8024000:	f04f 0800 	mov.w	r8, #0
 8024004:	f104 091a 	add.w	r9, r4, #26
 8024008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802400a:	3b01      	subs	r3, #1
 802400c:	4543      	cmp	r3, r8
 802400e:	dc09      	bgt.n	8024024 <_printf_float+0x264>
 8024010:	6823      	ldr	r3, [r4, #0]
 8024012:	079b      	lsls	r3, r3, #30
 8024014:	f100 8105 	bmi.w	8024222 <_printf_float+0x462>
 8024018:	68e0      	ldr	r0, [r4, #12]
 802401a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802401c:	4298      	cmp	r0, r3
 802401e:	bfb8      	it	lt
 8024020:	4618      	movlt	r0, r3
 8024022:	e730      	b.n	8023e86 <_printf_float+0xc6>
 8024024:	2301      	movs	r3, #1
 8024026:	464a      	mov	r2, r9
 8024028:	4631      	mov	r1, r6
 802402a:	4628      	mov	r0, r5
 802402c:	47b8      	blx	r7
 802402e:	3001      	adds	r0, #1
 8024030:	f43f af27 	beq.w	8023e82 <_printf_float+0xc2>
 8024034:	f108 0801 	add.w	r8, r8, #1
 8024038:	e7e6      	b.n	8024008 <_printf_float+0x248>
 802403a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802403c:	2b00      	cmp	r3, #0
 802403e:	dc39      	bgt.n	80240b4 <_printf_float+0x2f4>
 8024040:	4a1b      	ldr	r2, [pc, #108]	; (80240b0 <_printf_float+0x2f0>)
 8024042:	2301      	movs	r3, #1
 8024044:	4631      	mov	r1, r6
 8024046:	4628      	mov	r0, r5
 8024048:	47b8      	blx	r7
 802404a:	3001      	adds	r0, #1
 802404c:	f43f af19 	beq.w	8023e82 <_printf_float+0xc2>
 8024050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024054:	4313      	orrs	r3, r2
 8024056:	d102      	bne.n	802405e <_printf_float+0x29e>
 8024058:	6823      	ldr	r3, [r4, #0]
 802405a:	07d9      	lsls	r1, r3, #31
 802405c:	d5d8      	bpl.n	8024010 <_printf_float+0x250>
 802405e:	ee18 3a10 	vmov	r3, s16
 8024062:	4652      	mov	r2, sl
 8024064:	4631      	mov	r1, r6
 8024066:	4628      	mov	r0, r5
 8024068:	47b8      	blx	r7
 802406a:	3001      	adds	r0, #1
 802406c:	f43f af09 	beq.w	8023e82 <_printf_float+0xc2>
 8024070:	f04f 0900 	mov.w	r9, #0
 8024074:	f104 0a1a 	add.w	sl, r4, #26
 8024078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802407a:	425b      	negs	r3, r3
 802407c:	454b      	cmp	r3, r9
 802407e:	dc01      	bgt.n	8024084 <_printf_float+0x2c4>
 8024080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024082:	e792      	b.n	8023faa <_printf_float+0x1ea>
 8024084:	2301      	movs	r3, #1
 8024086:	4652      	mov	r2, sl
 8024088:	4631      	mov	r1, r6
 802408a:	4628      	mov	r0, r5
 802408c:	47b8      	blx	r7
 802408e:	3001      	adds	r0, #1
 8024090:	f43f aef7 	beq.w	8023e82 <_printf_float+0xc2>
 8024094:	f109 0901 	add.w	r9, r9, #1
 8024098:	e7ee      	b.n	8024078 <_printf_float+0x2b8>
 802409a:	bf00      	nop
 802409c:	7fefffff 	.word	0x7fefffff
 80240a0:	08029fb1 	.word	0x08029fb1
 80240a4:	08029fb5 	.word	0x08029fb5
 80240a8:	08029fbd 	.word	0x08029fbd
 80240ac:	08029fb9 	.word	0x08029fb9
 80240b0:	08029fc1 	.word	0x08029fc1
 80240b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80240b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80240b8:	429a      	cmp	r2, r3
 80240ba:	bfa8      	it	ge
 80240bc:	461a      	movge	r2, r3
 80240be:	2a00      	cmp	r2, #0
 80240c0:	4691      	mov	r9, r2
 80240c2:	dc37      	bgt.n	8024134 <_printf_float+0x374>
 80240c4:	f04f 0b00 	mov.w	fp, #0
 80240c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80240cc:	f104 021a 	add.w	r2, r4, #26
 80240d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80240d2:	9305      	str	r3, [sp, #20]
 80240d4:	eba3 0309 	sub.w	r3, r3, r9
 80240d8:	455b      	cmp	r3, fp
 80240da:	dc33      	bgt.n	8024144 <_printf_float+0x384>
 80240dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80240e0:	429a      	cmp	r2, r3
 80240e2:	db3b      	blt.n	802415c <_printf_float+0x39c>
 80240e4:	6823      	ldr	r3, [r4, #0]
 80240e6:	07da      	lsls	r2, r3, #31
 80240e8:	d438      	bmi.n	802415c <_printf_float+0x39c>
 80240ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80240ec:	9a05      	ldr	r2, [sp, #20]
 80240ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80240f0:	1a9a      	subs	r2, r3, r2
 80240f2:	eba3 0901 	sub.w	r9, r3, r1
 80240f6:	4591      	cmp	r9, r2
 80240f8:	bfa8      	it	ge
 80240fa:	4691      	movge	r9, r2
 80240fc:	f1b9 0f00 	cmp.w	r9, #0
 8024100:	dc35      	bgt.n	802416e <_printf_float+0x3ae>
 8024102:	f04f 0800 	mov.w	r8, #0
 8024106:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802410a:	f104 0a1a 	add.w	sl, r4, #26
 802410e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024112:	1a9b      	subs	r3, r3, r2
 8024114:	eba3 0309 	sub.w	r3, r3, r9
 8024118:	4543      	cmp	r3, r8
 802411a:	f77f af79 	ble.w	8024010 <_printf_float+0x250>
 802411e:	2301      	movs	r3, #1
 8024120:	4652      	mov	r2, sl
 8024122:	4631      	mov	r1, r6
 8024124:	4628      	mov	r0, r5
 8024126:	47b8      	blx	r7
 8024128:	3001      	adds	r0, #1
 802412a:	f43f aeaa 	beq.w	8023e82 <_printf_float+0xc2>
 802412e:	f108 0801 	add.w	r8, r8, #1
 8024132:	e7ec      	b.n	802410e <_printf_float+0x34e>
 8024134:	4613      	mov	r3, r2
 8024136:	4631      	mov	r1, r6
 8024138:	4642      	mov	r2, r8
 802413a:	4628      	mov	r0, r5
 802413c:	47b8      	blx	r7
 802413e:	3001      	adds	r0, #1
 8024140:	d1c0      	bne.n	80240c4 <_printf_float+0x304>
 8024142:	e69e      	b.n	8023e82 <_printf_float+0xc2>
 8024144:	2301      	movs	r3, #1
 8024146:	4631      	mov	r1, r6
 8024148:	4628      	mov	r0, r5
 802414a:	9205      	str	r2, [sp, #20]
 802414c:	47b8      	blx	r7
 802414e:	3001      	adds	r0, #1
 8024150:	f43f ae97 	beq.w	8023e82 <_printf_float+0xc2>
 8024154:	9a05      	ldr	r2, [sp, #20]
 8024156:	f10b 0b01 	add.w	fp, fp, #1
 802415a:	e7b9      	b.n	80240d0 <_printf_float+0x310>
 802415c:	ee18 3a10 	vmov	r3, s16
 8024160:	4652      	mov	r2, sl
 8024162:	4631      	mov	r1, r6
 8024164:	4628      	mov	r0, r5
 8024166:	47b8      	blx	r7
 8024168:	3001      	adds	r0, #1
 802416a:	d1be      	bne.n	80240ea <_printf_float+0x32a>
 802416c:	e689      	b.n	8023e82 <_printf_float+0xc2>
 802416e:	9a05      	ldr	r2, [sp, #20]
 8024170:	464b      	mov	r3, r9
 8024172:	4442      	add	r2, r8
 8024174:	4631      	mov	r1, r6
 8024176:	4628      	mov	r0, r5
 8024178:	47b8      	blx	r7
 802417a:	3001      	adds	r0, #1
 802417c:	d1c1      	bne.n	8024102 <_printf_float+0x342>
 802417e:	e680      	b.n	8023e82 <_printf_float+0xc2>
 8024180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024182:	2a01      	cmp	r2, #1
 8024184:	dc01      	bgt.n	802418a <_printf_float+0x3ca>
 8024186:	07db      	lsls	r3, r3, #31
 8024188:	d538      	bpl.n	80241fc <_printf_float+0x43c>
 802418a:	2301      	movs	r3, #1
 802418c:	4642      	mov	r2, r8
 802418e:	4631      	mov	r1, r6
 8024190:	4628      	mov	r0, r5
 8024192:	47b8      	blx	r7
 8024194:	3001      	adds	r0, #1
 8024196:	f43f ae74 	beq.w	8023e82 <_printf_float+0xc2>
 802419a:	ee18 3a10 	vmov	r3, s16
 802419e:	4652      	mov	r2, sl
 80241a0:	4631      	mov	r1, r6
 80241a2:	4628      	mov	r0, r5
 80241a4:	47b8      	blx	r7
 80241a6:	3001      	adds	r0, #1
 80241a8:	f43f ae6b 	beq.w	8023e82 <_printf_float+0xc2>
 80241ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80241b0:	2200      	movs	r2, #0
 80241b2:	2300      	movs	r3, #0
 80241b4:	f7dc fc92 	bl	8000adc <__aeabi_dcmpeq>
 80241b8:	b9d8      	cbnz	r0, 80241f2 <_printf_float+0x432>
 80241ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80241bc:	f108 0201 	add.w	r2, r8, #1
 80241c0:	3b01      	subs	r3, #1
 80241c2:	4631      	mov	r1, r6
 80241c4:	4628      	mov	r0, r5
 80241c6:	47b8      	blx	r7
 80241c8:	3001      	adds	r0, #1
 80241ca:	d10e      	bne.n	80241ea <_printf_float+0x42a>
 80241cc:	e659      	b.n	8023e82 <_printf_float+0xc2>
 80241ce:	2301      	movs	r3, #1
 80241d0:	4652      	mov	r2, sl
 80241d2:	4631      	mov	r1, r6
 80241d4:	4628      	mov	r0, r5
 80241d6:	47b8      	blx	r7
 80241d8:	3001      	adds	r0, #1
 80241da:	f43f ae52 	beq.w	8023e82 <_printf_float+0xc2>
 80241de:	f108 0801 	add.w	r8, r8, #1
 80241e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80241e4:	3b01      	subs	r3, #1
 80241e6:	4543      	cmp	r3, r8
 80241e8:	dcf1      	bgt.n	80241ce <_printf_float+0x40e>
 80241ea:	464b      	mov	r3, r9
 80241ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80241f0:	e6dc      	b.n	8023fac <_printf_float+0x1ec>
 80241f2:	f04f 0800 	mov.w	r8, #0
 80241f6:	f104 0a1a 	add.w	sl, r4, #26
 80241fa:	e7f2      	b.n	80241e2 <_printf_float+0x422>
 80241fc:	2301      	movs	r3, #1
 80241fe:	4642      	mov	r2, r8
 8024200:	e7df      	b.n	80241c2 <_printf_float+0x402>
 8024202:	2301      	movs	r3, #1
 8024204:	464a      	mov	r2, r9
 8024206:	4631      	mov	r1, r6
 8024208:	4628      	mov	r0, r5
 802420a:	47b8      	blx	r7
 802420c:	3001      	adds	r0, #1
 802420e:	f43f ae38 	beq.w	8023e82 <_printf_float+0xc2>
 8024212:	f108 0801 	add.w	r8, r8, #1
 8024216:	68e3      	ldr	r3, [r4, #12]
 8024218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802421a:	1a5b      	subs	r3, r3, r1
 802421c:	4543      	cmp	r3, r8
 802421e:	dcf0      	bgt.n	8024202 <_printf_float+0x442>
 8024220:	e6fa      	b.n	8024018 <_printf_float+0x258>
 8024222:	f04f 0800 	mov.w	r8, #0
 8024226:	f104 0919 	add.w	r9, r4, #25
 802422a:	e7f4      	b.n	8024216 <_printf_float+0x456>

0802422c <_printf_common>:
 802422c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024230:	4616      	mov	r6, r2
 8024232:	4699      	mov	r9, r3
 8024234:	688a      	ldr	r2, [r1, #8]
 8024236:	690b      	ldr	r3, [r1, #16]
 8024238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802423c:	4293      	cmp	r3, r2
 802423e:	bfb8      	it	lt
 8024240:	4613      	movlt	r3, r2
 8024242:	6033      	str	r3, [r6, #0]
 8024244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024248:	4607      	mov	r7, r0
 802424a:	460c      	mov	r4, r1
 802424c:	b10a      	cbz	r2, 8024252 <_printf_common+0x26>
 802424e:	3301      	adds	r3, #1
 8024250:	6033      	str	r3, [r6, #0]
 8024252:	6823      	ldr	r3, [r4, #0]
 8024254:	0699      	lsls	r1, r3, #26
 8024256:	bf42      	ittt	mi
 8024258:	6833      	ldrmi	r3, [r6, #0]
 802425a:	3302      	addmi	r3, #2
 802425c:	6033      	strmi	r3, [r6, #0]
 802425e:	6825      	ldr	r5, [r4, #0]
 8024260:	f015 0506 	ands.w	r5, r5, #6
 8024264:	d106      	bne.n	8024274 <_printf_common+0x48>
 8024266:	f104 0a19 	add.w	sl, r4, #25
 802426a:	68e3      	ldr	r3, [r4, #12]
 802426c:	6832      	ldr	r2, [r6, #0]
 802426e:	1a9b      	subs	r3, r3, r2
 8024270:	42ab      	cmp	r3, r5
 8024272:	dc26      	bgt.n	80242c2 <_printf_common+0x96>
 8024274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024278:	1e13      	subs	r3, r2, #0
 802427a:	6822      	ldr	r2, [r4, #0]
 802427c:	bf18      	it	ne
 802427e:	2301      	movne	r3, #1
 8024280:	0692      	lsls	r2, r2, #26
 8024282:	d42b      	bmi.n	80242dc <_printf_common+0xb0>
 8024284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024288:	4649      	mov	r1, r9
 802428a:	4638      	mov	r0, r7
 802428c:	47c0      	blx	r8
 802428e:	3001      	adds	r0, #1
 8024290:	d01e      	beq.n	80242d0 <_printf_common+0xa4>
 8024292:	6823      	ldr	r3, [r4, #0]
 8024294:	68e5      	ldr	r5, [r4, #12]
 8024296:	6832      	ldr	r2, [r6, #0]
 8024298:	f003 0306 	and.w	r3, r3, #6
 802429c:	2b04      	cmp	r3, #4
 802429e:	bf08      	it	eq
 80242a0:	1aad      	subeq	r5, r5, r2
 80242a2:	68a3      	ldr	r3, [r4, #8]
 80242a4:	6922      	ldr	r2, [r4, #16]
 80242a6:	bf0c      	ite	eq
 80242a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80242ac:	2500      	movne	r5, #0
 80242ae:	4293      	cmp	r3, r2
 80242b0:	bfc4      	itt	gt
 80242b2:	1a9b      	subgt	r3, r3, r2
 80242b4:	18ed      	addgt	r5, r5, r3
 80242b6:	2600      	movs	r6, #0
 80242b8:	341a      	adds	r4, #26
 80242ba:	42b5      	cmp	r5, r6
 80242bc:	d11a      	bne.n	80242f4 <_printf_common+0xc8>
 80242be:	2000      	movs	r0, #0
 80242c0:	e008      	b.n	80242d4 <_printf_common+0xa8>
 80242c2:	2301      	movs	r3, #1
 80242c4:	4652      	mov	r2, sl
 80242c6:	4649      	mov	r1, r9
 80242c8:	4638      	mov	r0, r7
 80242ca:	47c0      	blx	r8
 80242cc:	3001      	adds	r0, #1
 80242ce:	d103      	bne.n	80242d8 <_printf_common+0xac>
 80242d0:	f04f 30ff 	mov.w	r0, #4294967295
 80242d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80242d8:	3501      	adds	r5, #1
 80242da:	e7c6      	b.n	802426a <_printf_common+0x3e>
 80242dc:	18e1      	adds	r1, r4, r3
 80242de:	1c5a      	adds	r2, r3, #1
 80242e0:	2030      	movs	r0, #48	; 0x30
 80242e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80242e6:	4422      	add	r2, r4
 80242e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80242ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80242f0:	3302      	adds	r3, #2
 80242f2:	e7c7      	b.n	8024284 <_printf_common+0x58>
 80242f4:	2301      	movs	r3, #1
 80242f6:	4622      	mov	r2, r4
 80242f8:	4649      	mov	r1, r9
 80242fa:	4638      	mov	r0, r7
 80242fc:	47c0      	blx	r8
 80242fe:	3001      	adds	r0, #1
 8024300:	d0e6      	beq.n	80242d0 <_printf_common+0xa4>
 8024302:	3601      	adds	r6, #1
 8024304:	e7d9      	b.n	80242ba <_printf_common+0x8e>
	...

08024308 <_printf_i>:
 8024308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802430c:	7e0f      	ldrb	r7, [r1, #24]
 802430e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024310:	2f78      	cmp	r7, #120	; 0x78
 8024312:	4691      	mov	r9, r2
 8024314:	4680      	mov	r8, r0
 8024316:	460c      	mov	r4, r1
 8024318:	469a      	mov	sl, r3
 802431a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802431e:	d807      	bhi.n	8024330 <_printf_i+0x28>
 8024320:	2f62      	cmp	r7, #98	; 0x62
 8024322:	d80a      	bhi.n	802433a <_printf_i+0x32>
 8024324:	2f00      	cmp	r7, #0
 8024326:	f000 80d8 	beq.w	80244da <_printf_i+0x1d2>
 802432a:	2f58      	cmp	r7, #88	; 0x58
 802432c:	f000 80a3 	beq.w	8024476 <_printf_i+0x16e>
 8024330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024338:	e03a      	b.n	80243b0 <_printf_i+0xa8>
 802433a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802433e:	2b15      	cmp	r3, #21
 8024340:	d8f6      	bhi.n	8024330 <_printf_i+0x28>
 8024342:	a101      	add	r1, pc, #4	; (adr r1, 8024348 <_printf_i+0x40>)
 8024344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024348:	080243a1 	.word	0x080243a1
 802434c:	080243b5 	.word	0x080243b5
 8024350:	08024331 	.word	0x08024331
 8024354:	08024331 	.word	0x08024331
 8024358:	08024331 	.word	0x08024331
 802435c:	08024331 	.word	0x08024331
 8024360:	080243b5 	.word	0x080243b5
 8024364:	08024331 	.word	0x08024331
 8024368:	08024331 	.word	0x08024331
 802436c:	08024331 	.word	0x08024331
 8024370:	08024331 	.word	0x08024331
 8024374:	080244c1 	.word	0x080244c1
 8024378:	080243e5 	.word	0x080243e5
 802437c:	080244a3 	.word	0x080244a3
 8024380:	08024331 	.word	0x08024331
 8024384:	08024331 	.word	0x08024331
 8024388:	080244e3 	.word	0x080244e3
 802438c:	08024331 	.word	0x08024331
 8024390:	080243e5 	.word	0x080243e5
 8024394:	08024331 	.word	0x08024331
 8024398:	08024331 	.word	0x08024331
 802439c:	080244ab 	.word	0x080244ab
 80243a0:	682b      	ldr	r3, [r5, #0]
 80243a2:	1d1a      	adds	r2, r3, #4
 80243a4:	681b      	ldr	r3, [r3, #0]
 80243a6:	602a      	str	r2, [r5, #0]
 80243a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80243ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80243b0:	2301      	movs	r3, #1
 80243b2:	e0a3      	b.n	80244fc <_printf_i+0x1f4>
 80243b4:	6820      	ldr	r0, [r4, #0]
 80243b6:	6829      	ldr	r1, [r5, #0]
 80243b8:	0606      	lsls	r6, r0, #24
 80243ba:	f101 0304 	add.w	r3, r1, #4
 80243be:	d50a      	bpl.n	80243d6 <_printf_i+0xce>
 80243c0:	680e      	ldr	r6, [r1, #0]
 80243c2:	602b      	str	r3, [r5, #0]
 80243c4:	2e00      	cmp	r6, #0
 80243c6:	da03      	bge.n	80243d0 <_printf_i+0xc8>
 80243c8:	232d      	movs	r3, #45	; 0x2d
 80243ca:	4276      	negs	r6, r6
 80243cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80243d0:	485e      	ldr	r0, [pc, #376]	; (802454c <_printf_i+0x244>)
 80243d2:	230a      	movs	r3, #10
 80243d4:	e019      	b.n	802440a <_printf_i+0x102>
 80243d6:	680e      	ldr	r6, [r1, #0]
 80243d8:	602b      	str	r3, [r5, #0]
 80243da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80243de:	bf18      	it	ne
 80243e0:	b236      	sxthne	r6, r6
 80243e2:	e7ef      	b.n	80243c4 <_printf_i+0xbc>
 80243e4:	682b      	ldr	r3, [r5, #0]
 80243e6:	6820      	ldr	r0, [r4, #0]
 80243e8:	1d19      	adds	r1, r3, #4
 80243ea:	6029      	str	r1, [r5, #0]
 80243ec:	0601      	lsls	r1, r0, #24
 80243ee:	d501      	bpl.n	80243f4 <_printf_i+0xec>
 80243f0:	681e      	ldr	r6, [r3, #0]
 80243f2:	e002      	b.n	80243fa <_printf_i+0xf2>
 80243f4:	0646      	lsls	r6, r0, #25
 80243f6:	d5fb      	bpl.n	80243f0 <_printf_i+0xe8>
 80243f8:	881e      	ldrh	r6, [r3, #0]
 80243fa:	4854      	ldr	r0, [pc, #336]	; (802454c <_printf_i+0x244>)
 80243fc:	2f6f      	cmp	r7, #111	; 0x6f
 80243fe:	bf0c      	ite	eq
 8024400:	2308      	moveq	r3, #8
 8024402:	230a      	movne	r3, #10
 8024404:	2100      	movs	r1, #0
 8024406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802440a:	6865      	ldr	r5, [r4, #4]
 802440c:	60a5      	str	r5, [r4, #8]
 802440e:	2d00      	cmp	r5, #0
 8024410:	bfa2      	ittt	ge
 8024412:	6821      	ldrge	r1, [r4, #0]
 8024414:	f021 0104 	bicge.w	r1, r1, #4
 8024418:	6021      	strge	r1, [r4, #0]
 802441a:	b90e      	cbnz	r6, 8024420 <_printf_i+0x118>
 802441c:	2d00      	cmp	r5, #0
 802441e:	d04d      	beq.n	80244bc <_printf_i+0x1b4>
 8024420:	4615      	mov	r5, r2
 8024422:	fbb6 f1f3 	udiv	r1, r6, r3
 8024426:	fb03 6711 	mls	r7, r3, r1, r6
 802442a:	5dc7      	ldrb	r7, [r0, r7]
 802442c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8024430:	4637      	mov	r7, r6
 8024432:	42bb      	cmp	r3, r7
 8024434:	460e      	mov	r6, r1
 8024436:	d9f4      	bls.n	8024422 <_printf_i+0x11a>
 8024438:	2b08      	cmp	r3, #8
 802443a:	d10b      	bne.n	8024454 <_printf_i+0x14c>
 802443c:	6823      	ldr	r3, [r4, #0]
 802443e:	07de      	lsls	r6, r3, #31
 8024440:	d508      	bpl.n	8024454 <_printf_i+0x14c>
 8024442:	6923      	ldr	r3, [r4, #16]
 8024444:	6861      	ldr	r1, [r4, #4]
 8024446:	4299      	cmp	r1, r3
 8024448:	bfde      	ittt	le
 802444a:	2330      	movle	r3, #48	; 0x30
 802444c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024450:	f105 35ff 	addle.w	r5, r5, #4294967295
 8024454:	1b52      	subs	r2, r2, r5
 8024456:	6122      	str	r2, [r4, #16]
 8024458:	f8cd a000 	str.w	sl, [sp]
 802445c:	464b      	mov	r3, r9
 802445e:	aa03      	add	r2, sp, #12
 8024460:	4621      	mov	r1, r4
 8024462:	4640      	mov	r0, r8
 8024464:	f7ff fee2 	bl	802422c <_printf_common>
 8024468:	3001      	adds	r0, #1
 802446a:	d14c      	bne.n	8024506 <_printf_i+0x1fe>
 802446c:	f04f 30ff 	mov.w	r0, #4294967295
 8024470:	b004      	add	sp, #16
 8024472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024476:	4835      	ldr	r0, [pc, #212]	; (802454c <_printf_i+0x244>)
 8024478:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802447c:	6829      	ldr	r1, [r5, #0]
 802447e:	6823      	ldr	r3, [r4, #0]
 8024480:	f851 6b04 	ldr.w	r6, [r1], #4
 8024484:	6029      	str	r1, [r5, #0]
 8024486:	061d      	lsls	r5, r3, #24
 8024488:	d514      	bpl.n	80244b4 <_printf_i+0x1ac>
 802448a:	07df      	lsls	r7, r3, #31
 802448c:	bf44      	itt	mi
 802448e:	f043 0320 	orrmi.w	r3, r3, #32
 8024492:	6023      	strmi	r3, [r4, #0]
 8024494:	b91e      	cbnz	r6, 802449e <_printf_i+0x196>
 8024496:	6823      	ldr	r3, [r4, #0]
 8024498:	f023 0320 	bic.w	r3, r3, #32
 802449c:	6023      	str	r3, [r4, #0]
 802449e:	2310      	movs	r3, #16
 80244a0:	e7b0      	b.n	8024404 <_printf_i+0xfc>
 80244a2:	6823      	ldr	r3, [r4, #0]
 80244a4:	f043 0320 	orr.w	r3, r3, #32
 80244a8:	6023      	str	r3, [r4, #0]
 80244aa:	2378      	movs	r3, #120	; 0x78
 80244ac:	4828      	ldr	r0, [pc, #160]	; (8024550 <_printf_i+0x248>)
 80244ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80244b2:	e7e3      	b.n	802447c <_printf_i+0x174>
 80244b4:	0659      	lsls	r1, r3, #25
 80244b6:	bf48      	it	mi
 80244b8:	b2b6      	uxthmi	r6, r6
 80244ba:	e7e6      	b.n	802448a <_printf_i+0x182>
 80244bc:	4615      	mov	r5, r2
 80244be:	e7bb      	b.n	8024438 <_printf_i+0x130>
 80244c0:	682b      	ldr	r3, [r5, #0]
 80244c2:	6826      	ldr	r6, [r4, #0]
 80244c4:	6961      	ldr	r1, [r4, #20]
 80244c6:	1d18      	adds	r0, r3, #4
 80244c8:	6028      	str	r0, [r5, #0]
 80244ca:	0635      	lsls	r5, r6, #24
 80244cc:	681b      	ldr	r3, [r3, #0]
 80244ce:	d501      	bpl.n	80244d4 <_printf_i+0x1cc>
 80244d0:	6019      	str	r1, [r3, #0]
 80244d2:	e002      	b.n	80244da <_printf_i+0x1d2>
 80244d4:	0670      	lsls	r0, r6, #25
 80244d6:	d5fb      	bpl.n	80244d0 <_printf_i+0x1c8>
 80244d8:	8019      	strh	r1, [r3, #0]
 80244da:	2300      	movs	r3, #0
 80244dc:	6123      	str	r3, [r4, #16]
 80244de:	4615      	mov	r5, r2
 80244e0:	e7ba      	b.n	8024458 <_printf_i+0x150>
 80244e2:	682b      	ldr	r3, [r5, #0]
 80244e4:	1d1a      	adds	r2, r3, #4
 80244e6:	602a      	str	r2, [r5, #0]
 80244e8:	681d      	ldr	r5, [r3, #0]
 80244ea:	6862      	ldr	r2, [r4, #4]
 80244ec:	2100      	movs	r1, #0
 80244ee:	4628      	mov	r0, r5
 80244f0:	f7db fe6e 	bl	80001d0 <memchr>
 80244f4:	b108      	cbz	r0, 80244fa <_printf_i+0x1f2>
 80244f6:	1b40      	subs	r0, r0, r5
 80244f8:	6060      	str	r0, [r4, #4]
 80244fa:	6863      	ldr	r3, [r4, #4]
 80244fc:	6123      	str	r3, [r4, #16]
 80244fe:	2300      	movs	r3, #0
 8024500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024504:	e7a8      	b.n	8024458 <_printf_i+0x150>
 8024506:	6923      	ldr	r3, [r4, #16]
 8024508:	462a      	mov	r2, r5
 802450a:	4649      	mov	r1, r9
 802450c:	4640      	mov	r0, r8
 802450e:	47d0      	blx	sl
 8024510:	3001      	adds	r0, #1
 8024512:	d0ab      	beq.n	802446c <_printf_i+0x164>
 8024514:	6823      	ldr	r3, [r4, #0]
 8024516:	079b      	lsls	r3, r3, #30
 8024518:	d413      	bmi.n	8024542 <_printf_i+0x23a>
 802451a:	68e0      	ldr	r0, [r4, #12]
 802451c:	9b03      	ldr	r3, [sp, #12]
 802451e:	4298      	cmp	r0, r3
 8024520:	bfb8      	it	lt
 8024522:	4618      	movlt	r0, r3
 8024524:	e7a4      	b.n	8024470 <_printf_i+0x168>
 8024526:	2301      	movs	r3, #1
 8024528:	4632      	mov	r2, r6
 802452a:	4649      	mov	r1, r9
 802452c:	4640      	mov	r0, r8
 802452e:	47d0      	blx	sl
 8024530:	3001      	adds	r0, #1
 8024532:	d09b      	beq.n	802446c <_printf_i+0x164>
 8024534:	3501      	adds	r5, #1
 8024536:	68e3      	ldr	r3, [r4, #12]
 8024538:	9903      	ldr	r1, [sp, #12]
 802453a:	1a5b      	subs	r3, r3, r1
 802453c:	42ab      	cmp	r3, r5
 802453e:	dcf2      	bgt.n	8024526 <_printf_i+0x21e>
 8024540:	e7eb      	b.n	802451a <_printf_i+0x212>
 8024542:	2500      	movs	r5, #0
 8024544:	f104 0619 	add.w	r6, r4, #25
 8024548:	e7f5      	b.n	8024536 <_printf_i+0x22e>
 802454a:	bf00      	nop
 802454c:	08029fc3 	.word	0x08029fc3
 8024550:	08029fd4 	.word	0x08029fd4

08024554 <_sbrk_r>:
 8024554:	b538      	push	{r3, r4, r5, lr}
 8024556:	4d06      	ldr	r5, [pc, #24]	; (8024570 <_sbrk_r+0x1c>)
 8024558:	2300      	movs	r3, #0
 802455a:	4604      	mov	r4, r0
 802455c:	4608      	mov	r0, r1
 802455e:	602b      	str	r3, [r5, #0]
 8024560:	f7e4 fe1a 	bl	8009198 <_sbrk>
 8024564:	1c43      	adds	r3, r0, #1
 8024566:	d102      	bne.n	802456e <_sbrk_r+0x1a>
 8024568:	682b      	ldr	r3, [r5, #0]
 802456a:	b103      	cbz	r3, 802456e <_sbrk_r+0x1a>
 802456c:	6023      	str	r3, [r4, #0]
 802456e:	bd38      	pop	{r3, r4, r5, pc}
 8024570:	20004cf4 	.word	0x20004cf4

08024574 <_raise_r>:
 8024574:	291f      	cmp	r1, #31
 8024576:	b538      	push	{r3, r4, r5, lr}
 8024578:	4604      	mov	r4, r0
 802457a:	460d      	mov	r5, r1
 802457c:	d904      	bls.n	8024588 <_raise_r+0x14>
 802457e:	2316      	movs	r3, #22
 8024580:	6003      	str	r3, [r0, #0]
 8024582:	f04f 30ff 	mov.w	r0, #4294967295
 8024586:	bd38      	pop	{r3, r4, r5, pc}
 8024588:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802458a:	b112      	cbz	r2, 8024592 <_raise_r+0x1e>
 802458c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024590:	b94b      	cbnz	r3, 80245a6 <_raise_r+0x32>
 8024592:	4620      	mov	r0, r4
 8024594:	f000 f830 	bl	80245f8 <_getpid_r>
 8024598:	462a      	mov	r2, r5
 802459a:	4601      	mov	r1, r0
 802459c:	4620      	mov	r0, r4
 802459e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80245a2:	f000 b817 	b.w	80245d4 <_kill_r>
 80245a6:	2b01      	cmp	r3, #1
 80245a8:	d00a      	beq.n	80245c0 <_raise_r+0x4c>
 80245aa:	1c59      	adds	r1, r3, #1
 80245ac:	d103      	bne.n	80245b6 <_raise_r+0x42>
 80245ae:	2316      	movs	r3, #22
 80245b0:	6003      	str	r3, [r0, #0]
 80245b2:	2001      	movs	r0, #1
 80245b4:	e7e7      	b.n	8024586 <_raise_r+0x12>
 80245b6:	2400      	movs	r4, #0
 80245b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80245bc:	4628      	mov	r0, r5
 80245be:	4798      	blx	r3
 80245c0:	2000      	movs	r0, #0
 80245c2:	e7e0      	b.n	8024586 <_raise_r+0x12>

080245c4 <raise>:
 80245c4:	4b02      	ldr	r3, [pc, #8]	; (80245d0 <raise+0xc>)
 80245c6:	4601      	mov	r1, r0
 80245c8:	6818      	ldr	r0, [r3, #0]
 80245ca:	f7ff bfd3 	b.w	8024574 <_raise_r>
 80245ce:	bf00      	nop
 80245d0:	20000280 	.word	0x20000280

080245d4 <_kill_r>:
 80245d4:	b538      	push	{r3, r4, r5, lr}
 80245d6:	4d07      	ldr	r5, [pc, #28]	; (80245f4 <_kill_r+0x20>)
 80245d8:	2300      	movs	r3, #0
 80245da:	4604      	mov	r4, r0
 80245dc:	4608      	mov	r0, r1
 80245de:	4611      	mov	r1, r2
 80245e0:	602b      	str	r3, [r5, #0]
 80245e2:	f7e4 fd51 	bl	8009088 <_kill>
 80245e6:	1c43      	adds	r3, r0, #1
 80245e8:	d102      	bne.n	80245f0 <_kill_r+0x1c>
 80245ea:	682b      	ldr	r3, [r5, #0]
 80245ec:	b103      	cbz	r3, 80245f0 <_kill_r+0x1c>
 80245ee:	6023      	str	r3, [r4, #0]
 80245f0:	bd38      	pop	{r3, r4, r5, pc}
 80245f2:	bf00      	nop
 80245f4:	20004cf4 	.word	0x20004cf4

080245f8 <_getpid_r>:
 80245f8:	f7e4 bd3e 	b.w	8009078 <_getpid>

080245fc <strncmp>:
 80245fc:	b510      	push	{r4, lr}
 80245fe:	b17a      	cbz	r2, 8024620 <strncmp+0x24>
 8024600:	4603      	mov	r3, r0
 8024602:	3901      	subs	r1, #1
 8024604:	1884      	adds	r4, r0, r2
 8024606:	f813 0b01 	ldrb.w	r0, [r3], #1
 802460a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802460e:	4290      	cmp	r0, r2
 8024610:	d101      	bne.n	8024616 <strncmp+0x1a>
 8024612:	42a3      	cmp	r3, r4
 8024614:	d101      	bne.n	802461a <strncmp+0x1e>
 8024616:	1a80      	subs	r0, r0, r2
 8024618:	bd10      	pop	{r4, pc}
 802461a:	2800      	cmp	r0, #0
 802461c:	d1f3      	bne.n	8024606 <strncmp+0xa>
 802461e:	e7fa      	b.n	8024616 <strncmp+0x1a>
 8024620:	4610      	mov	r0, r2
 8024622:	e7f9      	b.n	8024618 <strncmp+0x1c>

08024624 <sulp>:
 8024624:	b570      	push	{r4, r5, r6, lr}
 8024626:	4604      	mov	r4, r0
 8024628:	460d      	mov	r5, r1
 802462a:	ec45 4b10 	vmov	d0, r4, r5
 802462e:	4616      	mov	r6, r2
 8024630:	f002 fea4 	bl	802737c <__ulp>
 8024634:	ec51 0b10 	vmov	r0, r1, d0
 8024638:	b17e      	cbz	r6, 802465a <sulp+0x36>
 802463a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802463e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8024642:	2b00      	cmp	r3, #0
 8024644:	dd09      	ble.n	802465a <sulp+0x36>
 8024646:	051b      	lsls	r3, r3, #20
 8024648:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802464c:	2400      	movs	r4, #0
 802464e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8024652:	4622      	mov	r2, r4
 8024654:	462b      	mov	r3, r5
 8024656:	f7db ffd9 	bl	800060c <__aeabi_dmul>
 802465a:	bd70      	pop	{r4, r5, r6, pc}
 802465c:	0000      	movs	r0, r0
	...

08024660 <_strtod_l>:
 8024660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024664:	ed2d 8b02 	vpush	{d8}
 8024668:	b09d      	sub	sp, #116	; 0x74
 802466a:	461f      	mov	r7, r3
 802466c:	2300      	movs	r3, #0
 802466e:	9318      	str	r3, [sp, #96]	; 0x60
 8024670:	4ba2      	ldr	r3, [pc, #648]	; (80248fc <_strtod_l+0x29c>)
 8024672:	9213      	str	r2, [sp, #76]	; 0x4c
 8024674:	681b      	ldr	r3, [r3, #0]
 8024676:	9305      	str	r3, [sp, #20]
 8024678:	4604      	mov	r4, r0
 802467a:	4618      	mov	r0, r3
 802467c:	4688      	mov	r8, r1
 802467e:	f7db fe01 	bl	8000284 <strlen>
 8024682:	f04f 0a00 	mov.w	sl, #0
 8024686:	4605      	mov	r5, r0
 8024688:	f04f 0b00 	mov.w	fp, #0
 802468c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8024690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024692:	781a      	ldrb	r2, [r3, #0]
 8024694:	2a2b      	cmp	r2, #43	; 0x2b
 8024696:	d04e      	beq.n	8024736 <_strtod_l+0xd6>
 8024698:	d83b      	bhi.n	8024712 <_strtod_l+0xb2>
 802469a:	2a0d      	cmp	r2, #13
 802469c:	d834      	bhi.n	8024708 <_strtod_l+0xa8>
 802469e:	2a08      	cmp	r2, #8
 80246a0:	d834      	bhi.n	802470c <_strtod_l+0xac>
 80246a2:	2a00      	cmp	r2, #0
 80246a4:	d03e      	beq.n	8024724 <_strtod_l+0xc4>
 80246a6:	2300      	movs	r3, #0
 80246a8:	930a      	str	r3, [sp, #40]	; 0x28
 80246aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80246ac:	7833      	ldrb	r3, [r6, #0]
 80246ae:	2b30      	cmp	r3, #48	; 0x30
 80246b0:	f040 80b0 	bne.w	8024814 <_strtod_l+0x1b4>
 80246b4:	7873      	ldrb	r3, [r6, #1]
 80246b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80246ba:	2b58      	cmp	r3, #88	; 0x58
 80246bc:	d168      	bne.n	8024790 <_strtod_l+0x130>
 80246be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80246c0:	9301      	str	r3, [sp, #4]
 80246c2:	ab18      	add	r3, sp, #96	; 0x60
 80246c4:	9702      	str	r7, [sp, #8]
 80246c6:	9300      	str	r3, [sp, #0]
 80246c8:	4a8d      	ldr	r2, [pc, #564]	; (8024900 <_strtod_l+0x2a0>)
 80246ca:	ab19      	add	r3, sp, #100	; 0x64
 80246cc:	a917      	add	r1, sp, #92	; 0x5c
 80246ce:	4620      	mov	r0, r4
 80246d0:	f001 ff52 	bl	8026578 <__gethex>
 80246d4:	f010 0707 	ands.w	r7, r0, #7
 80246d8:	4605      	mov	r5, r0
 80246da:	d005      	beq.n	80246e8 <_strtod_l+0x88>
 80246dc:	2f06      	cmp	r7, #6
 80246de:	d12c      	bne.n	802473a <_strtod_l+0xda>
 80246e0:	3601      	adds	r6, #1
 80246e2:	2300      	movs	r3, #0
 80246e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80246e6:	930a      	str	r3, [sp, #40]	; 0x28
 80246e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80246ea:	2b00      	cmp	r3, #0
 80246ec:	f040 8590 	bne.w	8025210 <_strtod_l+0xbb0>
 80246f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80246f2:	b1eb      	cbz	r3, 8024730 <_strtod_l+0xd0>
 80246f4:	4652      	mov	r2, sl
 80246f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80246fa:	ec43 2b10 	vmov	d0, r2, r3
 80246fe:	b01d      	add	sp, #116	; 0x74
 8024700:	ecbd 8b02 	vpop	{d8}
 8024704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024708:	2a20      	cmp	r2, #32
 802470a:	d1cc      	bne.n	80246a6 <_strtod_l+0x46>
 802470c:	3301      	adds	r3, #1
 802470e:	9317      	str	r3, [sp, #92]	; 0x5c
 8024710:	e7be      	b.n	8024690 <_strtod_l+0x30>
 8024712:	2a2d      	cmp	r2, #45	; 0x2d
 8024714:	d1c7      	bne.n	80246a6 <_strtod_l+0x46>
 8024716:	2201      	movs	r2, #1
 8024718:	920a      	str	r2, [sp, #40]	; 0x28
 802471a:	1c5a      	adds	r2, r3, #1
 802471c:	9217      	str	r2, [sp, #92]	; 0x5c
 802471e:	785b      	ldrb	r3, [r3, #1]
 8024720:	2b00      	cmp	r3, #0
 8024722:	d1c2      	bne.n	80246aa <_strtod_l+0x4a>
 8024724:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024726:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 802472a:	2b00      	cmp	r3, #0
 802472c:	f040 856e 	bne.w	802520c <_strtod_l+0xbac>
 8024730:	4652      	mov	r2, sl
 8024732:	465b      	mov	r3, fp
 8024734:	e7e1      	b.n	80246fa <_strtod_l+0x9a>
 8024736:	2200      	movs	r2, #0
 8024738:	e7ee      	b.n	8024718 <_strtod_l+0xb8>
 802473a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802473c:	b13a      	cbz	r2, 802474e <_strtod_l+0xee>
 802473e:	2135      	movs	r1, #53	; 0x35
 8024740:	a81a      	add	r0, sp, #104	; 0x68
 8024742:	f002 ff26 	bl	8027592 <__copybits>
 8024746:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024748:	4620      	mov	r0, r4
 802474a:	f002 fae5 	bl	8026d18 <_Bfree>
 802474e:	3f01      	subs	r7, #1
 8024750:	2f04      	cmp	r7, #4
 8024752:	d806      	bhi.n	8024762 <_strtod_l+0x102>
 8024754:	e8df f007 	tbb	[pc, r7]
 8024758:	1714030a 	.word	0x1714030a
 802475c:	0a          	.byte	0x0a
 802475d:	00          	.byte	0x00
 802475e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8024762:	0728      	lsls	r0, r5, #28
 8024764:	d5c0      	bpl.n	80246e8 <_strtod_l+0x88>
 8024766:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 802476a:	e7bd      	b.n	80246e8 <_strtod_l+0x88>
 802476c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8024770:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024772:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8024776:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802477a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802477e:	e7f0      	b.n	8024762 <_strtod_l+0x102>
 8024780:	f8df b180 	ldr.w	fp, [pc, #384]	; 8024904 <_strtod_l+0x2a4>
 8024784:	e7ed      	b.n	8024762 <_strtod_l+0x102>
 8024786:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 802478a:	f04f 3aff 	mov.w	sl, #4294967295
 802478e:	e7e8      	b.n	8024762 <_strtod_l+0x102>
 8024790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024792:	1c5a      	adds	r2, r3, #1
 8024794:	9217      	str	r2, [sp, #92]	; 0x5c
 8024796:	785b      	ldrb	r3, [r3, #1]
 8024798:	2b30      	cmp	r3, #48	; 0x30
 802479a:	d0f9      	beq.n	8024790 <_strtod_l+0x130>
 802479c:	2b00      	cmp	r3, #0
 802479e:	d0a3      	beq.n	80246e8 <_strtod_l+0x88>
 80247a0:	2301      	movs	r3, #1
 80247a2:	f04f 0900 	mov.w	r9, #0
 80247a6:	9304      	str	r3, [sp, #16]
 80247a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80247aa:	9308      	str	r3, [sp, #32]
 80247ac:	f8cd 901c 	str.w	r9, [sp, #28]
 80247b0:	464f      	mov	r7, r9
 80247b2:	220a      	movs	r2, #10
 80247b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80247b6:	7806      	ldrb	r6, [r0, #0]
 80247b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80247bc:	b2d9      	uxtb	r1, r3
 80247be:	2909      	cmp	r1, #9
 80247c0:	d92a      	bls.n	8024818 <_strtod_l+0x1b8>
 80247c2:	9905      	ldr	r1, [sp, #20]
 80247c4:	462a      	mov	r2, r5
 80247c6:	f7ff ff19 	bl	80245fc <strncmp>
 80247ca:	b398      	cbz	r0, 8024834 <_strtod_l+0x1d4>
 80247cc:	2000      	movs	r0, #0
 80247ce:	4632      	mov	r2, r6
 80247d0:	463d      	mov	r5, r7
 80247d2:	9005      	str	r0, [sp, #20]
 80247d4:	4603      	mov	r3, r0
 80247d6:	2a65      	cmp	r2, #101	; 0x65
 80247d8:	d001      	beq.n	80247de <_strtod_l+0x17e>
 80247da:	2a45      	cmp	r2, #69	; 0x45
 80247dc:	d118      	bne.n	8024810 <_strtod_l+0x1b0>
 80247de:	b91d      	cbnz	r5, 80247e8 <_strtod_l+0x188>
 80247e0:	9a04      	ldr	r2, [sp, #16]
 80247e2:	4302      	orrs	r2, r0
 80247e4:	d09e      	beq.n	8024724 <_strtod_l+0xc4>
 80247e6:	2500      	movs	r5, #0
 80247e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80247ec:	f108 0201 	add.w	r2, r8, #1
 80247f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80247f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80247f6:	2a2b      	cmp	r2, #43	; 0x2b
 80247f8:	d075      	beq.n	80248e6 <_strtod_l+0x286>
 80247fa:	2a2d      	cmp	r2, #45	; 0x2d
 80247fc:	d07b      	beq.n	80248f6 <_strtod_l+0x296>
 80247fe:	f04f 0c00 	mov.w	ip, #0
 8024802:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8024806:	2909      	cmp	r1, #9
 8024808:	f240 8082 	bls.w	8024910 <_strtod_l+0x2b0>
 802480c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8024810:	2600      	movs	r6, #0
 8024812:	e09d      	b.n	8024950 <_strtod_l+0x2f0>
 8024814:	2300      	movs	r3, #0
 8024816:	e7c4      	b.n	80247a2 <_strtod_l+0x142>
 8024818:	2f08      	cmp	r7, #8
 802481a:	bfd8      	it	le
 802481c:	9907      	ldrle	r1, [sp, #28]
 802481e:	f100 0001 	add.w	r0, r0, #1
 8024822:	bfda      	itte	le
 8024824:	fb02 3301 	mlale	r3, r2, r1, r3
 8024828:	9307      	strle	r3, [sp, #28]
 802482a:	fb02 3909 	mlagt	r9, r2, r9, r3
 802482e:	3701      	adds	r7, #1
 8024830:	9017      	str	r0, [sp, #92]	; 0x5c
 8024832:	e7bf      	b.n	80247b4 <_strtod_l+0x154>
 8024834:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024836:	195a      	adds	r2, r3, r5
 8024838:	9217      	str	r2, [sp, #92]	; 0x5c
 802483a:	5d5a      	ldrb	r2, [r3, r5]
 802483c:	2f00      	cmp	r7, #0
 802483e:	d037      	beq.n	80248b0 <_strtod_l+0x250>
 8024840:	9005      	str	r0, [sp, #20]
 8024842:	463d      	mov	r5, r7
 8024844:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8024848:	2b09      	cmp	r3, #9
 802484a:	d912      	bls.n	8024872 <_strtod_l+0x212>
 802484c:	2301      	movs	r3, #1
 802484e:	e7c2      	b.n	80247d6 <_strtod_l+0x176>
 8024850:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024852:	1c5a      	adds	r2, r3, #1
 8024854:	9217      	str	r2, [sp, #92]	; 0x5c
 8024856:	785a      	ldrb	r2, [r3, #1]
 8024858:	3001      	adds	r0, #1
 802485a:	2a30      	cmp	r2, #48	; 0x30
 802485c:	d0f8      	beq.n	8024850 <_strtod_l+0x1f0>
 802485e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8024862:	2b08      	cmp	r3, #8
 8024864:	f200 84d9 	bhi.w	802521a <_strtod_l+0xbba>
 8024868:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802486a:	9005      	str	r0, [sp, #20]
 802486c:	2000      	movs	r0, #0
 802486e:	9308      	str	r3, [sp, #32]
 8024870:	4605      	mov	r5, r0
 8024872:	3a30      	subs	r2, #48	; 0x30
 8024874:	f100 0301 	add.w	r3, r0, #1
 8024878:	d014      	beq.n	80248a4 <_strtod_l+0x244>
 802487a:	9905      	ldr	r1, [sp, #20]
 802487c:	4419      	add	r1, r3
 802487e:	9105      	str	r1, [sp, #20]
 8024880:	462b      	mov	r3, r5
 8024882:	eb00 0e05 	add.w	lr, r0, r5
 8024886:	210a      	movs	r1, #10
 8024888:	4573      	cmp	r3, lr
 802488a:	d113      	bne.n	80248b4 <_strtod_l+0x254>
 802488c:	182b      	adds	r3, r5, r0
 802488e:	2b08      	cmp	r3, #8
 8024890:	f105 0501 	add.w	r5, r5, #1
 8024894:	4405      	add	r5, r0
 8024896:	dc1c      	bgt.n	80248d2 <_strtod_l+0x272>
 8024898:	9907      	ldr	r1, [sp, #28]
 802489a:	230a      	movs	r3, #10
 802489c:	fb03 2301 	mla	r3, r3, r1, r2
 80248a0:	9307      	str	r3, [sp, #28]
 80248a2:	2300      	movs	r3, #0
 80248a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80248a6:	1c51      	adds	r1, r2, #1
 80248a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80248aa:	7852      	ldrb	r2, [r2, #1]
 80248ac:	4618      	mov	r0, r3
 80248ae:	e7c9      	b.n	8024844 <_strtod_l+0x1e4>
 80248b0:	4638      	mov	r0, r7
 80248b2:	e7d2      	b.n	802485a <_strtod_l+0x1fa>
 80248b4:	2b08      	cmp	r3, #8
 80248b6:	dc04      	bgt.n	80248c2 <_strtod_l+0x262>
 80248b8:	9e07      	ldr	r6, [sp, #28]
 80248ba:	434e      	muls	r6, r1
 80248bc:	9607      	str	r6, [sp, #28]
 80248be:	3301      	adds	r3, #1
 80248c0:	e7e2      	b.n	8024888 <_strtod_l+0x228>
 80248c2:	f103 0c01 	add.w	ip, r3, #1
 80248c6:	f1bc 0f10 	cmp.w	ip, #16
 80248ca:	bfd8      	it	le
 80248cc:	fb01 f909 	mulle.w	r9, r1, r9
 80248d0:	e7f5      	b.n	80248be <_strtod_l+0x25e>
 80248d2:	2d10      	cmp	r5, #16
 80248d4:	bfdc      	itt	le
 80248d6:	230a      	movle	r3, #10
 80248d8:	fb03 2909 	mlale	r9, r3, r9, r2
 80248dc:	e7e1      	b.n	80248a2 <_strtod_l+0x242>
 80248de:	2300      	movs	r3, #0
 80248e0:	9305      	str	r3, [sp, #20]
 80248e2:	2301      	movs	r3, #1
 80248e4:	e77c      	b.n	80247e0 <_strtod_l+0x180>
 80248e6:	f04f 0c00 	mov.w	ip, #0
 80248ea:	f108 0202 	add.w	r2, r8, #2
 80248ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80248f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80248f4:	e785      	b.n	8024802 <_strtod_l+0x1a2>
 80248f6:	f04f 0c01 	mov.w	ip, #1
 80248fa:	e7f6      	b.n	80248ea <_strtod_l+0x28a>
 80248fc:	0802a294 	.word	0x0802a294
 8024900:	08029fe8 	.word	0x08029fe8
 8024904:	7ff00000 	.word	0x7ff00000
 8024908:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802490a:	1c51      	adds	r1, r2, #1
 802490c:	9117      	str	r1, [sp, #92]	; 0x5c
 802490e:	7852      	ldrb	r2, [r2, #1]
 8024910:	2a30      	cmp	r2, #48	; 0x30
 8024912:	d0f9      	beq.n	8024908 <_strtod_l+0x2a8>
 8024914:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8024918:	2908      	cmp	r1, #8
 802491a:	f63f af79 	bhi.w	8024810 <_strtod_l+0x1b0>
 802491e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8024922:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024924:	9206      	str	r2, [sp, #24]
 8024926:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024928:	1c51      	adds	r1, r2, #1
 802492a:	9117      	str	r1, [sp, #92]	; 0x5c
 802492c:	7852      	ldrb	r2, [r2, #1]
 802492e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8024932:	2e09      	cmp	r6, #9
 8024934:	d937      	bls.n	80249a6 <_strtod_l+0x346>
 8024936:	9e06      	ldr	r6, [sp, #24]
 8024938:	1b89      	subs	r1, r1, r6
 802493a:	2908      	cmp	r1, #8
 802493c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8024940:	dc02      	bgt.n	8024948 <_strtod_l+0x2e8>
 8024942:	4576      	cmp	r6, lr
 8024944:	bfa8      	it	ge
 8024946:	4676      	movge	r6, lr
 8024948:	f1bc 0f00 	cmp.w	ip, #0
 802494c:	d000      	beq.n	8024950 <_strtod_l+0x2f0>
 802494e:	4276      	negs	r6, r6
 8024950:	2d00      	cmp	r5, #0
 8024952:	d14d      	bne.n	80249f0 <_strtod_l+0x390>
 8024954:	9904      	ldr	r1, [sp, #16]
 8024956:	4301      	orrs	r1, r0
 8024958:	f47f aec6 	bne.w	80246e8 <_strtod_l+0x88>
 802495c:	2b00      	cmp	r3, #0
 802495e:	f47f aee1 	bne.w	8024724 <_strtod_l+0xc4>
 8024962:	2a69      	cmp	r2, #105	; 0x69
 8024964:	d027      	beq.n	80249b6 <_strtod_l+0x356>
 8024966:	dc24      	bgt.n	80249b2 <_strtod_l+0x352>
 8024968:	2a49      	cmp	r2, #73	; 0x49
 802496a:	d024      	beq.n	80249b6 <_strtod_l+0x356>
 802496c:	2a4e      	cmp	r2, #78	; 0x4e
 802496e:	f47f aed9 	bne.w	8024724 <_strtod_l+0xc4>
 8024972:	499f      	ldr	r1, [pc, #636]	; (8024bf0 <_strtod_l+0x590>)
 8024974:	a817      	add	r0, sp, #92	; 0x5c
 8024976:	f002 f857 	bl	8026a28 <__match>
 802497a:	2800      	cmp	r0, #0
 802497c:	f43f aed2 	beq.w	8024724 <_strtod_l+0xc4>
 8024980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024982:	781b      	ldrb	r3, [r3, #0]
 8024984:	2b28      	cmp	r3, #40	; 0x28
 8024986:	d12d      	bne.n	80249e4 <_strtod_l+0x384>
 8024988:	499a      	ldr	r1, [pc, #616]	; (8024bf4 <_strtod_l+0x594>)
 802498a:	aa1a      	add	r2, sp, #104	; 0x68
 802498c:	a817      	add	r0, sp, #92	; 0x5c
 802498e:	f002 f85f 	bl	8026a50 <__hexnan>
 8024992:	2805      	cmp	r0, #5
 8024994:	d126      	bne.n	80249e4 <_strtod_l+0x384>
 8024996:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024998:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 802499c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80249a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80249a4:	e6a0      	b.n	80246e8 <_strtod_l+0x88>
 80249a6:	210a      	movs	r1, #10
 80249a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80249ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80249b0:	e7b9      	b.n	8024926 <_strtod_l+0x2c6>
 80249b2:	2a6e      	cmp	r2, #110	; 0x6e
 80249b4:	e7db      	b.n	802496e <_strtod_l+0x30e>
 80249b6:	4990      	ldr	r1, [pc, #576]	; (8024bf8 <_strtod_l+0x598>)
 80249b8:	a817      	add	r0, sp, #92	; 0x5c
 80249ba:	f002 f835 	bl	8026a28 <__match>
 80249be:	2800      	cmp	r0, #0
 80249c0:	f43f aeb0 	beq.w	8024724 <_strtod_l+0xc4>
 80249c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80249c6:	498d      	ldr	r1, [pc, #564]	; (8024bfc <_strtod_l+0x59c>)
 80249c8:	3b01      	subs	r3, #1
 80249ca:	a817      	add	r0, sp, #92	; 0x5c
 80249cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80249ce:	f002 f82b 	bl	8026a28 <__match>
 80249d2:	b910      	cbnz	r0, 80249da <_strtod_l+0x37a>
 80249d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80249d6:	3301      	adds	r3, #1
 80249d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80249da:	f8df b230 	ldr.w	fp, [pc, #560]	; 8024c0c <_strtod_l+0x5ac>
 80249de:	f04f 0a00 	mov.w	sl, #0
 80249e2:	e681      	b.n	80246e8 <_strtod_l+0x88>
 80249e4:	4886      	ldr	r0, [pc, #536]	; (8024c00 <_strtod_l+0x5a0>)
 80249e6:	f7fe fda7 	bl	8023538 <nan>
 80249ea:	ec5b ab10 	vmov	sl, fp, d0
 80249ee:	e67b      	b.n	80246e8 <_strtod_l+0x88>
 80249f0:	9b05      	ldr	r3, [sp, #20]
 80249f2:	9807      	ldr	r0, [sp, #28]
 80249f4:	1af3      	subs	r3, r6, r3
 80249f6:	2f00      	cmp	r7, #0
 80249f8:	bf08      	it	eq
 80249fa:	462f      	moveq	r7, r5
 80249fc:	2d10      	cmp	r5, #16
 80249fe:	9306      	str	r3, [sp, #24]
 8024a00:	46a8      	mov	r8, r5
 8024a02:	bfa8      	it	ge
 8024a04:	f04f 0810 	movge.w	r8, #16
 8024a08:	f7db fd86 	bl	8000518 <__aeabi_ui2d>
 8024a0c:	2d09      	cmp	r5, #9
 8024a0e:	4682      	mov	sl, r0
 8024a10:	468b      	mov	fp, r1
 8024a12:	dd13      	ble.n	8024a3c <_strtod_l+0x3dc>
 8024a14:	4b7b      	ldr	r3, [pc, #492]	; (8024c04 <_strtod_l+0x5a4>)
 8024a16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8024a1a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8024a1e:	f7db fdf5 	bl	800060c <__aeabi_dmul>
 8024a22:	4682      	mov	sl, r0
 8024a24:	4648      	mov	r0, r9
 8024a26:	468b      	mov	fp, r1
 8024a28:	f7db fd76 	bl	8000518 <__aeabi_ui2d>
 8024a2c:	4602      	mov	r2, r0
 8024a2e:	460b      	mov	r3, r1
 8024a30:	4650      	mov	r0, sl
 8024a32:	4659      	mov	r1, fp
 8024a34:	f7db fc34 	bl	80002a0 <__adddf3>
 8024a38:	4682      	mov	sl, r0
 8024a3a:	468b      	mov	fp, r1
 8024a3c:	2d0f      	cmp	r5, #15
 8024a3e:	dc38      	bgt.n	8024ab2 <_strtod_l+0x452>
 8024a40:	9b06      	ldr	r3, [sp, #24]
 8024a42:	2b00      	cmp	r3, #0
 8024a44:	f43f ae50 	beq.w	80246e8 <_strtod_l+0x88>
 8024a48:	dd24      	ble.n	8024a94 <_strtod_l+0x434>
 8024a4a:	2b16      	cmp	r3, #22
 8024a4c:	dc0b      	bgt.n	8024a66 <_strtod_l+0x406>
 8024a4e:	496d      	ldr	r1, [pc, #436]	; (8024c04 <_strtod_l+0x5a4>)
 8024a50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8024a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024a58:	4652      	mov	r2, sl
 8024a5a:	465b      	mov	r3, fp
 8024a5c:	f7db fdd6 	bl	800060c <__aeabi_dmul>
 8024a60:	4682      	mov	sl, r0
 8024a62:	468b      	mov	fp, r1
 8024a64:	e640      	b.n	80246e8 <_strtod_l+0x88>
 8024a66:	9a06      	ldr	r2, [sp, #24]
 8024a68:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8024a6c:	4293      	cmp	r3, r2
 8024a6e:	db20      	blt.n	8024ab2 <_strtod_l+0x452>
 8024a70:	4c64      	ldr	r4, [pc, #400]	; (8024c04 <_strtod_l+0x5a4>)
 8024a72:	f1c5 050f 	rsb	r5, r5, #15
 8024a76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8024a7a:	4652      	mov	r2, sl
 8024a7c:	465b      	mov	r3, fp
 8024a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024a82:	f7db fdc3 	bl	800060c <__aeabi_dmul>
 8024a86:	9b06      	ldr	r3, [sp, #24]
 8024a88:	1b5d      	subs	r5, r3, r5
 8024a8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8024a8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8024a92:	e7e3      	b.n	8024a5c <_strtod_l+0x3fc>
 8024a94:	9b06      	ldr	r3, [sp, #24]
 8024a96:	3316      	adds	r3, #22
 8024a98:	db0b      	blt.n	8024ab2 <_strtod_l+0x452>
 8024a9a:	9b05      	ldr	r3, [sp, #20]
 8024a9c:	1b9e      	subs	r6, r3, r6
 8024a9e:	4b59      	ldr	r3, [pc, #356]	; (8024c04 <_strtod_l+0x5a4>)
 8024aa0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8024aa4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8024aa8:	4650      	mov	r0, sl
 8024aaa:	4659      	mov	r1, fp
 8024aac:	f7db fed8 	bl	8000860 <__aeabi_ddiv>
 8024ab0:	e7d6      	b.n	8024a60 <_strtod_l+0x400>
 8024ab2:	9b06      	ldr	r3, [sp, #24]
 8024ab4:	eba5 0808 	sub.w	r8, r5, r8
 8024ab8:	4498      	add	r8, r3
 8024aba:	f1b8 0f00 	cmp.w	r8, #0
 8024abe:	dd74      	ble.n	8024baa <_strtod_l+0x54a>
 8024ac0:	f018 030f 	ands.w	r3, r8, #15
 8024ac4:	d00a      	beq.n	8024adc <_strtod_l+0x47c>
 8024ac6:	494f      	ldr	r1, [pc, #316]	; (8024c04 <_strtod_l+0x5a4>)
 8024ac8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8024acc:	4652      	mov	r2, sl
 8024ace:	465b      	mov	r3, fp
 8024ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024ad4:	f7db fd9a 	bl	800060c <__aeabi_dmul>
 8024ad8:	4682      	mov	sl, r0
 8024ada:	468b      	mov	fp, r1
 8024adc:	f038 080f 	bics.w	r8, r8, #15
 8024ae0:	d04f      	beq.n	8024b82 <_strtod_l+0x522>
 8024ae2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8024ae6:	dd22      	ble.n	8024b2e <_strtod_l+0x4ce>
 8024ae8:	2500      	movs	r5, #0
 8024aea:	462e      	mov	r6, r5
 8024aec:	9507      	str	r5, [sp, #28]
 8024aee:	9505      	str	r5, [sp, #20]
 8024af0:	2322      	movs	r3, #34	; 0x22
 8024af2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8024c0c <_strtod_l+0x5ac>
 8024af6:	6023      	str	r3, [r4, #0]
 8024af8:	f04f 0a00 	mov.w	sl, #0
 8024afc:	9b07      	ldr	r3, [sp, #28]
 8024afe:	2b00      	cmp	r3, #0
 8024b00:	f43f adf2 	beq.w	80246e8 <_strtod_l+0x88>
 8024b04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024b06:	4620      	mov	r0, r4
 8024b08:	f002 f906 	bl	8026d18 <_Bfree>
 8024b0c:	9905      	ldr	r1, [sp, #20]
 8024b0e:	4620      	mov	r0, r4
 8024b10:	f002 f902 	bl	8026d18 <_Bfree>
 8024b14:	4631      	mov	r1, r6
 8024b16:	4620      	mov	r0, r4
 8024b18:	f002 f8fe 	bl	8026d18 <_Bfree>
 8024b1c:	9907      	ldr	r1, [sp, #28]
 8024b1e:	4620      	mov	r0, r4
 8024b20:	f002 f8fa 	bl	8026d18 <_Bfree>
 8024b24:	4629      	mov	r1, r5
 8024b26:	4620      	mov	r0, r4
 8024b28:	f002 f8f6 	bl	8026d18 <_Bfree>
 8024b2c:	e5dc      	b.n	80246e8 <_strtod_l+0x88>
 8024b2e:	4b36      	ldr	r3, [pc, #216]	; (8024c08 <_strtod_l+0x5a8>)
 8024b30:	9304      	str	r3, [sp, #16]
 8024b32:	2300      	movs	r3, #0
 8024b34:	ea4f 1828 	mov.w	r8, r8, asr #4
 8024b38:	4650      	mov	r0, sl
 8024b3a:	4659      	mov	r1, fp
 8024b3c:	4699      	mov	r9, r3
 8024b3e:	f1b8 0f01 	cmp.w	r8, #1
 8024b42:	dc21      	bgt.n	8024b88 <_strtod_l+0x528>
 8024b44:	b10b      	cbz	r3, 8024b4a <_strtod_l+0x4ea>
 8024b46:	4682      	mov	sl, r0
 8024b48:	468b      	mov	fp, r1
 8024b4a:	4b2f      	ldr	r3, [pc, #188]	; (8024c08 <_strtod_l+0x5a8>)
 8024b4c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8024b50:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8024b54:	4652      	mov	r2, sl
 8024b56:	465b      	mov	r3, fp
 8024b58:	e9d9 0100 	ldrd	r0, r1, [r9]
 8024b5c:	f7db fd56 	bl	800060c <__aeabi_dmul>
 8024b60:	4b2a      	ldr	r3, [pc, #168]	; (8024c0c <_strtod_l+0x5ac>)
 8024b62:	460a      	mov	r2, r1
 8024b64:	400b      	ands	r3, r1
 8024b66:	492a      	ldr	r1, [pc, #168]	; (8024c10 <_strtod_l+0x5b0>)
 8024b68:	428b      	cmp	r3, r1
 8024b6a:	4682      	mov	sl, r0
 8024b6c:	d8bc      	bhi.n	8024ae8 <_strtod_l+0x488>
 8024b6e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8024b72:	428b      	cmp	r3, r1
 8024b74:	bf86      	itte	hi
 8024b76:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8024c14 <_strtod_l+0x5b4>
 8024b7a:	f04f 3aff 	movhi.w	sl, #4294967295
 8024b7e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8024b82:	2300      	movs	r3, #0
 8024b84:	9304      	str	r3, [sp, #16]
 8024b86:	e084      	b.n	8024c92 <_strtod_l+0x632>
 8024b88:	f018 0f01 	tst.w	r8, #1
 8024b8c:	d005      	beq.n	8024b9a <_strtod_l+0x53a>
 8024b8e:	9b04      	ldr	r3, [sp, #16]
 8024b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b94:	f7db fd3a 	bl	800060c <__aeabi_dmul>
 8024b98:	2301      	movs	r3, #1
 8024b9a:	9a04      	ldr	r2, [sp, #16]
 8024b9c:	3208      	adds	r2, #8
 8024b9e:	f109 0901 	add.w	r9, r9, #1
 8024ba2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8024ba6:	9204      	str	r2, [sp, #16]
 8024ba8:	e7c9      	b.n	8024b3e <_strtod_l+0x4de>
 8024baa:	d0ea      	beq.n	8024b82 <_strtod_l+0x522>
 8024bac:	f1c8 0800 	rsb	r8, r8, #0
 8024bb0:	f018 020f 	ands.w	r2, r8, #15
 8024bb4:	d00a      	beq.n	8024bcc <_strtod_l+0x56c>
 8024bb6:	4b13      	ldr	r3, [pc, #76]	; (8024c04 <_strtod_l+0x5a4>)
 8024bb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024bbc:	4650      	mov	r0, sl
 8024bbe:	4659      	mov	r1, fp
 8024bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bc4:	f7db fe4c 	bl	8000860 <__aeabi_ddiv>
 8024bc8:	4682      	mov	sl, r0
 8024bca:	468b      	mov	fp, r1
 8024bcc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8024bd0:	d0d7      	beq.n	8024b82 <_strtod_l+0x522>
 8024bd2:	f1b8 0f1f 	cmp.w	r8, #31
 8024bd6:	dd1f      	ble.n	8024c18 <_strtod_l+0x5b8>
 8024bd8:	2500      	movs	r5, #0
 8024bda:	462e      	mov	r6, r5
 8024bdc:	9507      	str	r5, [sp, #28]
 8024bde:	9505      	str	r5, [sp, #20]
 8024be0:	2322      	movs	r3, #34	; 0x22
 8024be2:	f04f 0a00 	mov.w	sl, #0
 8024be6:	f04f 0b00 	mov.w	fp, #0
 8024bea:	6023      	str	r3, [r4, #0]
 8024bec:	e786      	b.n	8024afc <_strtod_l+0x49c>
 8024bee:	bf00      	nop
 8024bf0:	08029fbe 	.word	0x08029fbe
 8024bf4:	08029ffc 	.word	0x08029ffc
 8024bf8:	08029fb6 	.word	0x08029fb6
 8024bfc:	0802a13c 	.word	0x0802a13c
 8024c00:	08029f9b 	.word	0x08029f9b
 8024c04:	0802a330 	.word	0x0802a330
 8024c08:	0802a308 	.word	0x0802a308
 8024c0c:	7ff00000 	.word	0x7ff00000
 8024c10:	7ca00000 	.word	0x7ca00000
 8024c14:	7fefffff 	.word	0x7fefffff
 8024c18:	f018 0310 	ands.w	r3, r8, #16
 8024c1c:	bf18      	it	ne
 8024c1e:	236a      	movne	r3, #106	; 0x6a
 8024c20:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8024fd0 <_strtod_l+0x970>
 8024c24:	9304      	str	r3, [sp, #16]
 8024c26:	4650      	mov	r0, sl
 8024c28:	4659      	mov	r1, fp
 8024c2a:	2300      	movs	r3, #0
 8024c2c:	f018 0f01 	tst.w	r8, #1
 8024c30:	d004      	beq.n	8024c3c <_strtod_l+0x5dc>
 8024c32:	e9d9 2300 	ldrd	r2, r3, [r9]
 8024c36:	f7db fce9 	bl	800060c <__aeabi_dmul>
 8024c3a:	2301      	movs	r3, #1
 8024c3c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8024c40:	f109 0908 	add.w	r9, r9, #8
 8024c44:	d1f2      	bne.n	8024c2c <_strtod_l+0x5cc>
 8024c46:	b10b      	cbz	r3, 8024c4c <_strtod_l+0x5ec>
 8024c48:	4682      	mov	sl, r0
 8024c4a:	468b      	mov	fp, r1
 8024c4c:	9b04      	ldr	r3, [sp, #16]
 8024c4e:	b1c3      	cbz	r3, 8024c82 <_strtod_l+0x622>
 8024c50:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8024c54:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8024c58:	2b00      	cmp	r3, #0
 8024c5a:	4659      	mov	r1, fp
 8024c5c:	dd11      	ble.n	8024c82 <_strtod_l+0x622>
 8024c5e:	2b1f      	cmp	r3, #31
 8024c60:	f340 8124 	ble.w	8024eac <_strtod_l+0x84c>
 8024c64:	2b34      	cmp	r3, #52	; 0x34
 8024c66:	bfde      	ittt	le
 8024c68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8024c6c:	f04f 33ff 	movle.w	r3, #4294967295
 8024c70:	fa03 f202 	lslle.w	r2, r3, r2
 8024c74:	f04f 0a00 	mov.w	sl, #0
 8024c78:	bfcc      	ite	gt
 8024c7a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8024c7e:	ea02 0b01 	andle.w	fp, r2, r1
 8024c82:	2200      	movs	r2, #0
 8024c84:	2300      	movs	r3, #0
 8024c86:	4650      	mov	r0, sl
 8024c88:	4659      	mov	r1, fp
 8024c8a:	f7db ff27 	bl	8000adc <__aeabi_dcmpeq>
 8024c8e:	2800      	cmp	r0, #0
 8024c90:	d1a2      	bne.n	8024bd8 <_strtod_l+0x578>
 8024c92:	9b07      	ldr	r3, [sp, #28]
 8024c94:	9300      	str	r3, [sp, #0]
 8024c96:	9908      	ldr	r1, [sp, #32]
 8024c98:	462b      	mov	r3, r5
 8024c9a:	463a      	mov	r2, r7
 8024c9c:	4620      	mov	r0, r4
 8024c9e:	f002 f8a3 	bl	8026de8 <__s2b>
 8024ca2:	9007      	str	r0, [sp, #28]
 8024ca4:	2800      	cmp	r0, #0
 8024ca6:	f43f af1f 	beq.w	8024ae8 <_strtod_l+0x488>
 8024caa:	9b05      	ldr	r3, [sp, #20]
 8024cac:	1b9e      	subs	r6, r3, r6
 8024cae:	9b06      	ldr	r3, [sp, #24]
 8024cb0:	2b00      	cmp	r3, #0
 8024cb2:	bfb4      	ite	lt
 8024cb4:	4633      	movlt	r3, r6
 8024cb6:	2300      	movge	r3, #0
 8024cb8:	930c      	str	r3, [sp, #48]	; 0x30
 8024cba:	9b06      	ldr	r3, [sp, #24]
 8024cbc:	2500      	movs	r5, #0
 8024cbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024cc2:	9312      	str	r3, [sp, #72]	; 0x48
 8024cc4:	462e      	mov	r6, r5
 8024cc6:	9b07      	ldr	r3, [sp, #28]
 8024cc8:	4620      	mov	r0, r4
 8024cca:	6859      	ldr	r1, [r3, #4]
 8024ccc:	f001 ffe4 	bl	8026c98 <_Balloc>
 8024cd0:	9005      	str	r0, [sp, #20]
 8024cd2:	2800      	cmp	r0, #0
 8024cd4:	f43f af0c 	beq.w	8024af0 <_strtod_l+0x490>
 8024cd8:	9b07      	ldr	r3, [sp, #28]
 8024cda:	691a      	ldr	r2, [r3, #16]
 8024cdc:	3202      	adds	r2, #2
 8024cde:	f103 010c 	add.w	r1, r3, #12
 8024ce2:	0092      	lsls	r2, r2, #2
 8024ce4:	300c      	adds	r0, #12
 8024ce6:	f7fe fd4b 	bl	8023780 <memcpy>
 8024cea:	ec4b ab10 	vmov	d0, sl, fp
 8024cee:	aa1a      	add	r2, sp, #104	; 0x68
 8024cf0:	a919      	add	r1, sp, #100	; 0x64
 8024cf2:	4620      	mov	r0, r4
 8024cf4:	f002 fbbe 	bl	8027474 <__d2b>
 8024cf8:	ec4b ab18 	vmov	d8, sl, fp
 8024cfc:	9018      	str	r0, [sp, #96]	; 0x60
 8024cfe:	2800      	cmp	r0, #0
 8024d00:	f43f aef6 	beq.w	8024af0 <_strtod_l+0x490>
 8024d04:	2101      	movs	r1, #1
 8024d06:	4620      	mov	r0, r4
 8024d08:	f002 f908 	bl	8026f1c <__i2b>
 8024d0c:	4606      	mov	r6, r0
 8024d0e:	2800      	cmp	r0, #0
 8024d10:	f43f aeee 	beq.w	8024af0 <_strtod_l+0x490>
 8024d14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024d16:	9904      	ldr	r1, [sp, #16]
 8024d18:	2b00      	cmp	r3, #0
 8024d1a:	bfab      	itete	ge
 8024d1c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8024d1e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8024d20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8024d22:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8024d26:	bfac      	ite	ge
 8024d28:	eb03 0902 	addge.w	r9, r3, r2
 8024d2c:	1ad7      	sublt	r7, r2, r3
 8024d2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8024d30:	eba3 0801 	sub.w	r8, r3, r1
 8024d34:	4490      	add	r8, r2
 8024d36:	4ba1      	ldr	r3, [pc, #644]	; (8024fbc <_strtod_l+0x95c>)
 8024d38:	f108 38ff 	add.w	r8, r8, #4294967295
 8024d3c:	4598      	cmp	r8, r3
 8024d3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8024d42:	f280 80c7 	bge.w	8024ed4 <_strtod_l+0x874>
 8024d46:	eba3 0308 	sub.w	r3, r3, r8
 8024d4a:	2b1f      	cmp	r3, #31
 8024d4c:	eba2 0203 	sub.w	r2, r2, r3
 8024d50:	f04f 0101 	mov.w	r1, #1
 8024d54:	f300 80b1 	bgt.w	8024eba <_strtod_l+0x85a>
 8024d58:	fa01 f303 	lsl.w	r3, r1, r3
 8024d5c:	930d      	str	r3, [sp, #52]	; 0x34
 8024d5e:	2300      	movs	r3, #0
 8024d60:	9308      	str	r3, [sp, #32]
 8024d62:	eb09 0802 	add.w	r8, r9, r2
 8024d66:	9b04      	ldr	r3, [sp, #16]
 8024d68:	45c1      	cmp	r9, r8
 8024d6a:	4417      	add	r7, r2
 8024d6c:	441f      	add	r7, r3
 8024d6e:	464b      	mov	r3, r9
 8024d70:	bfa8      	it	ge
 8024d72:	4643      	movge	r3, r8
 8024d74:	42bb      	cmp	r3, r7
 8024d76:	bfa8      	it	ge
 8024d78:	463b      	movge	r3, r7
 8024d7a:	2b00      	cmp	r3, #0
 8024d7c:	bfc2      	ittt	gt
 8024d7e:	eba8 0803 	subgt.w	r8, r8, r3
 8024d82:	1aff      	subgt	r7, r7, r3
 8024d84:	eba9 0903 	subgt.w	r9, r9, r3
 8024d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024d8a:	2b00      	cmp	r3, #0
 8024d8c:	dd17      	ble.n	8024dbe <_strtod_l+0x75e>
 8024d8e:	4631      	mov	r1, r6
 8024d90:	461a      	mov	r2, r3
 8024d92:	4620      	mov	r0, r4
 8024d94:	f002 f982 	bl	802709c <__pow5mult>
 8024d98:	4606      	mov	r6, r0
 8024d9a:	2800      	cmp	r0, #0
 8024d9c:	f43f aea8 	beq.w	8024af0 <_strtod_l+0x490>
 8024da0:	4601      	mov	r1, r0
 8024da2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024da4:	4620      	mov	r0, r4
 8024da6:	f002 f8cf 	bl	8026f48 <__multiply>
 8024daa:	900b      	str	r0, [sp, #44]	; 0x2c
 8024dac:	2800      	cmp	r0, #0
 8024dae:	f43f ae9f 	beq.w	8024af0 <_strtod_l+0x490>
 8024db2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024db4:	4620      	mov	r0, r4
 8024db6:	f001 ffaf 	bl	8026d18 <_Bfree>
 8024dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024dbc:	9318      	str	r3, [sp, #96]	; 0x60
 8024dbe:	f1b8 0f00 	cmp.w	r8, #0
 8024dc2:	f300 808c 	bgt.w	8024ede <_strtod_l+0x87e>
 8024dc6:	9b06      	ldr	r3, [sp, #24]
 8024dc8:	2b00      	cmp	r3, #0
 8024dca:	dd08      	ble.n	8024dde <_strtod_l+0x77e>
 8024dcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024dce:	9905      	ldr	r1, [sp, #20]
 8024dd0:	4620      	mov	r0, r4
 8024dd2:	f002 f963 	bl	802709c <__pow5mult>
 8024dd6:	9005      	str	r0, [sp, #20]
 8024dd8:	2800      	cmp	r0, #0
 8024dda:	f43f ae89 	beq.w	8024af0 <_strtod_l+0x490>
 8024dde:	2f00      	cmp	r7, #0
 8024de0:	dd08      	ble.n	8024df4 <_strtod_l+0x794>
 8024de2:	9905      	ldr	r1, [sp, #20]
 8024de4:	463a      	mov	r2, r7
 8024de6:	4620      	mov	r0, r4
 8024de8:	f002 f9b2 	bl	8027150 <__lshift>
 8024dec:	9005      	str	r0, [sp, #20]
 8024dee:	2800      	cmp	r0, #0
 8024df0:	f43f ae7e 	beq.w	8024af0 <_strtod_l+0x490>
 8024df4:	f1b9 0f00 	cmp.w	r9, #0
 8024df8:	dd08      	ble.n	8024e0c <_strtod_l+0x7ac>
 8024dfa:	4631      	mov	r1, r6
 8024dfc:	464a      	mov	r2, r9
 8024dfe:	4620      	mov	r0, r4
 8024e00:	f002 f9a6 	bl	8027150 <__lshift>
 8024e04:	4606      	mov	r6, r0
 8024e06:	2800      	cmp	r0, #0
 8024e08:	f43f ae72 	beq.w	8024af0 <_strtod_l+0x490>
 8024e0c:	9a05      	ldr	r2, [sp, #20]
 8024e0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024e10:	4620      	mov	r0, r4
 8024e12:	f002 fa29 	bl	8027268 <__mdiff>
 8024e16:	4605      	mov	r5, r0
 8024e18:	2800      	cmp	r0, #0
 8024e1a:	f43f ae69 	beq.w	8024af0 <_strtod_l+0x490>
 8024e1e:	68c3      	ldr	r3, [r0, #12]
 8024e20:	930b      	str	r3, [sp, #44]	; 0x2c
 8024e22:	2300      	movs	r3, #0
 8024e24:	60c3      	str	r3, [r0, #12]
 8024e26:	4631      	mov	r1, r6
 8024e28:	f002 fa02 	bl	8027230 <__mcmp>
 8024e2c:	2800      	cmp	r0, #0
 8024e2e:	da60      	bge.n	8024ef2 <_strtod_l+0x892>
 8024e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024e32:	ea53 030a 	orrs.w	r3, r3, sl
 8024e36:	f040 8082 	bne.w	8024f3e <_strtod_l+0x8de>
 8024e3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024e3e:	2b00      	cmp	r3, #0
 8024e40:	d17d      	bne.n	8024f3e <_strtod_l+0x8de>
 8024e42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8024e46:	0d1b      	lsrs	r3, r3, #20
 8024e48:	051b      	lsls	r3, r3, #20
 8024e4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8024e4e:	d976      	bls.n	8024f3e <_strtod_l+0x8de>
 8024e50:	696b      	ldr	r3, [r5, #20]
 8024e52:	b913      	cbnz	r3, 8024e5a <_strtod_l+0x7fa>
 8024e54:	692b      	ldr	r3, [r5, #16]
 8024e56:	2b01      	cmp	r3, #1
 8024e58:	dd71      	ble.n	8024f3e <_strtod_l+0x8de>
 8024e5a:	4629      	mov	r1, r5
 8024e5c:	2201      	movs	r2, #1
 8024e5e:	4620      	mov	r0, r4
 8024e60:	f002 f976 	bl	8027150 <__lshift>
 8024e64:	4631      	mov	r1, r6
 8024e66:	4605      	mov	r5, r0
 8024e68:	f002 f9e2 	bl	8027230 <__mcmp>
 8024e6c:	2800      	cmp	r0, #0
 8024e6e:	dd66      	ble.n	8024f3e <_strtod_l+0x8de>
 8024e70:	9904      	ldr	r1, [sp, #16]
 8024e72:	4a53      	ldr	r2, [pc, #332]	; (8024fc0 <_strtod_l+0x960>)
 8024e74:	465b      	mov	r3, fp
 8024e76:	2900      	cmp	r1, #0
 8024e78:	f000 8081 	beq.w	8024f7e <_strtod_l+0x91e>
 8024e7c:	ea02 010b 	and.w	r1, r2, fp
 8024e80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8024e84:	dc7b      	bgt.n	8024f7e <_strtod_l+0x91e>
 8024e86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8024e8a:	f77f aea9 	ble.w	8024be0 <_strtod_l+0x580>
 8024e8e:	4b4d      	ldr	r3, [pc, #308]	; (8024fc4 <_strtod_l+0x964>)
 8024e90:	4650      	mov	r0, sl
 8024e92:	4659      	mov	r1, fp
 8024e94:	2200      	movs	r2, #0
 8024e96:	f7db fbb9 	bl	800060c <__aeabi_dmul>
 8024e9a:	460b      	mov	r3, r1
 8024e9c:	4303      	orrs	r3, r0
 8024e9e:	bf08      	it	eq
 8024ea0:	2322      	moveq	r3, #34	; 0x22
 8024ea2:	4682      	mov	sl, r0
 8024ea4:	468b      	mov	fp, r1
 8024ea6:	bf08      	it	eq
 8024ea8:	6023      	streq	r3, [r4, #0]
 8024eaa:	e62b      	b.n	8024b04 <_strtod_l+0x4a4>
 8024eac:	f04f 32ff 	mov.w	r2, #4294967295
 8024eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8024eb4:	ea03 0a0a 	and.w	sl, r3, sl
 8024eb8:	e6e3      	b.n	8024c82 <_strtod_l+0x622>
 8024eba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8024ebe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8024ec2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8024ec6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8024eca:	fa01 f308 	lsl.w	r3, r1, r8
 8024ece:	9308      	str	r3, [sp, #32]
 8024ed0:	910d      	str	r1, [sp, #52]	; 0x34
 8024ed2:	e746      	b.n	8024d62 <_strtod_l+0x702>
 8024ed4:	2300      	movs	r3, #0
 8024ed6:	9308      	str	r3, [sp, #32]
 8024ed8:	2301      	movs	r3, #1
 8024eda:	930d      	str	r3, [sp, #52]	; 0x34
 8024edc:	e741      	b.n	8024d62 <_strtod_l+0x702>
 8024ede:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024ee0:	4642      	mov	r2, r8
 8024ee2:	4620      	mov	r0, r4
 8024ee4:	f002 f934 	bl	8027150 <__lshift>
 8024ee8:	9018      	str	r0, [sp, #96]	; 0x60
 8024eea:	2800      	cmp	r0, #0
 8024eec:	f47f af6b 	bne.w	8024dc6 <_strtod_l+0x766>
 8024ef0:	e5fe      	b.n	8024af0 <_strtod_l+0x490>
 8024ef2:	465f      	mov	r7, fp
 8024ef4:	d16e      	bne.n	8024fd4 <_strtod_l+0x974>
 8024ef6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024ef8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024efc:	b342      	cbz	r2, 8024f50 <_strtod_l+0x8f0>
 8024efe:	4a32      	ldr	r2, [pc, #200]	; (8024fc8 <_strtod_l+0x968>)
 8024f00:	4293      	cmp	r3, r2
 8024f02:	d128      	bne.n	8024f56 <_strtod_l+0x8f6>
 8024f04:	9b04      	ldr	r3, [sp, #16]
 8024f06:	4651      	mov	r1, sl
 8024f08:	b1eb      	cbz	r3, 8024f46 <_strtod_l+0x8e6>
 8024f0a:	4b2d      	ldr	r3, [pc, #180]	; (8024fc0 <_strtod_l+0x960>)
 8024f0c:	403b      	ands	r3, r7
 8024f0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8024f12:	f04f 32ff 	mov.w	r2, #4294967295
 8024f16:	d819      	bhi.n	8024f4c <_strtod_l+0x8ec>
 8024f18:	0d1b      	lsrs	r3, r3, #20
 8024f1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8024f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8024f22:	4299      	cmp	r1, r3
 8024f24:	d117      	bne.n	8024f56 <_strtod_l+0x8f6>
 8024f26:	4b29      	ldr	r3, [pc, #164]	; (8024fcc <_strtod_l+0x96c>)
 8024f28:	429f      	cmp	r7, r3
 8024f2a:	d102      	bne.n	8024f32 <_strtod_l+0x8d2>
 8024f2c:	3101      	adds	r1, #1
 8024f2e:	f43f addf 	beq.w	8024af0 <_strtod_l+0x490>
 8024f32:	4b23      	ldr	r3, [pc, #140]	; (8024fc0 <_strtod_l+0x960>)
 8024f34:	403b      	ands	r3, r7
 8024f36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8024f3a:	f04f 0a00 	mov.w	sl, #0
 8024f3e:	9b04      	ldr	r3, [sp, #16]
 8024f40:	2b00      	cmp	r3, #0
 8024f42:	d1a4      	bne.n	8024e8e <_strtod_l+0x82e>
 8024f44:	e5de      	b.n	8024b04 <_strtod_l+0x4a4>
 8024f46:	f04f 33ff 	mov.w	r3, #4294967295
 8024f4a:	e7ea      	b.n	8024f22 <_strtod_l+0x8c2>
 8024f4c:	4613      	mov	r3, r2
 8024f4e:	e7e8      	b.n	8024f22 <_strtod_l+0x8c2>
 8024f50:	ea53 030a 	orrs.w	r3, r3, sl
 8024f54:	d08c      	beq.n	8024e70 <_strtod_l+0x810>
 8024f56:	9b08      	ldr	r3, [sp, #32]
 8024f58:	b1db      	cbz	r3, 8024f92 <_strtod_l+0x932>
 8024f5a:	423b      	tst	r3, r7
 8024f5c:	d0ef      	beq.n	8024f3e <_strtod_l+0x8de>
 8024f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f60:	9a04      	ldr	r2, [sp, #16]
 8024f62:	4650      	mov	r0, sl
 8024f64:	4659      	mov	r1, fp
 8024f66:	b1c3      	cbz	r3, 8024f9a <_strtod_l+0x93a>
 8024f68:	f7ff fb5c 	bl	8024624 <sulp>
 8024f6c:	4602      	mov	r2, r0
 8024f6e:	460b      	mov	r3, r1
 8024f70:	ec51 0b18 	vmov	r0, r1, d8
 8024f74:	f7db f994 	bl	80002a0 <__adddf3>
 8024f78:	4682      	mov	sl, r0
 8024f7a:	468b      	mov	fp, r1
 8024f7c:	e7df      	b.n	8024f3e <_strtod_l+0x8de>
 8024f7e:	4013      	ands	r3, r2
 8024f80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8024f84:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8024f88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8024f8c:	f04f 3aff 	mov.w	sl, #4294967295
 8024f90:	e7d5      	b.n	8024f3e <_strtod_l+0x8de>
 8024f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024f94:	ea13 0f0a 	tst.w	r3, sl
 8024f98:	e7e0      	b.n	8024f5c <_strtod_l+0x8fc>
 8024f9a:	f7ff fb43 	bl	8024624 <sulp>
 8024f9e:	4602      	mov	r2, r0
 8024fa0:	460b      	mov	r3, r1
 8024fa2:	ec51 0b18 	vmov	r0, r1, d8
 8024fa6:	f7db f979 	bl	800029c <__aeabi_dsub>
 8024faa:	2200      	movs	r2, #0
 8024fac:	2300      	movs	r3, #0
 8024fae:	4682      	mov	sl, r0
 8024fb0:	468b      	mov	fp, r1
 8024fb2:	f7db fd93 	bl	8000adc <__aeabi_dcmpeq>
 8024fb6:	2800      	cmp	r0, #0
 8024fb8:	d0c1      	beq.n	8024f3e <_strtod_l+0x8de>
 8024fba:	e611      	b.n	8024be0 <_strtod_l+0x580>
 8024fbc:	fffffc02 	.word	0xfffffc02
 8024fc0:	7ff00000 	.word	0x7ff00000
 8024fc4:	39500000 	.word	0x39500000
 8024fc8:	000fffff 	.word	0x000fffff
 8024fcc:	7fefffff 	.word	0x7fefffff
 8024fd0:	0802a010 	.word	0x0802a010
 8024fd4:	4631      	mov	r1, r6
 8024fd6:	4628      	mov	r0, r5
 8024fd8:	f002 faa8 	bl	802752c <__ratio>
 8024fdc:	ec59 8b10 	vmov	r8, r9, d0
 8024fe0:	ee10 0a10 	vmov	r0, s0
 8024fe4:	2200      	movs	r2, #0
 8024fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024fea:	4649      	mov	r1, r9
 8024fec:	f7db fd8a 	bl	8000b04 <__aeabi_dcmple>
 8024ff0:	2800      	cmp	r0, #0
 8024ff2:	d07a      	beq.n	80250ea <_strtod_l+0xa8a>
 8024ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ff6:	2b00      	cmp	r3, #0
 8024ff8:	d04a      	beq.n	8025090 <_strtod_l+0xa30>
 8024ffa:	4b95      	ldr	r3, [pc, #596]	; (8025250 <_strtod_l+0xbf0>)
 8024ffc:	2200      	movs	r2, #0
 8024ffe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025002:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8025250 <_strtod_l+0xbf0>
 8025006:	f04f 0800 	mov.w	r8, #0
 802500a:	4b92      	ldr	r3, [pc, #584]	; (8025254 <_strtod_l+0xbf4>)
 802500c:	403b      	ands	r3, r7
 802500e:	930d      	str	r3, [sp, #52]	; 0x34
 8025010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025012:	4b91      	ldr	r3, [pc, #580]	; (8025258 <_strtod_l+0xbf8>)
 8025014:	429a      	cmp	r2, r3
 8025016:	f040 80b0 	bne.w	802517a <_strtod_l+0xb1a>
 802501a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802501e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8025022:	ec4b ab10 	vmov	d0, sl, fp
 8025026:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802502a:	f002 f9a7 	bl	802737c <__ulp>
 802502e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8025032:	ec53 2b10 	vmov	r2, r3, d0
 8025036:	f7db fae9 	bl	800060c <__aeabi_dmul>
 802503a:	4652      	mov	r2, sl
 802503c:	465b      	mov	r3, fp
 802503e:	f7db f92f 	bl	80002a0 <__adddf3>
 8025042:	460b      	mov	r3, r1
 8025044:	4983      	ldr	r1, [pc, #524]	; (8025254 <_strtod_l+0xbf4>)
 8025046:	4a85      	ldr	r2, [pc, #532]	; (802525c <_strtod_l+0xbfc>)
 8025048:	4019      	ands	r1, r3
 802504a:	4291      	cmp	r1, r2
 802504c:	4682      	mov	sl, r0
 802504e:	d960      	bls.n	8025112 <_strtod_l+0xab2>
 8025050:	ee18 3a90 	vmov	r3, s17
 8025054:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8025058:	4293      	cmp	r3, r2
 802505a:	d104      	bne.n	8025066 <_strtod_l+0xa06>
 802505c:	ee18 3a10 	vmov	r3, s16
 8025060:	3301      	adds	r3, #1
 8025062:	f43f ad45 	beq.w	8024af0 <_strtod_l+0x490>
 8025066:	f8df b200 	ldr.w	fp, [pc, #512]	; 8025268 <_strtod_l+0xc08>
 802506a:	f04f 3aff 	mov.w	sl, #4294967295
 802506e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025070:	4620      	mov	r0, r4
 8025072:	f001 fe51 	bl	8026d18 <_Bfree>
 8025076:	9905      	ldr	r1, [sp, #20]
 8025078:	4620      	mov	r0, r4
 802507a:	f001 fe4d 	bl	8026d18 <_Bfree>
 802507e:	4631      	mov	r1, r6
 8025080:	4620      	mov	r0, r4
 8025082:	f001 fe49 	bl	8026d18 <_Bfree>
 8025086:	4629      	mov	r1, r5
 8025088:	4620      	mov	r0, r4
 802508a:	f001 fe45 	bl	8026d18 <_Bfree>
 802508e:	e61a      	b.n	8024cc6 <_strtod_l+0x666>
 8025090:	f1ba 0f00 	cmp.w	sl, #0
 8025094:	d11b      	bne.n	80250ce <_strtod_l+0xa6e>
 8025096:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802509a:	b9f3      	cbnz	r3, 80250da <_strtod_l+0xa7a>
 802509c:	4b6c      	ldr	r3, [pc, #432]	; (8025250 <_strtod_l+0xbf0>)
 802509e:	2200      	movs	r2, #0
 80250a0:	4640      	mov	r0, r8
 80250a2:	4649      	mov	r1, r9
 80250a4:	f7db fd24 	bl	8000af0 <__aeabi_dcmplt>
 80250a8:	b9d0      	cbnz	r0, 80250e0 <_strtod_l+0xa80>
 80250aa:	4640      	mov	r0, r8
 80250ac:	4649      	mov	r1, r9
 80250ae:	4b6c      	ldr	r3, [pc, #432]	; (8025260 <_strtod_l+0xc00>)
 80250b0:	2200      	movs	r2, #0
 80250b2:	f7db faab 	bl	800060c <__aeabi_dmul>
 80250b6:	4680      	mov	r8, r0
 80250b8:	4689      	mov	r9, r1
 80250ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80250be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80250c2:	9315      	str	r3, [sp, #84]	; 0x54
 80250c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80250c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80250cc:	e79d      	b.n	802500a <_strtod_l+0x9aa>
 80250ce:	f1ba 0f01 	cmp.w	sl, #1
 80250d2:	d102      	bne.n	80250da <_strtod_l+0xa7a>
 80250d4:	2f00      	cmp	r7, #0
 80250d6:	f43f ad83 	beq.w	8024be0 <_strtod_l+0x580>
 80250da:	4b62      	ldr	r3, [pc, #392]	; (8025264 <_strtod_l+0xc04>)
 80250dc:	2200      	movs	r2, #0
 80250de:	e78e      	b.n	8024ffe <_strtod_l+0x99e>
 80250e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8025260 <_strtod_l+0xc00>
 80250e4:	f04f 0800 	mov.w	r8, #0
 80250e8:	e7e7      	b.n	80250ba <_strtod_l+0xa5a>
 80250ea:	4b5d      	ldr	r3, [pc, #372]	; (8025260 <_strtod_l+0xc00>)
 80250ec:	4640      	mov	r0, r8
 80250ee:	4649      	mov	r1, r9
 80250f0:	2200      	movs	r2, #0
 80250f2:	f7db fa8b 	bl	800060c <__aeabi_dmul>
 80250f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250f8:	4680      	mov	r8, r0
 80250fa:	4689      	mov	r9, r1
 80250fc:	b933      	cbnz	r3, 802510c <_strtod_l+0xaac>
 80250fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025102:	900e      	str	r0, [sp, #56]	; 0x38
 8025104:	930f      	str	r3, [sp, #60]	; 0x3c
 8025106:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 802510a:	e7dd      	b.n	80250c8 <_strtod_l+0xa68>
 802510c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8025110:	e7f9      	b.n	8025106 <_strtod_l+0xaa6>
 8025112:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8025116:	9b04      	ldr	r3, [sp, #16]
 8025118:	2b00      	cmp	r3, #0
 802511a:	d1a8      	bne.n	802506e <_strtod_l+0xa0e>
 802511c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8025120:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025122:	0d1b      	lsrs	r3, r3, #20
 8025124:	051b      	lsls	r3, r3, #20
 8025126:	429a      	cmp	r2, r3
 8025128:	d1a1      	bne.n	802506e <_strtod_l+0xa0e>
 802512a:	4640      	mov	r0, r8
 802512c:	4649      	mov	r1, r9
 802512e:	f7db fe1d 	bl	8000d6c <__aeabi_d2lz>
 8025132:	f7db fa3d 	bl	80005b0 <__aeabi_l2d>
 8025136:	4602      	mov	r2, r0
 8025138:	460b      	mov	r3, r1
 802513a:	4640      	mov	r0, r8
 802513c:	4649      	mov	r1, r9
 802513e:	f7db f8ad 	bl	800029c <__aeabi_dsub>
 8025142:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025144:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8025148:	ea43 030a 	orr.w	r3, r3, sl
 802514c:	4313      	orrs	r3, r2
 802514e:	4680      	mov	r8, r0
 8025150:	4689      	mov	r9, r1
 8025152:	d055      	beq.n	8025200 <_strtod_l+0xba0>
 8025154:	a336      	add	r3, pc, #216	; (adr r3, 8025230 <_strtod_l+0xbd0>)
 8025156:	e9d3 2300 	ldrd	r2, r3, [r3]
 802515a:	f7db fcc9 	bl	8000af0 <__aeabi_dcmplt>
 802515e:	2800      	cmp	r0, #0
 8025160:	f47f acd0 	bne.w	8024b04 <_strtod_l+0x4a4>
 8025164:	a334      	add	r3, pc, #208	; (adr r3, 8025238 <_strtod_l+0xbd8>)
 8025166:	e9d3 2300 	ldrd	r2, r3, [r3]
 802516a:	4640      	mov	r0, r8
 802516c:	4649      	mov	r1, r9
 802516e:	f7db fcdd 	bl	8000b2c <__aeabi_dcmpgt>
 8025172:	2800      	cmp	r0, #0
 8025174:	f43f af7b 	beq.w	802506e <_strtod_l+0xa0e>
 8025178:	e4c4      	b.n	8024b04 <_strtod_l+0x4a4>
 802517a:	9b04      	ldr	r3, [sp, #16]
 802517c:	b333      	cbz	r3, 80251cc <_strtod_l+0xb6c>
 802517e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025180:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8025184:	d822      	bhi.n	80251cc <_strtod_l+0xb6c>
 8025186:	a32e      	add	r3, pc, #184	; (adr r3, 8025240 <_strtod_l+0xbe0>)
 8025188:	e9d3 2300 	ldrd	r2, r3, [r3]
 802518c:	4640      	mov	r0, r8
 802518e:	4649      	mov	r1, r9
 8025190:	f7db fcb8 	bl	8000b04 <__aeabi_dcmple>
 8025194:	b1a0      	cbz	r0, 80251c0 <_strtod_l+0xb60>
 8025196:	4649      	mov	r1, r9
 8025198:	4640      	mov	r0, r8
 802519a:	f7db fd0f 	bl	8000bbc <__aeabi_d2uiz>
 802519e:	2801      	cmp	r0, #1
 80251a0:	bf38      	it	cc
 80251a2:	2001      	movcc	r0, #1
 80251a4:	f7db f9b8 	bl	8000518 <__aeabi_ui2d>
 80251a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80251aa:	4680      	mov	r8, r0
 80251ac:	4689      	mov	r9, r1
 80251ae:	bb23      	cbnz	r3, 80251fa <_strtod_l+0xb9a>
 80251b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80251b4:	9010      	str	r0, [sp, #64]	; 0x40
 80251b6:	9311      	str	r3, [sp, #68]	; 0x44
 80251b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80251bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80251c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80251c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80251c8:	1a9b      	subs	r3, r3, r2
 80251ca:	9309      	str	r3, [sp, #36]	; 0x24
 80251cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80251d0:	eeb0 0a48 	vmov.f32	s0, s16
 80251d4:	eef0 0a68 	vmov.f32	s1, s17
 80251d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80251dc:	f002 f8ce 	bl	802737c <__ulp>
 80251e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80251e4:	ec53 2b10 	vmov	r2, r3, d0
 80251e8:	f7db fa10 	bl	800060c <__aeabi_dmul>
 80251ec:	ec53 2b18 	vmov	r2, r3, d8
 80251f0:	f7db f856 	bl	80002a0 <__adddf3>
 80251f4:	4682      	mov	sl, r0
 80251f6:	468b      	mov	fp, r1
 80251f8:	e78d      	b.n	8025116 <_strtod_l+0xab6>
 80251fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80251fe:	e7db      	b.n	80251b8 <_strtod_l+0xb58>
 8025200:	a311      	add	r3, pc, #68	; (adr r3, 8025248 <_strtod_l+0xbe8>)
 8025202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025206:	f7db fc73 	bl	8000af0 <__aeabi_dcmplt>
 802520a:	e7b2      	b.n	8025172 <_strtod_l+0xb12>
 802520c:	2300      	movs	r3, #0
 802520e:	930a      	str	r3, [sp, #40]	; 0x28
 8025210:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025212:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025214:	6013      	str	r3, [r2, #0]
 8025216:	f7ff ba6b 	b.w	80246f0 <_strtod_l+0x90>
 802521a:	2a65      	cmp	r2, #101	; 0x65
 802521c:	f43f ab5f 	beq.w	80248de <_strtod_l+0x27e>
 8025220:	2a45      	cmp	r2, #69	; 0x45
 8025222:	f43f ab5c 	beq.w	80248de <_strtod_l+0x27e>
 8025226:	2301      	movs	r3, #1
 8025228:	f7ff bb94 	b.w	8024954 <_strtod_l+0x2f4>
 802522c:	f3af 8000 	nop.w
 8025230:	94a03595 	.word	0x94a03595
 8025234:	3fdfffff 	.word	0x3fdfffff
 8025238:	35afe535 	.word	0x35afe535
 802523c:	3fe00000 	.word	0x3fe00000
 8025240:	ffc00000 	.word	0xffc00000
 8025244:	41dfffff 	.word	0x41dfffff
 8025248:	94a03595 	.word	0x94a03595
 802524c:	3fcfffff 	.word	0x3fcfffff
 8025250:	3ff00000 	.word	0x3ff00000
 8025254:	7ff00000 	.word	0x7ff00000
 8025258:	7fe00000 	.word	0x7fe00000
 802525c:	7c9fffff 	.word	0x7c9fffff
 8025260:	3fe00000 	.word	0x3fe00000
 8025264:	bff00000 	.word	0xbff00000
 8025268:	7fefffff 	.word	0x7fefffff

0802526c <strtod>:
 802526c:	460a      	mov	r2, r1
 802526e:	4601      	mov	r1, r0
 8025270:	4802      	ldr	r0, [pc, #8]	; (802527c <strtod+0x10>)
 8025272:	4b03      	ldr	r3, [pc, #12]	; (8025280 <strtod+0x14>)
 8025274:	6800      	ldr	r0, [r0, #0]
 8025276:	f7ff b9f3 	b.w	8024660 <_strtod_l>
 802527a:	bf00      	nop
 802527c:	20000280 	.word	0x20000280
 8025280:	200002e8 	.word	0x200002e8

08025284 <_vsiprintf_r>:
 8025284:	b500      	push	{lr}
 8025286:	b09b      	sub	sp, #108	; 0x6c
 8025288:	9100      	str	r1, [sp, #0]
 802528a:	9104      	str	r1, [sp, #16]
 802528c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025290:	9105      	str	r1, [sp, #20]
 8025292:	9102      	str	r1, [sp, #8]
 8025294:	4905      	ldr	r1, [pc, #20]	; (80252ac <_vsiprintf_r+0x28>)
 8025296:	9103      	str	r1, [sp, #12]
 8025298:	4669      	mov	r1, sp
 802529a:	f002 fa49 	bl	8027730 <_svfiprintf_r>
 802529e:	9b00      	ldr	r3, [sp, #0]
 80252a0:	2200      	movs	r2, #0
 80252a2:	701a      	strb	r2, [r3, #0]
 80252a4:	b01b      	add	sp, #108	; 0x6c
 80252a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80252aa:	bf00      	nop
 80252ac:	ffff0208 	.word	0xffff0208

080252b0 <vsiprintf>:
 80252b0:	4613      	mov	r3, r2
 80252b2:	460a      	mov	r2, r1
 80252b4:	4601      	mov	r1, r0
 80252b6:	4802      	ldr	r0, [pc, #8]	; (80252c0 <vsiprintf+0x10>)
 80252b8:	6800      	ldr	r0, [r0, #0]
 80252ba:	f7ff bfe3 	b.w	8025284 <_vsiprintf_r>
 80252be:	bf00      	nop
 80252c0:	20000280 	.word	0x20000280

080252c4 <__swbuf_r>:
 80252c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80252c6:	460e      	mov	r6, r1
 80252c8:	4614      	mov	r4, r2
 80252ca:	4605      	mov	r5, r0
 80252cc:	b118      	cbz	r0, 80252d6 <__swbuf_r+0x12>
 80252ce:	6983      	ldr	r3, [r0, #24]
 80252d0:	b90b      	cbnz	r3, 80252d6 <__swbuf_r+0x12>
 80252d2:	f001 f84d 	bl	8026370 <__sinit>
 80252d6:	4b21      	ldr	r3, [pc, #132]	; (802535c <__swbuf_r+0x98>)
 80252d8:	429c      	cmp	r4, r3
 80252da:	d12b      	bne.n	8025334 <__swbuf_r+0x70>
 80252dc:	686c      	ldr	r4, [r5, #4]
 80252de:	69a3      	ldr	r3, [r4, #24]
 80252e0:	60a3      	str	r3, [r4, #8]
 80252e2:	89a3      	ldrh	r3, [r4, #12]
 80252e4:	071a      	lsls	r2, r3, #28
 80252e6:	d52f      	bpl.n	8025348 <__swbuf_r+0x84>
 80252e8:	6923      	ldr	r3, [r4, #16]
 80252ea:	b36b      	cbz	r3, 8025348 <__swbuf_r+0x84>
 80252ec:	6923      	ldr	r3, [r4, #16]
 80252ee:	6820      	ldr	r0, [r4, #0]
 80252f0:	1ac0      	subs	r0, r0, r3
 80252f2:	6963      	ldr	r3, [r4, #20]
 80252f4:	b2f6      	uxtb	r6, r6
 80252f6:	4283      	cmp	r3, r0
 80252f8:	4637      	mov	r7, r6
 80252fa:	dc04      	bgt.n	8025306 <__swbuf_r+0x42>
 80252fc:	4621      	mov	r1, r4
 80252fe:	4628      	mov	r0, r5
 8025300:	f000 ffa2 	bl	8026248 <_fflush_r>
 8025304:	bb30      	cbnz	r0, 8025354 <__swbuf_r+0x90>
 8025306:	68a3      	ldr	r3, [r4, #8]
 8025308:	3b01      	subs	r3, #1
 802530a:	60a3      	str	r3, [r4, #8]
 802530c:	6823      	ldr	r3, [r4, #0]
 802530e:	1c5a      	adds	r2, r3, #1
 8025310:	6022      	str	r2, [r4, #0]
 8025312:	701e      	strb	r6, [r3, #0]
 8025314:	6963      	ldr	r3, [r4, #20]
 8025316:	3001      	adds	r0, #1
 8025318:	4283      	cmp	r3, r0
 802531a:	d004      	beq.n	8025326 <__swbuf_r+0x62>
 802531c:	89a3      	ldrh	r3, [r4, #12]
 802531e:	07db      	lsls	r3, r3, #31
 8025320:	d506      	bpl.n	8025330 <__swbuf_r+0x6c>
 8025322:	2e0a      	cmp	r6, #10
 8025324:	d104      	bne.n	8025330 <__swbuf_r+0x6c>
 8025326:	4621      	mov	r1, r4
 8025328:	4628      	mov	r0, r5
 802532a:	f000 ff8d 	bl	8026248 <_fflush_r>
 802532e:	b988      	cbnz	r0, 8025354 <__swbuf_r+0x90>
 8025330:	4638      	mov	r0, r7
 8025332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025334:	4b0a      	ldr	r3, [pc, #40]	; (8025360 <__swbuf_r+0x9c>)
 8025336:	429c      	cmp	r4, r3
 8025338:	d101      	bne.n	802533e <__swbuf_r+0x7a>
 802533a:	68ac      	ldr	r4, [r5, #8]
 802533c:	e7cf      	b.n	80252de <__swbuf_r+0x1a>
 802533e:	4b09      	ldr	r3, [pc, #36]	; (8025364 <__swbuf_r+0xa0>)
 8025340:	429c      	cmp	r4, r3
 8025342:	bf08      	it	eq
 8025344:	68ec      	ldreq	r4, [r5, #12]
 8025346:	e7ca      	b.n	80252de <__swbuf_r+0x1a>
 8025348:	4621      	mov	r1, r4
 802534a:	4628      	mov	r0, r5
 802534c:	f000 f80c 	bl	8025368 <__swsetup_r>
 8025350:	2800      	cmp	r0, #0
 8025352:	d0cb      	beq.n	80252ec <__swbuf_r+0x28>
 8025354:	f04f 37ff 	mov.w	r7, #4294967295
 8025358:	e7ea      	b.n	8025330 <__swbuf_r+0x6c>
 802535a:	bf00      	nop
 802535c:	0802a1ec 	.word	0x0802a1ec
 8025360:	0802a20c 	.word	0x0802a20c
 8025364:	0802a1cc 	.word	0x0802a1cc

08025368 <__swsetup_r>:
 8025368:	4b32      	ldr	r3, [pc, #200]	; (8025434 <__swsetup_r+0xcc>)
 802536a:	b570      	push	{r4, r5, r6, lr}
 802536c:	681d      	ldr	r5, [r3, #0]
 802536e:	4606      	mov	r6, r0
 8025370:	460c      	mov	r4, r1
 8025372:	b125      	cbz	r5, 802537e <__swsetup_r+0x16>
 8025374:	69ab      	ldr	r3, [r5, #24]
 8025376:	b913      	cbnz	r3, 802537e <__swsetup_r+0x16>
 8025378:	4628      	mov	r0, r5
 802537a:	f000 fff9 	bl	8026370 <__sinit>
 802537e:	4b2e      	ldr	r3, [pc, #184]	; (8025438 <__swsetup_r+0xd0>)
 8025380:	429c      	cmp	r4, r3
 8025382:	d10f      	bne.n	80253a4 <__swsetup_r+0x3c>
 8025384:	686c      	ldr	r4, [r5, #4]
 8025386:	89a3      	ldrh	r3, [r4, #12]
 8025388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802538c:	0719      	lsls	r1, r3, #28
 802538e:	d42c      	bmi.n	80253ea <__swsetup_r+0x82>
 8025390:	06dd      	lsls	r5, r3, #27
 8025392:	d411      	bmi.n	80253b8 <__swsetup_r+0x50>
 8025394:	2309      	movs	r3, #9
 8025396:	6033      	str	r3, [r6, #0]
 8025398:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802539c:	81a3      	strh	r3, [r4, #12]
 802539e:	f04f 30ff 	mov.w	r0, #4294967295
 80253a2:	e03e      	b.n	8025422 <__swsetup_r+0xba>
 80253a4:	4b25      	ldr	r3, [pc, #148]	; (802543c <__swsetup_r+0xd4>)
 80253a6:	429c      	cmp	r4, r3
 80253a8:	d101      	bne.n	80253ae <__swsetup_r+0x46>
 80253aa:	68ac      	ldr	r4, [r5, #8]
 80253ac:	e7eb      	b.n	8025386 <__swsetup_r+0x1e>
 80253ae:	4b24      	ldr	r3, [pc, #144]	; (8025440 <__swsetup_r+0xd8>)
 80253b0:	429c      	cmp	r4, r3
 80253b2:	bf08      	it	eq
 80253b4:	68ec      	ldreq	r4, [r5, #12]
 80253b6:	e7e6      	b.n	8025386 <__swsetup_r+0x1e>
 80253b8:	0758      	lsls	r0, r3, #29
 80253ba:	d512      	bpl.n	80253e2 <__swsetup_r+0x7a>
 80253bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80253be:	b141      	cbz	r1, 80253d2 <__swsetup_r+0x6a>
 80253c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80253c4:	4299      	cmp	r1, r3
 80253c6:	d002      	beq.n	80253ce <__swsetup_r+0x66>
 80253c8:	4630      	mov	r0, r6
 80253ca:	f7fe fa1f 	bl	802380c <_free_r>
 80253ce:	2300      	movs	r3, #0
 80253d0:	6363      	str	r3, [r4, #52]	; 0x34
 80253d2:	89a3      	ldrh	r3, [r4, #12]
 80253d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80253d8:	81a3      	strh	r3, [r4, #12]
 80253da:	2300      	movs	r3, #0
 80253dc:	6063      	str	r3, [r4, #4]
 80253de:	6923      	ldr	r3, [r4, #16]
 80253e0:	6023      	str	r3, [r4, #0]
 80253e2:	89a3      	ldrh	r3, [r4, #12]
 80253e4:	f043 0308 	orr.w	r3, r3, #8
 80253e8:	81a3      	strh	r3, [r4, #12]
 80253ea:	6923      	ldr	r3, [r4, #16]
 80253ec:	b94b      	cbnz	r3, 8025402 <__swsetup_r+0x9a>
 80253ee:	89a3      	ldrh	r3, [r4, #12]
 80253f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80253f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80253f8:	d003      	beq.n	8025402 <__swsetup_r+0x9a>
 80253fa:	4621      	mov	r1, r4
 80253fc:	4630      	mov	r0, r6
 80253fe:	f001 fbed 	bl	8026bdc <__smakebuf_r>
 8025402:	89a0      	ldrh	r0, [r4, #12]
 8025404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025408:	f010 0301 	ands.w	r3, r0, #1
 802540c:	d00a      	beq.n	8025424 <__swsetup_r+0xbc>
 802540e:	2300      	movs	r3, #0
 8025410:	60a3      	str	r3, [r4, #8]
 8025412:	6963      	ldr	r3, [r4, #20]
 8025414:	425b      	negs	r3, r3
 8025416:	61a3      	str	r3, [r4, #24]
 8025418:	6923      	ldr	r3, [r4, #16]
 802541a:	b943      	cbnz	r3, 802542e <__swsetup_r+0xc6>
 802541c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025420:	d1ba      	bne.n	8025398 <__swsetup_r+0x30>
 8025422:	bd70      	pop	{r4, r5, r6, pc}
 8025424:	0781      	lsls	r1, r0, #30
 8025426:	bf58      	it	pl
 8025428:	6963      	ldrpl	r3, [r4, #20]
 802542a:	60a3      	str	r3, [r4, #8]
 802542c:	e7f4      	b.n	8025418 <__swsetup_r+0xb0>
 802542e:	2000      	movs	r0, #0
 8025430:	e7f7      	b.n	8025422 <__swsetup_r+0xba>
 8025432:	bf00      	nop
 8025434:	20000280 	.word	0x20000280
 8025438:	0802a1ec 	.word	0x0802a1ec
 802543c:	0802a20c 	.word	0x0802a20c
 8025440:	0802a1cc 	.word	0x0802a1cc

08025444 <quorem>:
 8025444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025448:	6903      	ldr	r3, [r0, #16]
 802544a:	690c      	ldr	r4, [r1, #16]
 802544c:	42a3      	cmp	r3, r4
 802544e:	4607      	mov	r7, r0
 8025450:	f2c0 8081 	blt.w	8025556 <quorem+0x112>
 8025454:	3c01      	subs	r4, #1
 8025456:	f101 0814 	add.w	r8, r1, #20
 802545a:	f100 0514 	add.w	r5, r0, #20
 802545e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025462:	9301      	str	r3, [sp, #4]
 8025464:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025468:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802546c:	3301      	adds	r3, #1
 802546e:	429a      	cmp	r2, r3
 8025470:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8025474:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025478:	fbb2 f6f3 	udiv	r6, r2, r3
 802547c:	d331      	bcc.n	80254e2 <quorem+0x9e>
 802547e:	f04f 0e00 	mov.w	lr, #0
 8025482:	4640      	mov	r0, r8
 8025484:	46ac      	mov	ip, r5
 8025486:	46f2      	mov	sl, lr
 8025488:	f850 2b04 	ldr.w	r2, [r0], #4
 802548c:	b293      	uxth	r3, r2
 802548e:	fb06 e303 	mla	r3, r6, r3, lr
 8025492:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8025496:	b29b      	uxth	r3, r3
 8025498:	ebaa 0303 	sub.w	r3, sl, r3
 802549c:	f8dc a000 	ldr.w	sl, [ip]
 80254a0:	0c12      	lsrs	r2, r2, #16
 80254a2:	fa13 f38a 	uxtah	r3, r3, sl
 80254a6:	fb06 e202 	mla	r2, r6, r2, lr
 80254aa:	9300      	str	r3, [sp, #0]
 80254ac:	9b00      	ldr	r3, [sp, #0]
 80254ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80254b2:	b292      	uxth	r2, r2
 80254b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80254b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80254bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80254c0:	4581      	cmp	r9, r0
 80254c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80254c6:	f84c 3b04 	str.w	r3, [ip], #4
 80254ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80254ce:	d2db      	bcs.n	8025488 <quorem+0x44>
 80254d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80254d4:	b92b      	cbnz	r3, 80254e2 <quorem+0x9e>
 80254d6:	9b01      	ldr	r3, [sp, #4]
 80254d8:	3b04      	subs	r3, #4
 80254da:	429d      	cmp	r5, r3
 80254dc:	461a      	mov	r2, r3
 80254de:	d32e      	bcc.n	802553e <quorem+0xfa>
 80254e0:	613c      	str	r4, [r7, #16]
 80254e2:	4638      	mov	r0, r7
 80254e4:	f001 fea4 	bl	8027230 <__mcmp>
 80254e8:	2800      	cmp	r0, #0
 80254ea:	db24      	blt.n	8025536 <quorem+0xf2>
 80254ec:	3601      	adds	r6, #1
 80254ee:	4628      	mov	r0, r5
 80254f0:	f04f 0c00 	mov.w	ip, #0
 80254f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80254f8:	f8d0 e000 	ldr.w	lr, [r0]
 80254fc:	b293      	uxth	r3, r2
 80254fe:	ebac 0303 	sub.w	r3, ip, r3
 8025502:	0c12      	lsrs	r2, r2, #16
 8025504:	fa13 f38e 	uxtah	r3, r3, lr
 8025508:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802550c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025510:	b29b      	uxth	r3, r3
 8025512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025516:	45c1      	cmp	r9, r8
 8025518:	f840 3b04 	str.w	r3, [r0], #4
 802551c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8025520:	d2e8      	bcs.n	80254f4 <quorem+0xb0>
 8025522:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025526:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802552a:	b922      	cbnz	r2, 8025536 <quorem+0xf2>
 802552c:	3b04      	subs	r3, #4
 802552e:	429d      	cmp	r5, r3
 8025530:	461a      	mov	r2, r3
 8025532:	d30a      	bcc.n	802554a <quorem+0x106>
 8025534:	613c      	str	r4, [r7, #16]
 8025536:	4630      	mov	r0, r6
 8025538:	b003      	add	sp, #12
 802553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802553e:	6812      	ldr	r2, [r2, #0]
 8025540:	3b04      	subs	r3, #4
 8025542:	2a00      	cmp	r2, #0
 8025544:	d1cc      	bne.n	80254e0 <quorem+0x9c>
 8025546:	3c01      	subs	r4, #1
 8025548:	e7c7      	b.n	80254da <quorem+0x96>
 802554a:	6812      	ldr	r2, [r2, #0]
 802554c:	3b04      	subs	r3, #4
 802554e:	2a00      	cmp	r2, #0
 8025550:	d1f0      	bne.n	8025534 <quorem+0xf0>
 8025552:	3c01      	subs	r4, #1
 8025554:	e7eb      	b.n	802552e <quorem+0xea>
 8025556:	2000      	movs	r0, #0
 8025558:	e7ee      	b.n	8025538 <quorem+0xf4>
 802555a:	0000      	movs	r0, r0
 802555c:	0000      	movs	r0, r0
	...

08025560 <_dtoa_r>:
 8025560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025564:	ed2d 8b04 	vpush	{d8-d9}
 8025568:	ec57 6b10 	vmov	r6, r7, d0
 802556c:	b093      	sub	sp, #76	; 0x4c
 802556e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8025570:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8025574:	9106      	str	r1, [sp, #24]
 8025576:	ee10 aa10 	vmov	sl, s0
 802557a:	4604      	mov	r4, r0
 802557c:	9209      	str	r2, [sp, #36]	; 0x24
 802557e:	930c      	str	r3, [sp, #48]	; 0x30
 8025580:	46bb      	mov	fp, r7
 8025582:	b975      	cbnz	r5, 80255a2 <_dtoa_r+0x42>
 8025584:	2010      	movs	r0, #16
 8025586:	f7fe f8eb 	bl	8023760 <malloc>
 802558a:	4602      	mov	r2, r0
 802558c:	6260      	str	r0, [r4, #36]	; 0x24
 802558e:	b920      	cbnz	r0, 802559a <_dtoa_r+0x3a>
 8025590:	4ba7      	ldr	r3, [pc, #668]	; (8025830 <_dtoa_r+0x2d0>)
 8025592:	21ea      	movs	r1, #234	; 0xea
 8025594:	48a7      	ldr	r0, [pc, #668]	; (8025834 <_dtoa_r+0x2d4>)
 8025596:	f7fe f879 	bl	802368c <__assert_func>
 802559a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802559e:	6005      	str	r5, [r0, #0]
 80255a0:	60c5      	str	r5, [r0, #12]
 80255a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80255a4:	6819      	ldr	r1, [r3, #0]
 80255a6:	b151      	cbz	r1, 80255be <_dtoa_r+0x5e>
 80255a8:	685a      	ldr	r2, [r3, #4]
 80255aa:	604a      	str	r2, [r1, #4]
 80255ac:	2301      	movs	r3, #1
 80255ae:	4093      	lsls	r3, r2
 80255b0:	608b      	str	r3, [r1, #8]
 80255b2:	4620      	mov	r0, r4
 80255b4:	f001 fbb0 	bl	8026d18 <_Bfree>
 80255b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80255ba:	2200      	movs	r2, #0
 80255bc:	601a      	str	r2, [r3, #0]
 80255be:	1e3b      	subs	r3, r7, #0
 80255c0:	bfaa      	itet	ge
 80255c2:	2300      	movge	r3, #0
 80255c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80255c8:	f8c8 3000 	strge.w	r3, [r8]
 80255cc:	4b9a      	ldr	r3, [pc, #616]	; (8025838 <_dtoa_r+0x2d8>)
 80255ce:	bfbc      	itt	lt
 80255d0:	2201      	movlt	r2, #1
 80255d2:	f8c8 2000 	strlt.w	r2, [r8]
 80255d6:	ea33 030b 	bics.w	r3, r3, fp
 80255da:	d11b      	bne.n	8025614 <_dtoa_r+0xb4>
 80255dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80255de:	f242 730f 	movw	r3, #9999	; 0x270f
 80255e2:	6013      	str	r3, [r2, #0]
 80255e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80255e8:	4333      	orrs	r3, r6
 80255ea:	f000 8592 	beq.w	8026112 <_dtoa_r+0xbb2>
 80255ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80255f0:	b963      	cbnz	r3, 802560c <_dtoa_r+0xac>
 80255f2:	4b92      	ldr	r3, [pc, #584]	; (802583c <_dtoa_r+0x2dc>)
 80255f4:	e022      	b.n	802563c <_dtoa_r+0xdc>
 80255f6:	4b92      	ldr	r3, [pc, #584]	; (8025840 <_dtoa_r+0x2e0>)
 80255f8:	9301      	str	r3, [sp, #4]
 80255fa:	3308      	adds	r3, #8
 80255fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80255fe:	6013      	str	r3, [r2, #0]
 8025600:	9801      	ldr	r0, [sp, #4]
 8025602:	b013      	add	sp, #76	; 0x4c
 8025604:	ecbd 8b04 	vpop	{d8-d9}
 8025608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802560c:	4b8b      	ldr	r3, [pc, #556]	; (802583c <_dtoa_r+0x2dc>)
 802560e:	9301      	str	r3, [sp, #4]
 8025610:	3303      	adds	r3, #3
 8025612:	e7f3      	b.n	80255fc <_dtoa_r+0x9c>
 8025614:	2200      	movs	r2, #0
 8025616:	2300      	movs	r3, #0
 8025618:	4650      	mov	r0, sl
 802561a:	4659      	mov	r1, fp
 802561c:	f7db fa5e 	bl	8000adc <__aeabi_dcmpeq>
 8025620:	ec4b ab19 	vmov	d9, sl, fp
 8025624:	4680      	mov	r8, r0
 8025626:	b158      	cbz	r0, 8025640 <_dtoa_r+0xe0>
 8025628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802562a:	2301      	movs	r3, #1
 802562c:	6013      	str	r3, [r2, #0]
 802562e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025630:	2b00      	cmp	r3, #0
 8025632:	f000 856b 	beq.w	802610c <_dtoa_r+0xbac>
 8025636:	4883      	ldr	r0, [pc, #524]	; (8025844 <_dtoa_r+0x2e4>)
 8025638:	6018      	str	r0, [r3, #0]
 802563a:	1e43      	subs	r3, r0, #1
 802563c:	9301      	str	r3, [sp, #4]
 802563e:	e7df      	b.n	8025600 <_dtoa_r+0xa0>
 8025640:	ec4b ab10 	vmov	d0, sl, fp
 8025644:	aa10      	add	r2, sp, #64	; 0x40
 8025646:	a911      	add	r1, sp, #68	; 0x44
 8025648:	4620      	mov	r0, r4
 802564a:	f001 ff13 	bl	8027474 <__d2b>
 802564e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8025652:	ee08 0a10 	vmov	s16, r0
 8025656:	2d00      	cmp	r5, #0
 8025658:	f000 8084 	beq.w	8025764 <_dtoa_r+0x204>
 802565c:	ee19 3a90 	vmov	r3, s19
 8025660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025664:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8025668:	4656      	mov	r6, sl
 802566a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802566e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8025672:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8025676:	4b74      	ldr	r3, [pc, #464]	; (8025848 <_dtoa_r+0x2e8>)
 8025678:	2200      	movs	r2, #0
 802567a:	4630      	mov	r0, r6
 802567c:	4639      	mov	r1, r7
 802567e:	f7da fe0d 	bl	800029c <__aeabi_dsub>
 8025682:	a365      	add	r3, pc, #404	; (adr r3, 8025818 <_dtoa_r+0x2b8>)
 8025684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025688:	f7da ffc0 	bl	800060c <__aeabi_dmul>
 802568c:	a364      	add	r3, pc, #400	; (adr r3, 8025820 <_dtoa_r+0x2c0>)
 802568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025692:	f7da fe05 	bl	80002a0 <__adddf3>
 8025696:	4606      	mov	r6, r0
 8025698:	4628      	mov	r0, r5
 802569a:	460f      	mov	r7, r1
 802569c:	f7da ff4c 	bl	8000538 <__aeabi_i2d>
 80256a0:	a361      	add	r3, pc, #388	; (adr r3, 8025828 <_dtoa_r+0x2c8>)
 80256a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256a6:	f7da ffb1 	bl	800060c <__aeabi_dmul>
 80256aa:	4602      	mov	r2, r0
 80256ac:	460b      	mov	r3, r1
 80256ae:	4630      	mov	r0, r6
 80256b0:	4639      	mov	r1, r7
 80256b2:	f7da fdf5 	bl	80002a0 <__adddf3>
 80256b6:	4606      	mov	r6, r0
 80256b8:	460f      	mov	r7, r1
 80256ba:	f7db fa57 	bl	8000b6c <__aeabi_d2iz>
 80256be:	2200      	movs	r2, #0
 80256c0:	9000      	str	r0, [sp, #0]
 80256c2:	2300      	movs	r3, #0
 80256c4:	4630      	mov	r0, r6
 80256c6:	4639      	mov	r1, r7
 80256c8:	f7db fa12 	bl	8000af0 <__aeabi_dcmplt>
 80256cc:	b150      	cbz	r0, 80256e4 <_dtoa_r+0x184>
 80256ce:	9800      	ldr	r0, [sp, #0]
 80256d0:	f7da ff32 	bl	8000538 <__aeabi_i2d>
 80256d4:	4632      	mov	r2, r6
 80256d6:	463b      	mov	r3, r7
 80256d8:	f7db fa00 	bl	8000adc <__aeabi_dcmpeq>
 80256dc:	b910      	cbnz	r0, 80256e4 <_dtoa_r+0x184>
 80256de:	9b00      	ldr	r3, [sp, #0]
 80256e0:	3b01      	subs	r3, #1
 80256e2:	9300      	str	r3, [sp, #0]
 80256e4:	9b00      	ldr	r3, [sp, #0]
 80256e6:	2b16      	cmp	r3, #22
 80256e8:	d85a      	bhi.n	80257a0 <_dtoa_r+0x240>
 80256ea:	9a00      	ldr	r2, [sp, #0]
 80256ec:	4b57      	ldr	r3, [pc, #348]	; (802584c <_dtoa_r+0x2ec>)
 80256ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80256f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256f6:	ec51 0b19 	vmov	r0, r1, d9
 80256fa:	f7db f9f9 	bl	8000af0 <__aeabi_dcmplt>
 80256fe:	2800      	cmp	r0, #0
 8025700:	d050      	beq.n	80257a4 <_dtoa_r+0x244>
 8025702:	9b00      	ldr	r3, [sp, #0]
 8025704:	3b01      	subs	r3, #1
 8025706:	9300      	str	r3, [sp, #0]
 8025708:	2300      	movs	r3, #0
 802570a:	930b      	str	r3, [sp, #44]	; 0x2c
 802570c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802570e:	1b5d      	subs	r5, r3, r5
 8025710:	1e6b      	subs	r3, r5, #1
 8025712:	9305      	str	r3, [sp, #20]
 8025714:	bf45      	ittet	mi
 8025716:	f1c5 0301 	rsbmi	r3, r5, #1
 802571a:	9304      	strmi	r3, [sp, #16]
 802571c:	2300      	movpl	r3, #0
 802571e:	2300      	movmi	r3, #0
 8025720:	bf4c      	ite	mi
 8025722:	9305      	strmi	r3, [sp, #20]
 8025724:	9304      	strpl	r3, [sp, #16]
 8025726:	9b00      	ldr	r3, [sp, #0]
 8025728:	2b00      	cmp	r3, #0
 802572a:	db3d      	blt.n	80257a8 <_dtoa_r+0x248>
 802572c:	9b05      	ldr	r3, [sp, #20]
 802572e:	9a00      	ldr	r2, [sp, #0]
 8025730:	920a      	str	r2, [sp, #40]	; 0x28
 8025732:	4413      	add	r3, r2
 8025734:	9305      	str	r3, [sp, #20]
 8025736:	2300      	movs	r3, #0
 8025738:	9307      	str	r3, [sp, #28]
 802573a:	9b06      	ldr	r3, [sp, #24]
 802573c:	2b09      	cmp	r3, #9
 802573e:	f200 8089 	bhi.w	8025854 <_dtoa_r+0x2f4>
 8025742:	2b05      	cmp	r3, #5
 8025744:	bfc4      	itt	gt
 8025746:	3b04      	subgt	r3, #4
 8025748:	9306      	strgt	r3, [sp, #24]
 802574a:	9b06      	ldr	r3, [sp, #24]
 802574c:	f1a3 0302 	sub.w	r3, r3, #2
 8025750:	bfcc      	ite	gt
 8025752:	2500      	movgt	r5, #0
 8025754:	2501      	movle	r5, #1
 8025756:	2b03      	cmp	r3, #3
 8025758:	f200 8087 	bhi.w	802586a <_dtoa_r+0x30a>
 802575c:	e8df f003 	tbb	[pc, r3]
 8025760:	59383a2d 	.word	0x59383a2d
 8025764:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8025768:	441d      	add	r5, r3
 802576a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802576e:	2b20      	cmp	r3, #32
 8025770:	bfc1      	itttt	gt
 8025772:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8025776:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 802577a:	fa0b f303 	lslgt.w	r3, fp, r3
 802577e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8025782:	bfda      	itte	le
 8025784:	f1c3 0320 	rsble	r3, r3, #32
 8025788:	fa06 f003 	lslle.w	r0, r6, r3
 802578c:	4318      	orrgt	r0, r3
 802578e:	f7da fec3 	bl	8000518 <__aeabi_ui2d>
 8025792:	2301      	movs	r3, #1
 8025794:	4606      	mov	r6, r0
 8025796:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 802579a:	3d01      	subs	r5, #1
 802579c:	930e      	str	r3, [sp, #56]	; 0x38
 802579e:	e76a      	b.n	8025676 <_dtoa_r+0x116>
 80257a0:	2301      	movs	r3, #1
 80257a2:	e7b2      	b.n	802570a <_dtoa_r+0x1aa>
 80257a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80257a6:	e7b1      	b.n	802570c <_dtoa_r+0x1ac>
 80257a8:	9b04      	ldr	r3, [sp, #16]
 80257aa:	9a00      	ldr	r2, [sp, #0]
 80257ac:	1a9b      	subs	r3, r3, r2
 80257ae:	9304      	str	r3, [sp, #16]
 80257b0:	4253      	negs	r3, r2
 80257b2:	9307      	str	r3, [sp, #28]
 80257b4:	2300      	movs	r3, #0
 80257b6:	930a      	str	r3, [sp, #40]	; 0x28
 80257b8:	e7bf      	b.n	802573a <_dtoa_r+0x1da>
 80257ba:	2300      	movs	r3, #0
 80257bc:	9308      	str	r3, [sp, #32]
 80257be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257c0:	2b00      	cmp	r3, #0
 80257c2:	dc55      	bgt.n	8025870 <_dtoa_r+0x310>
 80257c4:	2301      	movs	r3, #1
 80257c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80257ca:	461a      	mov	r2, r3
 80257cc:	9209      	str	r2, [sp, #36]	; 0x24
 80257ce:	e00c      	b.n	80257ea <_dtoa_r+0x28a>
 80257d0:	2301      	movs	r3, #1
 80257d2:	e7f3      	b.n	80257bc <_dtoa_r+0x25c>
 80257d4:	2300      	movs	r3, #0
 80257d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80257d8:	9308      	str	r3, [sp, #32]
 80257da:	9b00      	ldr	r3, [sp, #0]
 80257dc:	4413      	add	r3, r2
 80257de:	9302      	str	r3, [sp, #8]
 80257e0:	3301      	adds	r3, #1
 80257e2:	2b01      	cmp	r3, #1
 80257e4:	9303      	str	r3, [sp, #12]
 80257e6:	bfb8      	it	lt
 80257e8:	2301      	movlt	r3, #1
 80257ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80257ec:	2200      	movs	r2, #0
 80257ee:	6042      	str	r2, [r0, #4]
 80257f0:	2204      	movs	r2, #4
 80257f2:	f102 0614 	add.w	r6, r2, #20
 80257f6:	429e      	cmp	r6, r3
 80257f8:	6841      	ldr	r1, [r0, #4]
 80257fa:	d93d      	bls.n	8025878 <_dtoa_r+0x318>
 80257fc:	4620      	mov	r0, r4
 80257fe:	f001 fa4b 	bl	8026c98 <_Balloc>
 8025802:	9001      	str	r0, [sp, #4]
 8025804:	2800      	cmp	r0, #0
 8025806:	d13b      	bne.n	8025880 <_dtoa_r+0x320>
 8025808:	4b11      	ldr	r3, [pc, #68]	; (8025850 <_dtoa_r+0x2f0>)
 802580a:	4602      	mov	r2, r0
 802580c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8025810:	e6c0      	b.n	8025594 <_dtoa_r+0x34>
 8025812:	2301      	movs	r3, #1
 8025814:	e7df      	b.n	80257d6 <_dtoa_r+0x276>
 8025816:	bf00      	nop
 8025818:	636f4361 	.word	0x636f4361
 802581c:	3fd287a7 	.word	0x3fd287a7
 8025820:	8b60c8b3 	.word	0x8b60c8b3
 8025824:	3fc68a28 	.word	0x3fc68a28
 8025828:	509f79fb 	.word	0x509f79fb
 802582c:	3fd34413 	.word	0x3fd34413
 8025830:	0802a146 	.word	0x0802a146
 8025834:	0802a15d 	.word	0x0802a15d
 8025838:	7ff00000 	.word	0x7ff00000
 802583c:	0802a142 	.word	0x0802a142
 8025840:	0802a139 	.word	0x0802a139
 8025844:	08029fc2 	.word	0x08029fc2
 8025848:	3ff80000 	.word	0x3ff80000
 802584c:	0802a330 	.word	0x0802a330
 8025850:	0802a1b8 	.word	0x0802a1b8
 8025854:	2501      	movs	r5, #1
 8025856:	2300      	movs	r3, #0
 8025858:	9306      	str	r3, [sp, #24]
 802585a:	9508      	str	r5, [sp, #32]
 802585c:	f04f 33ff 	mov.w	r3, #4294967295
 8025860:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8025864:	2200      	movs	r2, #0
 8025866:	2312      	movs	r3, #18
 8025868:	e7b0      	b.n	80257cc <_dtoa_r+0x26c>
 802586a:	2301      	movs	r3, #1
 802586c:	9308      	str	r3, [sp, #32]
 802586e:	e7f5      	b.n	802585c <_dtoa_r+0x2fc>
 8025870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025872:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8025876:	e7b8      	b.n	80257ea <_dtoa_r+0x28a>
 8025878:	3101      	adds	r1, #1
 802587a:	6041      	str	r1, [r0, #4]
 802587c:	0052      	lsls	r2, r2, #1
 802587e:	e7b8      	b.n	80257f2 <_dtoa_r+0x292>
 8025880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025882:	9a01      	ldr	r2, [sp, #4]
 8025884:	601a      	str	r2, [r3, #0]
 8025886:	9b03      	ldr	r3, [sp, #12]
 8025888:	2b0e      	cmp	r3, #14
 802588a:	f200 809d 	bhi.w	80259c8 <_dtoa_r+0x468>
 802588e:	2d00      	cmp	r5, #0
 8025890:	f000 809a 	beq.w	80259c8 <_dtoa_r+0x468>
 8025894:	9b00      	ldr	r3, [sp, #0]
 8025896:	2b00      	cmp	r3, #0
 8025898:	dd32      	ble.n	8025900 <_dtoa_r+0x3a0>
 802589a:	4ab7      	ldr	r2, [pc, #732]	; (8025b78 <_dtoa_r+0x618>)
 802589c:	f003 030f 	and.w	r3, r3, #15
 80258a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80258a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80258a8:	9b00      	ldr	r3, [sp, #0]
 80258aa:	05d8      	lsls	r0, r3, #23
 80258ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80258b0:	d516      	bpl.n	80258e0 <_dtoa_r+0x380>
 80258b2:	4bb2      	ldr	r3, [pc, #712]	; (8025b7c <_dtoa_r+0x61c>)
 80258b4:	ec51 0b19 	vmov	r0, r1, d9
 80258b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80258bc:	f7da ffd0 	bl	8000860 <__aeabi_ddiv>
 80258c0:	f007 070f 	and.w	r7, r7, #15
 80258c4:	4682      	mov	sl, r0
 80258c6:	468b      	mov	fp, r1
 80258c8:	2503      	movs	r5, #3
 80258ca:	4eac      	ldr	r6, [pc, #688]	; (8025b7c <_dtoa_r+0x61c>)
 80258cc:	b957      	cbnz	r7, 80258e4 <_dtoa_r+0x384>
 80258ce:	4642      	mov	r2, r8
 80258d0:	464b      	mov	r3, r9
 80258d2:	4650      	mov	r0, sl
 80258d4:	4659      	mov	r1, fp
 80258d6:	f7da ffc3 	bl	8000860 <__aeabi_ddiv>
 80258da:	4682      	mov	sl, r0
 80258dc:	468b      	mov	fp, r1
 80258de:	e028      	b.n	8025932 <_dtoa_r+0x3d2>
 80258e0:	2502      	movs	r5, #2
 80258e2:	e7f2      	b.n	80258ca <_dtoa_r+0x36a>
 80258e4:	07f9      	lsls	r1, r7, #31
 80258e6:	d508      	bpl.n	80258fa <_dtoa_r+0x39a>
 80258e8:	4640      	mov	r0, r8
 80258ea:	4649      	mov	r1, r9
 80258ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80258f0:	f7da fe8c 	bl	800060c <__aeabi_dmul>
 80258f4:	3501      	adds	r5, #1
 80258f6:	4680      	mov	r8, r0
 80258f8:	4689      	mov	r9, r1
 80258fa:	107f      	asrs	r7, r7, #1
 80258fc:	3608      	adds	r6, #8
 80258fe:	e7e5      	b.n	80258cc <_dtoa_r+0x36c>
 8025900:	f000 809b 	beq.w	8025a3a <_dtoa_r+0x4da>
 8025904:	9b00      	ldr	r3, [sp, #0]
 8025906:	4f9d      	ldr	r7, [pc, #628]	; (8025b7c <_dtoa_r+0x61c>)
 8025908:	425e      	negs	r6, r3
 802590a:	4b9b      	ldr	r3, [pc, #620]	; (8025b78 <_dtoa_r+0x618>)
 802590c:	f006 020f 	and.w	r2, r6, #15
 8025910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025918:	ec51 0b19 	vmov	r0, r1, d9
 802591c:	f7da fe76 	bl	800060c <__aeabi_dmul>
 8025920:	1136      	asrs	r6, r6, #4
 8025922:	4682      	mov	sl, r0
 8025924:	468b      	mov	fp, r1
 8025926:	2300      	movs	r3, #0
 8025928:	2502      	movs	r5, #2
 802592a:	2e00      	cmp	r6, #0
 802592c:	d17a      	bne.n	8025a24 <_dtoa_r+0x4c4>
 802592e:	2b00      	cmp	r3, #0
 8025930:	d1d3      	bne.n	80258da <_dtoa_r+0x37a>
 8025932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025934:	2b00      	cmp	r3, #0
 8025936:	f000 8082 	beq.w	8025a3e <_dtoa_r+0x4de>
 802593a:	4b91      	ldr	r3, [pc, #580]	; (8025b80 <_dtoa_r+0x620>)
 802593c:	2200      	movs	r2, #0
 802593e:	4650      	mov	r0, sl
 8025940:	4659      	mov	r1, fp
 8025942:	f7db f8d5 	bl	8000af0 <__aeabi_dcmplt>
 8025946:	2800      	cmp	r0, #0
 8025948:	d079      	beq.n	8025a3e <_dtoa_r+0x4de>
 802594a:	9b03      	ldr	r3, [sp, #12]
 802594c:	2b00      	cmp	r3, #0
 802594e:	d076      	beq.n	8025a3e <_dtoa_r+0x4de>
 8025950:	9b02      	ldr	r3, [sp, #8]
 8025952:	2b00      	cmp	r3, #0
 8025954:	dd36      	ble.n	80259c4 <_dtoa_r+0x464>
 8025956:	9b00      	ldr	r3, [sp, #0]
 8025958:	4650      	mov	r0, sl
 802595a:	4659      	mov	r1, fp
 802595c:	1e5f      	subs	r7, r3, #1
 802595e:	2200      	movs	r2, #0
 8025960:	4b88      	ldr	r3, [pc, #544]	; (8025b84 <_dtoa_r+0x624>)
 8025962:	f7da fe53 	bl	800060c <__aeabi_dmul>
 8025966:	9e02      	ldr	r6, [sp, #8]
 8025968:	4682      	mov	sl, r0
 802596a:	468b      	mov	fp, r1
 802596c:	3501      	adds	r5, #1
 802596e:	4628      	mov	r0, r5
 8025970:	f7da fde2 	bl	8000538 <__aeabi_i2d>
 8025974:	4652      	mov	r2, sl
 8025976:	465b      	mov	r3, fp
 8025978:	f7da fe48 	bl	800060c <__aeabi_dmul>
 802597c:	4b82      	ldr	r3, [pc, #520]	; (8025b88 <_dtoa_r+0x628>)
 802597e:	2200      	movs	r2, #0
 8025980:	f7da fc8e 	bl	80002a0 <__adddf3>
 8025984:	46d0      	mov	r8, sl
 8025986:	46d9      	mov	r9, fp
 8025988:	4682      	mov	sl, r0
 802598a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 802598e:	2e00      	cmp	r6, #0
 8025990:	d158      	bne.n	8025a44 <_dtoa_r+0x4e4>
 8025992:	4b7e      	ldr	r3, [pc, #504]	; (8025b8c <_dtoa_r+0x62c>)
 8025994:	2200      	movs	r2, #0
 8025996:	4640      	mov	r0, r8
 8025998:	4649      	mov	r1, r9
 802599a:	f7da fc7f 	bl	800029c <__aeabi_dsub>
 802599e:	4652      	mov	r2, sl
 80259a0:	465b      	mov	r3, fp
 80259a2:	4680      	mov	r8, r0
 80259a4:	4689      	mov	r9, r1
 80259a6:	f7db f8c1 	bl	8000b2c <__aeabi_dcmpgt>
 80259aa:	2800      	cmp	r0, #0
 80259ac:	f040 8295 	bne.w	8025eda <_dtoa_r+0x97a>
 80259b0:	4652      	mov	r2, sl
 80259b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80259b6:	4640      	mov	r0, r8
 80259b8:	4649      	mov	r1, r9
 80259ba:	f7db f899 	bl	8000af0 <__aeabi_dcmplt>
 80259be:	2800      	cmp	r0, #0
 80259c0:	f040 8289 	bne.w	8025ed6 <_dtoa_r+0x976>
 80259c4:	ec5b ab19 	vmov	sl, fp, d9
 80259c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80259ca:	2b00      	cmp	r3, #0
 80259cc:	f2c0 8148 	blt.w	8025c60 <_dtoa_r+0x700>
 80259d0:	9a00      	ldr	r2, [sp, #0]
 80259d2:	2a0e      	cmp	r2, #14
 80259d4:	f300 8144 	bgt.w	8025c60 <_dtoa_r+0x700>
 80259d8:	4b67      	ldr	r3, [pc, #412]	; (8025b78 <_dtoa_r+0x618>)
 80259da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80259de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80259e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80259e4:	2b00      	cmp	r3, #0
 80259e6:	f280 80d5 	bge.w	8025b94 <_dtoa_r+0x634>
 80259ea:	9b03      	ldr	r3, [sp, #12]
 80259ec:	2b00      	cmp	r3, #0
 80259ee:	f300 80d1 	bgt.w	8025b94 <_dtoa_r+0x634>
 80259f2:	f040 826f 	bne.w	8025ed4 <_dtoa_r+0x974>
 80259f6:	4b65      	ldr	r3, [pc, #404]	; (8025b8c <_dtoa_r+0x62c>)
 80259f8:	2200      	movs	r2, #0
 80259fa:	4640      	mov	r0, r8
 80259fc:	4649      	mov	r1, r9
 80259fe:	f7da fe05 	bl	800060c <__aeabi_dmul>
 8025a02:	4652      	mov	r2, sl
 8025a04:	465b      	mov	r3, fp
 8025a06:	f7db f887 	bl	8000b18 <__aeabi_dcmpge>
 8025a0a:	9e03      	ldr	r6, [sp, #12]
 8025a0c:	4637      	mov	r7, r6
 8025a0e:	2800      	cmp	r0, #0
 8025a10:	f040 8245 	bne.w	8025e9e <_dtoa_r+0x93e>
 8025a14:	9d01      	ldr	r5, [sp, #4]
 8025a16:	2331      	movs	r3, #49	; 0x31
 8025a18:	f805 3b01 	strb.w	r3, [r5], #1
 8025a1c:	9b00      	ldr	r3, [sp, #0]
 8025a1e:	3301      	adds	r3, #1
 8025a20:	9300      	str	r3, [sp, #0]
 8025a22:	e240      	b.n	8025ea6 <_dtoa_r+0x946>
 8025a24:	07f2      	lsls	r2, r6, #31
 8025a26:	d505      	bpl.n	8025a34 <_dtoa_r+0x4d4>
 8025a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025a2c:	f7da fdee 	bl	800060c <__aeabi_dmul>
 8025a30:	3501      	adds	r5, #1
 8025a32:	2301      	movs	r3, #1
 8025a34:	1076      	asrs	r6, r6, #1
 8025a36:	3708      	adds	r7, #8
 8025a38:	e777      	b.n	802592a <_dtoa_r+0x3ca>
 8025a3a:	2502      	movs	r5, #2
 8025a3c:	e779      	b.n	8025932 <_dtoa_r+0x3d2>
 8025a3e:	9f00      	ldr	r7, [sp, #0]
 8025a40:	9e03      	ldr	r6, [sp, #12]
 8025a42:	e794      	b.n	802596e <_dtoa_r+0x40e>
 8025a44:	9901      	ldr	r1, [sp, #4]
 8025a46:	4b4c      	ldr	r3, [pc, #304]	; (8025b78 <_dtoa_r+0x618>)
 8025a48:	4431      	add	r1, r6
 8025a4a:	910d      	str	r1, [sp, #52]	; 0x34
 8025a4c:	9908      	ldr	r1, [sp, #32]
 8025a4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8025a52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025a56:	2900      	cmp	r1, #0
 8025a58:	d043      	beq.n	8025ae2 <_dtoa_r+0x582>
 8025a5a:	494d      	ldr	r1, [pc, #308]	; (8025b90 <_dtoa_r+0x630>)
 8025a5c:	2000      	movs	r0, #0
 8025a5e:	f7da feff 	bl	8000860 <__aeabi_ddiv>
 8025a62:	4652      	mov	r2, sl
 8025a64:	465b      	mov	r3, fp
 8025a66:	f7da fc19 	bl	800029c <__aeabi_dsub>
 8025a6a:	9d01      	ldr	r5, [sp, #4]
 8025a6c:	4682      	mov	sl, r0
 8025a6e:	468b      	mov	fp, r1
 8025a70:	4649      	mov	r1, r9
 8025a72:	4640      	mov	r0, r8
 8025a74:	f7db f87a 	bl	8000b6c <__aeabi_d2iz>
 8025a78:	4606      	mov	r6, r0
 8025a7a:	f7da fd5d 	bl	8000538 <__aeabi_i2d>
 8025a7e:	4602      	mov	r2, r0
 8025a80:	460b      	mov	r3, r1
 8025a82:	4640      	mov	r0, r8
 8025a84:	4649      	mov	r1, r9
 8025a86:	f7da fc09 	bl	800029c <__aeabi_dsub>
 8025a8a:	3630      	adds	r6, #48	; 0x30
 8025a8c:	f805 6b01 	strb.w	r6, [r5], #1
 8025a90:	4652      	mov	r2, sl
 8025a92:	465b      	mov	r3, fp
 8025a94:	4680      	mov	r8, r0
 8025a96:	4689      	mov	r9, r1
 8025a98:	f7db f82a 	bl	8000af0 <__aeabi_dcmplt>
 8025a9c:	2800      	cmp	r0, #0
 8025a9e:	d163      	bne.n	8025b68 <_dtoa_r+0x608>
 8025aa0:	4642      	mov	r2, r8
 8025aa2:	464b      	mov	r3, r9
 8025aa4:	4936      	ldr	r1, [pc, #216]	; (8025b80 <_dtoa_r+0x620>)
 8025aa6:	2000      	movs	r0, #0
 8025aa8:	f7da fbf8 	bl	800029c <__aeabi_dsub>
 8025aac:	4652      	mov	r2, sl
 8025aae:	465b      	mov	r3, fp
 8025ab0:	f7db f81e 	bl	8000af0 <__aeabi_dcmplt>
 8025ab4:	2800      	cmp	r0, #0
 8025ab6:	f040 80b5 	bne.w	8025c24 <_dtoa_r+0x6c4>
 8025aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025abc:	429d      	cmp	r5, r3
 8025abe:	d081      	beq.n	80259c4 <_dtoa_r+0x464>
 8025ac0:	4b30      	ldr	r3, [pc, #192]	; (8025b84 <_dtoa_r+0x624>)
 8025ac2:	2200      	movs	r2, #0
 8025ac4:	4650      	mov	r0, sl
 8025ac6:	4659      	mov	r1, fp
 8025ac8:	f7da fda0 	bl	800060c <__aeabi_dmul>
 8025acc:	4b2d      	ldr	r3, [pc, #180]	; (8025b84 <_dtoa_r+0x624>)
 8025ace:	4682      	mov	sl, r0
 8025ad0:	468b      	mov	fp, r1
 8025ad2:	4640      	mov	r0, r8
 8025ad4:	4649      	mov	r1, r9
 8025ad6:	2200      	movs	r2, #0
 8025ad8:	f7da fd98 	bl	800060c <__aeabi_dmul>
 8025adc:	4680      	mov	r8, r0
 8025ade:	4689      	mov	r9, r1
 8025ae0:	e7c6      	b.n	8025a70 <_dtoa_r+0x510>
 8025ae2:	4650      	mov	r0, sl
 8025ae4:	4659      	mov	r1, fp
 8025ae6:	f7da fd91 	bl	800060c <__aeabi_dmul>
 8025aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025aec:	9d01      	ldr	r5, [sp, #4]
 8025aee:	930f      	str	r3, [sp, #60]	; 0x3c
 8025af0:	4682      	mov	sl, r0
 8025af2:	468b      	mov	fp, r1
 8025af4:	4649      	mov	r1, r9
 8025af6:	4640      	mov	r0, r8
 8025af8:	f7db f838 	bl	8000b6c <__aeabi_d2iz>
 8025afc:	4606      	mov	r6, r0
 8025afe:	f7da fd1b 	bl	8000538 <__aeabi_i2d>
 8025b02:	3630      	adds	r6, #48	; 0x30
 8025b04:	4602      	mov	r2, r0
 8025b06:	460b      	mov	r3, r1
 8025b08:	4640      	mov	r0, r8
 8025b0a:	4649      	mov	r1, r9
 8025b0c:	f7da fbc6 	bl	800029c <__aeabi_dsub>
 8025b10:	f805 6b01 	strb.w	r6, [r5], #1
 8025b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025b16:	429d      	cmp	r5, r3
 8025b18:	4680      	mov	r8, r0
 8025b1a:	4689      	mov	r9, r1
 8025b1c:	f04f 0200 	mov.w	r2, #0
 8025b20:	d124      	bne.n	8025b6c <_dtoa_r+0x60c>
 8025b22:	4b1b      	ldr	r3, [pc, #108]	; (8025b90 <_dtoa_r+0x630>)
 8025b24:	4650      	mov	r0, sl
 8025b26:	4659      	mov	r1, fp
 8025b28:	f7da fbba 	bl	80002a0 <__adddf3>
 8025b2c:	4602      	mov	r2, r0
 8025b2e:	460b      	mov	r3, r1
 8025b30:	4640      	mov	r0, r8
 8025b32:	4649      	mov	r1, r9
 8025b34:	f7da fffa 	bl	8000b2c <__aeabi_dcmpgt>
 8025b38:	2800      	cmp	r0, #0
 8025b3a:	d173      	bne.n	8025c24 <_dtoa_r+0x6c4>
 8025b3c:	4652      	mov	r2, sl
 8025b3e:	465b      	mov	r3, fp
 8025b40:	4913      	ldr	r1, [pc, #76]	; (8025b90 <_dtoa_r+0x630>)
 8025b42:	2000      	movs	r0, #0
 8025b44:	f7da fbaa 	bl	800029c <__aeabi_dsub>
 8025b48:	4602      	mov	r2, r0
 8025b4a:	460b      	mov	r3, r1
 8025b4c:	4640      	mov	r0, r8
 8025b4e:	4649      	mov	r1, r9
 8025b50:	f7da ffce 	bl	8000af0 <__aeabi_dcmplt>
 8025b54:	2800      	cmp	r0, #0
 8025b56:	f43f af35 	beq.w	80259c4 <_dtoa_r+0x464>
 8025b5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025b5c:	1e6b      	subs	r3, r5, #1
 8025b5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025b60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025b64:	2b30      	cmp	r3, #48	; 0x30
 8025b66:	d0f8      	beq.n	8025b5a <_dtoa_r+0x5fa>
 8025b68:	9700      	str	r7, [sp, #0]
 8025b6a:	e049      	b.n	8025c00 <_dtoa_r+0x6a0>
 8025b6c:	4b05      	ldr	r3, [pc, #20]	; (8025b84 <_dtoa_r+0x624>)
 8025b6e:	f7da fd4d 	bl	800060c <__aeabi_dmul>
 8025b72:	4680      	mov	r8, r0
 8025b74:	4689      	mov	r9, r1
 8025b76:	e7bd      	b.n	8025af4 <_dtoa_r+0x594>
 8025b78:	0802a330 	.word	0x0802a330
 8025b7c:	0802a308 	.word	0x0802a308
 8025b80:	3ff00000 	.word	0x3ff00000
 8025b84:	40240000 	.word	0x40240000
 8025b88:	401c0000 	.word	0x401c0000
 8025b8c:	40140000 	.word	0x40140000
 8025b90:	3fe00000 	.word	0x3fe00000
 8025b94:	9d01      	ldr	r5, [sp, #4]
 8025b96:	4656      	mov	r6, sl
 8025b98:	465f      	mov	r7, fp
 8025b9a:	4642      	mov	r2, r8
 8025b9c:	464b      	mov	r3, r9
 8025b9e:	4630      	mov	r0, r6
 8025ba0:	4639      	mov	r1, r7
 8025ba2:	f7da fe5d 	bl	8000860 <__aeabi_ddiv>
 8025ba6:	f7da ffe1 	bl	8000b6c <__aeabi_d2iz>
 8025baa:	4682      	mov	sl, r0
 8025bac:	f7da fcc4 	bl	8000538 <__aeabi_i2d>
 8025bb0:	4642      	mov	r2, r8
 8025bb2:	464b      	mov	r3, r9
 8025bb4:	f7da fd2a 	bl	800060c <__aeabi_dmul>
 8025bb8:	4602      	mov	r2, r0
 8025bba:	460b      	mov	r3, r1
 8025bbc:	4630      	mov	r0, r6
 8025bbe:	4639      	mov	r1, r7
 8025bc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8025bc4:	f7da fb6a 	bl	800029c <__aeabi_dsub>
 8025bc8:	f805 6b01 	strb.w	r6, [r5], #1
 8025bcc:	9e01      	ldr	r6, [sp, #4]
 8025bce:	9f03      	ldr	r7, [sp, #12]
 8025bd0:	1bae      	subs	r6, r5, r6
 8025bd2:	42b7      	cmp	r7, r6
 8025bd4:	4602      	mov	r2, r0
 8025bd6:	460b      	mov	r3, r1
 8025bd8:	d135      	bne.n	8025c46 <_dtoa_r+0x6e6>
 8025bda:	f7da fb61 	bl	80002a0 <__adddf3>
 8025bde:	4642      	mov	r2, r8
 8025be0:	464b      	mov	r3, r9
 8025be2:	4606      	mov	r6, r0
 8025be4:	460f      	mov	r7, r1
 8025be6:	f7da ffa1 	bl	8000b2c <__aeabi_dcmpgt>
 8025bea:	b9d0      	cbnz	r0, 8025c22 <_dtoa_r+0x6c2>
 8025bec:	4642      	mov	r2, r8
 8025bee:	464b      	mov	r3, r9
 8025bf0:	4630      	mov	r0, r6
 8025bf2:	4639      	mov	r1, r7
 8025bf4:	f7da ff72 	bl	8000adc <__aeabi_dcmpeq>
 8025bf8:	b110      	cbz	r0, 8025c00 <_dtoa_r+0x6a0>
 8025bfa:	f01a 0f01 	tst.w	sl, #1
 8025bfe:	d110      	bne.n	8025c22 <_dtoa_r+0x6c2>
 8025c00:	4620      	mov	r0, r4
 8025c02:	ee18 1a10 	vmov	r1, s16
 8025c06:	f001 f887 	bl	8026d18 <_Bfree>
 8025c0a:	2300      	movs	r3, #0
 8025c0c:	9800      	ldr	r0, [sp, #0]
 8025c0e:	702b      	strb	r3, [r5, #0]
 8025c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c12:	3001      	adds	r0, #1
 8025c14:	6018      	str	r0, [r3, #0]
 8025c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025c18:	2b00      	cmp	r3, #0
 8025c1a:	f43f acf1 	beq.w	8025600 <_dtoa_r+0xa0>
 8025c1e:	601d      	str	r5, [r3, #0]
 8025c20:	e4ee      	b.n	8025600 <_dtoa_r+0xa0>
 8025c22:	9f00      	ldr	r7, [sp, #0]
 8025c24:	462b      	mov	r3, r5
 8025c26:	461d      	mov	r5, r3
 8025c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025c2c:	2a39      	cmp	r2, #57	; 0x39
 8025c2e:	d106      	bne.n	8025c3e <_dtoa_r+0x6de>
 8025c30:	9a01      	ldr	r2, [sp, #4]
 8025c32:	429a      	cmp	r2, r3
 8025c34:	d1f7      	bne.n	8025c26 <_dtoa_r+0x6c6>
 8025c36:	9901      	ldr	r1, [sp, #4]
 8025c38:	2230      	movs	r2, #48	; 0x30
 8025c3a:	3701      	adds	r7, #1
 8025c3c:	700a      	strb	r2, [r1, #0]
 8025c3e:	781a      	ldrb	r2, [r3, #0]
 8025c40:	3201      	adds	r2, #1
 8025c42:	701a      	strb	r2, [r3, #0]
 8025c44:	e790      	b.n	8025b68 <_dtoa_r+0x608>
 8025c46:	4ba6      	ldr	r3, [pc, #664]	; (8025ee0 <_dtoa_r+0x980>)
 8025c48:	2200      	movs	r2, #0
 8025c4a:	f7da fcdf 	bl	800060c <__aeabi_dmul>
 8025c4e:	2200      	movs	r2, #0
 8025c50:	2300      	movs	r3, #0
 8025c52:	4606      	mov	r6, r0
 8025c54:	460f      	mov	r7, r1
 8025c56:	f7da ff41 	bl	8000adc <__aeabi_dcmpeq>
 8025c5a:	2800      	cmp	r0, #0
 8025c5c:	d09d      	beq.n	8025b9a <_dtoa_r+0x63a>
 8025c5e:	e7cf      	b.n	8025c00 <_dtoa_r+0x6a0>
 8025c60:	9a08      	ldr	r2, [sp, #32]
 8025c62:	2a00      	cmp	r2, #0
 8025c64:	f000 80d7 	beq.w	8025e16 <_dtoa_r+0x8b6>
 8025c68:	9a06      	ldr	r2, [sp, #24]
 8025c6a:	2a01      	cmp	r2, #1
 8025c6c:	f300 80ba 	bgt.w	8025de4 <_dtoa_r+0x884>
 8025c70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025c72:	2a00      	cmp	r2, #0
 8025c74:	f000 80b2 	beq.w	8025ddc <_dtoa_r+0x87c>
 8025c78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8025c7c:	9e07      	ldr	r6, [sp, #28]
 8025c7e:	9d04      	ldr	r5, [sp, #16]
 8025c80:	9a04      	ldr	r2, [sp, #16]
 8025c82:	441a      	add	r2, r3
 8025c84:	9204      	str	r2, [sp, #16]
 8025c86:	9a05      	ldr	r2, [sp, #20]
 8025c88:	2101      	movs	r1, #1
 8025c8a:	441a      	add	r2, r3
 8025c8c:	4620      	mov	r0, r4
 8025c8e:	9205      	str	r2, [sp, #20]
 8025c90:	f001 f944 	bl	8026f1c <__i2b>
 8025c94:	4607      	mov	r7, r0
 8025c96:	2d00      	cmp	r5, #0
 8025c98:	dd0c      	ble.n	8025cb4 <_dtoa_r+0x754>
 8025c9a:	9b05      	ldr	r3, [sp, #20]
 8025c9c:	2b00      	cmp	r3, #0
 8025c9e:	dd09      	ble.n	8025cb4 <_dtoa_r+0x754>
 8025ca0:	42ab      	cmp	r3, r5
 8025ca2:	9a04      	ldr	r2, [sp, #16]
 8025ca4:	bfa8      	it	ge
 8025ca6:	462b      	movge	r3, r5
 8025ca8:	1ad2      	subs	r2, r2, r3
 8025caa:	9204      	str	r2, [sp, #16]
 8025cac:	9a05      	ldr	r2, [sp, #20]
 8025cae:	1aed      	subs	r5, r5, r3
 8025cb0:	1ad3      	subs	r3, r2, r3
 8025cb2:	9305      	str	r3, [sp, #20]
 8025cb4:	9b07      	ldr	r3, [sp, #28]
 8025cb6:	b31b      	cbz	r3, 8025d00 <_dtoa_r+0x7a0>
 8025cb8:	9b08      	ldr	r3, [sp, #32]
 8025cba:	2b00      	cmp	r3, #0
 8025cbc:	f000 80af 	beq.w	8025e1e <_dtoa_r+0x8be>
 8025cc0:	2e00      	cmp	r6, #0
 8025cc2:	dd13      	ble.n	8025cec <_dtoa_r+0x78c>
 8025cc4:	4639      	mov	r1, r7
 8025cc6:	4632      	mov	r2, r6
 8025cc8:	4620      	mov	r0, r4
 8025cca:	f001 f9e7 	bl	802709c <__pow5mult>
 8025cce:	ee18 2a10 	vmov	r2, s16
 8025cd2:	4601      	mov	r1, r0
 8025cd4:	4607      	mov	r7, r0
 8025cd6:	4620      	mov	r0, r4
 8025cd8:	f001 f936 	bl	8026f48 <__multiply>
 8025cdc:	ee18 1a10 	vmov	r1, s16
 8025ce0:	4680      	mov	r8, r0
 8025ce2:	4620      	mov	r0, r4
 8025ce4:	f001 f818 	bl	8026d18 <_Bfree>
 8025ce8:	ee08 8a10 	vmov	s16, r8
 8025cec:	9b07      	ldr	r3, [sp, #28]
 8025cee:	1b9a      	subs	r2, r3, r6
 8025cf0:	d006      	beq.n	8025d00 <_dtoa_r+0x7a0>
 8025cf2:	ee18 1a10 	vmov	r1, s16
 8025cf6:	4620      	mov	r0, r4
 8025cf8:	f001 f9d0 	bl	802709c <__pow5mult>
 8025cfc:	ee08 0a10 	vmov	s16, r0
 8025d00:	2101      	movs	r1, #1
 8025d02:	4620      	mov	r0, r4
 8025d04:	f001 f90a 	bl	8026f1c <__i2b>
 8025d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025d0a:	2b00      	cmp	r3, #0
 8025d0c:	4606      	mov	r6, r0
 8025d0e:	f340 8088 	ble.w	8025e22 <_dtoa_r+0x8c2>
 8025d12:	461a      	mov	r2, r3
 8025d14:	4601      	mov	r1, r0
 8025d16:	4620      	mov	r0, r4
 8025d18:	f001 f9c0 	bl	802709c <__pow5mult>
 8025d1c:	9b06      	ldr	r3, [sp, #24]
 8025d1e:	2b01      	cmp	r3, #1
 8025d20:	4606      	mov	r6, r0
 8025d22:	f340 8081 	ble.w	8025e28 <_dtoa_r+0x8c8>
 8025d26:	f04f 0800 	mov.w	r8, #0
 8025d2a:	6933      	ldr	r3, [r6, #16]
 8025d2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8025d30:	6918      	ldr	r0, [r3, #16]
 8025d32:	f001 f8a3 	bl	8026e7c <__hi0bits>
 8025d36:	f1c0 0020 	rsb	r0, r0, #32
 8025d3a:	9b05      	ldr	r3, [sp, #20]
 8025d3c:	4418      	add	r0, r3
 8025d3e:	f010 001f 	ands.w	r0, r0, #31
 8025d42:	f000 8092 	beq.w	8025e6a <_dtoa_r+0x90a>
 8025d46:	f1c0 0320 	rsb	r3, r0, #32
 8025d4a:	2b04      	cmp	r3, #4
 8025d4c:	f340 808a 	ble.w	8025e64 <_dtoa_r+0x904>
 8025d50:	f1c0 001c 	rsb	r0, r0, #28
 8025d54:	9b04      	ldr	r3, [sp, #16]
 8025d56:	4403      	add	r3, r0
 8025d58:	9304      	str	r3, [sp, #16]
 8025d5a:	9b05      	ldr	r3, [sp, #20]
 8025d5c:	4403      	add	r3, r0
 8025d5e:	4405      	add	r5, r0
 8025d60:	9305      	str	r3, [sp, #20]
 8025d62:	9b04      	ldr	r3, [sp, #16]
 8025d64:	2b00      	cmp	r3, #0
 8025d66:	dd07      	ble.n	8025d78 <_dtoa_r+0x818>
 8025d68:	ee18 1a10 	vmov	r1, s16
 8025d6c:	461a      	mov	r2, r3
 8025d6e:	4620      	mov	r0, r4
 8025d70:	f001 f9ee 	bl	8027150 <__lshift>
 8025d74:	ee08 0a10 	vmov	s16, r0
 8025d78:	9b05      	ldr	r3, [sp, #20]
 8025d7a:	2b00      	cmp	r3, #0
 8025d7c:	dd05      	ble.n	8025d8a <_dtoa_r+0x82a>
 8025d7e:	4631      	mov	r1, r6
 8025d80:	461a      	mov	r2, r3
 8025d82:	4620      	mov	r0, r4
 8025d84:	f001 f9e4 	bl	8027150 <__lshift>
 8025d88:	4606      	mov	r6, r0
 8025d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025d8c:	2b00      	cmp	r3, #0
 8025d8e:	d06e      	beq.n	8025e6e <_dtoa_r+0x90e>
 8025d90:	ee18 0a10 	vmov	r0, s16
 8025d94:	4631      	mov	r1, r6
 8025d96:	f001 fa4b 	bl	8027230 <__mcmp>
 8025d9a:	2800      	cmp	r0, #0
 8025d9c:	da67      	bge.n	8025e6e <_dtoa_r+0x90e>
 8025d9e:	9b00      	ldr	r3, [sp, #0]
 8025da0:	3b01      	subs	r3, #1
 8025da2:	ee18 1a10 	vmov	r1, s16
 8025da6:	9300      	str	r3, [sp, #0]
 8025da8:	220a      	movs	r2, #10
 8025daa:	2300      	movs	r3, #0
 8025dac:	4620      	mov	r0, r4
 8025dae:	f000 ffd5 	bl	8026d5c <__multadd>
 8025db2:	9b08      	ldr	r3, [sp, #32]
 8025db4:	ee08 0a10 	vmov	s16, r0
 8025db8:	2b00      	cmp	r3, #0
 8025dba:	f000 81b1 	beq.w	8026120 <_dtoa_r+0xbc0>
 8025dbe:	2300      	movs	r3, #0
 8025dc0:	4639      	mov	r1, r7
 8025dc2:	220a      	movs	r2, #10
 8025dc4:	4620      	mov	r0, r4
 8025dc6:	f000 ffc9 	bl	8026d5c <__multadd>
 8025dca:	9b02      	ldr	r3, [sp, #8]
 8025dcc:	2b00      	cmp	r3, #0
 8025dce:	4607      	mov	r7, r0
 8025dd0:	f300 808e 	bgt.w	8025ef0 <_dtoa_r+0x990>
 8025dd4:	9b06      	ldr	r3, [sp, #24]
 8025dd6:	2b02      	cmp	r3, #2
 8025dd8:	dc51      	bgt.n	8025e7e <_dtoa_r+0x91e>
 8025dda:	e089      	b.n	8025ef0 <_dtoa_r+0x990>
 8025ddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025dde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8025de2:	e74b      	b.n	8025c7c <_dtoa_r+0x71c>
 8025de4:	9b03      	ldr	r3, [sp, #12]
 8025de6:	1e5e      	subs	r6, r3, #1
 8025de8:	9b07      	ldr	r3, [sp, #28]
 8025dea:	42b3      	cmp	r3, r6
 8025dec:	bfbf      	itttt	lt
 8025dee:	9b07      	ldrlt	r3, [sp, #28]
 8025df0:	9607      	strlt	r6, [sp, #28]
 8025df2:	1af2      	sublt	r2, r6, r3
 8025df4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8025df6:	bfb6      	itet	lt
 8025df8:	189b      	addlt	r3, r3, r2
 8025dfa:	1b9e      	subge	r6, r3, r6
 8025dfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8025dfe:	9b03      	ldr	r3, [sp, #12]
 8025e00:	bfb8      	it	lt
 8025e02:	2600      	movlt	r6, #0
 8025e04:	2b00      	cmp	r3, #0
 8025e06:	bfb7      	itett	lt
 8025e08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8025e0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8025e10:	1a9d      	sublt	r5, r3, r2
 8025e12:	2300      	movlt	r3, #0
 8025e14:	e734      	b.n	8025c80 <_dtoa_r+0x720>
 8025e16:	9e07      	ldr	r6, [sp, #28]
 8025e18:	9d04      	ldr	r5, [sp, #16]
 8025e1a:	9f08      	ldr	r7, [sp, #32]
 8025e1c:	e73b      	b.n	8025c96 <_dtoa_r+0x736>
 8025e1e:	9a07      	ldr	r2, [sp, #28]
 8025e20:	e767      	b.n	8025cf2 <_dtoa_r+0x792>
 8025e22:	9b06      	ldr	r3, [sp, #24]
 8025e24:	2b01      	cmp	r3, #1
 8025e26:	dc18      	bgt.n	8025e5a <_dtoa_r+0x8fa>
 8025e28:	f1ba 0f00 	cmp.w	sl, #0
 8025e2c:	d115      	bne.n	8025e5a <_dtoa_r+0x8fa>
 8025e2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8025e32:	b993      	cbnz	r3, 8025e5a <_dtoa_r+0x8fa>
 8025e34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8025e38:	0d1b      	lsrs	r3, r3, #20
 8025e3a:	051b      	lsls	r3, r3, #20
 8025e3c:	b183      	cbz	r3, 8025e60 <_dtoa_r+0x900>
 8025e3e:	9b04      	ldr	r3, [sp, #16]
 8025e40:	3301      	adds	r3, #1
 8025e42:	9304      	str	r3, [sp, #16]
 8025e44:	9b05      	ldr	r3, [sp, #20]
 8025e46:	3301      	adds	r3, #1
 8025e48:	9305      	str	r3, [sp, #20]
 8025e4a:	f04f 0801 	mov.w	r8, #1
 8025e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025e50:	2b00      	cmp	r3, #0
 8025e52:	f47f af6a 	bne.w	8025d2a <_dtoa_r+0x7ca>
 8025e56:	2001      	movs	r0, #1
 8025e58:	e76f      	b.n	8025d3a <_dtoa_r+0x7da>
 8025e5a:	f04f 0800 	mov.w	r8, #0
 8025e5e:	e7f6      	b.n	8025e4e <_dtoa_r+0x8ee>
 8025e60:	4698      	mov	r8, r3
 8025e62:	e7f4      	b.n	8025e4e <_dtoa_r+0x8ee>
 8025e64:	f43f af7d 	beq.w	8025d62 <_dtoa_r+0x802>
 8025e68:	4618      	mov	r0, r3
 8025e6a:	301c      	adds	r0, #28
 8025e6c:	e772      	b.n	8025d54 <_dtoa_r+0x7f4>
 8025e6e:	9b03      	ldr	r3, [sp, #12]
 8025e70:	2b00      	cmp	r3, #0
 8025e72:	dc37      	bgt.n	8025ee4 <_dtoa_r+0x984>
 8025e74:	9b06      	ldr	r3, [sp, #24]
 8025e76:	2b02      	cmp	r3, #2
 8025e78:	dd34      	ble.n	8025ee4 <_dtoa_r+0x984>
 8025e7a:	9b03      	ldr	r3, [sp, #12]
 8025e7c:	9302      	str	r3, [sp, #8]
 8025e7e:	9b02      	ldr	r3, [sp, #8]
 8025e80:	b96b      	cbnz	r3, 8025e9e <_dtoa_r+0x93e>
 8025e82:	4631      	mov	r1, r6
 8025e84:	2205      	movs	r2, #5
 8025e86:	4620      	mov	r0, r4
 8025e88:	f000 ff68 	bl	8026d5c <__multadd>
 8025e8c:	4601      	mov	r1, r0
 8025e8e:	4606      	mov	r6, r0
 8025e90:	ee18 0a10 	vmov	r0, s16
 8025e94:	f001 f9cc 	bl	8027230 <__mcmp>
 8025e98:	2800      	cmp	r0, #0
 8025e9a:	f73f adbb 	bgt.w	8025a14 <_dtoa_r+0x4b4>
 8025e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ea0:	9d01      	ldr	r5, [sp, #4]
 8025ea2:	43db      	mvns	r3, r3
 8025ea4:	9300      	str	r3, [sp, #0]
 8025ea6:	f04f 0800 	mov.w	r8, #0
 8025eaa:	4631      	mov	r1, r6
 8025eac:	4620      	mov	r0, r4
 8025eae:	f000 ff33 	bl	8026d18 <_Bfree>
 8025eb2:	2f00      	cmp	r7, #0
 8025eb4:	f43f aea4 	beq.w	8025c00 <_dtoa_r+0x6a0>
 8025eb8:	f1b8 0f00 	cmp.w	r8, #0
 8025ebc:	d005      	beq.n	8025eca <_dtoa_r+0x96a>
 8025ebe:	45b8      	cmp	r8, r7
 8025ec0:	d003      	beq.n	8025eca <_dtoa_r+0x96a>
 8025ec2:	4641      	mov	r1, r8
 8025ec4:	4620      	mov	r0, r4
 8025ec6:	f000 ff27 	bl	8026d18 <_Bfree>
 8025eca:	4639      	mov	r1, r7
 8025ecc:	4620      	mov	r0, r4
 8025ece:	f000 ff23 	bl	8026d18 <_Bfree>
 8025ed2:	e695      	b.n	8025c00 <_dtoa_r+0x6a0>
 8025ed4:	2600      	movs	r6, #0
 8025ed6:	4637      	mov	r7, r6
 8025ed8:	e7e1      	b.n	8025e9e <_dtoa_r+0x93e>
 8025eda:	9700      	str	r7, [sp, #0]
 8025edc:	4637      	mov	r7, r6
 8025ede:	e599      	b.n	8025a14 <_dtoa_r+0x4b4>
 8025ee0:	40240000 	.word	0x40240000
 8025ee4:	9b08      	ldr	r3, [sp, #32]
 8025ee6:	2b00      	cmp	r3, #0
 8025ee8:	f000 80ca 	beq.w	8026080 <_dtoa_r+0xb20>
 8025eec:	9b03      	ldr	r3, [sp, #12]
 8025eee:	9302      	str	r3, [sp, #8]
 8025ef0:	2d00      	cmp	r5, #0
 8025ef2:	dd05      	ble.n	8025f00 <_dtoa_r+0x9a0>
 8025ef4:	4639      	mov	r1, r7
 8025ef6:	462a      	mov	r2, r5
 8025ef8:	4620      	mov	r0, r4
 8025efa:	f001 f929 	bl	8027150 <__lshift>
 8025efe:	4607      	mov	r7, r0
 8025f00:	f1b8 0f00 	cmp.w	r8, #0
 8025f04:	d05b      	beq.n	8025fbe <_dtoa_r+0xa5e>
 8025f06:	6879      	ldr	r1, [r7, #4]
 8025f08:	4620      	mov	r0, r4
 8025f0a:	f000 fec5 	bl	8026c98 <_Balloc>
 8025f0e:	4605      	mov	r5, r0
 8025f10:	b928      	cbnz	r0, 8025f1e <_dtoa_r+0x9be>
 8025f12:	4b87      	ldr	r3, [pc, #540]	; (8026130 <_dtoa_r+0xbd0>)
 8025f14:	4602      	mov	r2, r0
 8025f16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8025f1a:	f7ff bb3b 	b.w	8025594 <_dtoa_r+0x34>
 8025f1e:	693a      	ldr	r2, [r7, #16]
 8025f20:	3202      	adds	r2, #2
 8025f22:	0092      	lsls	r2, r2, #2
 8025f24:	f107 010c 	add.w	r1, r7, #12
 8025f28:	300c      	adds	r0, #12
 8025f2a:	f7fd fc29 	bl	8023780 <memcpy>
 8025f2e:	2201      	movs	r2, #1
 8025f30:	4629      	mov	r1, r5
 8025f32:	4620      	mov	r0, r4
 8025f34:	f001 f90c 	bl	8027150 <__lshift>
 8025f38:	9b01      	ldr	r3, [sp, #4]
 8025f3a:	f103 0901 	add.w	r9, r3, #1
 8025f3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8025f42:	4413      	add	r3, r2
 8025f44:	9305      	str	r3, [sp, #20]
 8025f46:	f00a 0301 	and.w	r3, sl, #1
 8025f4a:	46b8      	mov	r8, r7
 8025f4c:	9304      	str	r3, [sp, #16]
 8025f4e:	4607      	mov	r7, r0
 8025f50:	4631      	mov	r1, r6
 8025f52:	ee18 0a10 	vmov	r0, s16
 8025f56:	f7ff fa75 	bl	8025444 <quorem>
 8025f5a:	4641      	mov	r1, r8
 8025f5c:	9002      	str	r0, [sp, #8]
 8025f5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8025f62:	ee18 0a10 	vmov	r0, s16
 8025f66:	f001 f963 	bl	8027230 <__mcmp>
 8025f6a:	463a      	mov	r2, r7
 8025f6c:	9003      	str	r0, [sp, #12]
 8025f6e:	4631      	mov	r1, r6
 8025f70:	4620      	mov	r0, r4
 8025f72:	f001 f979 	bl	8027268 <__mdiff>
 8025f76:	68c2      	ldr	r2, [r0, #12]
 8025f78:	f109 3bff 	add.w	fp, r9, #4294967295
 8025f7c:	4605      	mov	r5, r0
 8025f7e:	bb02      	cbnz	r2, 8025fc2 <_dtoa_r+0xa62>
 8025f80:	4601      	mov	r1, r0
 8025f82:	ee18 0a10 	vmov	r0, s16
 8025f86:	f001 f953 	bl	8027230 <__mcmp>
 8025f8a:	4602      	mov	r2, r0
 8025f8c:	4629      	mov	r1, r5
 8025f8e:	4620      	mov	r0, r4
 8025f90:	9207      	str	r2, [sp, #28]
 8025f92:	f000 fec1 	bl	8026d18 <_Bfree>
 8025f96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8025f9a:	ea43 0102 	orr.w	r1, r3, r2
 8025f9e:	9b04      	ldr	r3, [sp, #16]
 8025fa0:	430b      	orrs	r3, r1
 8025fa2:	464d      	mov	r5, r9
 8025fa4:	d10f      	bne.n	8025fc6 <_dtoa_r+0xa66>
 8025fa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8025faa:	d02a      	beq.n	8026002 <_dtoa_r+0xaa2>
 8025fac:	9b03      	ldr	r3, [sp, #12]
 8025fae:	2b00      	cmp	r3, #0
 8025fb0:	dd02      	ble.n	8025fb8 <_dtoa_r+0xa58>
 8025fb2:	9b02      	ldr	r3, [sp, #8]
 8025fb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8025fb8:	f88b a000 	strb.w	sl, [fp]
 8025fbc:	e775      	b.n	8025eaa <_dtoa_r+0x94a>
 8025fbe:	4638      	mov	r0, r7
 8025fc0:	e7ba      	b.n	8025f38 <_dtoa_r+0x9d8>
 8025fc2:	2201      	movs	r2, #1
 8025fc4:	e7e2      	b.n	8025f8c <_dtoa_r+0xa2c>
 8025fc6:	9b03      	ldr	r3, [sp, #12]
 8025fc8:	2b00      	cmp	r3, #0
 8025fca:	db04      	blt.n	8025fd6 <_dtoa_r+0xa76>
 8025fcc:	9906      	ldr	r1, [sp, #24]
 8025fce:	430b      	orrs	r3, r1
 8025fd0:	9904      	ldr	r1, [sp, #16]
 8025fd2:	430b      	orrs	r3, r1
 8025fd4:	d122      	bne.n	802601c <_dtoa_r+0xabc>
 8025fd6:	2a00      	cmp	r2, #0
 8025fd8:	ddee      	ble.n	8025fb8 <_dtoa_r+0xa58>
 8025fda:	ee18 1a10 	vmov	r1, s16
 8025fde:	2201      	movs	r2, #1
 8025fe0:	4620      	mov	r0, r4
 8025fe2:	f001 f8b5 	bl	8027150 <__lshift>
 8025fe6:	4631      	mov	r1, r6
 8025fe8:	ee08 0a10 	vmov	s16, r0
 8025fec:	f001 f920 	bl	8027230 <__mcmp>
 8025ff0:	2800      	cmp	r0, #0
 8025ff2:	dc03      	bgt.n	8025ffc <_dtoa_r+0xa9c>
 8025ff4:	d1e0      	bne.n	8025fb8 <_dtoa_r+0xa58>
 8025ff6:	f01a 0f01 	tst.w	sl, #1
 8025ffa:	d0dd      	beq.n	8025fb8 <_dtoa_r+0xa58>
 8025ffc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8026000:	d1d7      	bne.n	8025fb2 <_dtoa_r+0xa52>
 8026002:	2339      	movs	r3, #57	; 0x39
 8026004:	f88b 3000 	strb.w	r3, [fp]
 8026008:	462b      	mov	r3, r5
 802600a:	461d      	mov	r5, r3
 802600c:	3b01      	subs	r3, #1
 802600e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8026012:	2a39      	cmp	r2, #57	; 0x39
 8026014:	d071      	beq.n	80260fa <_dtoa_r+0xb9a>
 8026016:	3201      	adds	r2, #1
 8026018:	701a      	strb	r2, [r3, #0]
 802601a:	e746      	b.n	8025eaa <_dtoa_r+0x94a>
 802601c:	2a00      	cmp	r2, #0
 802601e:	dd07      	ble.n	8026030 <_dtoa_r+0xad0>
 8026020:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8026024:	d0ed      	beq.n	8026002 <_dtoa_r+0xaa2>
 8026026:	f10a 0301 	add.w	r3, sl, #1
 802602a:	f88b 3000 	strb.w	r3, [fp]
 802602e:	e73c      	b.n	8025eaa <_dtoa_r+0x94a>
 8026030:	9b05      	ldr	r3, [sp, #20]
 8026032:	f809 ac01 	strb.w	sl, [r9, #-1]
 8026036:	4599      	cmp	r9, r3
 8026038:	d047      	beq.n	80260ca <_dtoa_r+0xb6a>
 802603a:	ee18 1a10 	vmov	r1, s16
 802603e:	2300      	movs	r3, #0
 8026040:	220a      	movs	r2, #10
 8026042:	4620      	mov	r0, r4
 8026044:	f000 fe8a 	bl	8026d5c <__multadd>
 8026048:	45b8      	cmp	r8, r7
 802604a:	ee08 0a10 	vmov	s16, r0
 802604e:	f04f 0300 	mov.w	r3, #0
 8026052:	f04f 020a 	mov.w	r2, #10
 8026056:	4641      	mov	r1, r8
 8026058:	4620      	mov	r0, r4
 802605a:	d106      	bne.n	802606a <_dtoa_r+0xb0a>
 802605c:	f000 fe7e 	bl	8026d5c <__multadd>
 8026060:	4680      	mov	r8, r0
 8026062:	4607      	mov	r7, r0
 8026064:	f109 0901 	add.w	r9, r9, #1
 8026068:	e772      	b.n	8025f50 <_dtoa_r+0x9f0>
 802606a:	f000 fe77 	bl	8026d5c <__multadd>
 802606e:	4639      	mov	r1, r7
 8026070:	4680      	mov	r8, r0
 8026072:	2300      	movs	r3, #0
 8026074:	220a      	movs	r2, #10
 8026076:	4620      	mov	r0, r4
 8026078:	f000 fe70 	bl	8026d5c <__multadd>
 802607c:	4607      	mov	r7, r0
 802607e:	e7f1      	b.n	8026064 <_dtoa_r+0xb04>
 8026080:	9b03      	ldr	r3, [sp, #12]
 8026082:	9302      	str	r3, [sp, #8]
 8026084:	9d01      	ldr	r5, [sp, #4]
 8026086:	ee18 0a10 	vmov	r0, s16
 802608a:	4631      	mov	r1, r6
 802608c:	f7ff f9da 	bl	8025444 <quorem>
 8026090:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8026094:	9b01      	ldr	r3, [sp, #4]
 8026096:	f805 ab01 	strb.w	sl, [r5], #1
 802609a:	1aea      	subs	r2, r5, r3
 802609c:	9b02      	ldr	r3, [sp, #8]
 802609e:	4293      	cmp	r3, r2
 80260a0:	dd09      	ble.n	80260b6 <_dtoa_r+0xb56>
 80260a2:	ee18 1a10 	vmov	r1, s16
 80260a6:	2300      	movs	r3, #0
 80260a8:	220a      	movs	r2, #10
 80260aa:	4620      	mov	r0, r4
 80260ac:	f000 fe56 	bl	8026d5c <__multadd>
 80260b0:	ee08 0a10 	vmov	s16, r0
 80260b4:	e7e7      	b.n	8026086 <_dtoa_r+0xb26>
 80260b6:	9b02      	ldr	r3, [sp, #8]
 80260b8:	2b00      	cmp	r3, #0
 80260ba:	bfc8      	it	gt
 80260bc:	461d      	movgt	r5, r3
 80260be:	9b01      	ldr	r3, [sp, #4]
 80260c0:	bfd8      	it	le
 80260c2:	2501      	movle	r5, #1
 80260c4:	441d      	add	r5, r3
 80260c6:	f04f 0800 	mov.w	r8, #0
 80260ca:	ee18 1a10 	vmov	r1, s16
 80260ce:	2201      	movs	r2, #1
 80260d0:	4620      	mov	r0, r4
 80260d2:	f001 f83d 	bl	8027150 <__lshift>
 80260d6:	4631      	mov	r1, r6
 80260d8:	ee08 0a10 	vmov	s16, r0
 80260dc:	f001 f8a8 	bl	8027230 <__mcmp>
 80260e0:	2800      	cmp	r0, #0
 80260e2:	dc91      	bgt.n	8026008 <_dtoa_r+0xaa8>
 80260e4:	d102      	bne.n	80260ec <_dtoa_r+0xb8c>
 80260e6:	f01a 0f01 	tst.w	sl, #1
 80260ea:	d18d      	bne.n	8026008 <_dtoa_r+0xaa8>
 80260ec:	462b      	mov	r3, r5
 80260ee:	461d      	mov	r5, r3
 80260f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80260f4:	2a30      	cmp	r2, #48	; 0x30
 80260f6:	d0fa      	beq.n	80260ee <_dtoa_r+0xb8e>
 80260f8:	e6d7      	b.n	8025eaa <_dtoa_r+0x94a>
 80260fa:	9a01      	ldr	r2, [sp, #4]
 80260fc:	429a      	cmp	r2, r3
 80260fe:	d184      	bne.n	802600a <_dtoa_r+0xaaa>
 8026100:	9b00      	ldr	r3, [sp, #0]
 8026102:	3301      	adds	r3, #1
 8026104:	9300      	str	r3, [sp, #0]
 8026106:	2331      	movs	r3, #49	; 0x31
 8026108:	7013      	strb	r3, [r2, #0]
 802610a:	e6ce      	b.n	8025eaa <_dtoa_r+0x94a>
 802610c:	4b09      	ldr	r3, [pc, #36]	; (8026134 <_dtoa_r+0xbd4>)
 802610e:	f7ff ba95 	b.w	802563c <_dtoa_r+0xdc>
 8026112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026114:	2b00      	cmp	r3, #0
 8026116:	f47f aa6e 	bne.w	80255f6 <_dtoa_r+0x96>
 802611a:	4b07      	ldr	r3, [pc, #28]	; (8026138 <_dtoa_r+0xbd8>)
 802611c:	f7ff ba8e 	b.w	802563c <_dtoa_r+0xdc>
 8026120:	9b02      	ldr	r3, [sp, #8]
 8026122:	2b00      	cmp	r3, #0
 8026124:	dcae      	bgt.n	8026084 <_dtoa_r+0xb24>
 8026126:	9b06      	ldr	r3, [sp, #24]
 8026128:	2b02      	cmp	r3, #2
 802612a:	f73f aea8 	bgt.w	8025e7e <_dtoa_r+0x91e>
 802612e:	e7a9      	b.n	8026084 <_dtoa_r+0xb24>
 8026130:	0802a1b8 	.word	0x0802a1b8
 8026134:	08029fc1 	.word	0x08029fc1
 8026138:	0802a139 	.word	0x0802a139

0802613c <__sflush_r>:
 802613c:	898a      	ldrh	r2, [r1, #12]
 802613e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026142:	4605      	mov	r5, r0
 8026144:	0710      	lsls	r0, r2, #28
 8026146:	460c      	mov	r4, r1
 8026148:	d458      	bmi.n	80261fc <__sflush_r+0xc0>
 802614a:	684b      	ldr	r3, [r1, #4]
 802614c:	2b00      	cmp	r3, #0
 802614e:	dc05      	bgt.n	802615c <__sflush_r+0x20>
 8026150:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026152:	2b00      	cmp	r3, #0
 8026154:	dc02      	bgt.n	802615c <__sflush_r+0x20>
 8026156:	2000      	movs	r0, #0
 8026158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802615c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802615e:	2e00      	cmp	r6, #0
 8026160:	d0f9      	beq.n	8026156 <__sflush_r+0x1a>
 8026162:	2300      	movs	r3, #0
 8026164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026168:	682f      	ldr	r7, [r5, #0]
 802616a:	602b      	str	r3, [r5, #0]
 802616c:	d032      	beq.n	80261d4 <__sflush_r+0x98>
 802616e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026170:	89a3      	ldrh	r3, [r4, #12]
 8026172:	075a      	lsls	r2, r3, #29
 8026174:	d505      	bpl.n	8026182 <__sflush_r+0x46>
 8026176:	6863      	ldr	r3, [r4, #4]
 8026178:	1ac0      	subs	r0, r0, r3
 802617a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802617c:	b10b      	cbz	r3, 8026182 <__sflush_r+0x46>
 802617e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026180:	1ac0      	subs	r0, r0, r3
 8026182:	2300      	movs	r3, #0
 8026184:	4602      	mov	r2, r0
 8026186:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026188:	6a21      	ldr	r1, [r4, #32]
 802618a:	4628      	mov	r0, r5
 802618c:	47b0      	blx	r6
 802618e:	1c43      	adds	r3, r0, #1
 8026190:	89a3      	ldrh	r3, [r4, #12]
 8026192:	d106      	bne.n	80261a2 <__sflush_r+0x66>
 8026194:	6829      	ldr	r1, [r5, #0]
 8026196:	291d      	cmp	r1, #29
 8026198:	d82c      	bhi.n	80261f4 <__sflush_r+0xb8>
 802619a:	4a2a      	ldr	r2, [pc, #168]	; (8026244 <__sflush_r+0x108>)
 802619c:	40ca      	lsrs	r2, r1
 802619e:	07d6      	lsls	r6, r2, #31
 80261a0:	d528      	bpl.n	80261f4 <__sflush_r+0xb8>
 80261a2:	2200      	movs	r2, #0
 80261a4:	6062      	str	r2, [r4, #4]
 80261a6:	04d9      	lsls	r1, r3, #19
 80261a8:	6922      	ldr	r2, [r4, #16]
 80261aa:	6022      	str	r2, [r4, #0]
 80261ac:	d504      	bpl.n	80261b8 <__sflush_r+0x7c>
 80261ae:	1c42      	adds	r2, r0, #1
 80261b0:	d101      	bne.n	80261b6 <__sflush_r+0x7a>
 80261b2:	682b      	ldr	r3, [r5, #0]
 80261b4:	b903      	cbnz	r3, 80261b8 <__sflush_r+0x7c>
 80261b6:	6560      	str	r0, [r4, #84]	; 0x54
 80261b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80261ba:	602f      	str	r7, [r5, #0]
 80261bc:	2900      	cmp	r1, #0
 80261be:	d0ca      	beq.n	8026156 <__sflush_r+0x1a>
 80261c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80261c4:	4299      	cmp	r1, r3
 80261c6:	d002      	beq.n	80261ce <__sflush_r+0x92>
 80261c8:	4628      	mov	r0, r5
 80261ca:	f7fd fb1f 	bl	802380c <_free_r>
 80261ce:	2000      	movs	r0, #0
 80261d0:	6360      	str	r0, [r4, #52]	; 0x34
 80261d2:	e7c1      	b.n	8026158 <__sflush_r+0x1c>
 80261d4:	6a21      	ldr	r1, [r4, #32]
 80261d6:	2301      	movs	r3, #1
 80261d8:	4628      	mov	r0, r5
 80261da:	47b0      	blx	r6
 80261dc:	1c41      	adds	r1, r0, #1
 80261de:	d1c7      	bne.n	8026170 <__sflush_r+0x34>
 80261e0:	682b      	ldr	r3, [r5, #0]
 80261e2:	2b00      	cmp	r3, #0
 80261e4:	d0c4      	beq.n	8026170 <__sflush_r+0x34>
 80261e6:	2b1d      	cmp	r3, #29
 80261e8:	d001      	beq.n	80261ee <__sflush_r+0xb2>
 80261ea:	2b16      	cmp	r3, #22
 80261ec:	d101      	bne.n	80261f2 <__sflush_r+0xb6>
 80261ee:	602f      	str	r7, [r5, #0]
 80261f0:	e7b1      	b.n	8026156 <__sflush_r+0x1a>
 80261f2:	89a3      	ldrh	r3, [r4, #12]
 80261f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80261f8:	81a3      	strh	r3, [r4, #12]
 80261fa:	e7ad      	b.n	8026158 <__sflush_r+0x1c>
 80261fc:	690f      	ldr	r7, [r1, #16]
 80261fe:	2f00      	cmp	r7, #0
 8026200:	d0a9      	beq.n	8026156 <__sflush_r+0x1a>
 8026202:	0793      	lsls	r3, r2, #30
 8026204:	680e      	ldr	r6, [r1, #0]
 8026206:	bf08      	it	eq
 8026208:	694b      	ldreq	r3, [r1, #20]
 802620a:	600f      	str	r7, [r1, #0]
 802620c:	bf18      	it	ne
 802620e:	2300      	movne	r3, #0
 8026210:	eba6 0807 	sub.w	r8, r6, r7
 8026214:	608b      	str	r3, [r1, #8]
 8026216:	f1b8 0f00 	cmp.w	r8, #0
 802621a:	dd9c      	ble.n	8026156 <__sflush_r+0x1a>
 802621c:	6a21      	ldr	r1, [r4, #32]
 802621e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026220:	4643      	mov	r3, r8
 8026222:	463a      	mov	r2, r7
 8026224:	4628      	mov	r0, r5
 8026226:	47b0      	blx	r6
 8026228:	2800      	cmp	r0, #0
 802622a:	dc06      	bgt.n	802623a <__sflush_r+0xfe>
 802622c:	89a3      	ldrh	r3, [r4, #12]
 802622e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026232:	81a3      	strh	r3, [r4, #12]
 8026234:	f04f 30ff 	mov.w	r0, #4294967295
 8026238:	e78e      	b.n	8026158 <__sflush_r+0x1c>
 802623a:	4407      	add	r7, r0
 802623c:	eba8 0800 	sub.w	r8, r8, r0
 8026240:	e7e9      	b.n	8026216 <__sflush_r+0xda>
 8026242:	bf00      	nop
 8026244:	20400001 	.word	0x20400001

08026248 <_fflush_r>:
 8026248:	b538      	push	{r3, r4, r5, lr}
 802624a:	690b      	ldr	r3, [r1, #16]
 802624c:	4605      	mov	r5, r0
 802624e:	460c      	mov	r4, r1
 8026250:	b913      	cbnz	r3, 8026258 <_fflush_r+0x10>
 8026252:	2500      	movs	r5, #0
 8026254:	4628      	mov	r0, r5
 8026256:	bd38      	pop	{r3, r4, r5, pc}
 8026258:	b118      	cbz	r0, 8026262 <_fflush_r+0x1a>
 802625a:	6983      	ldr	r3, [r0, #24]
 802625c:	b90b      	cbnz	r3, 8026262 <_fflush_r+0x1a>
 802625e:	f000 f887 	bl	8026370 <__sinit>
 8026262:	4b14      	ldr	r3, [pc, #80]	; (80262b4 <_fflush_r+0x6c>)
 8026264:	429c      	cmp	r4, r3
 8026266:	d11b      	bne.n	80262a0 <_fflush_r+0x58>
 8026268:	686c      	ldr	r4, [r5, #4]
 802626a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802626e:	2b00      	cmp	r3, #0
 8026270:	d0ef      	beq.n	8026252 <_fflush_r+0xa>
 8026272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026274:	07d0      	lsls	r0, r2, #31
 8026276:	d404      	bmi.n	8026282 <_fflush_r+0x3a>
 8026278:	0599      	lsls	r1, r3, #22
 802627a:	d402      	bmi.n	8026282 <_fflush_r+0x3a>
 802627c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802627e:	f7fd fa6c 	bl	802375a <__retarget_lock_acquire_recursive>
 8026282:	4628      	mov	r0, r5
 8026284:	4621      	mov	r1, r4
 8026286:	f7ff ff59 	bl	802613c <__sflush_r>
 802628a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802628c:	07da      	lsls	r2, r3, #31
 802628e:	4605      	mov	r5, r0
 8026290:	d4e0      	bmi.n	8026254 <_fflush_r+0xc>
 8026292:	89a3      	ldrh	r3, [r4, #12]
 8026294:	059b      	lsls	r3, r3, #22
 8026296:	d4dd      	bmi.n	8026254 <_fflush_r+0xc>
 8026298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802629a:	f7fd fa5f 	bl	802375c <__retarget_lock_release_recursive>
 802629e:	e7d9      	b.n	8026254 <_fflush_r+0xc>
 80262a0:	4b05      	ldr	r3, [pc, #20]	; (80262b8 <_fflush_r+0x70>)
 80262a2:	429c      	cmp	r4, r3
 80262a4:	d101      	bne.n	80262aa <_fflush_r+0x62>
 80262a6:	68ac      	ldr	r4, [r5, #8]
 80262a8:	e7df      	b.n	802626a <_fflush_r+0x22>
 80262aa:	4b04      	ldr	r3, [pc, #16]	; (80262bc <_fflush_r+0x74>)
 80262ac:	429c      	cmp	r4, r3
 80262ae:	bf08      	it	eq
 80262b0:	68ec      	ldreq	r4, [r5, #12]
 80262b2:	e7da      	b.n	802626a <_fflush_r+0x22>
 80262b4:	0802a1ec 	.word	0x0802a1ec
 80262b8:	0802a20c 	.word	0x0802a20c
 80262bc:	0802a1cc 	.word	0x0802a1cc

080262c0 <std>:
 80262c0:	2300      	movs	r3, #0
 80262c2:	b510      	push	{r4, lr}
 80262c4:	4604      	mov	r4, r0
 80262c6:	e9c0 3300 	strd	r3, r3, [r0]
 80262ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80262ce:	6083      	str	r3, [r0, #8]
 80262d0:	8181      	strh	r1, [r0, #12]
 80262d2:	6643      	str	r3, [r0, #100]	; 0x64
 80262d4:	81c2      	strh	r2, [r0, #14]
 80262d6:	6183      	str	r3, [r0, #24]
 80262d8:	4619      	mov	r1, r3
 80262da:	2208      	movs	r2, #8
 80262dc:	305c      	adds	r0, #92	; 0x5c
 80262de:	f7fd fa77 	bl	80237d0 <memset>
 80262e2:	4b05      	ldr	r3, [pc, #20]	; (80262f8 <std+0x38>)
 80262e4:	6263      	str	r3, [r4, #36]	; 0x24
 80262e6:	4b05      	ldr	r3, [pc, #20]	; (80262fc <std+0x3c>)
 80262e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80262ea:	4b05      	ldr	r3, [pc, #20]	; (8026300 <std+0x40>)
 80262ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80262ee:	4b05      	ldr	r3, [pc, #20]	; (8026304 <std+0x44>)
 80262f0:	6224      	str	r4, [r4, #32]
 80262f2:	6323      	str	r3, [r4, #48]	; 0x30
 80262f4:	bd10      	pop	{r4, pc}
 80262f6:	bf00      	nop
 80262f8:	08027931 	.word	0x08027931
 80262fc:	08027953 	.word	0x08027953
 8026300:	0802798b 	.word	0x0802798b
 8026304:	080279af 	.word	0x080279af

08026308 <_cleanup_r>:
 8026308:	4901      	ldr	r1, [pc, #4]	; (8026310 <_cleanup_r+0x8>)
 802630a:	f000 b8af 	b.w	802646c <_fwalk_reent>
 802630e:	bf00      	nop
 8026310:	08026249 	.word	0x08026249

08026314 <__sfmoreglue>:
 8026314:	b570      	push	{r4, r5, r6, lr}
 8026316:	2268      	movs	r2, #104	; 0x68
 8026318:	1e4d      	subs	r5, r1, #1
 802631a:	4355      	muls	r5, r2
 802631c:	460e      	mov	r6, r1
 802631e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026322:	f7fd fadf 	bl	80238e4 <_malloc_r>
 8026326:	4604      	mov	r4, r0
 8026328:	b140      	cbz	r0, 802633c <__sfmoreglue+0x28>
 802632a:	2100      	movs	r1, #0
 802632c:	e9c0 1600 	strd	r1, r6, [r0]
 8026330:	300c      	adds	r0, #12
 8026332:	60a0      	str	r0, [r4, #8]
 8026334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026338:	f7fd fa4a 	bl	80237d0 <memset>
 802633c:	4620      	mov	r0, r4
 802633e:	bd70      	pop	{r4, r5, r6, pc}

08026340 <__sfp_lock_acquire>:
 8026340:	4801      	ldr	r0, [pc, #4]	; (8026348 <__sfp_lock_acquire+0x8>)
 8026342:	f7fd ba0a 	b.w	802375a <__retarget_lock_acquire_recursive>
 8026346:	bf00      	nop
 8026348:	20004ce9 	.word	0x20004ce9

0802634c <__sfp_lock_release>:
 802634c:	4801      	ldr	r0, [pc, #4]	; (8026354 <__sfp_lock_release+0x8>)
 802634e:	f7fd ba05 	b.w	802375c <__retarget_lock_release_recursive>
 8026352:	bf00      	nop
 8026354:	20004ce9 	.word	0x20004ce9

08026358 <__sinit_lock_acquire>:
 8026358:	4801      	ldr	r0, [pc, #4]	; (8026360 <__sinit_lock_acquire+0x8>)
 802635a:	f7fd b9fe 	b.w	802375a <__retarget_lock_acquire_recursive>
 802635e:	bf00      	nop
 8026360:	20004cea 	.word	0x20004cea

08026364 <__sinit_lock_release>:
 8026364:	4801      	ldr	r0, [pc, #4]	; (802636c <__sinit_lock_release+0x8>)
 8026366:	f7fd b9f9 	b.w	802375c <__retarget_lock_release_recursive>
 802636a:	bf00      	nop
 802636c:	20004cea 	.word	0x20004cea

08026370 <__sinit>:
 8026370:	b510      	push	{r4, lr}
 8026372:	4604      	mov	r4, r0
 8026374:	f7ff fff0 	bl	8026358 <__sinit_lock_acquire>
 8026378:	69a3      	ldr	r3, [r4, #24]
 802637a:	b11b      	cbz	r3, 8026384 <__sinit+0x14>
 802637c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026380:	f7ff bff0 	b.w	8026364 <__sinit_lock_release>
 8026384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026388:	6523      	str	r3, [r4, #80]	; 0x50
 802638a:	4b13      	ldr	r3, [pc, #76]	; (80263d8 <__sinit+0x68>)
 802638c:	4a13      	ldr	r2, [pc, #76]	; (80263dc <__sinit+0x6c>)
 802638e:	681b      	ldr	r3, [r3, #0]
 8026390:	62a2      	str	r2, [r4, #40]	; 0x28
 8026392:	42a3      	cmp	r3, r4
 8026394:	bf04      	itt	eq
 8026396:	2301      	moveq	r3, #1
 8026398:	61a3      	streq	r3, [r4, #24]
 802639a:	4620      	mov	r0, r4
 802639c:	f000 f820 	bl	80263e0 <__sfp>
 80263a0:	6060      	str	r0, [r4, #4]
 80263a2:	4620      	mov	r0, r4
 80263a4:	f000 f81c 	bl	80263e0 <__sfp>
 80263a8:	60a0      	str	r0, [r4, #8]
 80263aa:	4620      	mov	r0, r4
 80263ac:	f000 f818 	bl	80263e0 <__sfp>
 80263b0:	2200      	movs	r2, #0
 80263b2:	60e0      	str	r0, [r4, #12]
 80263b4:	2104      	movs	r1, #4
 80263b6:	6860      	ldr	r0, [r4, #4]
 80263b8:	f7ff ff82 	bl	80262c0 <std>
 80263bc:	68a0      	ldr	r0, [r4, #8]
 80263be:	2201      	movs	r2, #1
 80263c0:	2109      	movs	r1, #9
 80263c2:	f7ff ff7d 	bl	80262c0 <std>
 80263c6:	68e0      	ldr	r0, [r4, #12]
 80263c8:	2202      	movs	r2, #2
 80263ca:	2112      	movs	r1, #18
 80263cc:	f7ff ff78 	bl	80262c0 <std>
 80263d0:	2301      	movs	r3, #1
 80263d2:	61a3      	str	r3, [r4, #24]
 80263d4:	e7d2      	b.n	802637c <__sinit+0xc>
 80263d6:	bf00      	nop
 80263d8:	08029f9c 	.word	0x08029f9c
 80263dc:	08026309 	.word	0x08026309

080263e0 <__sfp>:
 80263e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263e2:	4607      	mov	r7, r0
 80263e4:	f7ff ffac 	bl	8026340 <__sfp_lock_acquire>
 80263e8:	4b1e      	ldr	r3, [pc, #120]	; (8026464 <__sfp+0x84>)
 80263ea:	681e      	ldr	r6, [r3, #0]
 80263ec:	69b3      	ldr	r3, [r6, #24]
 80263ee:	b913      	cbnz	r3, 80263f6 <__sfp+0x16>
 80263f0:	4630      	mov	r0, r6
 80263f2:	f7ff ffbd 	bl	8026370 <__sinit>
 80263f6:	3648      	adds	r6, #72	; 0x48
 80263f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80263fc:	3b01      	subs	r3, #1
 80263fe:	d503      	bpl.n	8026408 <__sfp+0x28>
 8026400:	6833      	ldr	r3, [r6, #0]
 8026402:	b30b      	cbz	r3, 8026448 <__sfp+0x68>
 8026404:	6836      	ldr	r6, [r6, #0]
 8026406:	e7f7      	b.n	80263f8 <__sfp+0x18>
 8026408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802640c:	b9d5      	cbnz	r5, 8026444 <__sfp+0x64>
 802640e:	4b16      	ldr	r3, [pc, #88]	; (8026468 <__sfp+0x88>)
 8026410:	60e3      	str	r3, [r4, #12]
 8026412:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026416:	6665      	str	r5, [r4, #100]	; 0x64
 8026418:	f7fd f99e 	bl	8023758 <__retarget_lock_init_recursive>
 802641c:	f7ff ff96 	bl	802634c <__sfp_lock_release>
 8026420:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026424:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026428:	6025      	str	r5, [r4, #0]
 802642a:	61a5      	str	r5, [r4, #24]
 802642c:	2208      	movs	r2, #8
 802642e:	4629      	mov	r1, r5
 8026430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026434:	f7fd f9cc 	bl	80237d0 <memset>
 8026438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802643c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026440:	4620      	mov	r0, r4
 8026442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026444:	3468      	adds	r4, #104	; 0x68
 8026446:	e7d9      	b.n	80263fc <__sfp+0x1c>
 8026448:	2104      	movs	r1, #4
 802644a:	4638      	mov	r0, r7
 802644c:	f7ff ff62 	bl	8026314 <__sfmoreglue>
 8026450:	4604      	mov	r4, r0
 8026452:	6030      	str	r0, [r6, #0]
 8026454:	2800      	cmp	r0, #0
 8026456:	d1d5      	bne.n	8026404 <__sfp+0x24>
 8026458:	f7ff ff78 	bl	802634c <__sfp_lock_release>
 802645c:	230c      	movs	r3, #12
 802645e:	603b      	str	r3, [r7, #0]
 8026460:	e7ee      	b.n	8026440 <__sfp+0x60>
 8026462:	bf00      	nop
 8026464:	08029f9c 	.word	0x08029f9c
 8026468:	ffff0001 	.word	0xffff0001

0802646c <_fwalk_reent>:
 802646c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026470:	4606      	mov	r6, r0
 8026472:	4688      	mov	r8, r1
 8026474:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026478:	2700      	movs	r7, #0
 802647a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802647e:	f1b9 0901 	subs.w	r9, r9, #1
 8026482:	d505      	bpl.n	8026490 <_fwalk_reent+0x24>
 8026484:	6824      	ldr	r4, [r4, #0]
 8026486:	2c00      	cmp	r4, #0
 8026488:	d1f7      	bne.n	802647a <_fwalk_reent+0xe>
 802648a:	4638      	mov	r0, r7
 802648c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026490:	89ab      	ldrh	r3, [r5, #12]
 8026492:	2b01      	cmp	r3, #1
 8026494:	d907      	bls.n	80264a6 <_fwalk_reent+0x3a>
 8026496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802649a:	3301      	adds	r3, #1
 802649c:	d003      	beq.n	80264a6 <_fwalk_reent+0x3a>
 802649e:	4629      	mov	r1, r5
 80264a0:	4630      	mov	r0, r6
 80264a2:	47c0      	blx	r8
 80264a4:	4307      	orrs	r7, r0
 80264a6:	3568      	adds	r5, #104	; 0x68
 80264a8:	e7e9      	b.n	802647e <_fwalk_reent+0x12>

080264aa <rshift>:
 80264aa:	6903      	ldr	r3, [r0, #16]
 80264ac:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80264b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80264b4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80264b8:	f100 0414 	add.w	r4, r0, #20
 80264bc:	dd45      	ble.n	802654a <rshift+0xa0>
 80264be:	f011 011f 	ands.w	r1, r1, #31
 80264c2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80264c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80264ca:	d10c      	bne.n	80264e6 <rshift+0x3c>
 80264cc:	f100 0710 	add.w	r7, r0, #16
 80264d0:	4629      	mov	r1, r5
 80264d2:	42b1      	cmp	r1, r6
 80264d4:	d334      	bcc.n	8026540 <rshift+0x96>
 80264d6:	1a9b      	subs	r3, r3, r2
 80264d8:	009b      	lsls	r3, r3, #2
 80264da:	1eea      	subs	r2, r5, #3
 80264dc:	4296      	cmp	r6, r2
 80264de:	bf38      	it	cc
 80264e0:	2300      	movcc	r3, #0
 80264e2:	4423      	add	r3, r4
 80264e4:	e015      	b.n	8026512 <rshift+0x68>
 80264e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80264ea:	f1c1 0820 	rsb	r8, r1, #32
 80264ee:	40cf      	lsrs	r7, r1
 80264f0:	f105 0e04 	add.w	lr, r5, #4
 80264f4:	46a1      	mov	r9, r4
 80264f6:	4576      	cmp	r6, lr
 80264f8:	46f4      	mov	ip, lr
 80264fa:	d815      	bhi.n	8026528 <rshift+0x7e>
 80264fc:	1a9a      	subs	r2, r3, r2
 80264fe:	0092      	lsls	r2, r2, #2
 8026500:	3a04      	subs	r2, #4
 8026502:	3501      	adds	r5, #1
 8026504:	42ae      	cmp	r6, r5
 8026506:	bf38      	it	cc
 8026508:	2200      	movcc	r2, #0
 802650a:	18a3      	adds	r3, r4, r2
 802650c:	50a7      	str	r7, [r4, r2]
 802650e:	b107      	cbz	r7, 8026512 <rshift+0x68>
 8026510:	3304      	adds	r3, #4
 8026512:	1b1a      	subs	r2, r3, r4
 8026514:	42a3      	cmp	r3, r4
 8026516:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802651a:	bf08      	it	eq
 802651c:	2300      	moveq	r3, #0
 802651e:	6102      	str	r2, [r0, #16]
 8026520:	bf08      	it	eq
 8026522:	6143      	streq	r3, [r0, #20]
 8026524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026528:	f8dc c000 	ldr.w	ip, [ip]
 802652c:	fa0c fc08 	lsl.w	ip, ip, r8
 8026530:	ea4c 0707 	orr.w	r7, ip, r7
 8026534:	f849 7b04 	str.w	r7, [r9], #4
 8026538:	f85e 7b04 	ldr.w	r7, [lr], #4
 802653c:	40cf      	lsrs	r7, r1
 802653e:	e7da      	b.n	80264f6 <rshift+0x4c>
 8026540:	f851 cb04 	ldr.w	ip, [r1], #4
 8026544:	f847 cf04 	str.w	ip, [r7, #4]!
 8026548:	e7c3      	b.n	80264d2 <rshift+0x28>
 802654a:	4623      	mov	r3, r4
 802654c:	e7e1      	b.n	8026512 <rshift+0x68>

0802654e <__hexdig_fun>:
 802654e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8026552:	2b09      	cmp	r3, #9
 8026554:	d802      	bhi.n	802655c <__hexdig_fun+0xe>
 8026556:	3820      	subs	r0, #32
 8026558:	b2c0      	uxtb	r0, r0
 802655a:	4770      	bx	lr
 802655c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8026560:	2b05      	cmp	r3, #5
 8026562:	d801      	bhi.n	8026568 <__hexdig_fun+0x1a>
 8026564:	3847      	subs	r0, #71	; 0x47
 8026566:	e7f7      	b.n	8026558 <__hexdig_fun+0xa>
 8026568:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 802656c:	2b05      	cmp	r3, #5
 802656e:	d801      	bhi.n	8026574 <__hexdig_fun+0x26>
 8026570:	3827      	subs	r0, #39	; 0x27
 8026572:	e7f1      	b.n	8026558 <__hexdig_fun+0xa>
 8026574:	2000      	movs	r0, #0
 8026576:	4770      	bx	lr

08026578 <__gethex>:
 8026578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802657c:	ed2d 8b02 	vpush	{d8}
 8026580:	b089      	sub	sp, #36	; 0x24
 8026582:	ee08 0a10 	vmov	s16, r0
 8026586:	9304      	str	r3, [sp, #16]
 8026588:	4bb4      	ldr	r3, [pc, #720]	; (802685c <__gethex+0x2e4>)
 802658a:	681b      	ldr	r3, [r3, #0]
 802658c:	9301      	str	r3, [sp, #4]
 802658e:	4618      	mov	r0, r3
 8026590:	468b      	mov	fp, r1
 8026592:	4690      	mov	r8, r2
 8026594:	f7d9 fe76 	bl	8000284 <strlen>
 8026598:	9b01      	ldr	r3, [sp, #4]
 802659a:	f8db 2000 	ldr.w	r2, [fp]
 802659e:	4403      	add	r3, r0
 80265a0:	4682      	mov	sl, r0
 80265a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80265a6:	9305      	str	r3, [sp, #20]
 80265a8:	1c93      	adds	r3, r2, #2
 80265aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80265ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80265b2:	32fe      	adds	r2, #254	; 0xfe
 80265b4:	18d1      	adds	r1, r2, r3
 80265b6:	461f      	mov	r7, r3
 80265b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80265bc:	9100      	str	r1, [sp, #0]
 80265be:	2830      	cmp	r0, #48	; 0x30
 80265c0:	d0f8      	beq.n	80265b4 <__gethex+0x3c>
 80265c2:	f7ff ffc4 	bl	802654e <__hexdig_fun>
 80265c6:	4604      	mov	r4, r0
 80265c8:	2800      	cmp	r0, #0
 80265ca:	d13a      	bne.n	8026642 <__gethex+0xca>
 80265cc:	9901      	ldr	r1, [sp, #4]
 80265ce:	4652      	mov	r2, sl
 80265d0:	4638      	mov	r0, r7
 80265d2:	f7fe f813 	bl	80245fc <strncmp>
 80265d6:	4605      	mov	r5, r0
 80265d8:	2800      	cmp	r0, #0
 80265da:	d168      	bne.n	80266ae <__gethex+0x136>
 80265dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80265e0:	eb07 060a 	add.w	r6, r7, sl
 80265e4:	f7ff ffb3 	bl	802654e <__hexdig_fun>
 80265e8:	2800      	cmp	r0, #0
 80265ea:	d062      	beq.n	80266b2 <__gethex+0x13a>
 80265ec:	4633      	mov	r3, r6
 80265ee:	7818      	ldrb	r0, [r3, #0]
 80265f0:	2830      	cmp	r0, #48	; 0x30
 80265f2:	461f      	mov	r7, r3
 80265f4:	f103 0301 	add.w	r3, r3, #1
 80265f8:	d0f9      	beq.n	80265ee <__gethex+0x76>
 80265fa:	f7ff ffa8 	bl	802654e <__hexdig_fun>
 80265fe:	2301      	movs	r3, #1
 8026600:	fab0 f480 	clz	r4, r0
 8026604:	0964      	lsrs	r4, r4, #5
 8026606:	4635      	mov	r5, r6
 8026608:	9300      	str	r3, [sp, #0]
 802660a:	463a      	mov	r2, r7
 802660c:	4616      	mov	r6, r2
 802660e:	3201      	adds	r2, #1
 8026610:	7830      	ldrb	r0, [r6, #0]
 8026612:	f7ff ff9c 	bl	802654e <__hexdig_fun>
 8026616:	2800      	cmp	r0, #0
 8026618:	d1f8      	bne.n	802660c <__gethex+0x94>
 802661a:	9901      	ldr	r1, [sp, #4]
 802661c:	4652      	mov	r2, sl
 802661e:	4630      	mov	r0, r6
 8026620:	f7fd ffec 	bl	80245fc <strncmp>
 8026624:	b980      	cbnz	r0, 8026648 <__gethex+0xd0>
 8026626:	b94d      	cbnz	r5, 802663c <__gethex+0xc4>
 8026628:	eb06 050a 	add.w	r5, r6, sl
 802662c:	462a      	mov	r2, r5
 802662e:	4616      	mov	r6, r2
 8026630:	3201      	adds	r2, #1
 8026632:	7830      	ldrb	r0, [r6, #0]
 8026634:	f7ff ff8b 	bl	802654e <__hexdig_fun>
 8026638:	2800      	cmp	r0, #0
 802663a:	d1f8      	bne.n	802662e <__gethex+0xb6>
 802663c:	1bad      	subs	r5, r5, r6
 802663e:	00ad      	lsls	r5, r5, #2
 8026640:	e004      	b.n	802664c <__gethex+0xd4>
 8026642:	2400      	movs	r4, #0
 8026644:	4625      	mov	r5, r4
 8026646:	e7e0      	b.n	802660a <__gethex+0x92>
 8026648:	2d00      	cmp	r5, #0
 802664a:	d1f7      	bne.n	802663c <__gethex+0xc4>
 802664c:	7833      	ldrb	r3, [r6, #0]
 802664e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8026652:	2b50      	cmp	r3, #80	; 0x50
 8026654:	d13b      	bne.n	80266ce <__gethex+0x156>
 8026656:	7873      	ldrb	r3, [r6, #1]
 8026658:	2b2b      	cmp	r3, #43	; 0x2b
 802665a:	d02c      	beq.n	80266b6 <__gethex+0x13e>
 802665c:	2b2d      	cmp	r3, #45	; 0x2d
 802665e:	d02e      	beq.n	80266be <__gethex+0x146>
 8026660:	1c71      	adds	r1, r6, #1
 8026662:	f04f 0900 	mov.w	r9, #0
 8026666:	7808      	ldrb	r0, [r1, #0]
 8026668:	f7ff ff71 	bl	802654e <__hexdig_fun>
 802666c:	1e43      	subs	r3, r0, #1
 802666e:	b2db      	uxtb	r3, r3
 8026670:	2b18      	cmp	r3, #24
 8026672:	d82c      	bhi.n	80266ce <__gethex+0x156>
 8026674:	f1a0 0210 	sub.w	r2, r0, #16
 8026678:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802667c:	f7ff ff67 	bl	802654e <__hexdig_fun>
 8026680:	1e43      	subs	r3, r0, #1
 8026682:	b2db      	uxtb	r3, r3
 8026684:	2b18      	cmp	r3, #24
 8026686:	d91d      	bls.n	80266c4 <__gethex+0x14c>
 8026688:	f1b9 0f00 	cmp.w	r9, #0
 802668c:	d000      	beq.n	8026690 <__gethex+0x118>
 802668e:	4252      	negs	r2, r2
 8026690:	4415      	add	r5, r2
 8026692:	f8cb 1000 	str.w	r1, [fp]
 8026696:	b1e4      	cbz	r4, 80266d2 <__gethex+0x15a>
 8026698:	9b00      	ldr	r3, [sp, #0]
 802669a:	2b00      	cmp	r3, #0
 802669c:	bf14      	ite	ne
 802669e:	2700      	movne	r7, #0
 80266a0:	2706      	moveq	r7, #6
 80266a2:	4638      	mov	r0, r7
 80266a4:	b009      	add	sp, #36	; 0x24
 80266a6:	ecbd 8b02 	vpop	{d8}
 80266aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80266ae:	463e      	mov	r6, r7
 80266b0:	4625      	mov	r5, r4
 80266b2:	2401      	movs	r4, #1
 80266b4:	e7ca      	b.n	802664c <__gethex+0xd4>
 80266b6:	f04f 0900 	mov.w	r9, #0
 80266ba:	1cb1      	adds	r1, r6, #2
 80266bc:	e7d3      	b.n	8026666 <__gethex+0xee>
 80266be:	f04f 0901 	mov.w	r9, #1
 80266c2:	e7fa      	b.n	80266ba <__gethex+0x142>
 80266c4:	230a      	movs	r3, #10
 80266c6:	fb03 0202 	mla	r2, r3, r2, r0
 80266ca:	3a10      	subs	r2, #16
 80266cc:	e7d4      	b.n	8026678 <__gethex+0x100>
 80266ce:	4631      	mov	r1, r6
 80266d0:	e7df      	b.n	8026692 <__gethex+0x11a>
 80266d2:	1bf3      	subs	r3, r6, r7
 80266d4:	3b01      	subs	r3, #1
 80266d6:	4621      	mov	r1, r4
 80266d8:	2b07      	cmp	r3, #7
 80266da:	dc0b      	bgt.n	80266f4 <__gethex+0x17c>
 80266dc:	ee18 0a10 	vmov	r0, s16
 80266e0:	f000 fada 	bl	8026c98 <_Balloc>
 80266e4:	4604      	mov	r4, r0
 80266e6:	b940      	cbnz	r0, 80266fa <__gethex+0x182>
 80266e8:	4b5d      	ldr	r3, [pc, #372]	; (8026860 <__gethex+0x2e8>)
 80266ea:	4602      	mov	r2, r0
 80266ec:	21de      	movs	r1, #222	; 0xde
 80266ee:	485d      	ldr	r0, [pc, #372]	; (8026864 <__gethex+0x2ec>)
 80266f0:	f7fc ffcc 	bl	802368c <__assert_func>
 80266f4:	3101      	adds	r1, #1
 80266f6:	105b      	asrs	r3, r3, #1
 80266f8:	e7ee      	b.n	80266d8 <__gethex+0x160>
 80266fa:	f100 0914 	add.w	r9, r0, #20
 80266fe:	f04f 0b00 	mov.w	fp, #0
 8026702:	f1ca 0301 	rsb	r3, sl, #1
 8026706:	f8cd 9008 	str.w	r9, [sp, #8]
 802670a:	f8cd b000 	str.w	fp, [sp]
 802670e:	9306      	str	r3, [sp, #24]
 8026710:	42b7      	cmp	r7, r6
 8026712:	d340      	bcc.n	8026796 <__gethex+0x21e>
 8026714:	9802      	ldr	r0, [sp, #8]
 8026716:	9b00      	ldr	r3, [sp, #0]
 8026718:	f840 3b04 	str.w	r3, [r0], #4
 802671c:	eba0 0009 	sub.w	r0, r0, r9
 8026720:	1080      	asrs	r0, r0, #2
 8026722:	0146      	lsls	r6, r0, #5
 8026724:	6120      	str	r0, [r4, #16]
 8026726:	4618      	mov	r0, r3
 8026728:	f000 fba8 	bl	8026e7c <__hi0bits>
 802672c:	1a30      	subs	r0, r6, r0
 802672e:	f8d8 6000 	ldr.w	r6, [r8]
 8026732:	42b0      	cmp	r0, r6
 8026734:	dd63      	ble.n	80267fe <__gethex+0x286>
 8026736:	1b87      	subs	r7, r0, r6
 8026738:	4639      	mov	r1, r7
 802673a:	4620      	mov	r0, r4
 802673c:	f000 ff4c 	bl	80275d8 <__any_on>
 8026740:	4682      	mov	sl, r0
 8026742:	b1a8      	cbz	r0, 8026770 <__gethex+0x1f8>
 8026744:	1e7b      	subs	r3, r7, #1
 8026746:	1159      	asrs	r1, r3, #5
 8026748:	f003 021f 	and.w	r2, r3, #31
 802674c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8026750:	f04f 0a01 	mov.w	sl, #1
 8026754:	fa0a f202 	lsl.w	r2, sl, r2
 8026758:	420a      	tst	r2, r1
 802675a:	d009      	beq.n	8026770 <__gethex+0x1f8>
 802675c:	4553      	cmp	r3, sl
 802675e:	dd05      	ble.n	802676c <__gethex+0x1f4>
 8026760:	1eb9      	subs	r1, r7, #2
 8026762:	4620      	mov	r0, r4
 8026764:	f000 ff38 	bl	80275d8 <__any_on>
 8026768:	2800      	cmp	r0, #0
 802676a:	d145      	bne.n	80267f8 <__gethex+0x280>
 802676c:	f04f 0a02 	mov.w	sl, #2
 8026770:	4639      	mov	r1, r7
 8026772:	4620      	mov	r0, r4
 8026774:	f7ff fe99 	bl	80264aa <rshift>
 8026778:	443d      	add	r5, r7
 802677a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802677e:	42ab      	cmp	r3, r5
 8026780:	da4c      	bge.n	802681c <__gethex+0x2a4>
 8026782:	ee18 0a10 	vmov	r0, s16
 8026786:	4621      	mov	r1, r4
 8026788:	f000 fac6 	bl	8026d18 <_Bfree>
 802678c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802678e:	2300      	movs	r3, #0
 8026790:	6013      	str	r3, [r2, #0]
 8026792:	27a3      	movs	r7, #163	; 0xa3
 8026794:	e785      	b.n	80266a2 <__gethex+0x12a>
 8026796:	1e73      	subs	r3, r6, #1
 8026798:	9a05      	ldr	r2, [sp, #20]
 802679a:	9303      	str	r3, [sp, #12]
 802679c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80267a0:	4293      	cmp	r3, r2
 80267a2:	d019      	beq.n	80267d8 <__gethex+0x260>
 80267a4:	f1bb 0f20 	cmp.w	fp, #32
 80267a8:	d107      	bne.n	80267ba <__gethex+0x242>
 80267aa:	9b02      	ldr	r3, [sp, #8]
 80267ac:	9a00      	ldr	r2, [sp, #0]
 80267ae:	f843 2b04 	str.w	r2, [r3], #4
 80267b2:	9302      	str	r3, [sp, #8]
 80267b4:	2300      	movs	r3, #0
 80267b6:	9300      	str	r3, [sp, #0]
 80267b8:	469b      	mov	fp, r3
 80267ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80267be:	f7ff fec6 	bl	802654e <__hexdig_fun>
 80267c2:	9b00      	ldr	r3, [sp, #0]
 80267c4:	f000 000f 	and.w	r0, r0, #15
 80267c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80267cc:	4303      	orrs	r3, r0
 80267ce:	9300      	str	r3, [sp, #0]
 80267d0:	f10b 0b04 	add.w	fp, fp, #4
 80267d4:	9b03      	ldr	r3, [sp, #12]
 80267d6:	e00d      	b.n	80267f4 <__gethex+0x27c>
 80267d8:	9b03      	ldr	r3, [sp, #12]
 80267da:	9a06      	ldr	r2, [sp, #24]
 80267dc:	4413      	add	r3, r2
 80267de:	42bb      	cmp	r3, r7
 80267e0:	d3e0      	bcc.n	80267a4 <__gethex+0x22c>
 80267e2:	4618      	mov	r0, r3
 80267e4:	9901      	ldr	r1, [sp, #4]
 80267e6:	9307      	str	r3, [sp, #28]
 80267e8:	4652      	mov	r2, sl
 80267ea:	f7fd ff07 	bl	80245fc <strncmp>
 80267ee:	9b07      	ldr	r3, [sp, #28]
 80267f0:	2800      	cmp	r0, #0
 80267f2:	d1d7      	bne.n	80267a4 <__gethex+0x22c>
 80267f4:	461e      	mov	r6, r3
 80267f6:	e78b      	b.n	8026710 <__gethex+0x198>
 80267f8:	f04f 0a03 	mov.w	sl, #3
 80267fc:	e7b8      	b.n	8026770 <__gethex+0x1f8>
 80267fe:	da0a      	bge.n	8026816 <__gethex+0x29e>
 8026800:	1a37      	subs	r7, r6, r0
 8026802:	4621      	mov	r1, r4
 8026804:	ee18 0a10 	vmov	r0, s16
 8026808:	463a      	mov	r2, r7
 802680a:	f000 fca1 	bl	8027150 <__lshift>
 802680e:	1bed      	subs	r5, r5, r7
 8026810:	4604      	mov	r4, r0
 8026812:	f100 0914 	add.w	r9, r0, #20
 8026816:	f04f 0a00 	mov.w	sl, #0
 802681a:	e7ae      	b.n	802677a <__gethex+0x202>
 802681c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8026820:	42a8      	cmp	r0, r5
 8026822:	dd72      	ble.n	802690a <__gethex+0x392>
 8026824:	1b45      	subs	r5, r0, r5
 8026826:	42ae      	cmp	r6, r5
 8026828:	dc36      	bgt.n	8026898 <__gethex+0x320>
 802682a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802682e:	2b02      	cmp	r3, #2
 8026830:	d02a      	beq.n	8026888 <__gethex+0x310>
 8026832:	2b03      	cmp	r3, #3
 8026834:	d02c      	beq.n	8026890 <__gethex+0x318>
 8026836:	2b01      	cmp	r3, #1
 8026838:	d11c      	bne.n	8026874 <__gethex+0x2fc>
 802683a:	42ae      	cmp	r6, r5
 802683c:	d11a      	bne.n	8026874 <__gethex+0x2fc>
 802683e:	2e01      	cmp	r6, #1
 8026840:	d112      	bne.n	8026868 <__gethex+0x2f0>
 8026842:	9a04      	ldr	r2, [sp, #16]
 8026844:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8026848:	6013      	str	r3, [r2, #0]
 802684a:	2301      	movs	r3, #1
 802684c:	6123      	str	r3, [r4, #16]
 802684e:	f8c9 3000 	str.w	r3, [r9]
 8026852:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026854:	2762      	movs	r7, #98	; 0x62
 8026856:	601c      	str	r4, [r3, #0]
 8026858:	e723      	b.n	80266a2 <__gethex+0x12a>
 802685a:	bf00      	nop
 802685c:	0802a294 	.word	0x0802a294
 8026860:	0802a1b8 	.word	0x0802a1b8
 8026864:	0802a22c 	.word	0x0802a22c
 8026868:	1e71      	subs	r1, r6, #1
 802686a:	4620      	mov	r0, r4
 802686c:	f000 feb4 	bl	80275d8 <__any_on>
 8026870:	2800      	cmp	r0, #0
 8026872:	d1e6      	bne.n	8026842 <__gethex+0x2ca>
 8026874:	ee18 0a10 	vmov	r0, s16
 8026878:	4621      	mov	r1, r4
 802687a:	f000 fa4d 	bl	8026d18 <_Bfree>
 802687e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026880:	2300      	movs	r3, #0
 8026882:	6013      	str	r3, [r2, #0]
 8026884:	2750      	movs	r7, #80	; 0x50
 8026886:	e70c      	b.n	80266a2 <__gethex+0x12a>
 8026888:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802688a:	2b00      	cmp	r3, #0
 802688c:	d1f2      	bne.n	8026874 <__gethex+0x2fc>
 802688e:	e7d8      	b.n	8026842 <__gethex+0x2ca>
 8026890:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026892:	2b00      	cmp	r3, #0
 8026894:	d1d5      	bne.n	8026842 <__gethex+0x2ca>
 8026896:	e7ed      	b.n	8026874 <__gethex+0x2fc>
 8026898:	1e6f      	subs	r7, r5, #1
 802689a:	f1ba 0f00 	cmp.w	sl, #0
 802689e:	d131      	bne.n	8026904 <__gethex+0x38c>
 80268a0:	b127      	cbz	r7, 80268ac <__gethex+0x334>
 80268a2:	4639      	mov	r1, r7
 80268a4:	4620      	mov	r0, r4
 80268a6:	f000 fe97 	bl	80275d8 <__any_on>
 80268aa:	4682      	mov	sl, r0
 80268ac:	117b      	asrs	r3, r7, #5
 80268ae:	2101      	movs	r1, #1
 80268b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80268b4:	f007 071f 	and.w	r7, r7, #31
 80268b8:	fa01 f707 	lsl.w	r7, r1, r7
 80268bc:	421f      	tst	r7, r3
 80268be:	4629      	mov	r1, r5
 80268c0:	4620      	mov	r0, r4
 80268c2:	bf18      	it	ne
 80268c4:	f04a 0a02 	orrne.w	sl, sl, #2
 80268c8:	1b76      	subs	r6, r6, r5
 80268ca:	f7ff fdee 	bl	80264aa <rshift>
 80268ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80268d2:	2702      	movs	r7, #2
 80268d4:	f1ba 0f00 	cmp.w	sl, #0
 80268d8:	d048      	beq.n	802696c <__gethex+0x3f4>
 80268da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80268de:	2b02      	cmp	r3, #2
 80268e0:	d015      	beq.n	802690e <__gethex+0x396>
 80268e2:	2b03      	cmp	r3, #3
 80268e4:	d017      	beq.n	8026916 <__gethex+0x39e>
 80268e6:	2b01      	cmp	r3, #1
 80268e8:	d109      	bne.n	80268fe <__gethex+0x386>
 80268ea:	f01a 0f02 	tst.w	sl, #2
 80268ee:	d006      	beq.n	80268fe <__gethex+0x386>
 80268f0:	f8d9 0000 	ldr.w	r0, [r9]
 80268f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80268f8:	f01a 0f01 	tst.w	sl, #1
 80268fc:	d10e      	bne.n	802691c <__gethex+0x3a4>
 80268fe:	f047 0710 	orr.w	r7, r7, #16
 8026902:	e033      	b.n	802696c <__gethex+0x3f4>
 8026904:	f04f 0a01 	mov.w	sl, #1
 8026908:	e7d0      	b.n	80268ac <__gethex+0x334>
 802690a:	2701      	movs	r7, #1
 802690c:	e7e2      	b.n	80268d4 <__gethex+0x35c>
 802690e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026910:	f1c3 0301 	rsb	r3, r3, #1
 8026914:	9315      	str	r3, [sp, #84]	; 0x54
 8026916:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026918:	2b00      	cmp	r3, #0
 802691a:	d0f0      	beq.n	80268fe <__gethex+0x386>
 802691c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8026920:	f104 0314 	add.w	r3, r4, #20
 8026924:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8026928:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802692c:	f04f 0c00 	mov.w	ip, #0
 8026930:	4618      	mov	r0, r3
 8026932:	f853 2b04 	ldr.w	r2, [r3], #4
 8026936:	f1b2 3fff 	cmp.w	r2, #4294967295
 802693a:	d01c      	beq.n	8026976 <__gethex+0x3fe>
 802693c:	3201      	adds	r2, #1
 802693e:	6002      	str	r2, [r0, #0]
 8026940:	2f02      	cmp	r7, #2
 8026942:	f104 0314 	add.w	r3, r4, #20
 8026946:	d13f      	bne.n	80269c8 <__gethex+0x450>
 8026948:	f8d8 2000 	ldr.w	r2, [r8]
 802694c:	3a01      	subs	r2, #1
 802694e:	42b2      	cmp	r2, r6
 8026950:	d10a      	bne.n	8026968 <__gethex+0x3f0>
 8026952:	1171      	asrs	r1, r6, #5
 8026954:	2201      	movs	r2, #1
 8026956:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802695a:	f006 061f 	and.w	r6, r6, #31
 802695e:	fa02 f606 	lsl.w	r6, r2, r6
 8026962:	421e      	tst	r6, r3
 8026964:	bf18      	it	ne
 8026966:	4617      	movne	r7, r2
 8026968:	f047 0720 	orr.w	r7, r7, #32
 802696c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802696e:	601c      	str	r4, [r3, #0]
 8026970:	9b04      	ldr	r3, [sp, #16]
 8026972:	601d      	str	r5, [r3, #0]
 8026974:	e695      	b.n	80266a2 <__gethex+0x12a>
 8026976:	4299      	cmp	r1, r3
 8026978:	f843 cc04 	str.w	ip, [r3, #-4]
 802697c:	d8d8      	bhi.n	8026930 <__gethex+0x3b8>
 802697e:	68a3      	ldr	r3, [r4, #8]
 8026980:	459b      	cmp	fp, r3
 8026982:	db19      	blt.n	80269b8 <__gethex+0x440>
 8026984:	6861      	ldr	r1, [r4, #4]
 8026986:	ee18 0a10 	vmov	r0, s16
 802698a:	3101      	adds	r1, #1
 802698c:	f000 f984 	bl	8026c98 <_Balloc>
 8026990:	4681      	mov	r9, r0
 8026992:	b918      	cbnz	r0, 802699c <__gethex+0x424>
 8026994:	4b1a      	ldr	r3, [pc, #104]	; (8026a00 <__gethex+0x488>)
 8026996:	4602      	mov	r2, r0
 8026998:	2184      	movs	r1, #132	; 0x84
 802699a:	e6a8      	b.n	80266ee <__gethex+0x176>
 802699c:	6922      	ldr	r2, [r4, #16]
 802699e:	3202      	adds	r2, #2
 80269a0:	f104 010c 	add.w	r1, r4, #12
 80269a4:	0092      	lsls	r2, r2, #2
 80269a6:	300c      	adds	r0, #12
 80269a8:	f7fc feea 	bl	8023780 <memcpy>
 80269ac:	4621      	mov	r1, r4
 80269ae:	ee18 0a10 	vmov	r0, s16
 80269b2:	f000 f9b1 	bl	8026d18 <_Bfree>
 80269b6:	464c      	mov	r4, r9
 80269b8:	6923      	ldr	r3, [r4, #16]
 80269ba:	1c5a      	adds	r2, r3, #1
 80269bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80269c0:	6122      	str	r2, [r4, #16]
 80269c2:	2201      	movs	r2, #1
 80269c4:	615a      	str	r2, [r3, #20]
 80269c6:	e7bb      	b.n	8026940 <__gethex+0x3c8>
 80269c8:	6922      	ldr	r2, [r4, #16]
 80269ca:	455a      	cmp	r2, fp
 80269cc:	dd0b      	ble.n	80269e6 <__gethex+0x46e>
 80269ce:	2101      	movs	r1, #1
 80269d0:	4620      	mov	r0, r4
 80269d2:	f7ff fd6a 	bl	80264aa <rshift>
 80269d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80269da:	3501      	adds	r5, #1
 80269dc:	42ab      	cmp	r3, r5
 80269de:	f6ff aed0 	blt.w	8026782 <__gethex+0x20a>
 80269e2:	2701      	movs	r7, #1
 80269e4:	e7c0      	b.n	8026968 <__gethex+0x3f0>
 80269e6:	f016 061f 	ands.w	r6, r6, #31
 80269ea:	d0fa      	beq.n	80269e2 <__gethex+0x46a>
 80269ec:	4453      	add	r3, sl
 80269ee:	f1c6 0620 	rsb	r6, r6, #32
 80269f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80269f6:	f000 fa41 	bl	8026e7c <__hi0bits>
 80269fa:	42b0      	cmp	r0, r6
 80269fc:	dbe7      	blt.n	80269ce <__gethex+0x456>
 80269fe:	e7f0      	b.n	80269e2 <__gethex+0x46a>
 8026a00:	0802a1b8 	.word	0x0802a1b8

08026a04 <L_shift>:
 8026a04:	f1c2 0208 	rsb	r2, r2, #8
 8026a08:	0092      	lsls	r2, r2, #2
 8026a0a:	b570      	push	{r4, r5, r6, lr}
 8026a0c:	f1c2 0620 	rsb	r6, r2, #32
 8026a10:	6843      	ldr	r3, [r0, #4]
 8026a12:	6804      	ldr	r4, [r0, #0]
 8026a14:	fa03 f506 	lsl.w	r5, r3, r6
 8026a18:	432c      	orrs	r4, r5
 8026a1a:	40d3      	lsrs	r3, r2
 8026a1c:	6004      	str	r4, [r0, #0]
 8026a1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8026a22:	4288      	cmp	r0, r1
 8026a24:	d3f4      	bcc.n	8026a10 <L_shift+0xc>
 8026a26:	bd70      	pop	{r4, r5, r6, pc}

08026a28 <__match>:
 8026a28:	b530      	push	{r4, r5, lr}
 8026a2a:	6803      	ldr	r3, [r0, #0]
 8026a2c:	3301      	adds	r3, #1
 8026a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026a32:	b914      	cbnz	r4, 8026a3a <__match+0x12>
 8026a34:	6003      	str	r3, [r0, #0]
 8026a36:	2001      	movs	r0, #1
 8026a38:	bd30      	pop	{r4, r5, pc}
 8026a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026a3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8026a42:	2d19      	cmp	r5, #25
 8026a44:	bf98      	it	ls
 8026a46:	3220      	addls	r2, #32
 8026a48:	42a2      	cmp	r2, r4
 8026a4a:	d0f0      	beq.n	8026a2e <__match+0x6>
 8026a4c:	2000      	movs	r0, #0
 8026a4e:	e7f3      	b.n	8026a38 <__match+0x10>

08026a50 <__hexnan>:
 8026a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a54:	680b      	ldr	r3, [r1, #0]
 8026a56:	115e      	asrs	r6, r3, #5
 8026a58:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8026a5c:	f013 031f 	ands.w	r3, r3, #31
 8026a60:	b087      	sub	sp, #28
 8026a62:	bf18      	it	ne
 8026a64:	3604      	addne	r6, #4
 8026a66:	2500      	movs	r5, #0
 8026a68:	1f37      	subs	r7, r6, #4
 8026a6a:	4690      	mov	r8, r2
 8026a6c:	6802      	ldr	r2, [r0, #0]
 8026a6e:	9301      	str	r3, [sp, #4]
 8026a70:	4682      	mov	sl, r0
 8026a72:	f846 5c04 	str.w	r5, [r6, #-4]
 8026a76:	46b9      	mov	r9, r7
 8026a78:	463c      	mov	r4, r7
 8026a7a:	9502      	str	r5, [sp, #8]
 8026a7c:	46ab      	mov	fp, r5
 8026a7e:	7851      	ldrb	r1, [r2, #1]
 8026a80:	1c53      	adds	r3, r2, #1
 8026a82:	9303      	str	r3, [sp, #12]
 8026a84:	b341      	cbz	r1, 8026ad8 <__hexnan+0x88>
 8026a86:	4608      	mov	r0, r1
 8026a88:	9205      	str	r2, [sp, #20]
 8026a8a:	9104      	str	r1, [sp, #16]
 8026a8c:	f7ff fd5f 	bl	802654e <__hexdig_fun>
 8026a90:	2800      	cmp	r0, #0
 8026a92:	d14f      	bne.n	8026b34 <__hexnan+0xe4>
 8026a94:	9904      	ldr	r1, [sp, #16]
 8026a96:	9a05      	ldr	r2, [sp, #20]
 8026a98:	2920      	cmp	r1, #32
 8026a9a:	d818      	bhi.n	8026ace <__hexnan+0x7e>
 8026a9c:	9b02      	ldr	r3, [sp, #8]
 8026a9e:	459b      	cmp	fp, r3
 8026aa0:	dd13      	ble.n	8026aca <__hexnan+0x7a>
 8026aa2:	454c      	cmp	r4, r9
 8026aa4:	d206      	bcs.n	8026ab4 <__hexnan+0x64>
 8026aa6:	2d07      	cmp	r5, #7
 8026aa8:	dc04      	bgt.n	8026ab4 <__hexnan+0x64>
 8026aaa:	462a      	mov	r2, r5
 8026aac:	4649      	mov	r1, r9
 8026aae:	4620      	mov	r0, r4
 8026ab0:	f7ff ffa8 	bl	8026a04 <L_shift>
 8026ab4:	4544      	cmp	r4, r8
 8026ab6:	d950      	bls.n	8026b5a <__hexnan+0x10a>
 8026ab8:	2300      	movs	r3, #0
 8026aba:	f1a4 0904 	sub.w	r9, r4, #4
 8026abe:	f844 3c04 	str.w	r3, [r4, #-4]
 8026ac2:	f8cd b008 	str.w	fp, [sp, #8]
 8026ac6:	464c      	mov	r4, r9
 8026ac8:	461d      	mov	r5, r3
 8026aca:	9a03      	ldr	r2, [sp, #12]
 8026acc:	e7d7      	b.n	8026a7e <__hexnan+0x2e>
 8026ace:	2929      	cmp	r1, #41	; 0x29
 8026ad0:	d156      	bne.n	8026b80 <__hexnan+0x130>
 8026ad2:	3202      	adds	r2, #2
 8026ad4:	f8ca 2000 	str.w	r2, [sl]
 8026ad8:	f1bb 0f00 	cmp.w	fp, #0
 8026adc:	d050      	beq.n	8026b80 <__hexnan+0x130>
 8026ade:	454c      	cmp	r4, r9
 8026ae0:	d206      	bcs.n	8026af0 <__hexnan+0xa0>
 8026ae2:	2d07      	cmp	r5, #7
 8026ae4:	dc04      	bgt.n	8026af0 <__hexnan+0xa0>
 8026ae6:	462a      	mov	r2, r5
 8026ae8:	4649      	mov	r1, r9
 8026aea:	4620      	mov	r0, r4
 8026aec:	f7ff ff8a 	bl	8026a04 <L_shift>
 8026af0:	4544      	cmp	r4, r8
 8026af2:	d934      	bls.n	8026b5e <__hexnan+0x10e>
 8026af4:	f1a8 0204 	sub.w	r2, r8, #4
 8026af8:	4623      	mov	r3, r4
 8026afa:	f853 1b04 	ldr.w	r1, [r3], #4
 8026afe:	f842 1f04 	str.w	r1, [r2, #4]!
 8026b02:	429f      	cmp	r7, r3
 8026b04:	d2f9      	bcs.n	8026afa <__hexnan+0xaa>
 8026b06:	1b3b      	subs	r3, r7, r4
 8026b08:	f023 0303 	bic.w	r3, r3, #3
 8026b0c:	3304      	adds	r3, #4
 8026b0e:	3401      	adds	r4, #1
 8026b10:	3e03      	subs	r6, #3
 8026b12:	42b4      	cmp	r4, r6
 8026b14:	bf88      	it	hi
 8026b16:	2304      	movhi	r3, #4
 8026b18:	4443      	add	r3, r8
 8026b1a:	2200      	movs	r2, #0
 8026b1c:	f843 2b04 	str.w	r2, [r3], #4
 8026b20:	429f      	cmp	r7, r3
 8026b22:	d2fb      	bcs.n	8026b1c <__hexnan+0xcc>
 8026b24:	683b      	ldr	r3, [r7, #0]
 8026b26:	b91b      	cbnz	r3, 8026b30 <__hexnan+0xe0>
 8026b28:	4547      	cmp	r7, r8
 8026b2a:	d127      	bne.n	8026b7c <__hexnan+0x12c>
 8026b2c:	2301      	movs	r3, #1
 8026b2e:	603b      	str	r3, [r7, #0]
 8026b30:	2005      	movs	r0, #5
 8026b32:	e026      	b.n	8026b82 <__hexnan+0x132>
 8026b34:	3501      	adds	r5, #1
 8026b36:	2d08      	cmp	r5, #8
 8026b38:	f10b 0b01 	add.w	fp, fp, #1
 8026b3c:	dd06      	ble.n	8026b4c <__hexnan+0xfc>
 8026b3e:	4544      	cmp	r4, r8
 8026b40:	d9c3      	bls.n	8026aca <__hexnan+0x7a>
 8026b42:	2300      	movs	r3, #0
 8026b44:	f844 3c04 	str.w	r3, [r4, #-4]
 8026b48:	2501      	movs	r5, #1
 8026b4a:	3c04      	subs	r4, #4
 8026b4c:	6822      	ldr	r2, [r4, #0]
 8026b4e:	f000 000f 	and.w	r0, r0, #15
 8026b52:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8026b56:	6022      	str	r2, [r4, #0]
 8026b58:	e7b7      	b.n	8026aca <__hexnan+0x7a>
 8026b5a:	2508      	movs	r5, #8
 8026b5c:	e7b5      	b.n	8026aca <__hexnan+0x7a>
 8026b5e:	9b01      	ldr	r3, [sp, #4]
 8026b60:	2b00      	cmp	r3, #0
 8026b62:	d0df      	beq.n	8026b24 <__hexnan+0xd4>
 8026b64:	f04f 32ff 	mov.w	r2, #4294967295
 8026b68:	f1c3 0320 	rsb	r3, r3, #32
 8026b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8026b70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8026b74:	401a      	ands	r2, r3
 8026b76:	f846 2c04 	str.w	r2, [r6, #-4]
 8026b7a:	e7d3      	b.n	8026b24 <__hexnan+0xd4>
 8026b7c:	3f04      	subs	r7, #4
 8026b7e:	e7d1      	b.n	8026b24 <__hexnan+0xd4>
 8026b80:	2004      	movs	r0, #4
 8026b82:	b007      	add	sp, #28
 8026b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026b88 <_localeconv_r>:
 8026b88:	4800      	ldr	r0, [pc, #0]	; (8026b8c <_localeconv_r+0x4>)
 8026b8a:	4770      	bx	lr
 8026b8c:	200003d8 	.word	0x200003d8

08026b90 <__swhatbuf_r>:
 8026b90:	b570      	push	{r4, r5, r6, lr}
 8026b92:	460e      	mov	r6, r1
 8026b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b98:	2900      	cmp	r1, #0
 8026b9a:	b096      	sub	sp, #88	; 0x58
 8026b9c:	4614      	mov	r4, r2
 8026b9e:	461d      	mov	r5, r3
 8026ba0:	da08      	bge.n	8026bb4 <__swhatbuf_r+0x24>
 8026ba2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8026ba6:	2200      	movs	r2, #0
 8026ba8:	602a      	str	r2, [r5, #0]
 8026baa:	061a      	lsls	r2, r3, #24
 8026bac:	d410      	bmi.n	8026bd0 <__swhatbuf_r+0x40>
 8026bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026bb2:	e00e      	b.n	8026bd2 <__swhatbuf_r+0x42>
 8026bb4:	466a      	mov	r2, sp
 8026bb6:	f000 ff2d 	bl	8027a14 <_fstat_r>
 8026bba:	2800      	cmp	r0, #0
 8026bbc:	dbf1      	blt.n	8026ba2 <__swhatbuf_r+0x12>
 8026bbe:	9a01      	ldr	r2, [sp, #4]
 8026bc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026bc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026bc8:	425a      	negs	r2, r3
 8026bca:	415a      	adcs	r2, r3
 8026bcc:	602a      	str	r2, [r5, #0]
 8026bce:	e7ee      	b.n	8026bae <__swhatbuf_r+0x1e>
 8026bd0:	2340      	movs	r3, #64	; 0x40
 8026bd2:	2000      	movs	r0, #0
 8026bd4:	6023      	str	r3, [r4, #0]
 8026bd6:	b016      	add	sp, #88	; 0x58
 8026bd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08026bdc <__smakebuf_r>:
 8026bdc:	898b      	ldrh	r3, [r1, #12]
 8026bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026be0:	079d      	lsls	r5, r3, #30
 8026be2:	4606      	mov	r6, r0
 8026be4:	460c      	mov	r4, r1
 8026be6:	d507      	bpl.n	8026bf8 <__smakebuf_r+0x1c>
 8026be8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026bec:	6023      	str	r3, [r4, #0]
 8026bee:	6123      	str	r3, [r4, #16]
 8026bf0:	2301      	movs	r3, #1
 8026bf2:	6163      	str	r3, [r4, #20]
 8026bf4:	b002      	add	sp, #8
 8026bf6:	bd70      	pop	{r4, r5, r6, pc}
 8026bf8:	ab01      	add	r3, sp, #4
 8026bfa:	466a      	mov	r2, sp
 8026bfc:	f7ff ffc8 	bl	8026b90 <__swhatbuf_r>
 8026c00:	9900      	ldr	r1, [sp, #0]
 8026c02:	4605      	mov	r5, r0
 8026c04:	4630      	mov	r0, r6
 8026c06:	f7fc fe6d 	bl	80238e4 <_malloc_r>
 8026c0a:	b948      	cbnz	r0, 8026c20 <__smakebuf_r+0x44>
 8026c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026c10:	059a      	lsls	r2, r3, #22
 8026c12:	d4ef      	bmi.n	8026bf4 <__smakebuf_r+0x18>
 8026c14:	f023 0303 	bic.w	r3, r3, #3
 8026c18:	f043 0302 	orr.w	r3, r3, #2
 8026c1c:	81a3      	strh	r3, [r4, #12]
 8026c1e:	e7e3      	b.n	8026be8 <__smakebuf_r+0xc>
 8026c20:	4b0d      	ldr	r3, [pc, #52]	; (8026c58 <__smakebuf_r+0x7c>)
 8026c22:	62b3      	str	r3, [r6, #40]	; 0x28
 8026c24:	89a3      	ldrh	r3, [r4, #12]
 8026c26:	6020      	str	r0, [r4, #0]
 8026c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026c2c:	81a3      	strh	r3, [r4, #12]
 8026c2e:	9b00      	ldr	r3, [sp, #0]
 8026c30:	6163      	str	r3, [r4, #20]
 8026c32:	9b01      	ldr	r3, [sp, #4]
 8026c34:	6120      	str	r0, [r4, #16]
 8026c36:	b15b      	cbz	r3, 8026c50 <__smakebuf_r+0x74>
 8026c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026c3c:	4630      	mov	r0, r6
 8026c3e:	f000 fefb 	bl	8027a38 <_isatty_r>
 8026c42:	b128      	cbz	r0, 8026c50 <__smakebuf_r+0x74>
 8026c44:	89a3      	ldrh	r3, [r4, #12]
 8026c46:	f023 0303 	bic.w	r3, r3, #3
 8026c4a:	f043 0301 	orr.w	r3, r3, #1
 8026c4e:	81a3      	strh	r3, [r4, #12]
 8026c50:	89a0      	ldrh	r0, [r4, #12]
 8026c52:	4305      	orrs	r5, r0
 8026c54:	81a5      	strh	r5, [r4, #12]
 8026c56:	e7cd      	b.n	8026bf4 <__smakebuf_r+0x18>
 8026c58:	08026309 	.word	0x08026309

08026c5c <__ascii_mbtowc>:
 8026c5c:	b082      	sub	sp, #8
 8026c5e:	b901      	cbnz	r1, 8026c62 <__ascii_mbtowc+0x6>
 8026c60:	a901      	add	r1, sp, #4
 8026c62:	b142      	cbz	r2, 8026c76 <__ascii_mbtowc+0x1a>
 8026c64:	b14b      	cbz	r3, 8026c7a <__ascii_mbtowc+0x1e>
 8026c66:	7813      	ldrb	r3, [r2, #0]
 8026c68:	600b      	str	r3, [r1, #0]
 8026c6a:	7812      	ldrb	r2, [r2, #0]
 8026c6c:	1e10      	subs	r0, r2, #0
 8026c6e:	bf18      	it	ne
 8026c70:	2001      	movne	r0, #1
 8026c72:	b002      	add	sp, #8
 8026c74:	4770      	bx	lr
 8026c76:	4610      	mov	r0, r2
 8026c78:	e7fb      	b.n	8026c72 <__ascii_mbtowc+0x16>
 8026c7a:	f06f 0001 	mvn.w	r0, #1
 8026c7e:	e7f8      	b.n	8026c72 <__ascii_mbtowc+0x16>

08026c80 <__malloc_lock>:
 8026c80:	4801      	ldr	r0, [pc, #4]	; (8026c88 <__malloc_lock+0x8>)
 8026c82:	f7fc bd6a 	b.w	802375a <__retarget_lock_acquire_recursive>
 8026c86:	bf00      	nop
 8026c88:	20004ce8 	.word	0x20004ce8

08026c8c <__malloc_unlock>:
 8026c8c:	4801      	ldr	r0, [pc, #4]	; (8026c94 <__malloc_unlock+0x8>)
 8026c8e:	f7fc bd65 	b.w	802375c <__retarget_lock_release_recursive>
 8026c92:	bf00      	nop
 8026c94:	20004ce8 	.word	0x20004ce8

08026c98 <_Balloc>:
 8026c98:	b570      	push	{r4, r5, r6, lr}
 8026c9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026c9c:	4604      	mov	r4, r0
 8026c9e:	460d      	mov	r5, r1
 8026ca0:	b976      	cbnz	r6, 8026cc0 <_Balloc+0x28>
 8026ca2:	2010      	movs	r0, #16
 8026ca4:	f7fc fd5c 	bl	8023760 <malloc>
 8026ca8:	4602      	mov	r2, r0
 8026caa:	6260      	str	r0, [r4, #36]	; 0x24
 8026cac:	b920      	cbnz	r0, 8026cb8 <_Balloc+0x20>
 8026cae:	4b18      	ldr	r3, [pc, #96]	; (8026d10 <_Balloc+0x78>)
 8026cb0:	4818      	ldr	r0, [pc, #96]	; (8026d14 <_Balloc+0x7c>)
 8026cb2:	2166      	movs	r1, #102	; 0x66
 8026cb4:	f7fc fcea 	bl	802368c <__assert_func>
 8026cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026cbc:	6006      	str	r6, [r0, #0]
 8026cbe:	60c6      	str	r6, [r0, #12]
 8026cc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8026cc2:	68f3      	ldr	r3, [r6, #12]
 8026cc4:	b183      	cbz	r3, 8026ce8 <_Balloc+0x50>
 8026cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026cc8:	68db      	ldr	r3, [r3, #12]
 8026cca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8026cce:	b9b8      	cbnz	r0, 8026d00 <_Balloc+0x68>
 8026cd0:	2101      	movs	r1, #1
 8026cd2:	fa01 f605 	lsl.w	r6, r1, r5
 8026cd6:	1d72      	adds	r2, r6, #5
 8026cd8:	0092      	lsls	r2, r2, #2
 8026cda:	4620      	mov	r0, r4
 8026cdc:	f7fc fd80 	bl	80237e0 <_calloc_r>
 8026ce0:	b160      	cbz	r0, 8026cfc <_Balloc+0x64>
 8026ce2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8026ce6:	e00e      	b.n	8026d06 <_Balloc+0x6e>
 8026ce8:	2221      	movs	r2, #33	; 0x21
 8026cea:	2104      	movs	r1, #4
 8026cec:	4620      	mov	r0, r4
 8026cee:	f7fc fd77 	bl	80237e0 <_calloc_r>
 8026cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026cf4:	60f0      	str	r0, [r6, #12]
 8026cf6:	68db      	ldr	r3, [r3, #12]
 8026cf8:	2b00      	cmp	r3, #0
 8026cfa:	d1e4      	bne.n	8026cc6 <_Balloc+0x2e>
 8026cfc:	2000      	movs	r0, #0
 8026cfe:	bd70      	pop	{r4, r5, r6, pc}
 8026d00:	6802      	ldr	r2, [r0, #0]
 8026d02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8026d06:	2300      	movs	r3, #0
 8026d08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026d0c:	e7f7      	b.n	8026cfe <_Balloc+0x66>
 8026d0e:	bf00      	nop
 8026d10:	0802a146 	.word	0x0802a146
 8026d14:	0802a2a8 	.word	0x0802a2a8

08026d18 <_Bfree>:
 8026d18:	b570      	push	{r4, r5, r6, lr}
 8026d1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026d1c:	4605      	mov	r5, r0
 8026d1e:	460c      	mov	r4, r1
 8026d20:	b976      	cbnz	r6, 8026d40 <_Bfree+0x28>
 8026d22:	2010      	movs	r0, #16
 8026d24:	f7fc fd1c 	bl	8023760 <malloc>
 8026d28:	4602      	mov	r2, r0
 8026d2a:	6268      	str	r0, [r5, #36]	; 0x24
 8026d2c:	b920      	cbnz	r0, 8026d38 <_Bfree+0x20>
 8026d2e:	4b09      	ldr	r3, [pc, #36]	; (8026d54 <_Bfree+0x3c>)
 8026d30:	4809      	ldr	r0, [pc, #36]	; (8026d58 <_Bfree+0x40>)
 8026d32:	218a      	movs	r1, #138	; 0x8a
 8026d34:	f7fc fcaa 	bl	802368c <__assert_func>
 8026d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026d3c:	6006      	str	r6, [r0, #0]
 8026d3e:	60c6      	str	r6, [r0, #12]
 8026d40:	b13c      	cbz	r4, 8026d52 <_Bfree+0x3a>
 8026d42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8026d44:	6862      	ldr	r2, [r4, #4]
 8026d46:	68db      	ldr	r3, [r3, #12]
 8026d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026d4c:	6021      	str	r1, [r4, #0]
 8026d4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026d52:	bd70      	pop	{r4, r5, r6, pc}
 8026d54:	0802a146 	.word	0x0802a146
 8026d58:	0802a2a8 	.word	0x0802a2a8

08026d5c <__multadd>:
 8026d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d60:	690d      	ldr	r5, [r1, #16]
 8026d62:	4607      	mov	r7, r0
 8026d64:	460c      	mov	r4, r1
 8026d66:	461e      	mov	r6, r3
 8026d68:	f101 0c14 	add.w	ip, r1, #20
 8026d6c:	2000      	movs	r0, #0
 8026d6e:	f8dc 3000 	ldr.w	r3, [ip]
 8026d72:	b299      	uxth	r1, r3
 8026d74:	fb02 6101 	mla	r1, r2, r1, r6
 8026d78:	0c1e      	lsrs	r6, r3, #16
 8026d7a:	0c0b      	lsrs	r3, r1, #16
 8026d7c:	fb02 3306 	mla	r3, r2, r6, r3
 8026d80:	b289      	uxth	r1, r1
 8026d82:	3001      	adds	r0, #1
 8026d84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026d88:	4285      	cmp	r5, r0
 8026d8a:	f84c 1b04 	str.w	r1, [ip], #4
 8026d8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8026d92:	dcec      	bgt.n	8026d6e <__multadd+0x12>
 8026d94:	b30e      	cbz	r6, 8026dda <__multadd+0x7e>
 8026d96:	68a3      	ldr	r3, [r4, #8]
 8026d98:	42ab      	cmp	r3, r5
 8026d9a:	dc19      	bgt.n	8026dd0 <__multadd+0x74>
 8026d9c:	6861      	ldr	r1, [r4, #4]
 8026d9e:	4638      	mov	r0, r7
 8026da0:	3101      	adds	r1, #1
 8026da2:	f7ff ff79 	bl	8026c98 <_Balloc>
 8026da6:	4680      	mov	r8, r0
 8026da8:	b928      	cbnz	r0, 8026db6 <__multadd+0x5a>
 8026daa:	4602      	mov	r2, r0
 8026dac:	4b0c      	ldr	r3, [pc, #48]	; (8026de0 <__multadd+0x84>)
 8026dae:	480d      	ldr	r0, [pc, #52]	; (8026de4 <__multadd+0x88>)
 8026db0:	21b5      	movs	r1, #181	; 0xb5
 8026db2:	f7fc fc6b 	bl	802368c <__assert_func>
 8026db6:	6922      	ldr	r2, [r4, #16]
 8026db8:	3202      	adds	r2, #2
 8026dba:	f104 010c 	add.w	r1, r4, #12
 8026dbe:	0092      	lsls	r2, r2, #2
 8026dc0:	300c      	adds	r0, #12
 8026dc2:	f7fc fcdd 	bl	8023780 <memcpy>
 8026dc6:	4621      	mov	r1, r4
 8026dc8:	4638      	mov	r0, r7
 8026dca:	f7ff ffa5 	bl	8026d18 <_Bfree>
 8026dce:	4644      	mov	r4, r8
 8026dd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8026dd4:	3501      	adds	r5, #1
 8026dd6:	615e      	str	r6, [r3, #20]
 8026dd8:	6125      	str	r5, [r4, #16]
 8026dda:	4620      	mov	r0, r4
 8026ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026de0:	0802a1b8 	.word	0x0802a1b8
 8026de4:	0802a2a8 	.word	0x0802a2a8

08026de8 <__s2b>:
 8026de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026dec:	460c      	mov	r4, r1
 8026dee:	4615      	mov	r5, r2
 8026df0:	461f      	mov	r7, r3
 8026df2:	2209      	movs	r2, #9
 8026df4:	3308      	adds	r3, #8
 8026df6:	4606      	mov	r6, r0
 8026df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8026dfc:	2100      	movs	r1, #0
 8026dfe:	2201      	movs	r2, #1
 8026e00:	429a      	cmp	r2, r3
 8026e02:	db09      	blt.n	8026e18 <__s2b+0x30>
 8026e04:	4630      	mov	r0, r6
 8026e06:	f7ff ff47 	bl	8026c98 <_Balloc>
 8026e0a:	b940      	cbnz	r0, 8026e1e <__s2b+0x36>
 8026e0c:	4602      	mov	r2, r0
 8026e0e:	4b19      	ldr	r3, [pc, #100]	; (8026e74 <__s2b+0x8c>)
 8026e10:	4819      	ldr	r0, [pc, #100]	; (8026e78 <__s2b+0x90>)
 8026e12:	21ce      	movs	r1, #206	; 0xce
 8026e14:	f7fc fc3a 	bl	802368c <__assert_func>
 8026e18:	0052      	lsls	r2, r2, #1
 8026e1a:	3101      	adds	r1, #1
 8026e1c:	e7f0      	b.n	8026e00 <__s2b+0x18>
 8026e1e:	9b08      	ldr	r3, [sp, #32]
 8026e20:	6143      	str	r3, [r0, #20]
 8026e22:	2d09      	cmp	r5, #9
 8026e24:	f04f 0301 	mov.w	r3, #1
 8026e28:	6103      	str	r3, [r0, #16]
 8026e2a:	dd16      	ble.n	8026e5a <__s2b+0x72>
 8026e2c:	f104 0909 	add.w	r9, r4, #9
 8026e30:	46c8      	mov	r8, r9
 8026e32:	442c      	add	r4, r5
 8026e34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8026e38:	4601      	mov	r1, r0
 8026e3a:	3b30      	subs	r3, #48	; 0x30
 8026e3c:	220a      	movs	r2, #10
 8026e3e:	4630      	mov	r0, r6
 8026e40:	f7ff ff8c 	bl	8026d5c <__multadd>
 8026e44:	45a0      	cmp	r8, r4
 8026e46:	d1f5      	bne.n	8026e34 <__s2b+0x4c>
 8026e48:	f1a5 0408 	sub.w	r4, r5, #8
 8026e4c:	444c      	add	r4, r9
 8026e4e:	1b2d      	subs	r5, r5, r4
 8026e50:	1963      	adds	r3, r4, r5
 8026e52:	42bb      	cmp	r3, r7
 8026e54:	db04      	blt.n	8026e60 <__s2b+0x78>
 8026e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026e5a:	340a      	adds	r4, #10
 8026e5c:	2509      	movs	r5, #9
 8026e5e:	e7f6      	b.n	8026e4e <__s2b+0x66>
 8026e60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8026e64:	4601      	mov	r1, r0
 8026e66:	3b30      	subs	r3, #48	; 0x30
 8026e68:	220a      	movs	r2, #10
 8026e6a:	4630      	mov	r0, r6
 8026e6c:	f7ff ff76 	bl	8026d5c <__multadd>
 8026e70:	e7ee      	b.n	8026e50 <__s2b+0x68>
 8026e72:	bf00      	nop
 8026e74:	0802a1b8 	.word	0x0802a1b8
 8026e78:	0802a2a8 	.word	0x0802a2a8

08026e7c <__hi0bits>:
 8026e7c:	0c03      	lsrs	r3, r0, #16
 8026e7e:	041b      	lsls	r3, r3, #16
 8026e80:	b9d3      	cbnz	r3, 8026eb8 <__hi0bits+0x3c>
 8026e82:	0400      	lsls	r0, r0, #16
 8026e84:	2310      	movs	r3, #16
 8026e86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8026e8a:	bf04      	itt	eq
 8026e8c:	0200      	lsleq	r0, r0, #8
 8026e8e:	3308      	addeq	r3, #8
 8026e90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8026e94:	bf04      	itt	eq
 8026e96:	0100      	lsleq	r0, r0, #4
 8026e98:	3304      	addeq	r3, #4
 8026e9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8026e9e:	bf04      	itt	eq
 8026ea0:	0080      	lsleq	r0, r0, #2
 8026ea2:	3302      	addeq	r3, #2
 8026ea4:	2800      	cmp	r0, #0
 8026ea6:	db05      	blt.n	8026eb4 <__hi0bits+0x38>
 8026ea8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8026eac:	f103 0301 	add.w	r3, r3, #1
 8026eb0:	bf08      	it	eq
 8026eb2:	2320      	moveq	r3, #32
 8026eb4:	4618      	mov	r0, r3
 8026eb6:	4770      	bx	lr
 8026eb8:	2300      	movs	r3, #0
 8026eba:	e7e4      	b.n	8026e86 <__hi0bits+0xa>

08026ebc <__lo0bits>:
 8026ebc:	6803      	ldr	r3, [r0, #0]
 8026ebe:	f013 0207 	ands.w	r2, r3, #7
 8026ec2:	4601      	mov	r1, r0
 8026ec4:	d00b      	beq.n	8026ede <__lo0bits+0x22>
 8026ec6:	07da      	lsls	r2, r3, #31
 8026ec8:	d423      	bmi.n	8026f12 <__lo0bits+0x56>
 8026eca:	0798      	lsls	r0, r3, #30
 8026ecc:	bf49      	itett	mi
 8026ece:	085b      	lsrmi	r3, r3, #1
 8026ed0:	089b      	lsrpl	r3, r3, #2
 8026ed2:	2001      	movmi	r0, #1
 8026ed4:	600b      	strmi	r3, [r1, #0]
 8026ed6:	bf5c      	itt	pl
 8026ed8:	600b      	strpl	r3, [r1, #0]
 8026eda:	2002      	movpl	r0, #2
 8026edc:	4770      	bx	lr
 8026ede:	b298      	uxth	r0, r3
 8026ee0:	b9a8      	cbnz	r0, 8026f0e <__lo0bits+0x52>
 8026ee2:	0c1b      	lsrs	r3, r3, #16
 8026ee4:	2010      	movs	r0, #16
 8026ee6:	b2da      	uxtb	r2, r3
 8026ee8:	b90a      	cbnz	r2, 8026eee <__lo0bits+0x32>
 8026eea:	3008      	adds	r0, #8
 8026eec:	0a1b      	lsrs	r3, r3, #8
 8026eee:	071a      	lsls	r2, r3, #28
 8026ef0:	bf04      	itt	eq
 8026ef2:	091b      	lsreq	r3, r3, #4
 8026ef4:	3004      	addeq	r0, #4
 8026ef6:	079a      	lsls	r2, r3, #30
 8026ef8:	bf04      	itt	eq
 8026efa:	089b      	lsreq	r3, r3, #2
 8026efc:	3002      	addeq	r0, #2
 8026efe:	07da      	lsls	r2, r3, #31
 8026f00:	d403      	bmi.n	8026f0a <__lo0bits+0x4e>
 8026f02:	085b      	lsrs	r3, r3, #1
 8026f04:	f100 0001 	add.w	r0, r0, #1
 8026f08:	d005      	beq.n	8026f16 <__lo0bits+0x5a>
 8026f0a:	600b      	str	r3, [r1, #0]
 8026f0c:	4770      	bx	lr
 8026f0e:	4610      	mov	r0, r2
 8026f10:	e7e9      	b.n	8026ee6 <__lo0bits+0x2a>
 8026f12:	2000      	movs	r0, #0
 8026f14:	4770      	bx	lr
 8026f16:	2020      	movs	r0, #32
 8026f18:	4770      	bx	lr
	...

08026f1c <__i2b>:
 8026f1c:	b510      	push	{r4, lr}
 8026f1e:	460c      	mov	r4, r1
 8026f20:	2101      	movs	r1, #1
 8026f22:	f7ff feb9 	bl	8026c98 <_Balloc>
 8026f26:	4602      	mov	r2, r0
 8026f28:	b928      	cbnz	r0, 8026f36 <__i2b+0x1a>
 8026f2a:	4b05      	ldr	r3, [pc, #20]	; (8026f40 <__i2b+0x24>)
 8026f2c:	4805      	ldr	r0, [pc, #20]	; (8026f44 <__i2b+0x28>)
 8026f2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8026f32:	f7fc fbab 	bl	802368c <__assert_func>
 8026f36:	2301      	movs	r3, #1
 8026f38:	6144      	str	r4, [r0, #20]
 8026f3a:	6103      	str	r3, [r0, #16]
 8026f3c:	bd10      	pop	{r4, pc}
 8026f3e:	bf00      	nop
 8026f40:	0802a1b8 	.word	0x0802a1b8
 8026f44:	0802a2a8 	.word	0x0802a2a8

08026f48 <__multiply>:
 8026f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f4c:	4691      	mov	r9, r2
 8026f4e:	690a      	ldr	r2, [r1, #16]
 8026f50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8026f54:	429a      	cmp	r2, r3
 8026f56:	bfb8      	it	lt
 8026f58:	460b      	movlt	r3, r1
 8026f5a:	460c      	mov	r4, r1
 8026f5c:	bfbc      	itt	lt
 8026f5e:	464c      	movlt	r4, r9
 8026f60:	4699      	movlt	r9, r3
 8026f62:	6927      	ldr	r7, [r4, #16]
 8026f64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8026f68:	68a3      	ldr	r3, [r4, #8]
 8026f6a:	6861      	ldr	r1, [r4, #4]
 8026f6c:	eb07 060a 	add.w	r6, r7, sl
 8026f70:	42b3      	cmp	r3, r6
 8026f72:	b085      	sub	sp, #20
 8026f74:	bfb8      	it	lt
 8026f76:	3101      	addlt	r1, #1
 8026f78:	f7ff fe8e 	bl	8026c98 <_Balloc>
 8026f7c:	b930      	cbnz	r0, 8026f8c <__multiply+0x44>
 8026f7e:	4602      	mov	r2, r0
 8026f80:	4b44      	ldr	r3, [pc, #272]	; (8027094 <__multiply+0x14c>)
 8026f82:	4845      	ldr	r0, [pc, #276]	; (8027098 <__multiply+0x150>)
 8026f84:	f240 115d 	movw	r1, #349	; 0x15d
 8026f88:	f7fc fb80 	bl	802368c <__assert_func>
 8026f8c:	f100 0514 	add.w	r5, r0, #20
 8026f90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8026f94:	462b      	mov	r3, r5
 8026f96:	2200      	movs	r2, #0
 8026f98:	4543      	cmp	r3, r8
 8026f9a:	d321      	bcc.n	8026fe0 <__multiply+0x98>
 8026f9c:	f104 0314 	add.w	r3, r4, #20
 8026fa0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8026fa4:	f109 0314 	add.w	r3, r9, #20
 8026fa8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8026fac:	9202      	str	r2, [sp, #8]
 8026fae:	1b3a      	subs	r2, r7, r4
 8026fb0:	3a15      	subs	r2, #21
 8026fb2:	f022 0203 	bic.w	r2, r2, #3
 8026fb6:	3204      	adds	r2, #4
 8026fb8:	f104 0115 	add.w	r1, r4, #21
 8026fbc:	428f      	cmp	r7, r1
 8026fbe:	bf38      	it	cc
 8026fc0:	2204      	movcc	r2, #4
 8026fc2:	9201      	str	r2, [sp, #4]
 8026fc4:	9a02      	ldr	r2, [sp, #8]
 8026fc6:	9303      	str	r3, [sp, #12]
 8026fc8:	429a      	cmp	r2, r3
 8026fca:	d80c      	bhi.n	8026fe6 <__multiply+0x9e>
 8026fcc:	2e00      	cmp	r6, #0
 8026fce:	dd03      	ble.n	8026fd8 <__multiply+0x90>
 8026fd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8026fd4:	2b00      	cmp	r3, #0
 8026fd6:	d05a      	beq.n	802708e <__multiply+0x146>
 8026fd8:	6106      	str	r6, [r0, #16]
 8026fda:	b005      	add	sp, #20
 8026fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fe0:	f843 2b04 	str.w	r2, [r3], #4
 8026fe4:	e7d8      	b.n	8026f98 <__multiply+0x50>
 8026fe6:	f8b3 a000 	ldrh.w	sl, [r3]
 8026fea:	f1ba 0f00 	cmp.w	sl, #0
 8026fee:	d024      	beq.n	802703a <__multiply+0xf2>
 8026ff0:	f104 0e14 	add.w	lr, r4, #20
 8026ff4:	46a9      	mov	r9, r5
 8026ff6:	f04f 0c00 	mov.w	ip, #0
 8026ffa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8026ffe:	f8d9 1000 	ldr.w	r1, [r9]
 8027002:	fa1f fb82 	uxth.w	fp, r2
 8027006:	b289      	uxth	r1, r1
 8027008:	fb0a 110b 	mla	r1, sl, fp, r1
 802700c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8027010:	f8d9 2000 	ldr.w	r2, [r9]
 8027014:	4461      	add	r1, ip
 8027016:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802701a:	fb0a c20b 	mla	r2, sl, fp, ip
 802701e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8027022:	b289      	uxth	r1, r1
 8027024:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8027028:	4577      	cmp	r7, lr
 802702a:	f849 1b04 	str.w	r1, [r9], #4
 802702e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8027032:	d8e2      	bhi.n	8026ffa <__multiply+0xb2>
 8027034:	9a01      	ldr	r2, [sp, #4]
 8027036:	f845 c002 	str.w	ip, [r5, r2]
 802703a:	9a03      	ldr	r2, [sp, #12]
 802703c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8027040:	3304      	adds	r3, #4
 8027042:	f1b9 0f00 	cmp.w	r9, #0
 8027046:	d020      	beq.n	802708a <__multiply+0x142>
 8027048:	6829      	ldr	r1, [r5, #0]
 802704a:	f104 0c14 	add.w	ip, r4, #20
 802704e:	46ae      	mov	lr, r5
 8027050:	f04f 0a00 	mov.w	sl, #0
 8027054:	f8bc b000 	ldrh.w	fp, [ip]
 8027058:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802705c:	fb09 220b 	mla	r2, r9, fp, r2
 8027060:	4492      	add	sl, r2
 8027062:	b289      	uxth	r1, r1
 8027064:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8027068:	f84e 1b04 	str.w	r1, [lr], #4
 802706c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8027070:	f8be 1000 	ldrh.w	r1, [lr]
 8027074:	0c12      	lsrs	r2, r2, #16
 8027076:	fb09 1102 	mla	r1, r9, r2, r1
 802707a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802707e:	4567      	cmp	r7, ip
 8027080:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8027084:	d8e6      	bhi.n	8027054 <__multiply+0x10c>
 8027086:	9a01      	ldr	r2, [sp, #4]
 8027088:	50a9      	str	r1, [r5, r2]
 802708a:	3504      	adds	r5, #4
 802708c:	e79a      	b.n	8026fc4 <__multiply+0x7c>
 802708e:	3e01      	subs	r6, #1
 8027090:	e79c      	b.n	8026fcc <__multiply+0x84>
 8027092:	bf00      	nop
 8027094:	0802a1b8 	.word	0x0802a1b8
 8027098:	0802a2a8 	.word	0x0802a2a8

0802709c <__pow5mult>:
 802709c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80270a0:	4615      	mov	r5, r2
 80270a2:	f012 0203 	ands.w	r2, r2, #3
 80270a6:	4606      	mov	r6, r0
 80270a8:	460f      	mov	r7, r1
 80270aa:	d007      	beq.n	80270bc <__pow5mult+0x20>
 80270ac:	4c25      	ldr	r4, [pc, #148]	; (8027144 <__pow5mult+0xa8>)
 80270ae:	3a01      	subs	r2, #1
 80270b0:	2300      	movs	r3, #0
 80270b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80270b6:	f7ff fe51 	bl	8026d5c <__multadd>
 80270ba:	4607      	mov	r7, r0
 80270bc:	10ad      	asrs	r5, r5, #2
 80270be:	d03d      	beq.n	802713c <__pow5mult+0xa0>
 80270c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80270c2:	b97c      	cbnz	r4, 80270e4 <__pow5mult+0x48>
 80270c4:	2010      	movs	r0, #16
 80270c6:	f7fc fb4b 	bl	8023760 <malloc>
 80270ca:	4602      	mov	r2, r0
 80270cc:	6270      	str	r0, [r6, #36]	; 0x24
 80270ce:	b928      	cbnz	r0, 80270dc <__pow5mult+0x40>
 80270d0:	4b1d      	ldr	r3, [pc, #116]	; (8027148 <__pow5mult+0xac>)
 80270d2:	481e      	ldr	r0, [pc, #120]	; (802714c <__pow5mult+0xb0>)
 80270d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80270d8:	f7fc fad8 	bl	802368c <__assert_func>
 80270dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80270e0:	6004      	str	r4, [r0, #0]
 80270e2:	60c4      	str	r4, [r0, #12]
 80270e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80270e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80270ec:	b94c      	cbnz	r4, 8027102 <__pow5mult+0x66>
 80270ee:	f240 2171 	movw	r1, #625	; 0x271
 80270f2:	4630      	mov	r0, r6
 80270f4:	f7ff ff12 	bl	8026f1c <__i2b>
 80270f8:	2300      	movs	r3, #0
 80270fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80270fe:	4604      	mov	r4, r0
 8027100:	6003      	str	r3, [r0, #0]
 8027102:	f04f 0900 	mov.w	r9, #0
 8027106:	07eb      	lsls	r3, r5, #31
 8027108:	d50a      	bpl.n	8027120 <__pow5mult+0x84>
 802710a:	4639      	mov	r1, r7
 802710c:	4622      	mov	r2, r4
 802710e:	4630      	mov	r0, r6
 8027110:	f7ff ff1a 	bl	8026f48 <__multiply>
 8027114:	4639      	mov	r1, r7
 8027116:	4680      	mov	r8, r0
 8027118:	4630      	mov	r0, r6
 802711a:	f7ff fdfd 	bl	8026d18 <_Bfree>
 802711e:	4647      	mov	r7, r8
 8027120:	106d      	asrs	r5, r5, #1
 8027122:	d00b      	beq.n	802713c <__pow5mult+0xa0>
 8027124:	6820      	ldr	r0, [r4, #0]
 8027126:	b938      	cbnz	r0, 8027138 <__pow5mult+0x9c>
 8027128:	4622      	mov	r2, r4
 802712a:	4621      	mov	r1, r4
 802712c:	4630      	mov	r0, r6
 802712e:	f7ff ff0b 	bl	8026f48 <__multiply>
 8027132:	6020      	str	r0, [r4, #0]
 8027134:	f8c0 9000 	str.w	r9, [r0]
 8027138:	4604      	mov	r4, r0
 802713a:	e7e4      	b.n	8027106 <__pow5mult+0x6a>
 802713c:	4638      	mov	r0, r7
 802713e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027142:	bf00      	nop
 8027144:	0802a3f8 	.word	0x0802a3f8
 8027148:	0802a146 	.word	0x0802a146
 802714c:	0802a2a8 	.word	0x0802a2a8

08027150 <__lshift>:
 8027150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027154:	460c      	mov	r4, r1
 8027156:	6849      	ldr	r1, [r1, #4]
 8027158:	6923      	ldr	r3, [r4, #16]
 802715a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802715e:	68a3      	ldr	r3, [r4, #8]
 8027160:	4607      	mov	r7, r0
 8027162:	4691      	mov	r9, r2
 8027164:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8027168:	f108 0601 	add.w	r6, r8, #1
 802716c:	42b3      	cmp	r3, r6
 802716e:	db0b      	blt.n	8027188 <__lshift+0x38>
 8027170:	4638      	mov	r0, r7
 8027172:	f7ff fd91 	bl	8026c98 <_Balloc>
 8027176:	4605      	mov	r5, r0
 8027178:	b948      	cbnz	r0, 802718e <__lshift+0x3e>
 802717a:	4602      	mov	r2, r0
 802717c:	4b2a      	ldr	r3, [pc, #168]	; (8027228 <__lshift+0xd8>)
 802717e:	482b      	ldr	r0, [pc, #172]	; (802722c <__lshift+0xdc>)
 8027180:	f240 11d9 	movw	r1, #473	; 0x1d9
 8027184:	f7fc fa82 	bl	802368c <__assert_func>
 8027188:	3101      	adds	r1, #1
 802718a:	005b      	lsls	r3, r3, #1
 802718c:	e7ee      	b.n	802716c <__lshift+0x1c>
 802718e:	2300      	movs	r3, #0
 8027190:	f100 0114 	add.w	r1, r0, #20
 8027194:	f100 0210 	add.w	r2, r0, #16
 8027198:	4618      	mov	r0, r3
 802719a:	4553      	cmp	r3, sl
 802719c:	db37      	blt.n	802720e <__lshift+0xbe>
 802719e:	6920      	ldr	r0, [r4, #16]
 80271a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80271a4:	f104 0314 	add.w	r3, r4, #20
 80271a8:	f019 091f 	ands.w	r9, r9, #31
 80271ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80271b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80271b4:	d02f      	beq.n	8027216 <__lshift+0xc6>
 80271b6:	f1c9 0e20 	rsb	lr, r9, #32
 80271ba:	468a      	mov	sl, r1
 80271bc:	f04f 0c00 	mov.w	ip, #0
 80271c0:	681a      	ldr	r2, [r3, #0]
 80271c2:	fa02 f209 	lsl.w	r2, r2, r9
 80271c6:	ea42 020c 	orr.w	r2, r2, ip
 80271ca:	f84a 2b04 	str.w	r2, [sl], #4
 80271ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80271d2:	4298      	cmp	r0, r3
 80271d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80271d8:	d8f2      	bhi.n	80271c0 <__lshift+0x70>
 80271da:	1b03      	subs	r3, r0, r4
 80271dc:	3b15      	subs	r3, #21
 80271de:	f023 0303 	bic.w	r3, r3, #3
 80271e2:	3304      	adds	r3, #4
 80271e4:	f104 0215 	add.w	r2, r4, #21
 80271e8:	4290      	cmp	r0, r2
 80271ea:	bf38      	it	cc
 80271ec:	2304      	movcc	r3, #4
 80271ee:	f841 c003 	str.w	ip, [r1, r3]
 80271f2:	f1bc 0f00 	cmp.w	ip, #0
 80271f6:	d001      	beq.n	80271fc <__lshift+0xac>
 80271f8:	f108 0602 	add.w	r6, r8, #2
 80271fc:	3e01      	subs	r6, #1
 80271fe:	4638      	mov	r0, r7
 8027200:	612e      	str	r6, [r5, #16]
 8027202:	4621      	mov	r1, r4
 8027204:	f7ff fd88 	bl	8026d18 <_Bfree>
 8027208:	4628      	mov	r0, r5
 802720a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802720e:	f842 0f04 	str.w	r0, [r2, #4]!
 8027212:	3301      	adds	r3, #1
 8027214:	e7c1      	b.n	802719a <__lshift+0x4a>
 8027216:	3904      	subs	r1, #4
 8027218:	f853 2b04 	ldr.w	r2, [r3], #4
 802721c:	f841 2f04 	str.w	r2, [r1, #4]!
 8027220:	4298      	cmp	r0, r3
 8027222:	d8f9      	bhi.n	8027218 <__lshift+0xc8>
 8027224:	e7ea      	b.n	80271fc <__lshift+0xac>
 8027226:	bf00      	nop
 8027228:	0802a1b8 	.word	0x0802a1b8
 802722c:	0802a2a8 	.word	0x0802a2a8

08027230 <__mcmp>:
 8027230:	b530      	push	{r4, r5, lr}
 8027232:	6902      	ldr	r2, [r0, #16]
 8027234:	690c      	ldr	r4, [r1, #16]
 8027236:	1b12      	subs	r2, r2, r4
 8027238:	d10e      	bne.n	8027258 <__mcmp+0x28>
 802723a:	f100 0314 	add.w	r3, r0, #20
 802723e:	3114      	adds	r1, #20
 8027240:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8027244:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8027248:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802724c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8027250:	42a5      	cmp	r5, r4
 8027252:	d003      	beq.n	802725c <__mcmp+0x2c>
 8027254:	d305      	bcc.n	8027262 <__mcmp+0x32>
 8027256:	2201      	movs	r2, #1
 8027258:	4610      	mov	r0, r2
 802725a:	bd30      	pop	{r4, r5, pc}
 802725c:	4283      	cmp	r3, r0
 802725e:	d3f3      	bcc.n	8027248 <__mcmp+0x18>
 8027260:	e7fa      	b.n	8027258 <__mcmp+0x28>
 8027262:	f04f 32ff 	mov.w	r2, #4294967295
 8027266:	e7f7      	b.n	8027258 <__mcmp+0x28>

08027268 <__mdiff>:
 8027268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802726c:	460c      	mov	r4, r1
 802726e:	4606      	mov	r6, r0
 8027270:	4611      	mov	r1, r2
 8027272:	4620      	mov	r0, r4
 8027274:	4690      	mov	r8, r2
 8027276:	f7ff ffdb 	bl	8027230 <__mcmp>
 802727a:	1e05      	subs	r5, r0, #0
 802727c:	d110      	bne.n	80272a0 <__mdiff+0x38>
 802727e:	4629      	mov	r1, r5
 8027280:	4630      	mov	r0, r6
 8027282:	f7ff fd09 	bl	8026c98 <_Balloc>
 8027286:	b930      	cbnz	r0, 8027296 <__mdiff+0x2e>
 8027288:	4b3a      	ldr	r3, [pc, #232]	; (8027374 <__mdiff+0x10c>)
 802728a:	4602      	mov	r2, r0
 802728c:	f240 2132 	movw	r1, #562	; 0x232
 8027290:	4839      	ldr	r0, [pc, #228]	; (8027378 <__mdiff+0x110>)
 8027292:	f7fc f9fb 	bl	802368c <__assert_func>
 8027296:	2301      	movs	r3, #1
 8027298:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802729c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80272a0:	bfa4      	itt	ge
 80272a2:	4643      	movge	r3, r8
 80272a4:	46a0      	movge	r8, r4
 80272a6:	4630      	mov	r0, r6
 80272a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80272ac:	bfa6      	itte	ge
 80272ae:	461c      	movge	r4, r3
 80272b0:	2500      	movge	r5, #0
 80272b2:	2501      	movlt	r5, #1
 80272b4:	f7ff fcf0 	bl	8026c98 <_Balloc>
 80272b8:	b920      	cbnz	r0, 80272c4 <__mdiff+0x5c>
 80272ba:	4b2e      	ldr	r3, [pc, #184]	; (8027374 <__mdiff+0x10c>)
 80272bc:	4602      	mov	r2, r0
 80272be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80272c2:	e7e5      	b.n	8027290 <__mdiff+0x28>
 80272c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80272c8:	6926      	ldr	r6, [r4, #16]
 80272ca:	60c5      	str	r5, [r0, #12]
 80272cc:	f104 0914 	add.w	r9, r4, #20
 80272d0:	f108 0514 	add.w	r5, r8, #20
 80272d4:	f100 0e14 	add.w	lr, r0, #20
 80272d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80272dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80272e0:	f108 0210 	add.w	r2, r8, #16
 80272e4:	46f2      	mov	sl, lr
 80272e6:	2100      	movs	r1, #0
 80272e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80272ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80272f0:	fa1f f883 	uxth.w	r8, r3
 80272f4:	fa11 f18b 	uxtah	r1, r1, fp
 80272f8:	0c1b      	lsrs	r3, r3, #16
 80272fa:	eba1 0808 	sub.w	r8, r1, r8
 80272fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8027302:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8027306:	fa1f f888 	uxth.w	r8, r8
 802730a:	1419      	asrs	r1, r3, #16
 802730c:	454e      	cmp	r6, r9
 802730e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8027312:	f84a 3b04 	str.w	r3, [sl], #4
 8027316:	d8e7      	bhi.n	80272e8 <__mdiff+0x80>
 8027318:	1b33      	subs	r3, r6, r4
 802731a:	3b15      	subs	r3, #21
 802731c:	f023 0303 	bic.w	r3, r3, #3
 8027320:	3304      	adds	r3, #4
 8027322:	3415      	adds	r4, #21
 8027324:	42a6      	cmp	r6, r4
 8027326:	bf38      	it	cc
 8027328:	2304      	movcc	r3, #4
 802732a:	441d      	add	r5, r3
 802732c:	4473      	add	r3, lr
 802732e:	469e      	mov	lr, r3
 8027330:	462e      	mov	r6, r5
 8027332:	4566      	cmp	r6, ip
 8027334:	d30e      	bcc.n	8027354 <__mdiff+0xec>
 8027336:	f10c 0203 	add.w	r2, ip, #3
 802733a:	1b52      	subs	r2, r2, r5
 802733c:	f022 0203 	bic.w	r2, r2, #3
 8027340:	3d03      	subs	r5, #3
 8027342:	45ac      	cmp	ip, r5
 8027344:	bf38      	it	cc
 8027346:	2200      	movcc	r2, #0
 8027348:	441a      	add	r2, r3
 802734a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802734e:	b17b      	cbz	r3, 8027370 <__mdiff+0x108>
 8027350:	6107      	str	r7, [r0, #16]
 8027352:	e7a3      	b.n	802729c <__mdiff+0x34>
 8027354:	f856 8b04 	ldr.w	r8, [r6], #4
 8027358:	fa11 f288 	uxtah	r2, r1, r8
 802735c:	1414      	asrs	r4, r2, #16
 802735e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8027362:	b292      	uxth	r2, r2
 8027364:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8027368:	f84e 2b04 	str.w	r2, [lr], #4
 802736c:	1421      	asrs	r1, r4, #16
 802736e:	e7e0      	b.n	8027332 <__mdiff+0xca>
 8027370:	3f01      	subs	r7, #1
 8027372:	e7ea      	b.n	802734a <__mdiff+0xe2>
 8027374:	0802a1b8 	.word	0x0802a1b8
 8027378:	0802a2a8 	.word	0x0802a2a8

0802737c <__ulp>:
 802737c:	b082      	sub	sp, #8
 802737e:	ed8d 0b00 	vstr	d0, [sp]
 8027382:	9b01      	ldr	r3, [sp, #4]
 8027384:	4912      	ldr	r1, [pc, #72]	; (80273d0 <__ulp+0x54>)
 8027386:	4019      	ands	r1, r3
 8027388:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 802738c:	2900      	cmp	r1, #0
 802738e:	dd05      	ble.n	802739c <__ulp+0x20>
 8027390:	2200      	movs	r2, #0
 8027392:	460b      	mov	r3, r1
 8027394:	ec43 2b10 	vmov	d0, r2, r3
 8027398:	b002      	add	sp, #8
 802739a:	4770      	bx	lr
 802739c:	4249      	negs	r1, r1
 802739e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80273a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80273a6:	f04f 0200 	mov.w	r2, #0
 80273aa:	f04f 0300 	mov.w	r3, #0
 80273ae:	da04      	bge.n	80273ba <__ulp+0x3e>
 80273b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80273b4:	fa41 f300 	asr.w	r3, r1, r0
 80273b8:	e7ec      	b.n	8027394 <__ulp+0x18>
 80273ba:	f1a0 0114 	sub.w	r1, r0, #20
 80273be:	291e      	cmp	r1, #30
 80273c0:	bfda      	itte	le
 80273c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80273c6:	fa20 f101 	lsrle.w	r1, r0, r1
 80273ca:	2101      	movgt	r1, #1
 80273cc:	460a      	mov	r2, r1
 80273ce:	e7e1      	b.n	8027394 <__ulp+0x18>
 80273d0:	7ff00000 	.word	0x7ff00000

080273d4 <__b2d>:
 80273d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80273d6:	6905      	ldr	r5, [r0, #16]
 80273d8:	f100 0714 	add.w	r7, r0, #20
 80273dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80273e0:	1f2e      	subs	r6, r5, #4
 80273e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80273e6:	4620      	mov	r0, r4
 80273e8:	f7ff fd48 	bl	8026e7c <__hi0bits>
 80273ec:	f1c0 0320 	rsb	r3, r0, #32
 80273f0:	280a      	cmp	r0, #10
 80273f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8027470 <__b2d+0x9c>
 80273f6:	600b      	str	r3, [r1, #0]
 80273f8:	dc14      	bgt.n	8027424 <__b2d+0x50>
 80273fa:	f1c0 0e0b 	rsb	lr, r0, #11
 80273fe:	fa24 f10e 	lsr.w	r1, r4, lr
 8027402:	42b7      	cmp	r7, r6
 8027404:	ea41 030c 	orr.w	r3, r1, ip
 8027408:	bf34      	ite	cc
 802740a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802740e:	2100      	movcs	r1, #0
 8027410:	3015      	adds	r0, #21
 8027412:	fa04 f000 	lsl.w	r0, r4, r0
 8027416:	fa21 f10e 	lsr.w	r1, r1, lr
 802741a:	ea40 0201 	orr.w	r2, r0, r1
 802741e:	ec43 2b10 	vmov	d0, r2, r3
 8027422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027424:	42b7      	cmp	r7, r6
 8027426:	bf3a      	itte	cc
 8027428:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802742c:	f1a5 0608 	subcc.w	r6, r5, #8
 8027430:	2100      	movcs	r1, #0
 8027432:	380b      	subs	r0, #11
 8027434:	d017      	beq.n	8027466 <__b2d+0x92>
 8027436:	f1c0 0c20 	rsb	ip, r0, #32
 802743a:	fa04 f500 	lsl.w	r5, r4, r0
 802743e:	42be      	cmp	r6, r7
 8027440:	fa21 f40c 	lsr.w	r4, r1, ip
 8027444:	ea45 0504 	orr.w	r5, r5, r4
 8027448:	bf8c      	ite	hi
 802744a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802744e:	2400      	movls	r4, #0
 8027450:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8027454:	fa01 f000 	lsl.w	r0, r1, r0
 8027458:	fa24 f40c 	lsr.w	r4, r4, ip
 802745c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8027460:	ea40 0204 	orr.w	r2, r0, r4
 8027464:	e7db      	b.n	802741e <__b2d+0x4a>
 8027466:	ea44 030c 	orr.w	r3, r4, ip
 802746a:	460a      	mov	r2, r1
 802746c:	e7d7      	b.n	802741e <__b2d+0x4a>
 802746e:	bf00      	nop
 8027470:	3ff00000 	.word	0x3ff00000

08027474 <__d2b>:
 8027474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027478:	4689      	mov	r9, r1
 802747a:	2101      	movs	r1, #1
 802747c:	ec57 6b10 	vmov	r6, r7, d0
 8027480:	4690      	mov	r8, r2
 8027482:	f7ff fc09 	bl	8026c98 <_Balloc>
 8027486:	4604      	mov	r4, r0
 8027488:	b930      	cbnz	r0, 8027498 <__d2b+0x24>
 802748a:	4602      	mov	r2, r0
 802748c:	4b25      	ldr	r3, [pc, #148]	; (8027524 <__d2b+0xb0>)
 802748e:	4826      	ldr	r0, [pc, #152]	; (8027528 <__d2b+0xb4>)
 8027490:	f240 310a 	movw	r1, #778	; 0x30a
 8027494:	f7fc f8fa 	bl	802368c <__assert_func>
 8027498:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802749c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80274a0:	bb35      	cbnz	r5, 80274f0 <__d2b+0x7c>
 80274a2:	2e00      	cmp	r6, #0
 80274a4:	9301      	str	r3, [sp, #4]
 80274a6:	d028      	beq.n	80274fa <__d2b+0x86>
 80274a8:	4668      	mov	r0, sp
 80274aa:	9600      	str	r6, [sp, #0]
 80274ac:	f7ff fd06 	bl	8026ebc <__lo0bits>
 80274b0:	9900      	ldr	r1, [sp, #0]
 80274b2:	b300      	cbz	r0, 80274f6 <__d2b+0x82>
 80274b4:	9a01      	ldr	r2, [sp, #4]
 80274b6:	f1c0 0320 	rsb	r3, r0, #32
 80274ba:	fa02 f303 	lsl.w	r3, r2, r3
 80274be:	430b      	orrs	r3, r1
 80274c0:	40c2      	lsrs	r2, r0
 80274c2:	6163      	str	r3, [r4, #20]
 80274c4:	9201      	str	r2, [sp, #4]
 80274c6:	9b01      	ldr	r3, [sp, #4]
 80274c8:	61a3      	str	r3, [r4, #24]
 80274ca:	2b00      	cmp	r3, #0
 80274cc:	bf14      	ite	ne
 80274ce:	2202      	movne	r2, #2
 80274d0:	2201      	moveq	r2, #1
 80274d2:	6122      	str	r2, [r4, #16]
 80274d4:	b1d5      	cbz	r5, 802750c <__d2b+0x98>
 80274d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80274da:	4405      	add	r5, r0
 80274dc:	f8c9 5000 	str.w	r5, [r9]
 80274e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80274e4:	f8c8 0000 	str.w	r0, [r8]
 80274e8:	4620      	mov	r0, r4
 80274ea:	b003      	add	sp, #12
 80274ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80274f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80274f4:	e7d5      	b.n	80274a2 <__d2b+0x2e>
 80274f6:	6161      	str	r1, [r4, #20]
 80274f8:	e7e5      	b.n	80274c6 <__d2b+0x52>
 80274fa:	a801      	add	r0, sp, #4
 80274fc:	f7ff fcde 	bl	8026ebc <__lo0bits>
 8027500:	9b01      	ldr	r3, [sp, #4]
 8027502:	6163      	str	r3, [r4, #20]
 8027504:	2201      	movs	r2, #1
 8027506:	6122      	str	r2, [r4, #16]
 8027508:	3020      	adds	r0, #32
 802750a:	e7e3      	b.n	80274d4 <__d2b+0x60>
 802750c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8027510:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8027514:	f8c9 0000 	str.w	r0, [r9]
 8027518:	6918      	ldr	r0, [r3, #16]
 802751a:	f7ff fcaf 	bl	8026e7c <__hi0bits>
 802751e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8027522:	e7df      	b.n	80274e4 <__d2b+0x70>
 8027524:	0802a1b8 	.word	0x0802a1b8
 8027528:	0802a2a8 	.word	0x0802a2a8

0802752c <__ratio>:
 802752c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027530:	4688      	mov	r8, r1
 8027532:	4669      	mov	r1, sp
 8027534:	4681      	mov	r9, r0
 8027536:	f7ff ff4d 	bl	80273d4 <__b2d>
 802753a:	a901      	add	r1, sp, #4
 802753c:	4640      	mov	r0, r8
 802753e:	ec55 4b10 	vmov	r4, r5, d0
 8027542:	f7ff ff47 	bl	80273d4 <__b2d>
 8027546:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802754a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802754e:	eba3 0c02 	sub.w	ip, r3, r2
 8027552:	e9dd 3200 	ldrd	r3, r2, [sp]
 8027556:	1a9b      	subs	r3, r3, r2
 8027558:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802755c:	ec51 0b10 	vmov	r0, r1, d0
 8027560:	2b00      	cmp	r3, #0
 8027562:	bfd6      	itet	le
 8027564:	460a      	movle	r2, r1
 8027566:	462a      	movgt	r2, r5
 8027568:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802756c:	468b      	mov	fp, r1
 802756e:	462f      	mov	r7, r5
 8027570:	bfd4      	ite	le
 8027572:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8027576:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802757a:	4620      	mov	r0, r4
 802757c:	ee10 2a10 	vmov	r2, s0
 8027580:	465b      	mov	r3, fp
 8027582:	4639      	mov	r1, r7
 8027584:	f7d9 f96c 	bl	8000860 <__aeabi_ddiv>
 8027588:	ec41 0b10 	vmov	d0, r0, r1
 802758c:	b003      	add	sp, #12
 802758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027592 <__copybits>:
 8027592:	3901      	subs	r1, #1
 8027594:	b570      	push	{r4, r5, r6, lr}
 8027596:	1149      	asrs	r1, r1, #5
 8027598:	6914      	ldr	r4, [r2, #16]
 802759a:	3101      	adds	r1, #1
 802759c:	f102 0314 	add.w	r3, r2, #20
 80275a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80275a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80275a8:	1f05      	subs	r5, r0, #4
 80275aa:	42a3      	cmp	r3, r4
 80275ac:	d30c      	bcc.n	80275c8 <__copybits+0x36>
 80275ae:	1aa3      	subs	r3, r4, r2
 80275b0:	3b11      	subs	r3, #17
 80275b2:	f023 0303 	bic.w	r3, r3, #3
 80275b6:	3211      	adds	r2, #17
 80275b8:	42a2      	cmp	r2, r4
 80275ba:	bf88      	it	hi
 80275bc:	2300      	movhi	r3, #0
 80275be:	4418      	add	r0, r3
 80275c0:	2300      	movs	r3, #0
 80275c2:	4288      	cmp	r0, r1
 80275c4:	d305      	bcc.n	80275d2 <__copybits+0x40>
 80275c6:	bd70      	pop	{r4, r5, r6, pc}
 80275c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80275cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80275d0:	e7eb      	b.n	80275aa <__copybits+0x18>
 80275d2:	f840 3b04 	str.w	r3, [r0], #4
 80275d6:	e7f4      	b.n	80275c2 <__copybits+0x30>

080275d8 <__any_on>:
 80275d8:	f100 0214 	add.w	r2, r0, #20
 80275dc:	6900      	ldr	r0, [r0, #16]
 80275de:	114b      	asrs	r3, r1, #5
 80275e0:	4298      	cmp	r0, r3
 80275e2:	b510      	push	{r4, lr}
 80275e4:	db11      	blt.n	802760a <__any_on+0x32>
 80275e6:	dd0a      	ble.n	80275fe <__any_on+0x26>
 80275e8:	f011 011f 	ands.w	r1, r1, #31
 80275ec:	d007      	beq.n	80275fe <__any_on+0x26>
 80275ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80275f2:	fa24 f001 	lsr.w	r0, r4, r1
 80275f6:	fa00 f101 	lsl.w	r1, r0, r1
 80275fa:	428c      	cmp	r4, r1
 80275fc:	d10b      	bne.n	8027616 <__any_on+0x3e>
 80275fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027602:	4293      	cmp	r3, r2
 8027604:	d803      	bhi.n	802760e <__any_on+0x36>
 8027606:	2000      	movs	r0, #0
 8027608:	bd10      	pop	{r4, pc}
 802760a:	4603      	mov	r3, r0
 802760c:	e7f7      	b.n	80275fe <__any_on+0x26>
 802760e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8027612:	2900      	cmp	r1, #0
 8027614:	d0f5      	beq.n	8027602 <__any_on+0x2a>
 8027616:	2001      	movs	r0, #1
 8027618:	e7f6      	b.n	8027608 <__any_on+0x30>

0802761a <_realloc_r>:
 802761a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802761e:	4680      	mov	r8, r0
 8027620:	4614      	mov	r4, r2
 8027622:	460e      	mov	r6, r1
 8027624:	b921      	cbnz	r1, 8027630 <_realloc_r+0x16>
 8027626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802762a:	4611      	mov	r1, r2
 802762c:	f7fc b95a 	b.w	80238e4 <_malloc_r>
 8027630:	b92a      	cbnz	r2, 802763e <_realloc_r+0x24>
 8027632:	f7fc f8eb 	bl	802380c <_free_r>
 8027636:	4625      	mov	r5, r4
 8027638:	4628      	mov	r0, r5
 802763a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802763e:	f000 fa1d 	bl	8027a7c <_malloc_usable_size_r>
 8027642:	4284      	cmp	r4, r0
 8027644:	4607      	mov	r7, r0
 8027646:	d802      	bhi.n	802764e <_realloc_r+0x34>
 8027648:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802764c:	d812      	bhi.n	8027674 <_realloc_r+0x5a>
 802764e:	4621      	mov	r1, r4
 8027650:	4640      	mov	r0, r8
 8027652:	f7fc f947 	bl	80238e4 <_malloc_r>
 8027656:	4605      	mov	r5, r0
 8027658:	2800      	cmp	r0, #0
 802765a:	d0ed      	beq.n	8027638 <_realloc_r+0x1e>
 802765c:	42bc      	cmp	r4, r7
 802765e:	4622      	mov	r2, r4
 8027660:	4631      	mov	r1, r6
 8027662:	bf28      	it	cs
 8027664:	463a      	movcs	r2, r7
 8027666:	f7fc f88b 	bl	8023780 <memcpy>
 802766a:	4631      	mov	r1, r6
 802766c:	4640      	mov	r0, r8
 802766e:	f7fc f8cd 	bl	802380c <_free_r>
 8027672:	e7e1      	b.n	8027638 <_realloc_r+0x1e>
 8027674:	4635      	mov	r5, r6
 8027676:	e7df      	b.n	8027638 <_realloc_r+0x1e>

08027678 <__ssputs_r>:
 8027678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802767c:	688e      	ldr	r6, [r1, #8]
 802767e:	429e      	cmp	r6, r3
 8027680:	4682      	mov	sl, r0
 8027682:	460c      	mov	r4, r1
 8027684:	4690      	mov	r8, r2
 8027686:	461f      	mov	r7, r3
 8027688:	d838      	bhi.n	80276fc <__ssputs_r+0x84>
 802768a:	898a      	ldrh	r2, [r1, #12]
 802768c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8027690:	d032      	beq.n	80276f8 <__ssputs_r+0x80>
 8027692:	6825      	ldr	r5, [r4, #0]
 8027694:	6909      	ldr	r1, [r1, #16]
 8027696:	eba5 0901 	sub.w	r9, r5, r1
 802769a:	6965      	ldr	r5, [r4, #20]
 802769c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80276a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80276a4:	3301      	adds	r3, #1
 80276a6:	444b      	add	r3, r9
 80276a8:	106d      	asrs	r5, r5, #1
 80276aa:	429d      	cmp	r5, r3
 80276ac:	bf38      	it	cc
 80276ae:	461d      	movcc	r5, r3
 80276b0:	0553      	lsls	r3, r2, #21
 80276b2:	d531      	bpl.n	8027718 <__ssputs_r+0xa0>
 80276b4:	4629      	mov	r1, r5
 80276b6:	f7fc f915 	bl	80238e4 <_malloc_r>
 80276ba:	4606      	mov	r6, r0
 80276bc:	b950      	cbnz	r0, 80276d4 <__ssputs_r+0x5c>
 80276be:	230c      	movs	r3, #12
 80276c0:	f8ca 3000 	str.w	r3, [sl]
 80276c4:	89a3      	ldrh	r3, [r4, #12]
 80276c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80276ca:	81a3      	strh	r3, [r4, #12]
 80276cc:	f04f 30ff 	mov.w	r0, #4294967295
 80276d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80276d4:	6921      	ldr	r1, [r4, #16]
 80276d6:	464a      	mov	r2, r9
 80276d8:	f7fc f852 	bl	8023780 <memcpy>
 80276dc:	89a3      	ldrh	r3, [r4, #12]
 80276de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80276e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80276e6:	81a3      	strh	r3, [r4, #12]
 80276e8:	6126      	str	r6, [r4, #16]
 80276ea:	6165      	str	r5, [r4, #20]
 80276ec:	444e      	add	r6, r9
 80276ee:	eba5 0509 	sub.w	r5, r5, r9
 80276f2:	6026      	str	r6, [r4, #0]
 80276f4:	60a5      	str	r5, [r4, #8]
 80276f6:	463e      	mov	r6, r7
 80276f8:	42be      	cmp	r6, r7
 80276fa:	d900      	bls.n	80276fe <__ssputs_r+0x86>
 80276fc:	463e      	mov	r6, r7
 80276fe:	6820      	ldr	r0, [r4, #0]
 8027700:	4632      	mov	r2, r6
 8027702:	4641      	mov	r1, r8
 8027704:	f7fc f84a 	bl	802379c <memmove>
 8027708:	68a3      	ldr	r3, [r4, #8]
 802770a:	1b9b      	subs	r3, r3, r6
 802770c:	60a3      	str	r3, [r4, #8]
 802770e:	6823      	ldr	r3, [r4, #0]
 8027710:	4433      	add	r3, r6
 8027712:	6023      	str	r3, [r4, #0]
 8027714:	2000      	movs	r0, #0
 8027716:	e7db      	b.n	80276d0 <__ssputs_r+0x58>
 8027718:	462a      	mov	r2, r5
 802771a:	f7ff ff7e 	bl	802761a <_realloc_r>
 802771e:	4606      	mov	r6, r0
 8027720:	2800      	cmp	r0, #0
 8027722:	d1e1      	bne.n	80276e8 <__ssputs_r+0x70>
 8027724:	6921      	ldr	r1, [r4, #16]
 8027726:	4650      	mov	r0, sl
 8027728:	f7fc f870 	bl	802380c <_free_r>
 802772c:	e7c7      	b.n	80276be <__ssputs_r+0x46>
	...

08027730 <_svfiprintf_r>:
 8027730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027734:	4698      	mov	r8, r3
 8027736:	898b      	ldrh	r3, [r1, #12]
 8027738:	061b      	lsls	r3, r3, #24
 802773a:	b09d      	sub	sp, #116	; 0x74
 802773c:	4607      	mov	r7, r0
 802773e:	460d      	mov	r5, r1
 8027740:	4614      	mov	r4, r2
 8027742:	d50e      	bpl.n	8027762 <_svfiprintf_r+0x32>
 8027744:	690b      	ldr	r3, [r1, #16]
 8027746:	b963      	cbnz	r3, 8027762 <_svfiprintf_r+0x32>
 8027748:	2140      	movs	r1, #64	; 0x40
 802774a:	f7fc f8cb 	bl	80238e4 <_malloc_r>
 802774e:	6028      	str	r0, [r5, #0]
 8027750:	6128      	str	r0, [r5, #16]
 8027752:	b920      	cbnz	r0, 802775e <_svfiprintf_r+0x2e>
 8027754:	230c      	movs	r3, #12
 8027756:	603b      	str	r3, [r7, #0]
 8027758:	f04f 30ff 	mov.w	r0, #4294967295
 802775c:	e0d1      	b.n	8027902 <_svfiprintf_r+0x1d2>
 802775e:	2340      	movs	r3, #64	; 0x40
 8027760:	616b      	str	r3, [r5, #20]
 8027762:	2300      	movs	r3, #0
 8027764:	9309      	str	r3, [sp, #36]	; 0x24
 8027766:	2320      	movs	r3, #32
 8027768:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802776c:	f8cd 800c 	str.w	r8, [sp, #12]
 8027770:	2330      	movs	r3, #48	; 0x30
 8027772:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802791c <_svfiprintf_r+0x1ec>
 8027776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802777a:	f04f 0901 	mov.w	r9, #1
 802777e:	4623      	mov	r3, r4
 8027780:	469a      	mov	sl, r3
 8027782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027786:	b10a      	cbz	r2, 802778c <_svfiprintf_r+0x5c>
 8027788:	2a25      	cmp	r2, #37	; 0x25
 802778a:	d1f9      	bne.n	8027780 <_svfiprintf_r+0x50>
 802778c:	ebba 0b04 	subs.w	fp, sl, r4
 8027790:	d00b      	beq.n	80277aa <_svfiprintf_r+0x7a>
 8027792:	465b      	mov	r3, fp
 8027794:	4622      	mov	r2, r4
 8027796:	4629      	mov	r1, r5
 8027798:	4638      	mov	r0, r7
 802779a:	f7ff ff6d 	bl	8027678 <__ssputs_r>
 802779e:	3001      	adds	r0, #1
 80277a0:	f000 80aa 	beq.w	80278f8 <_svfiprintf_r+0x1c8>
 80277a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80277a6:	445a      	add	r2, fp
 80277a8:	9209      	str	r2, [sp, #36]	; 0x24
 80277aa:	f89a 3000 	ldrb.w	r3, [sl]
 80277ae:	2b00      	cmp	r3, #0
 80277b0:	f000 80a2 	beq.w	80278f8 <_svfiprintf_r+0x1c8>
 80277b4:	2300      	movs	r3, #0
 80277b6:	f04f 32ff 	mov.w	r2, #4294967295
 80277ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80277be:	f10a 0a01 	add.w	sl, sl, #1
 80277c2:	9304      	str	r3, [sp, #16]
 80277c4:	9307      	str	r3, [sp, #28]
 80277c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80277ca:	931a      	str	r3, [sp, #104]	; 0x68
 80277cc:	4654      	mov	r4, sl
 80277ce:	2205      	movs	r2, #5
 80277d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80277d4:	4851      	ldr	r0, [pc, #324]	; (802791c <_svfiprintf_r+0x1ec>)
 80277d6:	f7d8 fcfb 	bl	80001d0 <memchr>
 80277da:	9a04      	ldr	r2, [sp, #16]
 80277dc:	b9d8      	cbnz	r0, 8027816 <_svfiprintf_r+0xe6>
 80277de:	06d0      	lsls	r0, r2, #27
 80277e0:	bf44      	itt	mi
 80277e2:	2320      	movmi	r3, #32
 80277e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80277e8:	0711      	lsls	r1, r2, #28
 80277ea:	bf44      	itt	mi
 80277ec:	232b      	movmi	r3, #43	; 0x2b
 80277ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80277f2:	f89a 3000 	ldrb.w	r3, [sl]
 80277f6:	2b2a      	cmp	r3, #42	; 0x2a
 80277f8:	d015      	beq.n	8027826 <_svfiprintf_r+0xf6>
 80277fa:	9a07      	ldr	r2, [sp, #28]
 80277fc:	4654      	mov	r4, sl
 80277fe:	2000      	movs	r0, #0
 8027800:	f04f 0c0a 	mov.w	ip, #10
 8027804:	4621      	mov	r1, r4
 8027806:	f811 3b01 	ldrb.w	r3, [r1], #1
 802780a:	3b30      	subs	r3, #48	; 0x30
 802780c:	2b09      	cmp	r3, #9
 802780e:	d94e      	bls.n	80278ae <_svfiprintf_r+0x17e>
 8027810:	b1b0      	cbz	r0, 8027840 <_svfiprintf_r+0x110>
 8027812:	9207      	str	r2, [sp, #28]
 8027814:	e014      	b.n	8027840 <_svfiprintf_r+0x110>
 8027816:	eba0 0308 	sub.w	r3, r0, r8
 802781a:	fa09 f303 	lsl.w	r3, r9, r3
 802781e:	4313      	orrs	r3, r2
 8027820:	9304      	str	r3, [sp, #16]
 8027822:	46a2      	mov	sl, r4
 8027824:	e7d2      	b.n	80277cc <_svfiprintf_r+0x9c>
 8027826:	9b03      	ldr	r3, [sp, #12]
 8027828:	1d19      	adds	r1, r3, #4
 802782a:	681b      	ldr	r3, [r3, #0]
 802782c:	9103      	str	r1, [sp, #12]
 802782e:	2b00      	cmp	r3, #0
 8027830:	bfbb      	ittet	lt
 8027832:	425b      	neglt	r3, r3
 8027834:	f042 0202 	orrlt.w	r2, r2, #2
 8027838:	9307      	strge	r3, [sp, #28]
 802783a:	9307      	strlt	r3, [sp, #28]
 802783c:	bfb8      	it	lt
 802783e:	9204      	strlt	r2, [sp, #16]
 8027840:	7823      	ldrb	r3, [r4, #0]
 8027842:	2b2e      	cmp	r3, #46	; 0x2e
 8027844:	d10c      	bne.n	8027860 <_svfiprintf_r+0x130>
 8027846:	7863      	ldrb	r3, [r4, #1]
 8027848:	2b2a      	cmp	r3, #42	; 0x2a
 802784a:	d135      	bne.n	80278b8 <_svfiprintf_r+0x188>
 802784c:	9b03      	ldr	r3, [sp, #12]
 802784e:	1d1a      	adds	r2, r3, #4
 8027850:	681b      	ldr	r3, [r3, #0]
 8027852:	9203      	str	r2, [sp, #12]
 8027854:	2b00      	cmp	r3, #0
 8027856:	bfb8      	it	lt
 8027858:	f04f 33ff 	movlt.w	r3, #4294967295
 802785c:	3402      	adds	r4, #2
 802785e:	9305      	str	r3, [sp, #20]
 8027860:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802792c <_svfiprintf_r+0x1fc>
 8027864:	7821      	ldrb	r1, [r4, #0]
 8027866:	2203      	movs	r2, #3
 8027868:	4650      	mov	r0, sl
 802786a:	f7d8 fcb1 	bl	80001d0 <memchr>
 802786e:	b140      	cbz	r0, 8027882 <_svfiprintf_r+0x152>
 8027870:	2340      	movs	r3, #64	; 0x40
 8027872:	eba0 000a 	sub.w	r0, r0, sl
 8027876:	fa03 f000 	lsl.w	r0, r3, r0
 802787a:	9b04      	ldr	r3, [sp, #16]
 802787c:	4303      	orrs	r3, r0
 802787e:	3401      	adds	r4, #1
 8027880:	9304      	str	r3, [sp, #16]
 8027882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027886:	4826      	ldr	r0, [pc, #152]	; (8027920 <_svfiprintf_r+0x1f0>)
 8027888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802788c:	2206      	movs	r2, #6
 802788e:	f7d8 fc9f 	bl	80001d0 <memchr>
 8027892:	2800      	cmp	r0, #0
 8027894:	d038      	beq.n	8027908 <_svfiprintf_r+0x1d8>
 8027896:	4b23      	ldr	r3, [pc, #140]	; (8027924 <_svfiprintf_r+0x1f4>)
 8027898:	bb1b      	cbnz	r3, 80278e2 <_svfiprintf_r+0x1b2>
 802789a:	9b03      	ldr	r3, [sp, #12]
 802789c:	3307      	adds	r3, #7
 802789e:	f023 0307 	bic.w	r3, r3, #7
 80278a2:	3308      	adds	r3, #8
 80278a4:	9303      	str	r3, [sp, #12]
 80278a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80278a8:	4433      	add	r3, r6
 80278aa:	9309      	str	r3, [sp, #36]	; 0x24
 80278ac:	e767      	b.n	802777e <_svfiprintf_r+0x4e>
 80278ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80278b2:	460c      	mov	r4, r1
 80278b4:	2001      	movs	r0, #1
 80278b6:	e7a5      	b.n	8027804 <_svfiprintf_r+0xd4>
 80278b8:	2300      	movs	r3, #0
 80278ba:	3401      	adds	r4, #1
 80278bc:	9305      	str	r3, [sp, #20]
 80278be:	4619      	mov	r1, r3
 80278c0:	f04f 0c0a 	mov.w	ip, #10
 80278c4:	4620      	mov	r0, r4
 80278c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80278ca:	3a30      	subs	r2, #48	; 0x30
 80278cc:	2a09      	cmp	r2, #9
 80278ce:	d903      	bls.n	80278d8 <_svfiprintf_r+0x1a8>
 80278d0:	2b00      	cmp	r3, #0
 80278d2:	d0c5      	beq.n	8027860 <_svfiprintf_r+0x130>
 80278d4:	9105      	str	r1, [sp, #20]
 80278d6:	e7c3      	b.n	8027860 <_svfiprintf_r+0x130>
 80278d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80278dc:	4604      	mov	r4, r0
 80278de:	2301      	movs	r3, #1
 80278e0:	e7f0      	b.n	80278c4 <_svfiprintf_r+0x194>
 80278e2:	ab03      	add	r3, sp, #12
 80278e4:	9300      	str	r3, [sp, #0]
 80278e6:	462a      	mov	r2, r5
 80278e8:	4b0f      	ldr	r3, [pc, #60]	; (8027928 <_svfiprintf_r+0x1f8>)
 80278ea:	a904      	add	r1, sp, #16
 80278ec:	4638      	mov	r0, r7
 80278ee:	f7fc fa67 	bl	8023dc0 <_printf_float>
 80278f2:	1c42      	adds	r2, r0, #1
 80278f4:	4606      	mov	r6, r0
 80278f6:	d1d6      	bne.n	80278a6 <_svfiprintf_r+0x176>
 80278f8:	89ab      	ldrh	r3, [r5, #12]
 80278fa:	065b      	lsls	r3, r3, #25
 80278fc:	f53f af2c 	bmi.w	8027758 <_svfiprintf_r+0x28>
 8027900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027902:	b01d      	add	sp, #116	; 0x74
 8027904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027908:	ab03      	add	r3, sp, #12
 802790a:	9300      	str	r3, [sp, #0]
 802790c:	462a      	mov	r2, r5
 802790e:	4b06      	ldr	r3, [pc, #24]	; (8027928 <_svfiprintf_r+0x1f8>)
 8027910:	a904      	add	r1, sp, #16
 8027912:	4638      	mov	r0, r7
 8027914:	f7fc fcf8 	bl	8024308 <_printf_i>
 8027918:	e7eb      	b.n	80278f2 <_svfiprintf_r+0x1c2>
 802791a:	bf00      	nop
 802791c:	08029fa0 	.word	0x08029fa0
 8027920:	08029faa 	.word	0x08029faa
 8027924:	08023dc1 	.word	0x08023dc1
 8027928:	08027679 	.word	0x08027679
 802792c:	08029fa6 	.word	0x08029fa6

08027930 <__sread>:
 8027930:	b510      	push	{r4, lr}
 8027932:	460c      	mov	r4, r1
 8027934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027938:	f000 f8a8 	bl	8027a8c <_read_r>
 802793c:	2800      	cmp	r0, #0
 802793e:	bfab      	itete	ge
 8027940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8027942:	89a3      	ldrhlt	r3, [r4, #12]
 8027944:	181b      	addge	r3, r3, r0
 8027946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802794a:	bfac      	ite	ge
 802794c:	6563      	strge	r3, [r4, #84]	; 0x54
 802794e:	81a3      	strhlt	r3, [r4, #12]
 8027950:	bd10      	pop	{r4, pc}

08027952 <__swrite>:
 8027952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027956:	461f      	mov	r7, r3
 8027958:	898b      	ldrh	r3, [r1, #12]
 802795a:	05db      	lsls	r3, r3, #23
 802795c:	4605      	mov	r5, r0
 802795e:	460c      	mov	r4, r1
 8027960:	4616      	mov	r6, r2
 8027962:	d505      	bpl.n	8027970 <__swrite+0x1e>
 8027964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027968:	2302      	movs	r3, #2
 802796a:	2200      	movs	r2, #0
 802796c:	f000 f874 	bl	8027a58 <_lseek_r>
 8027970:	89a3      	ldrh	r3, [r4, #12]
 8027972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802797a:	81a3      	strh	r3, [r4, #12]
 802797c:	4632      	mov	r2, r6
 802797e:	463b      	mov	r3, r7
 8027980:	4628      	mov	r0, r5
 8027982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027986:	f000 b823 	b.w	80279d0 <_write_r>

0802798a <__sseek>:
 802798a:	b510      	push	{r4, lr}
 802798c:	460c      	mov	r4, r1
 802798e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027992:	f000 f861 	bl	8027a58 <_lseek_r>
 8027996:	1c43      	adds	r3, r0, #1
 8027998:	89a3      	ldrh	r3, [r4, #12]
 802799a:	bf15      	itete	ne
 802799c:	6560      	strne	r0, [r4, #84]	; 0x54
 802799e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80279a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80279a6:	81a3      	strheq	r3, [r4, #12]
 80279a8:	bf18      	it	ne
 80279aa:	81a3      	strhne	r3, [r4, #12]
 80279ac:	bd10      	pop	{r4, pc}

080279ae <__sclose>:
 80279ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80279b2:	f000 b81f 	b.w	80279f4 <_close_r>

080279b6 <__ascii_wctomb>:
 80279b6:	b149      	cbz	r1, 80279cc <__ascii_wctomb+0x16>
 80279b8:	2aff      	cmp	r2, #255	; 0xff
 80279ba:	bf85      	ittet	hi
 80279bc:	238a      	movhi	r3, #138	; 0x8a
 80279be:	6003      	strhi	r3, [r0, #0]
 80279c0:	700a      	strbls	r2, [r1, #0]
 80279c2:	f04f 30ff 	movhi.w	r0, #4294967295
 80279c6:	bf98      	it	ls
 80279c8:	2001      	movls	r0, #1
 80279ca:	4770      	bx	lr
 80279cc:	4608      	mov	r0, r1
 80279ce:	4770      	bx	lr

080279d0 <_write_r>:
 80279d0:	b538      	push	{r3, r4, r5, lr}
 80279d2:	4d07      	ldr	r5, [pc, #28]	; (80279f0 <_write_r+0x20>)
 80279d4:	4604      	mov	r4, r0
 80279d6:	4608      	mov	r0, r1
 80279d8:	4611      	mov	r1, r2
 80279da:	2200      	movs	r2, #0
 80279dc:	602a      	str	r2, [r5, #0]
 80279de:	461a      	mov	r2, r3
 80279e0:	f7e1 fb89 	bl	80090f6 <_write>
 80279e4:	1c43      	adds	r3, r0, #1
 80279e6:	d102      	bne.n	80279ee <_write_r+0x1e>
 80279e8:	682b      	ldr	r3, [r5, #0]
 80279ea:	b103      	cbz	r3, 80279ee <_write_r+0x1e>
 80279ec:	6023      	str	r3, [r4, #0]
 80279ee:	bd38      	pop	{r3, r4, r5, pc}
 80279f0:	20004cf4 	.word	0x20004cf4

080279f4 <_close_r>:
 80279f4:	b538      	push	{r3, r4, r5, lr}
 80279f6:	4d06      	ldr	r5, [pc, #24]	; (8027a10 <_close_r+0x1c>)
 80279f8:	2300      	movs	r3, #0
 80279fa:	4604      	mov	r4, r0
 80279fc:	4608      	mov	r0, r1
 80279fe:	602b      	str	r3, [r5, #0]
 8027a00:	f7e1 fb95 	bl	800912e <_close>
 8027a04:	1c43      	adds	r3, r0, #1
 8027a06:	d102      	bne.n	8027a0e <_close_r+0x1a>
 8027a08:	682b      	ldr	r3, [r5, #0]
 8027a0a:	b103      	cbz	r3, 8027a0e <_close_r+0x1a>
 8027a0c:	6023      	str	r3, [r4, #0]
 8027a0e:	bd38      	pop	{r3, r4, r5, pc}
 8027a10:	20004cf4 	.word	0x20004cf4

08027a14 <_fstat_r>:
 8027a14:	b538      	push	{r3, r4, r5, lr}
 8027a16:	4d07      	ldr	r5, [pc, #28]	; (8027a34 <_fstat_r+0x20>)
 8027a18:	2300      	movs	r3, #0
 8027a1a:	4604      	mov	r4, r0
 8027a1c:	4608      	mov	r0, r1
 8027a1e:	4611      	mov	r1, r2
 8027a20:	602b      	str	r3, [r5, #0]
 8027a22:	f7e1 fb90 	bl	8009146 <_fstat>
 8027a26:	1c43      	adds	r3, r0, #1
 8027a28:	d102      	bne.n	8027a30 <_fstat_r+0x1c>
 8027a2a:	682b      	ldr	r3, [r5, #0]
 8027a2c:	b103      	cbz	r3, 8027a30 <_fstat_r+0x1c>
 8027a2e:	6023      	str	r3, [r4, #0]
 8027a30:	bd38      	pop	{r3, r4, r5, pc}
 8027a32:	bf00      	nop
 8027a34:	20004cf4 	.word	0x20004cf4

08027a38 <_isatty_r>:
 8027a38:	b538      	push	{r3, r4, r5, lr}
 8027a3a:	4d06      	ldr	r5, [pc, #24]	; (8027a54 <_isatty_r+0x1c>)
 8027a3c:	2300      	movs	r3, #0
 8027a3e:	4604      	mov	r4, r0
 8027a40:	4608      	mov	r0, r1
 8027a42:	602b      	str	r3, [r5, #0]
 8027a44:	f7e1 fb8f 	bl	8009166 <_isatty>
 8027a48:	1c43      	adds	r3, r0, #1
 8027a4a:	d102      	bne.n	8027a52 <_isatty_r+0x1a>
 8027a4c:	682b      	ldr	r3, [r5, #0]
 8027a4e:	b103      	cbz	r3, 8027a52 <_isatty_r+0x1a>
 8027a50:	6023      	str	r3, [r4, #0]
 8027a52:	bd38      	pop	{r3, r4, r5, pc}
 8027a54:	20004cf4 	.word	0x20004cf4

08027a58 <_lseek_r>:
 8027a58:	b538      	push	{r3, r4, r5, lr}
 8027a5a:	4d07      	ldr	r5, [pc, #28]	; (8027a78 <_lseek_r+0x20>)
 8027a5c:	4604      	mov	r4, r0
 8027a5e:	4608      	mov	r0, r1
 8027a60:	4611      	mov	r1, r2
 8027a62:	2200      	movs	r2, #0
 8027a64:	602a      	str	r2, [r5, #0]
 8027a66:	461a      	mov	r2, r3
 8027a68:	f7e1 fb88 	bl	800917c <_lseek>
 8027a6c:	1c43      	adds	r3, r0, #1
 8027a6e:	d102      	bne.n	8027a76 <_lseek_r+0x1e>
 8027a70:	682b      	ldr	r3, [r5, #0]
 8027a72:	b103      	cbz	r3, 8027a76 <_lseek_r+0x1e>
 8027a74:	6023      	str	r3, [r4, #0]
 8027a76:	bd38      	pop	{r3, r4, r5, pc}
 8027a78:	20004cf4 	.word	0x20004cf4

08027a7c <_malloc_usable_size_r>:
 8027a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027a80:	1f18      	subs	r0, r3, #4
 8027a82:	2b00      	cmp	r3, #0
 8027a84:	bfbc      	itt	lt
 8027a86:	580b      	ldrlt	r3, [r1, r0]
 8027a88:	18c0      	addlt	r0, r0, r3
 8027a8a:	4770      	bx	lr

08027a8c <_read_r>:
 8027a8c:	b538      	push	{r3, r4, r5, lr}
 8027a8e:	4d07      	ldr	r5, [pc, #28]	; (8027aac <_read_r+0x20>)
 8027a90:	4604      	mov	r4, r0
 8027a92:	4608      	mov	r0, r1
 8027a94:	4611      	mov	r1, r2
 8027a96:	2200      	movs	r2, #0
 8027a98:	602a      	str	r2, [r5, #0]
 8027a9a:	461a      	mov	r2, r3
 8027a9c:	f7e1 fb0e 	bl	80090bc <_read>
 8027aa0:	1c43      	adds	r3, r0, #1
 8027aa2:	d102      	bne.n	8027aaa <_read_r+0x1e>
 8027aa4:	682b      	ldr	r3, [r5, #0]
 8027aa6:	b103      	cbz	r3, 8027aaa <_read_r+0x1e>
 8027aa8:	6023      	str	r3, [r4, #0]
 8027aaa:	bd38      	pop	{r3, r4, r5, pc}
 8027aac:	20004cf4 	.word	0x20004cf4

08027ab0 <_init>:
 8027ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027ab2:	bf00      	nop
 8027ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027ab6:	bc08      	pop	{r3}
 8027ab8:	469e      	mov	lr, r3
 8027aba:	4770      	bx	lr

08027abc <_fini>:
 8027abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027abe:	bf00      	nop
 8027ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027ac2:	bc08      	pop	{r3}
 8027ac4:	469e      	mov	lr, r3
 8027ac6:	4770      	bx	lr
